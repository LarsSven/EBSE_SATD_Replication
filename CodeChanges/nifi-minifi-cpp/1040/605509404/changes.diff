diff --git a/controller/MiNiFiController.cpp b/controller/MiNiFiController.cpp
index b6dc598d7b..6b46d855ec 100644
--- a/controller/MiNiFiController.cpp
+++ b/controller/MiNiFiController.cpp
@@ -128,11 +128,10 @@ int main(int argc, char **argv) {
     if ((IsNullOrEmpty(host) && port == -1)) {
       std::cout << "MiNiFi Controller is disabled" << std::endl;
       exit(0);
-    } else {
+    }
     if (result.count("noheaders")) {
       show_headers = false;
     }
-    }
 
     if (result.count("stop") > 0) {
       auto& components = result["stop"].as<std::vector<std::string>>();
@@ -159,16 +158,18 @@ int main(int argc, char **argv) {
     if (result.count("c") > 0) {
       auto& components = result["c"].as<std::vector<std::string>>();
       for (const auto& connection : components) {
-        auto socket = secure_context != nullptr ? stream_factory_->createSecureSocket(host, port, secure_context) : stream_factory_->createSocket(host, port);
+        auto socket = secure_context != nullptr ? stream_factory_->createSecureSocket(host, port, secure_context)
+                                                : stream_factory_->createSocket(host, port);
         if (clearConnection(std::move(socket), connection)) {
           std::cout << "Sent clear command to " << connection << ". Size before clear operation sent: " << std::endl;
-          socket = secure_context != nullptr ? stream_factory_->createSecureSocket(host, port, secure_context) : stream_factory_->createSocket(host, port);
+          socket = secure_context != nullptr ? stream_factory_->createSecureSocket(host, port, secure_context)
+                                             : stream_factory_->createSocket(host, port);
           if (getConnectionSize(std::move(socket), std::cout, connection) < 0)
             std::cout << "Could not connect to remote host " << host << ":" << port << std::endl;
         } else {
           std::cout << "Could not connect to remote host " << host << ":" << port << std::endl;
-      }
-      }
+        }
+        }
     }
 
     if (result.count("getsize") > 0) {
diff --git a/extensions/http-curl/processors/InvokeHTTP.cpp b/extensions/http-curl/processors/InvokeHTTP.cpp
index 289cac4578..b83e15d260 100644
--- a/extensions/http-curl/processors/InvokeHTTP.cpp
+++ b/extensions/http-curl/processors/InvokeHTTP.cpp
@@ -220,7 +220,7 @@ void InvokeHTTP::onSchedule(const std::shared_ptr<core::ProcessContext> &context
     logger_->log_debug("%s attribute is missing, so default value of %s will be used", DateHeader.getName(), DateHeader.getValue());
   }
 
-    date_header_include_ = utils::StringUtils::toBool(dateHeaderStr).value_or(DateHeader.getValue());
+  date_header_include_ = utils::StringUtils::toBool(dateHeaderStr).value_or(DateHeader.getValue());
 
   if (!context->getProperty(PropPutOutputAttributes.getName(), put_attribute_name_)) {
     logger_->log_debug("%s attribute is missing, so default value of %s will be used", PropPutOutputAttributes.getName(), PropPutOutputAttributes.getValue());
diff --git a/extensions/mqtt/processors/AbstractMQTTProcessor.cpp b/extensions/mqtt/processors/AbstractMQTTProcessor.cpp
index 377117dede..bcb8bc522f 100644
--- a/extensions/mqtt/processors/AbstractMQTTProcessor.cpp
+++ b/extensions/mqtt/processors/AbstractMQTTProcessor.cpp
@@ -86,11 +86,17 @@ void AbstractMQTTProcessor::onSchedule(const std::shared_ptr<core::ProcessContex
     logger_->log_debug("AbstractMQTTProcessor: PassWord [%s]", passWord_);
   }
   value = "";
-  utils::optional<bool> cleanSession_parsed;
-  if (context->getProperty(CleanSession.getName(), value) && (cleanSession_parsed = org::apache::nifi::minifi::utils::StringUtils::toBool(value))) {
-    cleanSession_ = cleanSession_parsed.value();
+
+  const auto cleanSession_parsed = [&] () -> utils::optional<bool> {
+    std::string property_value;
+    if (!context->getProperty(CleanSession.getName(), value)) return utils::nullopt;
+    return utils::StringUtils::toBool(property_value);
+  }();
+  if ( cleanSession_parsed ) {
+    cleanSession_ = *cleanSession_parsed;
     logger_->log_debug("AbstractMQTTProcessor: CleanSession [%d]", cleanSession_);
   }
+
   value = "";
   if (context->getProperty(KeepLiveInterval.getName(), value) && !value.empty()) {
     core::TimeUnit unit;
@@ -148,7 +154,7 @@ void AbstractMQTTProcessor::onSchedule(const std::shared_ptr<core::ProcessContex
     MQTTClient_create(&client_, uri_.c_str(), clientID_.c_str(), MQTTCLIENT_PERSISTENCE_NONE, NULL);
   }
   if (client_) {
-    MQTTClient_setCallbacks(client_, reinterpret_cast<void *> (this), connectionLost, msgReceived, msgDelivered);
+    MQTTClient_setCallbacks(client_, this, connectionLost, msgReceived, msgDelivered);
     // call reconnect to bootstrap
     this->reconnect();
   }
diff --git a/extensions/mqtt/processors/PublishMQTT.cpp b/extensions/mqtt/processors/PublishMQTT.cpp
index 4bf7a7cc23..6d1dd0402f 100644
--- a/extensions/mqtt/processors/PublishMQTT.cpp
+++ b/extensions/mqtt/processors/PublishMQTT.cpp
@@ -64,9 +64,14 @@ void PublishMQTT::onSchedule(const std::shared_ptr<core::ProcessContext> &contex
     logger_->log_debug("PublishMQTT: max flow segment size [%" PRIu64 "]", max_seg_size_);
   }
   value = "";
-  utils::optional<bool> retain_parsed;
-  if (context->getProperty(Retain.getName(), value) && (retain_parsed = org::apache::nifi::minifi::utils::StringUtils::toBool(value))) {
-    retain_ = retain_parsed.value();
+
+  const auto retain_parsed = [&] () -> utils::optional<bool> {
+    std::string property_value;
+    if (!context->getProperty(CleanSession.getName(), value)) return utils::nullopt;
+    return utils::StringUtils::toBool(property_value);
+  }();
+  if ( retain_parsed ) {
+    retain_ = *retain_parsed;
     logger_->log_debug("PublishMQTT: Retain [%d]", retain_);
   }
 }
diff --git a/extensions/opc/src/putopc.cpp b/extensions/opc/src/putopc.cpp
index 808c29241c..ef1be63508 100644
--- a/extensions/opc/src/putopc.cpp
+++ b/extensions/opc/src/putopc.cpp
@@ -302,8 +302,7 @@ namespace processors {
           case opc::OPCNodeDataType::Boolean: {
             utils::optional<bool> contentstr_parsed = utils::StringUtils::toBool(contentstr);
             if (contentstr_parsed) {
-              bool value = contentstr_parsed.value();
-              sc = connection_->update_node(targetnode, value);
+              sc = connection_->update_node(targetnode, contentstr_parsed.value());
             } else {
               throw opc::OPCException(GENERAL_EXCEPTION, "Content cannot be converted to bool");
             }
@@ -380,8 +379,7 @@ namespace processors {
           case opc::OPCNodeDataType::Boolean: {
             utils::optional<bool> contentstr_parsed = utils::StringUtils::toBool(contentstr);
             if (contentstr_parsed) {
-              bool value = contentstr_parsed.value();
-              sc = connection_->add_node(parentNodeID_, targetnode, browsename, value, nodeDataType_, &resultnode);
+              sc = connection_->add_node(parentNodeID_, targetnode, browsename, contentstr_parsed.value(), nodeDataType_, &resultnode);
             } else {
               throw opc::OPCException(GENERAL_EXCEPTION, "Content cannot be converted to bool");
             }
diff --git a/extensions/pcap/CapturePacket.cpp b/extensions/pcap/CapturePacket.cpp
index e10a669bd8..8ab435bf79 100644
--- a/extensions/pcap/CapturePacket.cpp
+++ b/extensions/pcap/CapturePacket.cpp
@@ -70,7 +70,7 @@ std::string CapturePacket::generate_new_pcap(const std::string &base_path) {
 
 void CapturePacket::packet_callback(pcpp::RawPacket* packet, pcpp::PcapLiveDevice* /*dev*/, void* data) {
   // parse the packet
-  PacketMovers* capture_mechanism = reinterpret_cast <PacketMovers*> (data);
+  PacketMovers* capture_mechanism = reinterpret_cast<PacketMovers*>(data);
 
   CapturePacketMechanism *capture;
 
diff --git a/extensions/standard-processors/processors/GetTCP.cpp b/extensions/standard-processors/processors/GetTCP.cpp
index f7d4f07e7f..749d515bab 100644
--- a/extensions/standard-processors/processors/GetTCP.cpp
+++ b/extensions/standard-processors/processors/GetTCP.cpp
@@ -119,7 +119,6 @@ void GetTCP::initialize() {
 
 void GetTCP::onSchedule(const std::shared_ptr<core::ProcessContext> &context, const std::shared_ptr<core::ProcessSessionFactory> &sessionFactory) {
   std::string value;
-  stay_connected_ = true;
   if (context->getProperty(EndpointList.getName(), value)) {
     endpoints = utils::StringUtils::split(value, ",");
   }
@@ -129,11 +128,11 @@ void GetTCP::onSchedule(const std::shared_ptr<core::ProcessContext> &context, co
     concurrent_handlers_ = handlers;
   }
 
+  stay_connected_ = true;
   if (context->getProperty(StayConnected.getName(), value)) {
-    stay_connected_ = utils::StringUtils::toBool(value).value_or(false);
-  } else {
-    stay_connected_ = true;
+    stay_connected_ = utils::StringUtils::toBool(value).value_or(true);
   }
+
   int connects = 0;
   if (context->getProperty(ConnectionAttemptLimit.getName(), connects)) {
     connection_attempt_limit_ = connects;
diff --git a/extensions/standard-processors/processors/HashContent.cpp b/extensions/standard-processors/processors/HashContent.cpp
index f4a4e4a59f..d74f888cb6 100644
--- a/extensions/standard-processors/processors/HashContent.cpp
+++ b/extensions/standard-processors/processors/HashContent.cpp
@@ -65,6 +65,8 @@ void HashContent::onSchedule(core::ProcessContext *context, core::ProcessSession
 
   if (context->getProperty(FailOnEmpty.getName(), value)) {
     failOnEmpty_ = utils::StringUtils::toBool(value).value_or(false);
+  } else {
+    failOnEmpty_ = false;
   }
 
   std::transform(algoName_.begin(), algoName_.end(), algoName_.begin(), ::toupper);
@@ -82,7 +84,7 @@ void HashContent::onTrigger(core::ProcessContext *, core::ProcessSession *sessio
   }
 
   if (failOnEmpty_ && flowFile->getSize() == 0) {
-    logger_->log_trace("Failure as flow file is empty");
+    logger_->log_debug("Failure as flow file is empty");
     session->transfer(flowFile, Failure);
   }
 
diff --git a/extensions/standard-processors/processors/PutFile.h b/extensions/standard-processors/processors/PutFile.h
index 770eb5fe3d..c09bffb524 100644
--- a/extensions/standard-processors/processors/PutFile.h
+++ b/extensions/standard-processors/processors/PutFile.h
@@ -79,7 +79,6 @@ class PutFile : public core::Processor {
 
   void onTrigger(core::ProcessContext *context, core::ProcessSession *session) override;
   void initialize() override;
-  friend class PutFileTestAccessor;
 
   class ReadCallback : public InputStreamCallback {
    public:
diff --git a/extensions/standard-processors/tests/unit/GetFileTests.cpp b/extensions/standard-processors/tests/unit/GetFileTests.cpp
index f3953c6784..a7fe54510e 100644
--- a/extensions/standard-processors/tests/unit/GetFileTests.cpp
+++ b/extensions/standard-processors/tests/unit/GetFileTests.cpp
@@ -21,6 +21,7 @@
 #include <fstream>
 
 #include "TestBase.h"
+#include "TestUtils.h"
 #include "LogAttribute.h"
 #include "GetFile.h"
 #include "utils/file/FileUtils.h"
@@ -29,28 +30,6 @@
 #include <fileapi.h>
 #endif
 
-void checkLoggedFiles(TestController testController, std::shared_ptr<TestPlan> plan, std::shared_ptr<core::Processor> get_file ) {
-  char in_dir[] = "/tmp/gt.XXXXXX";
-  auto temp_path = testController.createTempDirectory(in_dir);
-  std::string in_file(temp_path + utils::file::FileUtils::get_separator() + "testfifo");
-  std::string hidden_in_file(temp_path + utils::file::FileUtils::get_separator() + ".testfifo");
-
-  plan->setProperty(get_file, processors::GetFile::Directory.getName(), temp_path);
-  auto log_attr = plan->addProcessor("LogAttribute", "Log", core::Relationship("success", "description"), true);
-  plan->setProperty(log_attr, processors::LogAttribute::FlowFilesToLog.getName(), "0");
-
-  std::ofstream in_file_stream(in_file);
-  in_file_stream << "This file is not hidden" << std::endl;
-  in_file_stream.close();
-
-  std::ofstream hidden_in_file_stream(hidden_in_file);
-  hidden_in_file_stream << "This file is hidden" << std::endl;
-  hidden_in_file_stream.close();
-
-  plan->runNextProcessor();
-  plan->runNextProcessor();
-}
-
 /**
  * This is an invalidly named test as we can't guarantee order, nor shall we.
  */
@@ -129,10 +108,28 @@ TEST_CASE("GetFileHiddenPropertyCheck", "[getFileProperty]") {
   LogTestController::getInstance().setTrace<processors::GetFile>();
   LogTestController::getInstance().setTrace<processors::LogAttribute>();
   auto plan = testController.createPlan();
-  auto repo = std::make_shared<TestRepository>();
 
-  auto get_file2 = plan->addProcessor("GetFile", "Get");
-  plan->setProperty(get_file2, processors::GetFile::IgnoreHiddenFile.getName(), "false");
-  checkLoggedFiles(testController, plan, get_file2);
+  auto temp_path = minifi::utils::createTempDir(&testController);
+  std::string in_file(temp_path + utils::file::FileUtils::get_separator() + "testfifo");
+  std::string hidden_in_file(temp_path + utils::file::FileUtils::get_separator() + ".testfifo");
+
+  auto get_file = plan->addProcessor("GetFile", "Get");
+  plan->setProperty(get_file, processors::GetFile::IgnoreHiddenFile.getName(), "false");
+
+  plan->setProperty(get_file, processors::GetFile::Directory.getName(), temp_path);
+  auto log_attr = plan->addProcessor("LogAttribute", "Log", core::Relationship("success", "description"), true);
+  plan->setProperty(log_attr, processors::LogAttribute::FlowFilesToLog.getName(), "0");
+
+  std::ofstream in_file_stream(in_file);
+  in_file_stream << "This file is not hidden" << std::endl;
+  in_file_stream.close();
+
+  std::ofstream hidden_in_file_stream(hidden_in_file);
+  hidden_in_file_stream << "This file is hidden" << std::endl;
+  hidden_in_file_stream.close();
+
+  plan->runNextProcessor();
+  plan->runNextProcessor();
+
   REQUIRE(LogTestController::getInstance().contains("Logged 2 flow files"));
 }
diff --git a/extensions/standard-processors/tests/unit/HashContentTest.cpp b/extensions/standard-processors/tests/unit/HashContentTest.cpp
index cbd033c24c..cd677ea619 100644
--- a/extensions/standard-processors/tests/unit/HashContentTest.cpp
+++ b/extensions/standard-processors/tests/unit/HashContentTest.cpp
@@ -27,6 +27,7 @@
 #include <iostream>
 
 #include "TestBase.h"
+#include "TestUtils.h"
 #include "core/Core.h"
 
 #include "core/FlowFile.h"
@@ -138,10 +139,8 @@ TEST_CASE("TestingFailOnEmptyProperty", "[HashContentPropertiesCheck]") {
   LogTestController::getInstance().setTrace<core::ProcessSession>();
   LogTestController::getInstance().setTrace<org::apache::nifi::minifi::processors::HashContent>();
   std::shared_ptr<TestPlan> plan = testController.createPlan();
-  std::shared_ptr<TestRepository> repo = std::make_shared<TestRepository>();
 
-  char dir[] = "/tmp/gt.XXXXXX";
-  auto tempdir = testController.createTempDirectory(dir);
+  auto tempdir = minifi::utils::createTempDir(&testController);
   std::shared_ptr<core::Processor> getfile = plan->addProcessor("GetFile", "getfileCreate2");
   plan->setProperty(getfile, org::apache::nifi::minifi::processors::GetFile::Directory.getName(), tempdir);
   plan->setProperty(getfile, org::apache::nifi::minifi::processors::GetFile::KeepSourceFile.getName(), "true");
@@ -152,9 +151,9 @@ TEST_CASE("TestingFailOnEmptyProperty", "[HashContentPropertiesCheck]") {
   plan->setProperty(md5processor, org::apache::nifi::minifi::processors::HashContent::HashAlgorithm.getName(), "MD5");
   plan->setProperty(md5processor, org::apache::nifi::minifi::processors::HashContent::FailOnEmpty.getName(), "true");
 
-  std::stringstream ss1;
-  ss1 << tempdir << utils::file::FileUtils::get_separator() << TEST_FILE;
-  std::string test_file_path = ss1.str();
+  std::stringstream stream_dir;
+  stream_dir << tempdir << utils::file::FileUtils::get_separator() << TEST_FILE;
+  std::string test_file_path = stream_dir.str();
   std::ofstream test_file(test_file_path, std::ios::binary);
 
   plan->runNextProcessor();
diff --git a/extensions/standard-processors/tests/unit/PutFileTests.cpp b/extensions/standard-processors/tests/unit/PutFileTests.cpp
index eccfb04bbf..acd3386a14 100644
--- a/extensions/standard-processors/tests/unit/PutFileTests.cpp
+++ b/extensions/standard-processors/tests/unit/PutFileTests.cpp
@@ -28,6 +28,7 @@
 
 #include "utils/file/FileUtils.h"
 #include "TestBase.h"
+#include "TestUtils.h"
 #include "processors/LogAttribute.h"
 #include "processors/GetFile.h"
 #include "processors/PutFile.h"
@@ -39,6 +40,7 @@
 #include "core/ProcessSession.h"
 #include "core/ProcessorNode.h"
 #include "core/reporting/SiteToSiteProvenanceReportingTask.h"
+#include "Exception.h"
 
 TEST_CASE("Test Creation of PutFile", "[getfileCreate]") {
   TestController testController;
@@ -468,7 +470,7 @@ TEST_CASE("TestPutFilePermissions", "[PutFilePermissions]") {
   REQUIRE(perms == 0777);
 }
 
-TEST_CASE("PutFileCreateDirectoryTest", "[PutFilePermissions]") {
+TEST_CASE("PutFileCreateDirectoryTest", "[PutFileProperties]") {
   TestController testController;
   LogTestController::getInstance().setDebug<minifi::processors::GetFile>();
   LogTestController::getInstance().setDebug<TestPlan>();
@@ -482,24 +484,76 @@ TEST_CASE("PutFileCreateDirectoryTest", "[PutFilePermissions]") {
   plan->addProcessor("LogAttribute", "logattribute", core::Relationship("success", "description"), true);
 
   // Define Directory
-  char format[] = "/tmp/gt.XXXXXX";
-  auto dir = testController.createTempDirectory(format);
-  char format2[] = "/tmp/ft.XXXXXX";
+  auto dir = minifi::utils::createTempDir(&testController);
   // Defining a sub directory
-  auto putfiledir = testController.createTempDirectory(format2) + utils::file::FileUtils::get_separator() + "test_dir";
-  plan->setProperty(getfile, org::apache::nifi::minifi::processors::GetFile::Directory.getName(), dir);
+  auto putfiledir = minifi::utils::createTempDir(&testController) + utils::file::FileUtils::get_separator() + "test_dir";
+
   plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::Directory.getName(), putfiledir);
+  plan->setProperty(getfile, org::apache::nifi::minifi::processors::GetFile::Directory.getName(), dir);
 
-  plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::CreateDirs.getName(), "true");
+  SECTION("with an empty file and create directory property set to true") {
+    plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::CreateDirs.getName(), "true");
 
-  std::ofstream of(std::string(dir) + utils::file::FileUtils::get_separator() + "tstFile.ext");
-  of.close();
-  auto path = std::string(putfiledir) + utils::file::FileUtils::get_separator() + "tstFile.ext";
+    std::ofstream of(std::string(dir) + utils::file::FileUtils::get_separator() + "tstFile.ext");
+    of.close();
+    auto path = std::string(putfiledir) + utils::file::FileUtils::get_separator() + "tstFile.ext";
+
+    plan->runNextProcessor();
+    plan->runNextProcessor();
+
+    REQUIRE(org::apache::nifi::minifi::utils::file::exists(putfiledir));
+    REQUIRE(org::apache::nifi::minifi::utils::file::exists(path));
+  }
+
+  SECTION("with an empty file and create directory property set to false") {
+    plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::CreateDirs.getName(), "false");
+    putfile->setAutoTerminatedRelationships({core::Relationship("failure", "description")});
 
-  plan->runNextProcessor();
-  plan->runNextProcessor();
+    std::ofstream of(std::string(dir) + utils::file::FileUtils::get_separator() + "tstFile.ext");
+    of.close();
+    auto path = std::string(putfiledir) + utils::file::FileUtils::get_separator() + "tstFile.ext";
 
-  REQUIRE(org::apache::nifi::minifi::utils::file::exists(putfiledir));
-  REQUIRE(org::apache::nifi::minifi::utils::file::exists(path));
+    plan->runNextProcessor();
+    plan->runNextProcessor();
+
+    REQUIRE_FALSE(org::apache::nifi::minifi::utils::file::exists(putfiledir));
+    REQUIRE_FALSE(org::apache::nifi::minifi::utils::file::exists(path));
+    std::string check = "Failed to create empty file: " + path;
+    REQUIRE(LogTestController::getInstance().contains(check));
+  }
+
+  SECTION("with a non-empty file and create directory property set to true") {
+    plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::CreateDirs.getName(), "true");
+
+    std::ofstream of(std::string(dir) + utils::file::FileUtils::get_separator() + "tstFile.ext");
+    of << "tempFile";
+    of.close();
+    auto path = std::string(putfiledir) + utils::file::FileUtils::get_separator() + "tstFile.ext";
+
+    plan->runNextProcessor();
+    plan->runNextProcessor();
+
+    REQUIRE(org::apache::nifi::minifi::utils::file::exists(putfiledir));
+    REQUIRE(org::apache::nifi::minifi::utils::file::exists(path));
+  }
+
+  SECTION("with a non-empty file and create directory property set to false") {
+    plan->setProperty(putfile, org::apache::nifi::minifi::processors::PutFile::CreateDirs.getName(), "false");
+    putfile->setAutoTerminatedRelationships({core::Relationship("failure", "description")});
+
+    std::ofstream of(std::string(dir) + utils::file::FileUtils::get_separator() + "tstFile.ext");
+    of << "tempFile";
+    of.close();
+    auto path = std::string(putfiledir) + utils::file::FileUtils::get_separator() + "tstFile.ext";
+
+    plan->runNextProcessor();
+    plan->runNextProcessor();
+
+    REQUIRE_FALSE(org::apache::nifi::minifi::utils::file::exists(putfiledir));
+    REQUIRE_FALSE(org::apache::nifi::minifi::utils::file::exists(path));
+    std::string check = "PutFile commit put file operation to " + path + " failed because write failed";
+    REQUIRE(LogTestController::getInstance().contains(check));
+  }
 }
+
 #endif
diff --git a/libminifi/include/utils/StringUtils.h b/libminifi/include/utils/StringUtils.h
index f0a2d6983a..44a4f2d869 100644
--- a/libminifi/include/utils/StringUtils.h
+++ b/libminifi/include/utils/StringUtils.h
@@ -79,8 +79,6 @@ class StringUtils {
    * @param input input string
    * @returns an optional of a boolean: true if the string is "true" (ignoring case), false if it is "false" (ignoring case), nullopt for any other value
    */
-
-  static bool StringToBool(std::string input, bool &output);
   static utils::optional<bool> toBool(const std::string& input);
 
   static std::string toLower(std::string str);
diff --git a/libminifi/src/RemoteProcessorGroupPort.cpp b/libminifi/src/RemoteProcessorGroupPort.cpp
index f9ffc10b59..c4155ecb9a 100644
--- a/libminifi/src/RemoteProcessorGroupPort.cpp
+++ b/libminifi/src/RemoteProcessorGroupPort.cpp
@@ -160,7 +160,7 @@ void RemoteProcessorGroupPort::onSchedule(const std::shared_ptr<core::ProcessCon
     ssl_service = std::static_pointer_cast<minifi::controllers::SSLContextService>(service);
   } else {
     std::string secureStr;
-    if (configure_->get(Configure::nifi_remote_input_secure, secureStr) && org::apache::nifi::minifi::utils::StringUtils::toBool(secureStr).value_or(false)) {
+    if (configure_->get(Configure::nifi_remote_input_secure, secureStr) && utils::StringUtils::toBool(secureStr).value_or(false)) {
       ssl_service = std::make_shared<minifi::controllers::SSLContextService>(RPG_SSL_CONTEXT_SERVICE_NAME, configure_);
       ssl_service->onEnable();
     }
diff --git a/libminifi/src/c2/ControllerSocketProtocol.cpp b/libminifi/src/c2/ControllerSocketProtocol.cpp
index 166ceed925..c3b5f35b47 100644
--- a/libminifi/src/c2/ControllerSocketProtocol.cpp
+++ b/libminifi/src/c2/ControllerSocketProtocol.cpp
@@ -55,7 +55,7 @@ void ControllerSocketProtocol::initialize(core::controller::ControllerServicePro
     }
   }
 
-  const bool anyInterface =(configuration_->get("controller.socket.local.any.interface", limitStr) && utils::StringUtils::toBool(limitStr).value_or(false));
+  const bool anyInterface = configuration_->get("controller.socket.local.any.interface", limitStr) && utils::StringUtils::toBool(limitStr).value_or(false);
 
   // if host name isn't defined we will use localhost
   configuration_->get("controller.socket.host", host);
diff --git a/libminifi/src/core/yaml/YamlConnectionParser.cpp b/libminifi/src/core/yaml/YamlConnectionParser.cpp
index 2d2b26543d..81d53ad2c6 100644
--- a/libminifi/src/core/yaml/YamlConnectionParser.cpp
+++ b/libminifi/src/core/yaml/YamlConnectionParser.cpp
@@ -168,8 +168,7 @@ uint64_t YamlConnectionParser::getFlowFileExpirationFromYaml() const {
 bool YamlConnectionParser::getDropEmptyFromYaml() const {
   const YAML::Node drop_empty_node = connectionNode_["drop empty"];
   if (drop_empty_node) {
-    bool dropEmpty = false;
-    return utils::StringUtils::StringToBool(drop_empty_node.as<std::string>(), dropEmpty) && dropEmpty;
+    return utils::StringUtils::toBool(drop_empty_node.as<std::string>()).value_or(false);
   }
   return false;
 }
diff --git a/libminifi/src/utils/StringUtils.cpp b/libminifi/src/utils/StringUtils.cpp
index d6d6efe237..80285606b2 100644
--- a/libminifi/src/utils/StringUtils.cpp
+++ b/libminifi/src/utils/StringUtils.cpp
@@ -27,12 +27,6 @@ namespace nifi {
 namespace minifi {
 namespace utils {
 
-bool StringUtils::StringToBool(std::string input, bool &output) {
-  std::transform(input.begin(), input.end(), input.begin(), ::tolower);
-  std::istringstream(input) >> std::boolalpha >> output;
-  return output;
-}
-
 utils::optional<bool> StringUtils::toBool(const std::string& str) {
   std::string trimmed = trim(str);
   if (equalsIgnoreCase(trimmed, "true")) {
diff --git a/libminifi/test/KamikazeProcessor.cpp b/libminifi/test/KamikazeProcessor.cpp
index db404bdeb6..e8081bdb4b 100644
--- a/libminifi/test/KamikazeProcessor.cpp
+++ b/libminifi/test/KamikazeProcessor.cpp
@@ -53,7 +53,6 @@ void KamikazeProcessor::initialize() {
 
 void KamikazeProcessor::onSchedule(core::ProcessContext *context, core::ProcessSessionFactory* /*sessionFactory*/) {
   std::string value;
-  _throwInOnTrigger = false;
   context->getProperty(ThrowInOnTrigger.getName(), value);
   _throwInOnTrigger = utils::StringUtils::toBool(value).value_or(false);
 
