diff --git a/.github/dependabot.yml b/.github/dependabot.yml
new file mode 100644
index 0000000000..d183b6d0ad
--- /dev/null
+++ b/.github/dependabot.yml
@@ -0,0 +1,21 @@
+# To get started with Dependabot version updates, you'll need to specify which
+# package ecosystems to update and where the package manifests are located.
+# Please see the documentation for all configuration options:
+# https://help.github.com/github/administering-a-repository/configuration-options-for-dependency-updates
+
+version: 2
+updates:
+  - package-ecosystem: "github-actions"
+    directory: "/"
+    schedule:
+      interval: "daily"
+
+  - package-ecosystem: "npm"  # See documentation for possible values
+    directory: "/"  # Location of package manifests
+    schedule:
+      interval: "daily"
+
+  - package-ecosystem: "gomod"  # See documentation for possible values
+    directory: "/"  # Location of package manifests
+    schedule:
+      interval: "daily"
diff --git a/.github/workflows/backend-e2e-test.yml b/.github/workflows/backend-e2e-test.yml
index 12d7767268..5280edf8fa 100644
--- a/.github/workflows/backend-e2e-test.yml
+++ b/.github/workflows/backend-e2e-test.yml
@@ -16,7 +16,7 @@ jobs:
       - uses: actions/checkout@v2
 
       - name: setup go
-        uses: actions/setup-go@v1
+        uses: actions/setup-go@v2.1.3
         with:
           go-version: '1.13'
 
diff --git a/.github/workflows/backend-unit-test.yml b/.github/workflows/backend-unit-test.yml
index 8357857a3a..2272419100 100644
--- a/.github/workflows/backend-unit-test.yml
+++ b/.github/workflows/backend-unit-test.yml
@@ -32,7 +32,7 @@ jobs:
           sudo mv ./dag-to-lua-1.1/lib/* ./api/dag-to-lua/
 
       - name: setup go
-        uses: actions/setup-go@v1
+        uses: actions/setup-go@v2.1.3
         with:
           go-version: '1.13'
 
diff --git a/.github/workflows/codeql-analysis.yml b/.github/workflows/codeql-analysis.yml
new file mode 100644
index 0000000000..04e2699f01
--- /dev/null
+++ b/.github/workflows/codeql-analysis.yml
@@ -0,0 +1,67 @@
+# For most projects, this workflow file will not need changing; you simply need
+# to commit it to your repository.
+#
+# You may wish to alter this file to override the set of languages analyzed,
+# or to provide custom queries or build logic.
+#
+# ******** NOTE ********
+# We have attempted to detect the languages in your repository. Please check
+# the `language` matrix defined below to confirm you have the correct set of
+# supported CodeQL languages.
+#
+name: "CodeQL"
+
+on:
+  push:
+    branches: [master]
+  pull_request:
+    # The branches below must be a subset of the branches above
+    branches: [master]
+  schedule:
+    - cron: '18 23 * * 0'
+
+jobs:
+  analyze:
+    name: Analyze
+    runs-on: ubuntu-latest
+
+    strategy:
+      fail-fast: false
+      matrix:
+        language: ['go', 'javascript']
+        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
+        # Learn more:
+        # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed
+
+    steps:
+      - name: Checkout repository
+        uses: actions/checkout@v2
+
+      # Initializes the CodeQL tools for scanning.
+      - name: Initialize CodeQL
+        uses: github/codeql-action/init@v1
+        with:
+          languages: ${{ matrix.language }}
+          # If you wish to specify custom queries, you can do so here or in a config file.
+          # By default, queries listed here will override any specified in a config file.
+          # Prefix the list here with "+" to use these queries and those in the config file.
+          # queries: ./path/to/local/query, your-org/your-repo/queries@main
+
+      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
+      # If this step fails, then you should remove it and run the build manually (see below)
+      - name: Autobuild
+        uses: github/codeql-action/autobuild@v1
+
+      # ℹ️ Command-line programs to run using the OS shell.
+      # 📚 https://git.io/JvXDl
+
+      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
+      #    and modify them (or add more) to build your code if your project
+      #    uses a compiled language
+
+      # - run: |
+      #    make bootstrap
+      #    make release
+
+      - name: Perform CodeQL Analysis
+        uses: github/codeql-action/analyze@v1
diff --git a/.github/workflows/frontend-e2e-test.yml b/.github/workflows/frontend-e2e-test.yml
index e6f49b9d19..acedc21cad 100644
--- a/.github/workflows/frontend-e2e-test.yml
+++ b/.github/workflows/frontend-e2e-test.yml
@@ -29,32 +29,22 @@ jobs:
       - name: Checkout
         uses: actions/checkout@v2
 
-      - name: Cache or restore node_modules
-        id: node_modules_cache_id
-        uses: actions/cache@v2
-        with:
-          path: "**/node_modules"
-          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
-
       - name: Setup Node.js environment
-        uses: actions/setup-node@v1
+        uses: actions/setup-node@v2.1.4
         with:
           node-version: 14.x
 
       - name: Setup golang environment
-        uses: actions/setup-go@v1
+        uses: actions/setup-go@v2.1.3
         with:
           go-version: '1.13'
 
       - name: Start manager-api
         working-directory: ./api
         run: nohup go run . &
-          
+
       - name: Install front-end dependencies
-        working-directory: ./web
-        if: steps.node_modules_cache_id.outputs.cache-hit != 'true'
         run: yarn install
 
       - name: Start frontend then test
-        working-directory: ./web/src/e2e
         run: yarn test:e2e
diff --git a/.github/workflows/gitleaks.yml b/.github/workflows/gitleaks.yml
new file mode 100644
index 0000000000..ad9fd414c2
--- /dev/null
+++ b/.github/workflows/gitleaks.yml
@@ -0,0 +1,25 @@
+# Scan git repos (or files) for secrets using regex and entropy 🔑
+
+name: gitLeaks
+
+on:
+  push:
+    branches:
+      - master
+  pull_request:
+    branches:
+      - master
+
+jobs:
+  gitleaks:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
+        with:
+          fetch-depth: '1'
+      - name: wget
+        uses: wei/wget@v1.1.1
+        with:
+          args: -O .gitleaks.toml https://raw.githubusercontent.com/ycjcl868/gitleaks/master/.gitleaks.toml
+      - name: gitleaks-action
+        uses: zricethezav/gitleaks-action@master
diff --git a/.github/workflows/lint.yml b/.github/workflows/lint.yml
new file mode 100644
index 0000000000..5c2c78bd51
--- /dev/null
+++ b/.github/workflows/lint.yml
@@ -0,0 +1,23 @@
+name: ❄️ Lint
+
+on: [pull_request]
+
+jobs:
+  markdownlint:
+    name: 🍇 Markdown
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
+      - name: 🚀 Use Node.js
+        uses: actions/setup-node@v2.1.4
+        with:
+          node-version: '12.x'
+      - run: npm install -g markdownlint-cli@0.25.0
+      - run: markdownlint '**/*.md' --ignore node_modules
+  yamllint:
+    name: 🍏 YAML
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
+      - name: 🧹 YAML Lint
+        uses: ibiqlik/action-yamllint@v3
diff --git a/.github/workflows/markdown-link-checker.yml b/.github/workflows/markdown-link-checker.yml
index c89a81e32a..a1604f3827 100644
--- a/.github/workflows/markdown-link-checker.yml
+++ b/.github/workflows/markdown-link-checker.yml
@@ -6,9 +6,9 @@ jobs:
   markdown-link-check:
     runs-on: ubuntu-latest
     steps:
-    - uses: actions/checkout@master
-    - uses: gaurav-nelson/github-action-markdown-link-check@v1
-      with:
-        use-quiet-mode: 'yes'
-        use-verbose-mode: 'yes'
-        check-modified-files-only: 'yes'
+      - uses: actions/checkout@master
+      - uses: gaurav-nelson/github-action-markdown-link-check@v1
+        with:
+          use-quiet-mode: 'yes'
+          use-verbose-mode: 'yes'
+          check-modified-files-only: 'yes'
diff --git a/.github/workflows/release-test.yml b/.github/workflows/release-test.yml
new file mode 100644
index 0000000000..b821fa26bb
--- /dev/null
+++ b/.github/workflows/release-test.yml
@@ -0,0 +1,71 @@
+name: Release Test
+
+on:
+  push:
+    branches:
+      - master
+  pull_request:
+    branches:
+      - master
+
+jobs:
+  run-test:
+    runs-on: ubuntu-latest
+
+    services:
+      etcd:
+        image: bitnami/etcd:3.4.13
+        ports:
+          - 2379:2379
+          - 2380:2380
+        env:
+          ALLOW_NONE_AUTHENTICATION: yes
+
+    steps:
+      - uses: actions/checkout@v2
+
+      - name: setup go
+        uses: actions/setup-go@v2.1.3
+        with:
+          go-version: '1.13'
+
+      - name: release and build
+        run: |
+          VERSION=$(cat ./api/VERSION)
+          mkdir release
+          git clean -Xdf
+          tar -zcvf release/apache-apisix-dashboard-${VERSION}-src.tgz \
+          --exclude .github \
+          --exclude .git \
+          --exclude .gitattributes \
+          --exclude .idea \
+          --exclude .vscode \
+          --exclude .gitignore \
+          --exclude .DS_Store \
+          --exclude docs \
+          --exclude release \
+          --exclude api/internal/core/store/validate_mock.go \
+          --exclude api/internal/core/storage/storage_mock.go \
+          .
+
+          cd release
+          tar -zxvf apache-apisix-dashboard-${VERSION}-src.tgz
+          ls -l
+          export GO111MOUDULE=on
+          api/build.sh
+          mkdir -p ./output/logs
+          cd output
+          ./manager-api > ./api.log 2>&1 &
+          sleep 3
+          cat ./api.log
+          cat ./logs/error.log
+          cat conf/conf.yaml
+
+      - name: run test
+        run: |
+          curl http://127.0.0.1:9000/apisix/admin/user/login -X POST -i -d '{"username":"admin", "password": "admin"}'
+          code=$(curl -k -i -m 20 -o /dev/null -s -w %{http_code} http://127.0.0.1:9000/apisix/admin/user/login -X POST -i -d '{"username":"admin", "password": "admin"}')
+          if [ ! $code -eq 200 ]; then
+              echo "failed: failed to custom port"
+              exit 1
+          fi
diff --git a/.github/workflows/test-frontend-multiple-node-build.yml b/.github/workflows/test-frontend-multiple-node-build.yml
index 4a00477afe..7a29774a39 100644
--- a/.github/workflows/test-frontend-multiple-node-build.yml
+++ b/.github/workflows/test-frontend-multiple-node-build.yml
@@ -28,7 +28,7 @@ jobs:
       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
       - uses: actions/checkout@v2
       - name: Use Node.js ${{ matrix.node-version }}
-        uses: actions/setup-node@v1
+        uses: actions/setup-node@v2.1.4
         with:
           node-version: ${{ matrix.node-version }}
 
diff --git a/web/src/e2e/README.md b/.markdownlint.yml
similarity index 59%
rename from web/src/e2e/README.md
rename to .markdownlint.yml
index fc5d609062..55dd310a65 100644
--- a/web/src/e2e/README.md
+++ b/.markdownlint.yml
@@ -1,4 +1,3 @@
-<!--
 #
 # Licensed to the Apache Software Foundation (ASF) under one or more
 # contributor license agreements.  See the NOTICE file distributed with
@@ -15,27 +14,46 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
--->
 
-### Add E2E test cases
-
-1. Install dependencies then run in development mode
-
-```sh
-$ yarn install && yarn start
-```
-
-2. Add a new test case file under the `src/e2e` folder
-3. Run test cases
-
-```sh
-$ yarn test
-```
-
-If you want to run a particular test file separately, you can execute the following command
-
-```sh
-$ yarn test ${yourFileName}.e2e.js
-```
-
-The test results will be displayed on the console.
+MD001: false
+MD002: false
+MD003: false
+MD004: false
+MD005: false
+MD006: false
+MD007: false
+MD009: false
+MD010: false
+MD011: false
+MD012: false
+MD013: false
+MD014: false
+MD018: false
+MD019: false
+MD020: false
+MD021: false
+MD022: false
+MD023: false
+MD024: false
+MD025: false
+MD026: false
+MD027: false
+MD028: false
+MD029: false
+MD030: false
+MD031: false
+MD032: false
+MD033: false
+MD034: false
+MD035: false
+MD036: false
+MD037: false
+MD040: false
+MD041: false
+MD042: false
+MD043: false
+MD044: false
+MD045: false
+MD046: false
+MD047: false
+MD048: false
diff --git a/.yamllint b/.yamllint
new file mode 100644
index 0000000000..8a9f034306
--- /dev/null
+++ b/.yamllint
@@ -0,0 +1,8 @@
+---
+
+extends: default
+
+rules:
+  document-start: false
+  line-length: false
+  truthy: false
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 59b1dd6772..3d3927102e 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -19,6 +19,7 @@
 
 # Table of Contents
 
+- [2.2.0](#220)
 - [2.1.1](#211)
 - [2.1.0](#210)
 - [2.0.0](#200)
@@ -26,11 +27,38 @@
 - [1.0.0](#100)
 
 
+# 2.2.0
+
+This release mainly improve basic features, bugfix and adds test cases.
+
+`Manager API` 2.2 should be used with [Apache APISIX 2.1](https://github.com/apache/apisix/releases/tag/2.1). It is not recommended to use with other Apache APISIX versions.
+
+### Core
+
+- Support access log for Manager API. [#994](https://github.com/apache/apisix-dashboard/pull/994)
+- Enhance error log for Manager API. [#977](https://github.com/apache/apisix-dashboard/pull/977)
+- Integrate with code-mirror to have a fallback to plugins's render issue. [#898](https://github.com/apache/apisix-dashboard/pull/898)
+- Support priority field in Route module. [#1006](https://github.com/apache/apisix-dashboard/pull/1006)
+- Add etcd basic auth support [#951](https://github.com/apache/apisix-dashboard/pull/951)
+
+### Test case
+
+- Enhance e2e test cases for upstream. [#971](https://github.com/apache/apisix-dashboard/pull/971) [#972](https://github.com/apache/apisix-dashboard/pull/972)
+- Refactor unit test for consumer handler. [#840](https://github.com/apache/apisix-dashboard/pull/840)
+
+## Bugfix
+
+- JSON schema verification should be performed on the original data submitted by the user. [#986](https://github.com/apache/apisix-dashboard/pull/986)
+- fix PATCH method bug. [#1005](https://github.com/apache/apisix-dashboard/pull/1005)
+- remove husky to resolve Docker Deploy failed. [#1018](https://github.com/apache/apisix-dashboard/pull/1018)
+
+For more changes, please refer to [Milestone](https://github.com/apache/apisix-dashboard/milestone/5).
+
 # 2.1.1
 
 This release mainly adds test cases and bugfix for `Manager API`.
 
-`Manager API` 2.1.1 should be used with APISIX 2.1. It is not recommended to use with other APISIX versions.
+`Manager API` 2.1.1 should be used with Apache APISIX 2.1. It is not recommended to use with other Apache APISIX versions.
 
 ### Core
 
@@ -41,7 +69,7 @@ This release mainly adds test cases and bugfix for `Manager API`.
 Add e2e test cases for route, upstream, consumer, SSL, and plugins.
 
 ## Bugfix
- 
+
 - Fix: when created route by `Admin API`, upstream can not be modified by dashboard. [#847](https://github.com/apache/apisix-dashboard/pull/847)
 - Fix: create route with jwt-auth will display an error. [#878](https://github.com/apache/apisix-dashboard/pull/878)
 - Fix: create route with error format remote_addrs `Manager API` will return 200, but should return 400. [#899](https://github.com/apache/apisix-dashboard/pull/899)
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 87312d92ce..e0f71f2510 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -163,7 +163,7 @@ Breaking Change section should start with the phrase "BREAKING CHANGE: " followe
 
 ### Revert commits
 
-If the commit reverts a previous commit, it should begin with `revert: `, followed by the header of the reverted commit.
+If the commit reverts a previous commit, it should begin with `revert:`, followed by the header of the reverted commit.
 
 The content of the commit message body should contain:
 
diff --git a/Makefile b/Makefile
index 7eee57c131..6877b98247 100644
--- a/Makefile
+++ b/Makefile
@@ -55,7 +55,7 @@ ifeq ("$(wildcard $(GO_EXEC))", "")
 endif
 
 
-### api-test:		Run the tests of manager-api 
+### api-test:		Run the tests of manager-api
 .PHONY: api-test
 api-test: api-default
 	cd api/ && APISIX_API_WORKDIR=$$PWD go test -v -race -cover -coverprofile=coverage.txt -covermode=atomic ./...
diff --git a/README.md b/README.md
index b2d764a2c0..6e473dffab 100644
--- a/README.md
+++ b/README.md
@@ -27,7 +27,7 @@
   <a href="https://twitter.com/apacheapisix">Twitter</a>
 </p>
 
-The latest version is 2.1.1 and should be used with APISIX 2.1. It is not recommended to use with other APISIX versions.
+The latest version is 2.2 and should be used with Apache APISIX 2.1. It is not recommended to use with other Apache APISIX versions.
 
 ## What's Apache APISIX Dashboard
 
diff --git a/api/VERSION b/api/VERSION
index 1f3e3c351b..8bbe6cf74a 100644
--- a/api/VERSION
+++ b/api/VERSION
@@ -1 +1 @@
-v2.1-rc1
+2.2
diff --git a/api/build.sh b/api/build.sh
index 5bae5d28b3..3d41e89e8b 100755
--- a/api/build.sh
+++ b/api/build.sh
@@ -20,7 +20,6 @@ export ENV=local
 pwd=`pwd`
 
 VERSION=$(cat ./api/VERSION)
-GIT_VERSION=$(git log -1 --pretty=format:%h)
 
 rm -rf output && mkdir -p output/conf && mkdir -p output/dag-to-lua
 
@@ -32,7 +31,7 @@ if [[ ! -f "dag-to-lua-1.1/lib/dag-to-lua.lua" ]]; then
 fi
 
 # build
-cd ./api && go build -o ../output/manager-api -ldflags "-X main.Version=${VERSION}(${GIT_VERSION})" . && cd ..
+cd ./api && go build -o ../output/manager-api -ldflags "-X main.Version=${VERSION}" . && cd ..
 
 cp ./api/conf/schema.json ./output/conf/schema.json
 cp ./api/conf/conf.yaml ./output/conf/conf.yaml
diff --git a/api/conf/conf.go b/api/conf/conf.go
index b34c339db6..62617740a4 100644
--- a/api/conf/conf.go
+++ b/api/conf/conf.go
@@ -36,7 +36,7 @@ const (
 	EnvDEV   = "dev"
 	EnvLOCAL = "local"
 
-	WebDir = "./html"
+	WebDir = "html/"
 )
 
 var (
@@ -101,7 +101,11 @@ type Config struct {
 	Authentication Authentication
 }
 
+// TODO: it is just for integration tests, we should call "InitLog" explicitly when remove all handler's integration tests
 func init() {
+	InitConf()
+}
+func InitConf() {
 	//go test
 	if workDir := os.Getenv("APISIX_API_WORKDIR"); workDir != "" {
 		WorkDir = workDir
diff --git a/api/conf/conf.yaml b/api/conf/conf.yaml
index 802b11dc14..75e1c27311 100644
--- a/api/conf/conf.yaml
+++ b/api/conf/conf.yaml
@@ -22,8 +22,8 @@ conf:
   etcd:
     endpoints:          # supports defining multiple etcd host addresses for an etcd cluster
       - 127.0.0.1:2379
-    
-                        # etcd basic auth info
+                          # yamllint disable rule:comments-indentation
+                          # etcd basic auth info
     # username: "root"    # ignore etcd username if not enable etcd auth
     # password: "123456"  # ignore etcd password if not enable etcd auth
   log:
@@ -43,7 +43,7 @@ authentication:
                         # NOTE: Highly recommended to modify this value to protect `manager api`.
                         # if it's default value, when `manager api` start , it will generate a random string to replace it.
   expire_time: 3600     # jwt token expire time, in second
-  users:
+  users:                # yamllint enable rule:comments-indentation
     - username: admin   # username and password for login `manager api`
       password: admin
     - username: user
diff --git a/api/filter/logging_test.go b/api/filter/logging_test.go
index 087d8b0e85..688befa525 100644
--- a/api/filter/logging_test.go
+++ b/api/filter/logging_test.go
@@ -17,30 +17,30 @@
 package filter
 
 import (
-        "net/http"
-        "net/http/httptest"
-        "testing"
+	"net/http"
+	"net/http/httptest"
+	"testing"
 
-        "github.com/gin-gonic/gin"
-        "github.com/stretchr/testify/assert"
+	"github.com/gin-gonic/gin"
+	"github.com/stretchr/testify/assert"
 
-        "github.com/apisix/manager-api/log"
+	"github.com/apisix/manager-api/log"
 )
 
 func performRequest(r http.Handler, method, path string) *httptest.ResponseRecorder {
-        req := httptest.NewRequest(method, path, nil)
-        w := httptest.NewRecorder()
-        r.ServeHTTP(w, req)
-        return w
+	req := httptest.NewRequest(method, path, nil)
+	w := httptest.NewRecorder()
+	r.ServeHTTP(w, req)
+	return w
 }
 
 func TestRequestLogHandler(t *testing.T) {
-        r := gin.New()
-        logger := log.GetLogger(log.AccessLog)
-        r.Use(RequestLogHandler(logger))
-        r.GET("/", func(c *gin.Context) {
-        })
+	r := gin.New()
+	logger := log.GetLogger(log.AccessLog)
+	r.Use(RequestLogHandler(logger))
+	r.GET("/", func(c *gin.Context) {
+	})
 
-        w := performRequest(r, "GET", "/")
-        assert.Equal(t, 200, w.Code)
+	w := performRequest(r, "GET", "/")
+	assert.Equal(t, 200, w.Code)
 }
diff --git a/api/filter/schema.go b/api/filter/schema.go
new file mode 100644
index 0000000000..a294c46496
--- /dev/null
+++ b/api/filter/schema.go
@@ -0,0 +1,195 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package filter
+
+import (
+	"bytes"
+	"crypto/tls"
+	"crypto/x509"
+	"encoding/json"
+	"encoding/pem"
+	"errors"
+	"fmt"
+	"io/ioutil"
+	"net/http"
+	"strings"
+
+	"github.com/gin-gonic/gin"
+
+	"github.com/apisix/manager-api/internal/core/store"
+	"github.com/apisix/manager-api/internal/utils/consts"
+	"github.com/apisix/manager-api/log"
+)
+
+var resources = map[string]string{
+	"routes":    "route",
+	"upstreams": "upstream",
+	"services":  "service",
+	"consumers": "consumer",
+	"ssl":       "ssl",
+}
+
+func parseCert(crt, key string) ([]string, error) {
+	if crt == "" || key == "" {
+		return nil, errors.New("invalid certificate")
+	}
+
+	certDERBlock, _ := pem.Decode([]byte(crt))
+	if certDERBlock == nil {
+		return nil, errors.New("Certificate resolution failed")
+	}
+	// match
+	_, err := tls.X509KeyPair([]byte(crt), []byte(key))
+	if err != nil {
+		return nil, errors.New("key and cert don't match")
+	}
+
+	x509Cert, err := x509.ParseCertificate(certDERBlock.Bytes)
+
+	if err != nil {
+		return nil, errors.New("Certificate resolution failed")
+	}
+
+	//domain
+	snis := []string{}
+	if x509Cert.DNSNames != nil && len(x509Cert.DNSNames) > 0 {
+		snis = x509Cert.DNSNames
+	} else if x509Cert.IPAddresses != nil && len(x509Cert.IPAddresses) > 0 {
+		for _, ip := range x509Cert.IPAddresses {
+			snis = append(snis, ip.String())
+		}
+	} else {
+		if x509Cert.Subject.Names != nil && len(x509Cert.Subject.Names) > 0 {
+			var attributeTypeNames = map[string]string{
+				"2.5.4.6":  "C",
+				"2.5.4.10": "O",
+				"2.5.4.11": "OU",
+				"2.5.4.3":  "CN",
+				"2.5.4.5":  "SERIALNUMBER",
+				"2.5.4.7":  "L",
+				"2.5.4.8":  "ST",
+				"2.5.4.9":  "STREET",
+				"2.5.4.17": "POSTALCODE",
+			}
+			for _, tv := range x509Cert.Subject.Names {
+				oidString := tv.Type.String()
+				typeName, ok := attributeTypeNames[oidString]
+				if ok && typeName == "CN" {
+					valueString := fmt.Sprint(tv.Value)
+					snis = append(snis, valueString)
+				}
+			}
+		}
+	}
+
+	return snis, nil
+}
+
+func handleSpecialField(resource string, reqBody []byte) ([]byte, error) {
+	// remove script, because it's a map, and need to be parsed into lua code
+	if resource == "routes" {
+		var route map[string]interface{}
+		err := json.Unmarshal(reqBody, &route)
+		if err != nil {
+			return nil, fmt.Errorf("read request body failed: %s", err)
+		}
+		if _, ok := route["script"]; ok {
+			delete(route, "script")
+			reqBody, err = json.Marshal(route)
+			if err != nil {
+				return nil, fmt.Errorf("read request body failed: %s", err)
+			}
+		}
+	}
+
+	// SSL does not need to pass sni, we need to parse the SSL to get sni
+	if resource == "ssl" {
+		var ssl map[string]interface{}
+		err := json.Unmarshal(reqBody, &ssl)
+		if err != nil {
+			return nil, fmt.Errorf("read request body failed: %s", err)
+		}
+		ssl["snis"], err = parseCert(ssl["cert"].(string), ssl["key"].(string))
+		if err != nil {
+			return nil, fmt.Errorf("SSL parse failed: %s", err)
+		}
+		reqBody, err = json.Marshal(ssl)
+		if err != nil {
+			return nil, fmt.Errorf("read request body failed: %s", err)
+		}
+	}
+
+	return reqBody, nil
+}
+
+func SchemaCheck() gin.HandlerFunc {
+	return func(c *gin.Context) {
+		pathPrefix := "/apisix/admin/"
+		resource := strings.TrimPrefix(c.Request.URL.Path, pathPrefix)
+
+		idx := strings.LastIndex(resource, "/")
+		if idx > 1 {
+			resource = resource[:idx]
+		}
+		method := strings.ToUpper(c.Request.Method)
+
+		if method != "PUT" && method != "POST" {
+			c.Next()
+			return
+		}
+		schemaKey, ok := resources[resource]
+		if !ok {
+			c.Next()
+			return
+		}
+
+		reqBody, err := c.GetRawData()
+		if err != nil {
+			log.Errorf("read request body failed: %s", err)
+			c.AbortWithStatusJSON(http.StatusBadRequest, consts.ErrInvalidRequest)
+			return
+		}
+
+		// other filter need it
+		c.Request.Body = ioutil.NopCloser(bytes.NewBuffer(reqBody))
+
+		validator, err := store.NewAPISIXSchemaValidator("main." + schemaKey)
+		if err != nil {
+			errMsg := err.Error()
+			c.AbortWithStatusJSON(http.StatusBadRequest, consts.InvalidParam(errMsg))
+			log.Error(errMsg)
+			return
+		}
+
+		reqBody, err = handleSpecialField(resource, reqBody)
+		if err != nil {
+			errMsg := err.Error()
+			c.AbortWithStatusJSON(http.StatusBadRequest, consts.InvalidParam(errMsg))
+			log.Error(errMsg)
+			return
+		}
+
+		if err := validator.Validate(reqBody); err != nil {
+			errMsg := err.Error()
+			c.AbortWithStatusJSON(http.StatusBadRequest, consts.InvalidParam(errMsg))
+			log.Warn(errMsg)
+			return
+		}
+
+		c.Next()
+	}
+}
diff --git a/api/go.mod b/api/go.mod
index 3c483718f7..b67cd955b1 100644
--- a/api/go.mod
+++ b/api/go.mod
@@ -11,6 +11,7 @@ require (
 	github.com/coreos/go-systemd v0.0.0-20191104093116-d3cd4ed1dbcf // indirect
 	github.com/coreos/pkg v0.0.0-20180928190104-399ea9e2e55f // indirect
 	github.com/dgrijalva/jwt-go v3.2.0+incompatible
+	github.com/evanphx/json-patch/v5 v5.1.0
 	github.com/gin-contrib/pprof v1.3.0
 	github.com/gin-contrib/sessions v0.0.3
 	github.com/gin-contrib/static v0.0.0-20200916080430-d45d9a37d28e
diff --git a/api/go.sum b/api/go.sum
index 80c6f95448..67988630eb 100644
--- a/api/go.sum
+++ b/api/go.sum
@@ -22,6 +22,9 @@ github.com/dgrijalva/jwt-go v3.2.0+incompatible/go.mod h1:E3ru+11k8xSBh+hMPgOLZm
 github.com/elazarl/go-bindata-assetfs v1.0.0/go.mod h1:v+YaWX3bdea5J/mo8dSETolEo7R71Vk1u8bnjau5yw4=
 github.com/envoyproxy/go-control-plane v0.9.1-0.20191026205805-5f8ba28d4473/go.mod h1:YTl/9mNaCwkRvm6d1a2C3ymFceY/DCBVvsKhRF0iEA4=
 github.com/envoyproxy/protoc-gen-validate v0.1.0/go.mod h1:iSmxcyjqTsJpI2R4NaDN7+kN2VEUnK/pcBlmesArF7c=
+github.com/evanphx/json-patch v4.9.0+incompatible h1:kLcOMZeuLAJvL2BPWLMIj5oaZQobrkAqrL+WFZwQses=
+github.com/evanphx/json-patch/v5 v5.1.0 h1:B0aXl1o/1cP8NbviYiBMkcHBtUjIJ1/Ccg6b+SwCLQg=
+github.com/evanphx/json-patch/v5 v5.1.0/go.mod h1:G79N1coSVB93tBe7j6PhzjmR3/2VvlbKOFpnXhI9Bw4=
 github.com/gin-contrib/pprof v1.3.0 h1:G9eK6HnbkSqDZBYbzG4wrjCsA4e+cvYAHUZw6W+W9K0=
 github.com/gin-contrib/pprof v1.3.0/go.mod h1:waMjT1H9b179t3CxuG1cV3DHpga6ybizwfBaM5OXaB0=
 github.com/gin-contrib/sessions v0.0.3 h1:PoBXki+44XdJdlgDqDrY5nDVe3Wk7wDV/UCOuLP6fBI=
@@ -77,6 +80,7 @@ github.com/gorilla/securecookie v1.1.1/go.mod h1:ra0sb63/xPlUeL+yeDciTfxMRAA+MP+
 github.com/gorilla/sessions v1.1.1/go.mod h1:8KCfur6+4Mqcc6S0FEfKuN15Vl5MgXW92AE8ovaJD0w=
 github.com/gorilla/sessions v1.1.3 h1:uXoZdcdA5XdXF3QzuSlheVRUvjl+1rKY7zBXL68L9RU=
 github.com/gorilla/sessions v1.1.3/go.mod h1:8KCfur6+4Mqcc6S0FEfKuN15Vl5MgXW92AE8ovaJD0w=
+github.com/jessevdk/go-flags v1.4.0/go.mod h1:4FA24M0QyGHXBuZZK/XkWh8h0e1EYbRYJSGM75WSRxI=
 github.com/json-iterator/go v1.1.7/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.9/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
 github.com/json-iterator/go v1.1.10/go.mod h1:KdQUCv79m/52Kvf8AW2vK1V8akMuk1QjK/uOdHXbAo4=
diff --git a/api/internal/core/entity/entity.go b/api/internal/core/entity/entity.go
index eb30ba7172..e1270c83c2 100644
--- a/api/internal/core/entity/entity.go
+++ b/api/internal/core/entity/entity.go
@@ -60,6 +60,7 @@ type BaseInfoGetter interface {
 	GetBaseInfo() *BaseInfo
 }
 
+// swagger:model Route
 type Route struct {
 	BaseInfo
 	URI             string                 `json:"uri,omitempty"`
@@ -161,6 +162,7 @@ type UpstreamDef struct {
 	Labels       map[string]string `json:"labels,omitempty"`
 }
 
+// swagger:model Upstream
 type Upstream struct {
 	BaseInfo
 	UpstreamDef
@@ -181,6 +183,7 @@ func (upstream *Upstream) Parse2NameResponse() (*UpstreamNameResponse, error) {
 
 // --- structures for upstream end  ---
 
+// swagger:model Consumer
 type Consumer struct {
 	BaseInfo
 	Username string                 `json:"username"`
@@ -189,6 +192,7 @@ type Consumer struct {
 	Labels   map[string]string      `json:"labels,omitempty"`
 }
 
+// swagger:model SSL
 type SSL struct {
 	BaseInfo
 	Cert          string            `json:"cert,omitempty"`
@@ -204,6 +208,7 @@ type SSL struct {
 	Labels        map[string]string `json:"labels,omitempty"`
 }
 
+// swagger:model Service
 type Service struct {
 	BaseInfo
 	Name            string                 `json:"name,omitempty"`
diff --git a/api/internal/core/store/store.go b/api/internal/core/store/store.go
index d9c7e36915..ee3fa5038e 100644
--- a/api/internal/core/store/store.go
+++ b/api/internal/core/store/store.go
@@ -38,7 +38,7 @@ type Interface interface {
 	Get(key string) (interface{}, error)
 	List(input ListInput) (*ListOutput, error)
 	Create(ctx context.Context, obj interface{}) error
-	Update(ctx context.Context, obj interface{}, createOnFail bool) error
+	Update(ctx context.Context, obj interface{}, createIfNotExist bool) error
 	BatchDelete(ctx context.Context, keys []string) error
 }
 
diff --git a/api/internal/core/store/store_mock.go b/api/internal/core/store/store_mock.go
new file mode 100644
index 0000000000..258f083970
--- /dev/null
+++ b/api/internal/core/store/store_mock.go
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package store
+
+import (
+	"context"
+	"github.com/stretchr/testify/mock"
+)
+
+type MockInterface struct {
+	mock.Mock
+}
+
+func (m *MockInterface) Get(key string) (interface{}, error) {
+	ret := m.Mock.Called(key)
+	return ret.Get(0), ret.Error(1)
+}
+
+func (m *MockInterface) List(input ListInput) (*ListOutput, error) {
+	ret := m.Called(input)
+
+	var (
+		r0 *ListOutput
+		r1 error
+	)
+
+	if rf, ok := ret.Get(0).(func(ListInput) *ListOutput); ok {
+		r0 = rf(input)
+	} else {
+		r0 = ret.Get(0).(*ListOutput)
+	}
+	r1 = ret.Error(1)
+
+	return r0, r1
+}
+
+func (m *MockInterface) Create(ctx context.Context, obj interface{}) error {
+	ret := m.Mock.Called(ctx, obj)
+	return ret.Error(0)
+}
+
+func (m *MockInterface) Update(ctx context.Context, obj interface{}, createOnFail bool) error {
+	ret := m.Mock.Called(ctx, obj, createOnFail)
+	return ret.Error(0)
+}
+
+func (m *MockInterface) BatchDelete(ctx context.Context, keys []string) error {
+	ret := m.Mock.Called(ctx, keys)
+	return ret.Error(0)
+}
diff --git a/api/internal/core/store/validate.go b/api/internal/core/store/validate.go
index 715491b0a0..7e3d0c195d 100644
--- a/api/internal/core/store/validate.go
+++ b/api/internal/core/store/validate.go
@@ -312,3 +312,45 @@ func (v *APISIXJsonSchemaValidator) Validate(obj interface{}) error {
 
 	return nil
 }
+
+type APISIXSchemaValidator struct {
+	schema *gojsonschema.Schema
+}
+
+func NewAPISIXSchemaValidator(jsonPath string) (Validator, error) {
+	schemaDef := conf.Schema.Get(jsonPath).String()
+	if schemaDef == "" {
+		log.Warnf("schema validate failed: schema not found, path: %s", jsonPath)
+		return nil, fmt.Errorf("schema validate failed: schema not found, path: %s", jsonPath)
+	}
+
+	s, err := gojsonschema.NewSchema(gojsonschema.NewStringLoader(schemaDef))
+	if err != nil {
+		log.Warnf("new schema failed: %w", err)
+		return nil, fmt.Errorf("new schema failed: %w", err)
+	}
+	return &APISIXSchemaValidator{
+		schema: s,
+	}, nil
+}
+
+func (v *APISIXSchemaValidator) Validate(obj interface{}) error {
+	ret, err := v.schema.Validate(gojsonschema.NewBytesLoader(obj.([]byte)))
+	if err != nil {
+		log.Warnf("schema validate failed: %w", err)
+		return fmt.Errorf("schema validate failed: %w", err)
+	}
+
+	if !ret.Valid() {
+		errString := buffer.Buffer{}
+		for i, vErr := range ret.Errors() {
+			if i != 0 {
+				errString.AppendString("\n")
+			}
+			errString.AppendString(vErr.String())
+		}
+		return fmt.Errorf("schema validate failed: %s", errString.String())
+	}
+
+	return nil
+}
diff --git a/api/internal/core/store/validate_test.go b/api/internal/core/store/validate_test.go
index 72a398e266..fd38dbfc4e 100644
--- a/api/internal/core/store/validate_test.go
+++ b/api/internal/core/store/validate_test.go
@@ -437,3 +437,44 @@ func TestAPISIXJsonSchemaValidator_Route_checkRemoteAddr(t *testing.T) {
 		assert.Equal(t, tc.wantValidateErr, err, tc.caseDesc)
 	}
 }
+
+func TestAPISIXSchemaValidator_Validate(t *testing.T) {
+	validator, err := NewAPISIXSchemaValidator("main.consumer")
+	assert.Nil(t, err)
+
+	// normal config, should pass
+	reqBody := `{
+		"id": "jack",
+		"username": "jack",
+		"plugins": {
+			"limit-count": {
+				"count": 2,
+				"time_window": 60,
+				"rejected_code": 503,
+				"key": "remote_addr"
+			}
+		},
+		"desc": "test description"
+	}`
+	err = validator.Validate([]byte(reqBody))
+	assert.Nil(t, err)
+
+	// config with non existent field, should be failed.
+	reqBody = `{
+		"username": "jack",
+		"not-exist": "val",
+		"plugins": {
+			"limit-count": {
+				"count": 2,
+				"time_window": 60,
+				"rejected_code": 503,
+				"key": "remote_addr"
+			}
+		},
+		"desc": "test description"
+	}`
+	err = validator.Validate([]byte(reqBody))
+	assert.NotNil(t, err)
+	assert.EqualError(t, err, "schema validate failed: (root): Additional property not-exist is not allowed")
+
+}
diff --git a/api/internal/handler/authentication/authentication.go b/api/internal/handler/authentication/authentication.go
index c3f242d77f..c6acb421f4 100644
--- a/api/internal/handler/authentication/authentication.go
+++ b/api/internal/handler/authentication/authentication.go
@@ -47,11 +47,41 @@ type UserSession struct {
 	Token string `json:"token"`
 }
 
+// swagger:model LoginInput
 type LoginInput struct {
+	// user name
 	Username string `json:"username" validate:"required"`
+	// password
 	Password string `json:"password" validate:"required"`
 }
 
+// swagger:operation POST /apisix/admin/user/login userLogin
+//
+// user login.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: username
+//   in: body
+//   description: user name
+//   required: true
+//   type: string
+// - name: password
+//   in: body
+//   description: password
+//   required: true
+//   type: string
+// responses:
+//   '0':
+//     description: login success
+//     schema:
+//       "$ref": "#/definitions/ApiError"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) userLogin(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*LoginInput)
 	username := input.Username
diff --git a/api/internal/handler/consumer/consumer.go b/api/internal/handler/consumer/consumer.go
index ab31aa35df..31b7af37f2 100644
--- a/api/internal/handler/consumer/consumer.go
+++ b/api/internal/handler/consumer/consumer.go
@@ -17,21 +17,17 @@
 package consumer
 
 import (
-	"fmt"
-	"net/http"
 	"reflect"
 	"strings"
 
 	"github.com/gin-gonic/gin"
 	"github.com/shiningrush/droplet"
-	"github.com/shiningrush/droplet/data"
 	"github.com/shiningrush/droplet/wrapper"
 	wgin "github.com/shiningrush/droplet/wrapper/gin"
 
 	"github.com/apisix/manager-api/internal/core/entity"
 	"github.com/apisix/manager-api/internal/core/store"
 	"github.com/apisix/manager-api/internal/handler"
-	"github.com/apisix/manager-api/internal/utils"
 )
 
 type Handler struct {
@@ -49,12 +45,14 @@ func (h *Handler) ApplyRoute(r *gin.Engine) {
 		wrapper.InputType(reflect.TypeOf(GetInput{}))))
 	r.GET("/apisix/admin/consumers", wgin.Wraps(h.List,
 		wrapper.InputType(reflect.TypeOf(ListInput{}))))
-	r.PUT("/apisix/admin/consumers/:username", wgin.Wraps(h.Set,
-		wrapper.InputType(reflect.TypeOf(SetInput{}))))
-	r.PUT("/apisix/admin/consumers", wgin.Wraps(h.Set,
-		wrapper.InputType(reflect.TypeOf(SetInput{}))))
+	r.POST("/apisix/admin/consumers", wgin.Wraps(h.Create,
+		wrapper.InputType(reflect.TypeOf(entity.Consumer{}))))
+	r.PUT("/apisix/admin/consumers/:username", wgin.Wraps(h.Update,
+		wrapper.InputType(reflect.TypeOf(UpdateInput{}))))
+	r.PUT("/apisix/admin/consumers", wgin.Wraps(h.Update,
+		wrapper.InputType(reflect.TypeOf(UpdateInput{}))))
 	r.DELETE("/apisix/admin/consumers/:usernames", wgin.Wraps(h.BatchDelete,
-		wrapper.InputType(reflect.TypeOf(BatchDelete{}))))
+		wrapper.InputType(reflect.TypeOf(BatchDeleteInput{}))))
 }
 
 type GetInput struct {
@@ -76,6 +74,40 @@ type ListInput struct {
 	store.Pagination
 }
 
+// swagger:operation GET /apisix/admin/consumers getConsumerList
+//
+// Return the consumer list according to the specified page number and page size, and can search consumers by username.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: page
+//   in: query
+//   description: page number
+//   required: false
+//   type: integer
+// - name: page_size
+//   in: query
+//   description: page size
+//   required: false
+//   type: integer
+// - name: username
+//   in: query
+//   description: username of consumer
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: list response
+//     schema:
+//       type: array
+//       items:
+//         "$ref": "#/definitions/consumer"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*ListInput)
 
@@ -96,49 +128,53 @@ func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	return ret, nil
 }
 
-type SetInput struct {
-	entity.Consumer
+func (h *Handler) Create(c droplet.Context) (interface{}, error) {
+	input := c.Input().(*entity.Consumer)
+	input.ID = input.Username
+
+	ensurePluginsDefValue(input.Plugins)
+	if err := h.consumerStore.Create(c.Context(), input); err != nil {
+		return handler.SpecCodeResponse(err), err
+	}
+
+	return nil, nil
+}
+
+type UpdateInput struct {
 	Username string `auto_read:"username,path"`
+	entity.Consumer
 }
 
-func (h *Handler) Set(c droplet.Context) (interface{}, error) {
-	input := c.Input().(*SetInput)
-	if input.ID != nil && utils.InterfaceToString(input.ID) != input.Username {
-		return &data.SpecCodeResponse{StatusCode: http.StatusBadRequest},
-			fmt.Errorf("consumer's id and username must be a same value")
-	}
+func (h *Handler) Update(c droplet.Context) (interface{}, error) {
+	input := c.Input().(*UpdateInput)
 	if input.Username != "" {
 		input.Consumer.Username = input.Username
 	}
 	input.Consumer.ID = input.Consumer.Username
-
-	if _, ok := input.Consumer.Plugins["jwt-auth"]; ok {
-		jwt := input.Consumer.Plugins["jwt-auth"].(map[string]interface{})
-		jwt["exp"] = 86400
-
-		input.Consumer.Plugins["jwt-auth"] = jwt
-	}
+	ensurePluginsDefValue(input.Plugins)
 
 	if err := h.consumerStore.Update(c.Context(), &input.Consumer, true); err != nil {
-		//if not exists, create
-		if err.Error() == fmt.Sprintf("key: %s is not found", input.Username) {
-			if err := h.consumerStore.Create(c.Context(), &input.Consumer); err != nil {
-				return handler.SpecCodeResponse(err), err
-			}
-		} else {
-			return handler.SpecCodeResponse(err), err
-		}
+		return handler.SpecCodeResponse(err), err
 	}
 
 	return nil, nil
 }
 
-type BatchDelete struct {
+func ensurePluginsDefValue(plugins map[string]interface{}) {
+	if plugins["jwt-auth"] != nil {
+		jwtAuth, ok := plugins["jwt-auth"].(map[string]interface{})
+		if ok && jwtAuth["exp"] == nil {
+			jwtAuth["exp"] = 86400
+		}
+	}
+}
+
+type BatchDeleteInput struct {
 	UserNames string `auto_read:"usernames,path"`
 }
 
 func (h *Handler) BatchDelete(c droplet.Context) (interface{}, error) {
-	input := c.Input().(*BatchDelete)
+	input := c.Input().(*BatchDeleteInput)
 
 	if err := h.consumerStore.BatchDelete(c.Context(), strings.Split(input.UserNames, ",")); err != nil {
 		return handler.SpecCodeResponse(err), err
diff --git a/api/internal/handler/consumer/consumer_test.go b/api/internal/handler/consumer/consumer_test.go
index 185fad8d07..6a8215453a 100644
--- a/api/internal/handler/consumer/consumer_test.go
+++ b/api/internal/handler/consumer/consumer_test.go
@@ -18,232 +18,391 @@
 package consumer
 
 import (
-	"encoding/json"
-
-	"testing"
-	"time"
-
-	"github.com/shiningrush/droplet"
-	"github.com/stretchr/testify/assert"
-
-	"github.com/apisix/manager-api/conf"
+	"context"
+	"fmt"
 	"github.com/apisix/manager-api/internal/core/entity"
-	"github.com/apisix/manager-api/internal/core/storage"
 	"github.com/apisix/manager-api/internal/core/store"
+	"github.com/shiningrush/droplet"
+	"github.com/shiningrush/droplet/data"
+	"github.com/stretchr/testify/assert"
+	"github.com/stretchr/testify/mock"
+	"net/http"
+	"testing"
 )
 
-func TestConsumer(t *testing.T) {
-	// init
-	err := storage.InitETCDClient(conf.ETCDConfig)
-	assert.Nil(t, err)
-	err = store.InitStores()
-	assert.Nil(t, err)
+func TestHandler_Get(t *testing.T) {
+	tests := []struct {
+		caseDesc   string
+		giveInput  *GetInput
+		giveRet    interface{}
+		giveErr    error
+		wantErr    error
+		wantGetKey string
+		wantRet    interface{}
+	}{
+		{
+			caseDesc:   "normal",
+			giveInput:  &GetInput{Username: "test"},
+			wantGetKey: "test",
+			giveRet:    "hello",
+			wantRet:    "hello",
+		},
+		{
+			caseDesc:   "store get failed",
+			giveInput:  &GetInput{Username: "failed key"},
+			wantGetKey: "failed key",
+			giveErr:    fmt.Errorf("get failed"),
+			wantErr:    fmt.Errorf("get failed"),
+			wantRet: &data.SpecCodeResponse{
+				StatusCode: http.StatusInternalServerError,
+			},
+		},
+	}
+
+	for _, tc := range tests {
+		t.Run(tc.caseDesc, func(t *testing.T) {
+			getCalled := true
+			mStore := &store.MockInterface{}
+			mStore.On("Get", mock.Anything).Run(func(args mock.Arguments) {
+				getCalled = true
+				assert.Equal(t, tc.wantGetKey, args.Get(0))
+			}).Return(tc.giveRet, tc.giveErr)
+
+			h := Handler{consumerStore: mStore}
+			ctx := droplet.NewContext()
+			ctx.SetInput(tc.giveInput)
+			ret, err := h.Get(ctx)
+			assert.True(t, getCalled)
+			assert.Equal(t, tc.wantRet, ret)
+			assert.Equal(t, tc.wantErr, err)
+		})
+	}
+}
+
+func TestHandler_List(t *testing.T) {
+	tests := []struct {
+		caseDesc  string
+		giveInput *ListInput
+		giveData  []*entity.Consumer
+		giveErr   error
+		wantErr   error
+		wantInput store.ListInput
+		wantRet   interface{}
+	}{
+		{
+			caseDesc: "list all condition",
+			giveInput: &ListInput{
+				Username: "testUser",
+				Pagination: store.Pagination{
+					PageSize:   10,
+					PageNumber: 10,
+				},
+			},
+			wantInput: store.ListInput{
+				PageSize:   10,
+				PageNumber: 10,
+			},
+			giveData: []*entity.Consumer{
+				{Username: "user1"},
+				{Username: "testUser"},
+				{Username: "iam-testUser"},
+				{Username: "testUser-is-me"},
+			},
+			wantRet: &store.ListOutput{
+				Rows: []interface{}{
+					&entity.Consumer{Username: "testUser"},
+					&entity.Consumer{Username: "iam-testUser"},
+					&entity.Consumer{Username: "testUser-is-me"},
+				},
+				TotalSize: 3,
+			},
+		},
+		{
+			caseDesc: "store list failed",
+			giveInput: &ListInput{
+				Username: "testUser",
+				Pagination: store.Pagination{
+					PageSize:   10,
+					PageNumber: 10,
+				},
+			},
+			wantInput: store.ListInput{
+				PageSize:   10,
+				PageNumber: 10,
+			},
+			giveData: []*entity.Consumer{},
+			giveErr:  fmt.Errorf("list failed"),
+			wantErr:  fmt.Errorf("list failed"),
+		},
+	}
+
+	for _, tc := range tests {
+		t.Run(tc.caseDesc, func(t *testing.T) {
+			getCalled := true
+			mStore := &store.MockInterface{}
+			mStore.On("List", mock.Anything).Run(func(args mock.Arguments) {
+				getCalled = true
+				input := args.Get(0).(store.ListInput)
+				assert.Equal(t, tc.wantInput.PageSize, input.PageSize)
+				assert.Equal(t, tc.wantInput.PageNumber, input.PageNumber)
+			}).Return(func(input store.ListInput) *store.ListOutput {
+				var returnData []interface{}
+				for _, c := range tc.giveData {
+					if input.Predicate(c) {
+						returnData = append(returnData, c)
+					}
+				}
+				return &store.ListOutput{
+					Rows:      returnData,
+					TotalSize: len(returnData),
+				}
+			}, tc.giveErr)
 
-	handler := &Handler{
-		consumerStore: store.GetStore(store.HubKeyConsumer),
+			h := Handler{consumerStore: mStore}
+			ctx := droplet.NewContext()
+			ctx.SetInput(tc.giveInput)
+			ret, err := h.List(ctx)
+			assert.True(t, getCalled)
+			assert.Equal(t, tc.wantRet, ret)
+			assert.Equal(t, tc.wantErr, err)
+		})
 	}
-	assert.NotNil(t, handler)
-
-	//create consumer
-	ctx := droplet.NewContext()
-	consumer := &SetInput{}
-	reqBody := `{
-      "username": "jack",
-      "plugins": {
-          "limit-count": {
-              "count": 2,
-              "time_window": 60,
-              "rejected_code": 503,
-              "key": "remote_addr"
-          }
-      },
-    "desc": "test description"
-  }`
-	err = json.Unmarshal([]byte(reqBody), consumer)
-	assert.Nil(t, err)
-	ctx.SetInput(consumer)
-	_, err = handler.Set(ctx)
-	assert.Nil(t, err)
-
-	//create consumer 2
-	consumer2 := &SetInput{}
-	reqBody = `{
-		"username": "pony",
-		"plugins": {
-		  "limit-count": {
-		      "count": 2,
-		      "time_window": 60,
-		      "rejected_code": 503,
-		      "key": "remote_addr"
-		  }
+}
+
+func TestHandler_Create(t *testing.T) {
+	tests := []struct {
+		caseDesc   string
+		giveInput  *entity.Consumer
+		giveCtx    context.Context
+		giveErr    error
+		wantErr    error
+		wantInput  *entity.Consumer
+		wantRet    interface{}
+		wantCalled bool
+	}{
+		{
+			caseDesc: "normal",
+			giveInput: &entity.Consumer{
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{},
+				},
+			},
+			giveCtx: context.WithValue(context.Background(), "test", "value"),
+			wantInput: &entity.Consumer{
+				BaseInfo: entity.BaseInfo{
+					ID: "name",
+				},
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{
+						"exp": 86400,
+					},
+				},
+			},
+			wantRet:    nil,
+			wantCalled: true,
 		},
-		"desc": "test description"
-	}`
-	err = json.Unmarshal([]byte(reqBody), consumer2)
-	assert.Nil(t, err)
-	ctx.SetInput(consumer2)
-	_, err = handler.Set(ctx)
-	assert.Nil(t, err)
-
-	//sleep
-	time.Sleep(time.Duration(100) * time.Millisecond)
-
-	//get consumer
-	input := &GetInput{}
-	reqBody = `{"username": "jack"}`
-	err = json.Unmarshal([]byte(reqBody), input)
-	assert.Nil(t, err)
-	ctx.SetInput(input)
-	ret, err := handler.Get(ctx)
-	stored := ret.(*entity.Consumer)
-	assert.Nil(t, err)
-	assert.Equal(t, stored.ID, consumer.ID)
-	assert.Equal(t, stored.Username, consumer.Consumer.Username)
-
-	//update consumer
-	consumer3 := &SetInput{}
-	consumer3.Username = "pony"
-	reqBody = `{
-		"username": "pony",
-		"plugins": {
-		  "limit-count": {
-		      "count": 2,
-		      "time_window": 60,
-		      "rejected_code": 503,
-		      "key": "remote_addr"
-		  }
+		{
+			caseDesc: "store create failed",
+			giveInput: &entity.Consumer{
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{
+						"exp": 5000,
+					},
+				},
+			},
+			giveErr: fmt.Errorf("create failed"),
+			wantInput: &entity.Consumer{
+				BaseInfo: entity.BaseInfo{
+					ID: "name",
+				},
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{
+						"exp": 5000,
+					},
+				},
+			},
+			wantErr: fmt.Errorf("create failed"),
+			wantRet: &data.SpecCodeResponse{
+				StatusCode: http.StatusInternalServerError,
+			},
+			wantCalled: true,
 		},
-		"desc": "test description2"
-	}`
-	err = json.Unmarshal([]byte(reqBody), consumer3)
-	assert.Nil(t, err)
-	ctx.SetInput(consumer3)
-	_, err = handler.Set(ctx)
-	assert.Nil(t, err)
-
-	//sleep
-	time.Sleep(time.Duration(100) * time.Millisecond)
-
-	//check update
-	input3 := &GetInput{}
-	reqBody = `{"username": "pony"}`
-	err = json.Unmarshal([]byte(reqBody), input3)
-	assert.Nil(t, err)
-	ctx.SetInput(input3)
-	ret3, err := handler.Get(ctx)
-	stored3 := ret3.(*entity.Consumer)
-	assert.Nil(t, err)
-	assert.Equal(t, stored3.Desc, "test description2") //consumer3.Desc)
-	assert.Equal(t, stored3.Username, consumer3.Username)
-
-	//list page 1
-	listInput := &ListInput{}
-	reqBody = `{"page_size": 1, "page": 1}`
-	err = json.Unmarshal([]byte(reqBody), listInput)
-	assert.Nil(t, err)
-	ctx.SetInput(listInput)
-	retPage1, err := handler.List(ctx)
-	assert.Nil(t, err)
-	dataPage1 := retPage1.(*store.ListOutput)
-	assert.Equal(t, len(dataPage1.Rows), 1)
-
-	//list page 2
-	listInput2 := &ListInput{}
-	reqBody = `{"page_size": 1, "page": 2}`
-	err = json.Unmarshal([]byte(reqBody), listInput2)
-	assert.Nil(t, err)
-	ctx.SetInput(listInput2)
-	retPage2, err := handler.List(ctx)
-	assert.Nil(t, err)
-	dataPage2 := retPage2.(*store.ListOutput)
-	assert.Equal(t, len(dataPage2.Rows), 1)
-
-	//list search match
-	listInput3 := &ListInput{}
-	reqBody = `{"page_size": 1, "page": 1, "username": "pony"}`
-	err = json.Unmarshal([]byte(reqBody), listInput3)
-	assert.Nil(t, err)
-	ctx.SetInput(listInput3)
-	retPage, err := handler.List(ctx)
-	assert.Nil(t, err)
-	dataPage := retPage.(*store.ListOutput)
-	assert.Equal(t, len(dataPage.Rows), 1)
-
-	//list search not match
-	listInput4 := &ListInput{}
-	reqBody = `{"page_size": 1, "page": 1, "username": "not-exists"}`
-	err = json.Unmarshal([]byte(reqBody), listInput4)
-	assert.Nil(t, err)
-	ctx.SetInput(listInput4)
-	retPage, err = handler.List(ctx)
-	assert.Nil(t, err)
-	dataPage = retPage.(*store.ListOutput)
-	assert.Equal(t, len(dataPage.Rows), 0)
-
-	//delete consumer
-	inputDel := &BatchDelete{}
-	reqBody = `{"usernames": "jack"}`
-	err = json.Unmarshal([]byte(reqBody), inputDel)
-	assert.Nil(t, err)
-	ctx.SetInput(inputDel)
-	_, err = handler.BatchDelete(ctx)
-	assert.Nil(t, err)
-
-	reqBody = `{"usernames": "pony"}`
-	err = json.Unmarshal([]byte(reqBody), inputDel)
-	assert.Nil(t, err)
-	ctx.SetInput(inputDel)
-	_, err = handler.BatchDelete(ctx)
-	assert.Nil(t, err)
-
-	//create consumer fail
-	consumer_fail := &SetInput{}
-	reqBody = `{
-      "plugins": {
-          "limit-count": {
-              "count": 2,
-              "time_window": 60,
-              "rejected_code": 503,
-              "key": "remote_addr"
-          }
-      },
-    "desc": "test description"
-  }`
-	err = json.Unmarshal([]byte(reqBody), consumer_fail)
-	assert.Nil(t, err)
-	ctx.SetInput(consumer_fail)
-	_, err = handler.Set(ctx)
-	assert.NotNil(t, err)
-
-	//create consumer using Update
-	consumer6 := &SetInput{}
-	reqBody = `{
-      "username": "nnn",
-      "plugins": {
-          "limit-count": {
-              "count": 2,
-              "time_window": 60,
-              "rejected_code": 503,
-              "key": "remote_addr"
-          }
-      },
-    "desc": "test description"
-  }`
-	err = json.Unmarshal([]byte(reqBody), consumer6)
-	assert.Nil(t, err)
-	ctx.SetInput(consumer6)
-	_, err = handler.Set(ctx)
-	assert.Nil(t, err)
-
-	//sleep
-	time.Sleep(time.Duration(100) * time.Millisecond)
-
-	//delete consumer
-	reqBody = `{"usernames": "nnn"}`
-	err = json.Unmarshal([]byte(reqBody), inputDel)
-	assert.Nil(t, err)
-	ctx.SetInput(inputDel)
-	_, err = handler.BatchDelete(ctx)
-	assert.Nil(t, err)
+	}
+
+	for _, tc := range tests {
+		t.Run(tc.caseDesc, func(t *testing.T) {
+			methodCalled := true
+			mStore := &store.MockInterface{}
+			mStore.On("Create", mock.Anything, mock.Anything).Run(func(args mock.Arguments) {
+				methodCalled = true
+				assert.Equal(t, tc.giveCtx, args.Get(0))
+				assert.Equal(t, tc.wantInput, args.Get(1))
+			}).Return(tc.giveErr)
+
+			h := Handler{consumerStore: mStore}
+			ctx := droplet.NewContext()
+			ctx.SetInput(tc.giveInput)
+			ctx.SetContext(tc.giveCtx)
+			ret, err := h.Create(ctx)
+			assert.Equal(t, tc.wantCalled, methodCalled)
+			assert.Equal(t, tc.wantRet, ret)
+			assert.Equal(t, tc.wantErr, err)
+		})
+	}
+}
+
+func TestHandler_Update(t *testing.T) {
+	tests := []struct {
+		caseDesc   string
+		giveInput  *UpdateInput
+		giveCtx    context.Context
+		giveErr    error
+		wantErr    error
+		wantInput  *entity.Consumer
+		wantRet    interface{}
+		wantCalled bool
+	}{
+		{
+			caseDesc: "normal",
+			giveInput: &UpdateInput{
+				Username: "name",
+				Consumer: entity.Consumer{
+					Plugins: map[string]interface{}{
+						"jwt-auth": map[string]interface{}{
+							"exp": 500,
+						},
+					},
+				},
+			},
+			giveCtx: context.WithValue(context.Background(), "test", "value"),
+			wantInput: &entity.Consumer{
+				BaseInfo: entity.BaseInfo{
+					ID: "name",
+				},
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{
+						"exp": 500,
+					},
+				},
+			},
+			wantRet:    nil,
+			wantCalled: true,
+		},
+		{
+			caseDesc: "store update failed",
+			giveInput: &UpdateInput{
+				Username: "name",
+				Consumer: entity.Consumer{
+					Plugins: map[string]interface{}{
+						"jwt-auth": map[string]interface{}{},
+					},
+				},
+			},
+			giveErr: fmt.Errorf("create failed"),
+			wantInput: &entity.Consumer{
+				BaseInfo: entity.BaseInfo{
+					ID: "name",
+				},
+				Username: "name",
+				Plugins: map[string]interface{}{
+					"jwt-auth": map[string]interface{}{
+						"exp": 86400,
+					},
+				},
+			},
+			wantErr: fmt.Errorf("create failed"),
+			wantRet: &data.SpecCodeResponse{
+				StatusCode: http.StatusInternalServerError,
+			},
+			wantCalled: true,
+		},
+	}
 
+	for _, tc := range tests {
+		t.Run(tc.caseDesc, func(t *testing.T) {
+			methodCalled := true
+			mStore := &store.MockInterface{}
+			mStore.On("Update", mock.Anything, mock.Anything, mock.Anything).Run(func(args mock.Arguments) {
+				methodCalled = true
+				assert.Equal(t, tc.giveCtx, args.Get(0))
+				assert.Equal(t, tc.wantInput, args.Get(1))
+				assert.True(t, args.Bool(2))
+			}).Return(tc.giveErr)
+
+			h := Handler{consumerStore: mStore}
+			ctx := droplet.NewContext()
+			ctx.SetInput(tc.giveInput)
+			ctx.SetContext(tc.giveCtx)
+			ret, err := h.Update(ctx)
+			assert.Equal(t, tc.wantCalled, methodCalled)
+			assert.Equal(t, tc.wantRet, ret)
+			assert.Equal(t, tc.wantErr, err)
+		})
+	}
+}
+
+func TestHandler_BatchDelete(t *testing.T) {
+	tests := []struct {
+		caseDesc  string
+		giveInput *BatchDeleteInput
+		giveCtx   context.Context
+		giveErr   error
+		wantErr   error
+		wantInput []string
+		wantRet   interface{}
+	}{
+		{
+			caseDesc: "normal",
+			giveInput: &BatchDeleteInput{
+				UserNames: "user1,user2",
+			},
+			giveCtx: context.WithValue(context.Background(), "test", "value"),
+			wantInput: []string{
+				"user1",
+				"user2",
+			},
+		},
+		{
+			caseDesc: "store delete failed",
+			giveInput: &BatchDeleteInput{
+				UserNames: "user1,user2",
+			},
+			giveCtx: context.WithValue(context.Background(), "test", "value"),
+			giveErr: fmt.Errorf("delete failed"),
+			wantInput: []string{
+				"user1",
+				"user2",
+			},
+			wantErr: fmt.Errorf("delete failed"),
+			wantRet: &data.SpecCodeResponse{
+				StatusCode: http.StatusInternalServerError,
+			},
+		},
+	}
+
+	for _, tc := range tests {
+		t.Run(tc.caseDesc, func(t *testing.T) {
+			methodCalled := true
+			mStore := &store.MockInterface{}
+			mStore.On("BatchDelete", mock.Anything, mock.Anything, mock.Anything).Run(func(args mock.Arguments) {
+				methodCalled = true
+				assert.Equal(t, tc.giveCtx, args.Get(0))
+				assert.Equal(t, tc.wantInput, args.Get(1))
+			}).Return(tc.giveErr)
+
+			h := Handler{consumerStore: mStore}
+			ctx := droplet.NewContext()
+			ctx.SetInput(tc.giveInput)
+			ctx.SetContext(tc.giveCtx)
+			ret, err := h.BatchDelete(ctx)
+			assert.True(t, methodCalled)
+			assert.Equal(t, tc.wantErr, err)
+			assert.Equal(t, tc.wantRet, ret)
+		})
+	}
 }
diff --git a/api/internal/handler/handler.go b/api/internal/handler/handler.go
index bfae458247..39256d9f9c 100644
--- a/api/internal/handler/handler.go
+++ b/api/internal/handler/handler.go
@@ -14,6 +14,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+// API doc of Manager API.
+//
+// Manager API directly operates ETCD and provides data management for Apache APISIX, provides APIs for Front-end or other clients.
+//
+// Terms Of Service:
+//     Schemes: http, https
+//     Host: 127.0.0.1
+//     License: Apache License 2.0 http://www.apache.org/licenses/LICENSE-2.0
+//
+//     Consumes:
+//     - application/json
+//     - application/xml
+//
+//     Produces:
+//     - application/json
+//     - application/xml
+//
+// swagger:meta
 package handler
 
 import (
diff --git a/api/internal/handler/route/route.go b/api/internal/handler/route/route.go
index 7d1413dfef..f74a3c6e95 100644
--- a/api/internal/handler/route/route.go
+++ b/api/internal/handler/route/route.go
@@ -24,6 +24,7 @@ import (
 	"os/exec"
 	"reflect"
 	"strings"
+	"time"
 
 	"github.com/gin-gonic/gin"
 	"github.com/shiningrush/droplet"
@@ -56,6 +57,17 @@ func NewHandler() (handler.RouteRegister, error) {
 	}, nil
 }
 
+type ProtocolSupport interface {
+	RequestForwarding(c droplet.Context) (interface{}, error)
+}
+
+var protocolMap map[string]ProtocolSupport
+
+func init() {
+	protocolMap = make(map[string]ProtocolSupport)
+	protocolMap["http"] = &HTTPProtocolSupport{}
+}
+
 func (h *Handler) ApplyRoute(r *gin.Engine) {
 	r.GET("/apisix/admin/routes/:id", wgin.Wraps(h.Get,
 		wrapper.InputType(reflect.TypeOf(GetInput{}))))
@@ -72,12 +84,59 @@ func (h *Handler) ApplyRoute(r *gin.Engine) {
 		wrapper.InputType(reflect.TypeOf(BatchDelete{}))))
 
 	r.GET("/apisix/admin/notexist/routes", consts.ErrorWrapper(Exist))
+
+	r.POST("/apisix/admin/debug-request-forwarding", wgin.Wraps(h.DebugRequestForwarding,
+		wrapper.InputType(reflect.TypeOf(ParamsInput{}))))
 }
 
 type GetInput struct {
 	ID string `auto_read:"id,path" validate:"required"`
 }
 
+// swagger:operation GET /apisix/admin/routes getRouteList
+//
+// Return the route list according to the specified page number and page size, and can search routes by name and uri.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: page
+//   in: query
+//   description: page number
+//   required: false
+//   type: integer
+// - name: page_size
+//   in: query
+//   description: page size
+//   required: false
+//   type: integer
+// - name: name
+//   in: query
+//   description: name of route
+//   required: false
+//   type: string
+// - name: uri
+//   in: query
+//   description: uri of route
+//   required: false
+//   type: string
+// - name: label
+//   in: query
+//   description: label of route
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: list response
+//     schema:
+//       type: array
+//       items:
+//         "$ref": "#/definitions/route"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) Get(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*GetInput)
 
@@ -102,8 +161,9 @@ func (h *Handler) Get(c droplet.Context) (interface{}, error) {
 }
 
 type ListInput struct {
-	Name string `auto_read:"name,query"`
-	URI  string `auto_read:"uri,query"`
+	Name  string `auto_read:"name,query"`
+	URI   string `auto_read:"uri,query"`
+	Label string `auto_read:"label,query"`
 	store.Pagination
 }
 
@@ -122,21 +182,26 @@ func uriContains(obj *entity.Route, uri string) bool {
 
 func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*ListInput)
+	labelMap, err := utils.GenLabelMap(input.Label)
+	if err != nil {
+		return &data.SpecCodeResponse{StatusCode: http.StatusBadRequest},
+			fmt.Errorf("%s: \"%s\"", err.Error(), input.Label)
+	}
 
 	ret, err := h.routeStore.List(store.ListInput{
 		Predicate: func(obj interface{}) bool {
-			if input.Name != "" && input.URI != "" {
-				if strings.Contains(obj.(*entity.Route).Name, input.Name) {
-					return uriContains(obj.(*entity.Route), input.URI)
-				}
+			if input.Name != "" && !strings.Contains(obj.(*entity.Route).Name, input.Name) {
 				return false
 			}
-			if input.Name != "" {
-				return strings.Contains(obj.(*entity.Route).Name, input.Name)
+
+			if input.URI != "" && !uriContains(obj.(*entity.Route), input.URI) {
+				return false
 			}
-			if input.URI != "" {
-				return uriContains(obj.(*entity.Route), input.URI)
+
+			if input.Label != "" && !utils.LabelContains(obj.(*entity.Route).Labels, labelMap) {
+				return false
 			}
+
 			return true
 		},
 		Format: func(obj interface{}) interface{} {
@@ -363,6 +428,33 @@ func toRows(list *store.ListOutput) []store.Row {
 	return rows
 }
 
+// swagger:operation GET /apisix/admin/notexist/routes checkRouteExist
+//
+// Return result of route exists checking by name and exclude id.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: name
+//   in: query
+//   description: name of route
+//   required: false
+//   type: string
+// - name: exclude
+//   in: query
+//   description: id of route that exclude checking
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: route not exists
+//     schema:
+//       "$ref": "#/definitions/ApiError"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func Exist(c *gin.Context) (interface{}, error) {
 	//input := c.Input().(*ExistInput)
 
@@ -397,3 +489,75 @@ func Exist(c *gin.Context) (interface{}, error) {
 
 	return nil, nil
 }
+
+type ParamsInput struct {
+	URL             string              `json:"url,omitempty"`
+	RequestProtocol string              `json:"request_protocol,omitempty"`
+	BodyParams      map[string]string   `json:"body_params,omitempty"`
+	Method          string              `json:"method,omitempty"`
+	HeaderParams    map[string][]string `json:"header_params,omitempty"`
+}
+
+type Result struct {
+	Code    int         `json:"code,omitempty"`
+	Message string      `json:"message,omitempty"`
+	Data    interface{} `json:"data,omitempty"`
+}
+
+func (h *Handler) DebugRequestForwarding(c droplet.Context) (interface{}, error) {
+	//TODO: other Protocols, e.g: grpc, websocket
+	paramsInput := c.Input().(*ParamsInput)
+	requestProtocol := paramsInput.RequestProtocol
+	if requestProtocol == "" {
+		requestProtocol = "http"
+	}
+	if v, ok := protocolMap[requestProtocol]; ok {
+		return v.RequestForwarding(c)
+	} else {
+		return &data.SpecCodeResponse{StatusCode: http.StatusBadRequest}, fmt.Errorf("protocol unspported %s", paramsInput.RequestProtocol)
+	}
+}
+
+type HTTPProtocolSupport struct {
+}
+
+func (h *HTTPProtocolSupport) RequestForwarding(c droplet.Context) (interface{}, error) {
+	paramsInput := c.Input().(*ParamsInput)
+	bodyParams, _ := json.Marshal(paramsInput.BodyParams)
+	client := &http.Client{}
+
+	client.Timeout = 5 * time.Second
+	req, err := http.NewRequest(strings.ToUpper(paramsInput.Method), paramsInput.URL, strings.NewReader(string(bodyParams)))
+	if err != nil {
+		return &data.SpecCodeResponse{StatusCode: http.StatusInternalServerError}, err
+	}
+	for k, v := range paramsInput.HeaderParams {
+		for _, v1 := range v {
+			req.Header.Add(k, v1)
+		}
+	}
+	resp, err := client.Do(req)
+	if err != nil {
+		return &data.SpecCodeResponse{StatusCode: http.StatusInternalServerError}, err
+	}
+	defer resp.Body.Close()
+
+	body, err := ioutil.ReadAll(resp.Body)
+	if err != nil {
+		return &data.SpecCodeResponse{StatusCode: http.StatusInternalServerError}, err
+	}
+	returnData := make(map[string]interface{})
+	result := &Result{}
+	err = json.Unmarshal(body, &returnData)
+	if err != nil {
+		result.Code = resp.StatusCode
+		result.Message = resp.Status
+		result.Data = string(body)
+	} else {
+		result.Code = resp.StatusCode
+		result.Message = resp.Status
+		result.Data = returnData
+
+	}
+	return result, nil
+}
diff --git a/api/internal/handler/route/route_test.go b/api/internal/handler/route/route_test.go
index bb906f4870..39214b9796 100644
--- a/api/internal/handler/route/route_test.go
+++ b/api/internal/handler/route/route_test.go
@@ -415,6 +415,10 @@ func TestRoute(t *testing.T) {
 	  "hosts": ["foo.com", "*.bar.com"],
 	  "remote_addrs": ["127.0.0.0/8"],
 	  "methods": ["PUT", "GET"],
+	  "labels": {
+	      "l1": "v1",
+	      "l2": "v2"
+      },
 	  "upstream": {
 	      "type": "roundrobin",
 	      "nodes": [{
@@ -765,38 +769,115 @@ func TestRoute(t *testing.T) {
 	assert.Equal(t, len(dataPage.Rows), 1)
 
 	//list search match
-	listInput2 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 1, "page": 1, "name": "a", "uri": "index"}`
-	err = json.Unmarshal([]byte(reqBody), listInput2)
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput2)
+	ctx.SetInput(listInput)
 	retPage, err = handler.List(ctx)
 	assert.Nil(t, err)
 	dataPage = retPage.(*store.ListOutput)
 	assert.Equal(t, len(dataPage.Rows), 1)
 
 	//list search name not match
-	listInput3 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 1, "page": 1, "name": "not-exists", "uri": "index"}`
-	err = json.Unmarshal([]byte(reqBody), listInput3)
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput3)
+	ctx.SetInput(listInput)
 	retPage, err = handler.List(ctx)
 	assert.Nil(t, err)
 	dataPage = retPage.(*store.ListOutput)
 	assert.Equal(t, len(dataPage.Rows), 0)
 
 	//list search uri not match
-	listInput4 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 1, "page": 1, "name": "a", "uri": "not-exists"}`
-	err = json.Unmarshal([]byte(reqBody), listInput4)
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 0)
+
+	//list search label not match
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "label":"l3"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 0)
+
+	//list search label match
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "label":"l1"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 1)
+
+	//list search label match
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "label":"l1:v1"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 1)
+
+	//list search and label not match
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "label":"l1:v2"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput4)
+	ctx.SetInput(listInput)
 	retPage, err = handler.List(ctx)
 	assert.Nil(t, err)
 	dataPage = retPage.(*store.ListOutput)
 	assert.Equal(t, len(dataPage.Rows), 0)
 
+	//list search with name and label
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "name": "a", "label":"l1:v1"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 1)
+
+	//list search with uri and label
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "uri": "index", "label":"l1:v1"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 1)
+
+	//list search with uri,name and label
+	listInput = &ListInput{}
+	reqBody = `{"page_size": 1, "page": 1, "name": "a", "uri": "index", "label":"l1:v1"}`
+	err = json.Unmarshal([]byte(reqBody), listInput)
+	assert.Nil(t, err)
+	ctx.SetInput(listInput)
+	retPage, err = handler.List(ctx)
+	assert.Nil(t, err)
+	dataPage = retPage.(*store.ListOutput)
+	assert.Equal(t, len(dataPage.Rows), 1)
+
 	//create route using uris
 	route3 := &entity.Route{}
 	reqBody = `{
@@ -821,11 +902,11 @@ func TestRoute(t *testing.T) {
 	time.Sleep(time.Duration(100) * time.Millisecond)
 
 	//list search match uris
-	listInput5 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 1, "page": 1, "name": "bbb", "uri": "bb"}`
-	err = json.Unmarshal([]byte(reqBody), listInput5)
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput5)
+	ctx.SetInput(listInput)
 	retPage, err = handler.List(ctx)
 	assert.Nil(t, err)
 	dataPage = retPage.(*store.ListOutput)
@@ -959,20 +1040,20 @@ func TestRoute(t *testing.T) {
 	assert.Equal(t, "11", stored.ID)
 
 	//list
-	listInput11 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 10, "page": 1}`
-	err = json.Unmarshal([]byte(reqBody), listInput11)
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput11)
+	ctx.SetInput(listInput)
 	_, err = handler.List(ctx)
 	assert.Nil(t, err)
 
 	//list search match
-	listInput12 := &ListInput{}
+	listInput = &ListInput{}
 	reqBody = `{"page_size": 1, "page": 1,  "uri": "r11"}`
-	err = json.Unmarshal([]byte(reqBody), listInput12)
+	err = json.Unmarshal([]byte(reqBody), listInput)
 	assert.Nil(t, err)
-	ctx.SetInput(listInput12)
+	ctx.SetInput(listInput)
 	retPage, err = handler.List(ctx)
 	assert.Nil(t, err)
 	dataPage = retPage.(*store.ListOutput)
diff --git a/api/internal/handler/service/service.go b/api/internal/handler/service/service.go
index 94fa7f2fb3..1adb0a493d 100644
--- a/api/internal/handler/service/service.go
+++ b/api/internal/handler/service/service.go
@@ -89,6 +89,40 @@ type ListInput struct {
 	store.Pagination
 }
 
+// swagger:operation GET /apisix/admin/services getServiceList
+//
+// Return the service list according to the specified page number and page size, and can search services by name.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: page
+//   in: query
+//   description: page number
+//   required: false
+//   type: integer
+// - name: page_size
+//   in: query
+//   description: page size
+//   required: false
+//   type: integer
+// - name: name
+//   in: query
+//   description: name of service
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: list response
+//     schema:
+//       type: array
+//       items:
+//         "$ref": "#/definitions/service"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*ListInput)
 
diff --git a/api/internal/handler/ssl/ssl.go b/api/internal/handler/ssl/ssl.go
index 08ed05b176..19009954f8 100644
--- a/api/internal/handler/ssl/ssl.go
+++ b/api/internal/handler/ssl/ssl.go
@@ -27,7 +27,6 @@ import (
 	"reflect"
 	"strings"
 
-	"github.com/api7/go-jsonpatch"
 	"github.com/gin-gonic/gin"
 	"github.com/shiningrush/droplet"
 	"github.com/shiningrush/droplet/data"
@@ -38,6 +37,7 @@ import (
 	"github.com/apisix/manager-api/internal/core/entity"
 	"github.com/apisix/manager-api/internal/core/store"
 	"github.com/apisix/manager-api/internal/handler"
+	"github.com/apisix/manager-api/internal/utils"
 	"github.com/apisix/manager-api/internal/utils/consts"
 )
 
@@ -62,13 +62,14 @@ func (h *Handler) ApplyRoute(r *gin.Engine) {
 		wrapper.InputType(reflect.TypeOf(UpdateInput{}))))
 	r.PUT("/apisix/admin/ssl/:id", wgin.Wraps(h.Update,
 		wrapper.InputType(reflect.TypeOf(UpdateInput{}))))
-	r.PATCH("/apisix/admin/ssl/:id", wgin.Wraps(h.Patch,
-		wrapper.InputType(reflect.TypeOf(UpdateInput{}))))
 	r.DELETE("/apisix/admin/ssl/:ids", wgin.Wraps(h.BatchDelete,
 		wrapper.InputType(reflect.TypeOf(BatchDelete{}))))
 	r.POST("/apisix/admin/check_ssl_cert", wgin.Wraps(h.Validate,
 		wrapper.InputType(reflect.TypeOf(entity.SSL{}))))
 
+	r.PATCH("/apisix/admin/ssl/:id", consts.ErrorWrapper(Patch))
+	r.PATCH("/apisix/admin/ssl/:id/*path", consts.ErrorWrapper(Patch))
+
 	r.POST("/apisix/admin/check_ssl_exists", consts.ErrorWrapper(Exist))
 }
 
@@ -97,6 +98,40 @@ type ListInput struct {
 	store.Pagination
 }
 
+// swagger:operation GET /apisix/admin/ssl getSSLList
+//
+// Return the SSL list according to the specified page number and page size, and can SSLs search by sni.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: page
+//   in: query
+//   description: page number
+//   required: false
+//   type: integer
+// - name: page_size
+//   in: query
+//   description: page size
+//   required: false
+//   type: integer
+// - name: sni
+//   in: query
+//   description: sni of SSL
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: list response
+//     schema:
+//       type: array
+//       items:
+//         "$ref": "#/definitions/ssl"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*ListInput)
 
@@ -182,40 +217,29 @@ func (h *Handler) Update(c droplet.Context) (interface{}, error) {
 	return nil, nil
 }
 
-func (h *Handler) Patch(c droplet.Context) (interface{}, error) {
-	input := c.Input().(*UpdateInput)
-	arr := strings.Split(input.ID, "/")
-	var subPath string
-	if len(arr) > 1 {
-		input.ID = arr[0]
-		subPath = arr[1]
-	}
+func Patch(c *gin.Context) (interface{}, error) {
+	reqBody, _ := c.GetRawData()
+	ID := c.Param("id")
+	subPath := c.Param("path")
 
-	stored, err := h.sslStore.Get(input.ID)
+	sslStore := store.GetStore(store.HubKeySsl)
+	stored, err := sslStore.Get(ID)
 	if err != nil {
 		return handler.SpecCodeResponse(err), err
 	}
 
-	var patch jsonpatch.Patch
-	if subPath != "" {
-		patch = jsonpatch.Patch{
-			Operations: []jsonpatch.PatchOperation{
-				{Op: jsonpatch.Replace, Path: subPath, Value: c.Input()},
-			},
-		}
-	} else {
-		patch, err = jsonpatch.MakePatch(stored, input.SSL)
-		if err != nil {
-			return handler.SpecCodeResponse(err), err
-		}
+	res, err := utils.MergePatch(stored, subPath, reqBody)
+	if err != nil {
+		return handler.SpecCodeResponse(err), err
 	}
 
-	err = patch.Apply(&stored)
+	var ssl entity.SSL
+	err = json.Unmarshal(res, &ssl)
 	if err != nil {
 		return handler.SpecCodeResponse(err), err
 	}
 
-	if err := h.sslStore.Update(c.Context(), &stored, false); err != nil {
+	if err := sslStore.Update(c, &ssl, false); err != nil {
 		return handler.SpecCodeResponse(err), err
 	}
 
@@ -299,6 +323,33 @@ func ParseCert(crt, key string) (*entity.SSL, error) {
 	return &ssl, nil
 }
 
+// swagger:operation POST /apisix/admin/check_ssl_cert checkSSL
+//
+// verify SSL cert and key.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: cert
+//   in: body
+//   description: cert of SSL
+//   required: true
+//   type: string
+// - name: key
+//   in: body
+//   description: key of SSL
+//   required: true
+//   type: string
+// responses:
+//   '0':
+//     description: SSL verify passed
+//     schema:
+//       "$ref": "#/definitions/ApiError"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) Validate(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*entity.SSL)
 	ssl, err := ParseCert(input.Cert, input.Key)
@@ -354,6 +405,33 @@ func checkSniExists(rows []store.Row, sni string) bool {
 	return false
 }
 
+// swagger:operation POST /apisix/admin/check_ssl_exists checkSSLExist
+//
+// Check whether the SSL exists.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: cert
+//   in: body
+//   description: cert of SSL
+//   required: true
+//   type: string
+// - name: key
+//   in: body
+//   description: key of SSL
+//   required: true
+//   type: string
+// responses:
+//   '0':
+//     description: SSL exists
+//     schema:
+//       "$ref": "#/definitions/ApiError"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func Exist(c *gin.Context) (interface{}, error) {
 	//input := c.Input().(*ExistInput)
 	//temporary
diff --git a/api/internal/handler/upstream/upstream.go b/api/internal/handler/upstream/upstream.go
index 7873eef937..672906e5b4 100644
--- a/api/internal/handler/upstream/upstream.go
+++ b/api/internal/handler/upstream/upstream.go
@@ -85,6 +85,40 @@ type ListInput struct {
 	store.Pagination
 }
 
+// swagger:operation GET /apisix/admin/upstreams getUpstreamList
+//
+// Return the upstream list according to the specified page number and page size, and can search upstreams by name.
+//
+// ---
+// produces:
+// - application/json
+// parameters:
+// - name: page
+//   in: query
+//   description: page number
+//   required: false
+//   type: integer
+// - name: page_size
+//   in: query
+//   description: page size
+//   required: false
+//   type: integer
+// - name: name
+//   in: query
+//   description: name of upstream
+//   required: false
+//   type: string
+// responses:
+//   '0':
+//     description: list response
+//     schema:
+//       type: array
+//       items:
+//         "$ref": "#/definitions/upstream"
+//   default:
+//     description: unexpected error
+//     schema:
+//       "$ref": "#/definitions/ApiError"
 func (h *Handler) List(c droplet.Context) (interface{}, error) {
 	input := c.Input().(*ListInput)
 
diff --git a/api/internal/route.go b/api/internal/route.go
index 83a3e7282c..4b3d5764dc 100644
--- a/api/internal/route.go
+++ b/api/internal/route.go
@@ -18,6 +18,8 @@ package internal
 
 import (
 	"fmt"
+	"path/filepath"
+
 	"github.com/gin-contrib/pprof"
 	"github.com/gin-contrib/sessions"
 	"github.com/gin-contrib/sessions/cookie"
@@ -48,10 +50,10 @@ func SetUpRouter() *gin.Engine {
 	logger := log.GetLogger(log.AccessLog)
 	store := cookie.NewStore([]byte("secret"))
 	r.Use(sessions.Sessions("session", store))
-	r.Use(filter.CORS(), filter.RequestId(), filter.RequestLogHandler(logger), filter.Authentication(), filter.RecoverHandler())
-	r.Use(static.Serve("/", static.LocalFile(conf.WebDir, false)))
+	r.Use(filter.CORS(), filter.RequestId(), filter.RequestLogHandler(logger), filter.SchemaCheck(), filter.Authentication(), filter.RecoverHandler())
+	r.Use(static.Serve("/", static.LocalFile(filepath.Join(conf.WorkDir, conf.WebDir), false)))
 	r.NoRoute(func(c *gin.Context) {
-		c.File(fmt.Sprintf("%s/index.html", conf.WebDir))
+		c.File(fmt.Sprintf("%s/index.html", filepath.Join(conf.WorkDir, conf.WebDir)))
 	})
 
 	factories := []handler.RegisterFactory{
diff --git a/api/internal/utils/consts/api_error.go b/api/internal/utils/consts/api_error.go
index 99844b8d8e..608ad0ef05 100644
--- a/api/internal/utils/consts/api_error.go
+++ b/api/internal/utils/consts/api_error.go
@@ -35,9 +35,12 @@ func ErrorWrapper(handle WrapperHandle) gin.HandlerFunc {
 	}
 }
 
+// swagger:model ApiError
 type ApiError struct {
-	Status  int    `json:"-"`
-	Code    int    `json:"code"`
+	Status int `json:"-"`
+	// response code
+	Code int `json:"code"`
+	// response message
 	Message string `json:"message"`
 }
 
@@ -46,7 +49,7 @@ func (err ApiError) Error() string {
 }
 
 func InvalidParam(message string) *ApiError {
-	return &ApiError{400, 400, message}
+	return &ApiError{400, 10000, message}
 }
 
 func SystemError(message string) *ApiError {
diff --git a/api/internal/utils/consts/error.go b/api/internal/utils/consts/error.go
index 09f49127e3..eb0206c719 100644
--- a/api/internal/utils/consts/error.go
+++ b/api/internal/utils/consts/error.go
@@ -19,10 +19,11 @@ package consts
 import "github.com/shiningrush/droplet/data"
 
 const (
-	ErrCodeDemoBiz = 20000
+	ErrBadRequest = 20001
 )
 
 var (
 	// base error please refer to github.com/shiningrush/droplet/data, such as data.ErrNotFound, data.ErrConflicted
-	ErrDemoBiz = data.BaseError{Code: ErrCodeDemoBiz, Message: "this is just a demo error"}
+	ErrInvalidRequest       = data.BaseError{Code: ErrBadRequest, Message: "invalid request"}
+	ErrSchemaValidateFailed = data.BaseError{Code: ErrBadRequest, Message: "JSONSchema validate failed"}
 )
diff --git a/api/internal/utils/json_patch.go b/api/internal/utils/json_patch.go
new file mode 100644
index 0000000000..d6bcd1d285
--- /dev/null
+++ b/api/internal/utils/json_patch.go
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package utils
+
+import (
+	"encoding/json"
+	jsonpatch "github.com/evanphx/json-patch/v5"
+)
+
+func MergeJson(doc, patch []byte) ([]byte, error) {
+	out, err := jsonpatch.MergePatch(doc, patch)
+
+	if err != nil {
+		return nil, err
+	}
+	return out, nil
+}
+
+func PatchJson(doc []byte, path, val string) ([]byte, error) {
+	patch := []byte(`[ { "op": "replace", "path": "` + path + `", "value": ` + val + `}]`)
+	obj, err := jsonpatch.DecodePatch(patch)
+	if err != nil {
+		return nil, err
+	}
+
+	out, err := obj.Apply(doc)
+
+	if err != nil {
+		// try to add if field not exist
+		patch = []byte(`[ { "op": "add", "path": "` + path + `", "value": ` + val + `}]`)
+		obj, err = jsonpatch.DecodePatch(patch)
+		if err != nil {
+			return nil, err
+		}
+		out, err = obj.Apply(doc)
+		if err != nil {
+			return nil, err
+		}
+	}
+
+	return out, nil
+}
+
+func MergePatch(obj interface{}, subPath string, reqBody []byte) ([]byte, error) {
+	var res []byte
+	jsonBytes, err := json.Marshal(obj)
+	if err != nil {
+		return res, err
+	}
+
+	if subPath != "" {
+		res, err = PatchJson(jsonBytes, subPath, string(reqBody))
+	} else {
+		res, err = MergeJson(jsonBytes, reqBody)
+	}
+
+	if err != nil {
+		return res, err
+	}
+	return res, nil
+}
diff --git a/api/internal/utils/json_patch_test.go b/api/internal/utils/json_patch_test.go
new file mode 100644
index 0000000000..8dd25404e1
--- /dev/null
+++ b/api/internal/utils/json_patch_test.go
@@ -0,0 +1,211 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package utils
+
+import (
+	"bytes"
+	"encoding/json"
+	"reflect"
+	"testing"
+)
+
+func compareJSON(a, b string) bool {
+	var objA, objB interface{}
+	json.Unmarshal([]byte(a), &objA)
+	json.Unmarshal([]byte(b), &objB)
+
+	return reflect.DeepEqual(objA, objB)
+}
+
+func formatJSON(j string) string {
+	buf := new(bytes.Buffer)
+
+	json.Indent(buf, []byte(j), "", "  ")
+
+	return buf.String()
+}
+
+func TestMergeJson(t *testing.T) {
+	cases := []struct {
+		doc, patch, result, desc string
+	}{
+		{
+			desc: "simple merge",
+			doc: `{
+                                "id": "1",
+                                "status": 1,
+                                "key": "fake key",
+                                "cert": "fake cert",
+                                "create_time": 1,
+                                "update_time": 2
+                        }`,
+			patch: `{
+                                "id": "1",
+                                "status": 0,
+                                "key": "fake key1",
+                                "cert": "fake cert1"
+                        }`,
+			result: `{
+                                "id": "1",
+                                "status": 0,
+                                "key": "fake key1",
+                                "cert": "fake cert1",
+                                "create_time": 1,
+                                "update_time": 2
+                        }`,
+		},
+		{
+			desc: `array merge`,
+			doc: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.215",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+			patch: `{
+                                "upstream": {
+                                        "nodes": [{
+                                                "host": "39.97.63.216",
+                                                "port": 80,
+                                                "weight" : 1
+                                        },{
+                                                "host": "39.97.63.217",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+			result: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.216",
+                                                "port": 80,
+                                                "weight" : 1
+                                        },{
+                                                "host": "39.97.63.217",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+		},
+	}
+	for _, c := range cases {
+		out, err := MergeJson([]byte(c.doc), []byte(c.patch))
+
+		if err != nil {
+			t.Errorf("Unable to merge patch: %s", err)
+		}
+
+		if !compareJSON(string(out), c.result) {
+			t.Errorf("Merge failed. Expected:\n%s\n\nActual:\n%s",
+				formatJSON(c.result), formatJSON(string(out)))
+		}
+	}
+}
+
+func TestPatchJson(t *testing.T) {
+	cases := []struct {
+		doc, path, value, result, desc string
+	}{
+		{
+			desc: "patch array",
+			doc: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.215",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+			path: `/upstream/nodes`,
+			value: `[{
+                                        "host": "39.97.63.216",
+                                        "port": 80,
+                                        "weight" : 1
+                                },{
+                                        "host": "39.97.63.217",
+                                        "port": 80,
+                                        "weight" : 1
+                                }]`,
+			result: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.216",
+                                                "port": 80,
+                                                "weight" : 1
+                                        },{
+                                                "host": "39.97.63.217",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+		},
+		{
+			desc: "patch field that non existent",
+			doc: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.215",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }]
+                                }
+                        }`,
+			path:  `/upstream/labels`,
+			value: `{"app": "test"}`,
+			result: `{
+                                "uri": "/index.html",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "39.97.63.215",
+                                                "port": 80,
+                                                "weight" : 1
+                                        }],
+                                        "labels": {"app": "test"}
+                                }
+                        }`,
+		},
+	}
+	for _, c := range cases {
+		out, err := PatchJson([]byte(c.doc), c.path, c.value)
+		if err != nil {
+			t.Errorf("Unable to patch: %s", err)
+		}
+
+		if !compareJSON(string(out), c.result) {
+			t.Errorf("Patch failed. Expected:\n%s\n\nActual:\n%s",
+				formatJSON(c.result), formatJSON(string(out)))
+		}
+	}
+}
diff --git a/api/internal/utils/utils.go b/api/internal/utils/utils.go
index 3d2cc88348..ad477925af 100644
--- a/api/internal/utils/utils.go
+++ b/api/internal/utils/utils.go
@@ -17,10 +17,12 @@
 package utils
 
 import (
+	"errors"
 	"fmt"
 	"net"
 	"os"
 	"strconv"
+	"strings"
 
 	"github.com/sony/sonyflake"
 )
@@ -94,3 +96,49 @@ func InterfaceToString(val interface{}) string {
 	str := fmt.Sprintf("%v", val)
 	return str
 }
+
+func GenLabelMap(label string) (map[string]string, error) {
+	var err = errors.New("malformed label")
+	mp := make(map[string]string)
+
+	if label == "" {
+		return mp, nil
+	}
+
+	labels := strings.Split(label, ",")
+	for _, l := range labels {
+		kv := strings.Split(l, ":")
+		if len(kv) == 2 {
+			if kv[0] == "" || kv[1] == "" {
+				return nil, err
+			}
+
+			mp[kv[0]] = kv[1]
+		} else if len(kv) == 1 {
+			if kv[0] == "" {
+				return nil, err
+			}
+
+			mp[kv[0]] = ""
+		} else {
+			return nil, err
+		}
+	}
+
+	return mp, nil
+}
+
+func LabelContains(labels, reqLabels map[string]string) bool {
+	if len(reqLabels) == 0 {
+		return true
+	}
+
+	for k, v := range labels {
+		l, exist := reqLabels[k]
+		if exist && ((l == "") || v == l) {
+			return true
+		}
+	}
+
+	return false
+}
diff --git a/api/internal/utils/utils_test.go b/api/internal/utils/utils_test.go
index 5c8e718023..0d8427de61 100644
--- a/api/internal/utils/utils_test.go
+++ b/api/internal/utils/utils_test.go
@@ -17,6 +17,7 @@
 package utils
 
 import (
+	"errors"
 	"testing"
 
 	"github.com/stretchr/testify/assert"
@@ -42,3 +43,42 @@ func TestSumIPs_with_nil(t *testing.T) {
 	total := sumIPs(nil)
 	assert.Equal(t, uint16(0), total)
 }
+
+func TestGenLabelMap(t *testing.T) {
+	expectedErr := errors.New("malformed label")
+	mp, err := GenLabelMap("l1")
+	assert.Nil(t, err)
+	assert.Equal(t, mp["l1"], "")
+
+	mp, err = GenLabelMap("l1,l2:v2")
+	assert.Nil(t, err)
+	assert.Equal(t, mp["l1"], "")
+	assert.Equal(t, mp["l2"], "v2")
+
+	mp, err = GenLabelMap(",")
+	assert.Equal(t, expectedErr, err)
+	assert.Nil(t, mp)
+
+	mp, err = GenLabelMap(",l2:,")
+	assert.Equal(t, expectedErr, err)
+	assert.Nil(t, mp)
+}
+
+func TestLabelContains(t *testing.T) {
+	mp1, _ := GenLabelMap("l1,l2:v2")
+	mp2 := map[string]string{
+		"l1": "v1",
+	}
+	assert.True(t, LabelContains(mp2, mp1))
+
+	mp3 := map[string]string{
+		"l1": "v1",
+		"l2": "v3",
+	}
+	assert.True(t, LabelContains(mp3, mp1))
+
+	mp4 := map[string]string{
+		"l2": "v3",
+	}
+	assert.False(t, LabelContains(mp4, mp1))
+}
diff --git a/api/log/zap.go b/api/log/zap.go
index 66379d84f6..cd36b5323e 100644
--- a/api/log/zap.go
+++ b/api/log/zap.go
@@ -27,10 +27,13 @@ import (
 
 var logger *zap.SugaredLogger
 
+// TODO: it is just for integration tests, we should call "InitLog" explicitly when remove all handler's integration tests
 func init() {
+	InitLogger()
+}
+func InitLogger() {
 	logger = GetLogger(ErrorLog)
 }
-
 func GetLogger(logType Type) *zap.SugaredLogger {
 	writeSyncer := fileWriter(logType)
 	encoder := getEncoder(logType)
diff --git a/api/test/docker-deploy/docker-compose.yaml b/api/test/docker-deploy/docker-compose.yaml
index 57df46269b..8f7e8000f0 100644
--- a/api/test/docker-deploy/docker-compose.yaml
+++ b/api/test/docker-deploy/docker-compose.yaml
@@ -44,7 +44,7 @@ services:
       - http://0.0.0.0:2379
 
   managerapi:
-    image: dashboard:ci   
+    image: dashboard:ci
     restart: always
     volumes:
       - ../../conf/conf.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
@@ -62,5 +62,5 @@ networks:
     ipam:
       driver: default
       config:
-      -
-        subnet: 172.16.238.0/24
+        -
+          subnet: 172.16.238.0/24
diff --git a/api/test/docker/apisix_config.yaml b/api/test/docker/apisix_config.yaml
index 540cacd23f..4758397686 100644
--- a/api/test/docker/apisix_config.yaml
+++ b/api/test/docker/apisix_config.yaml
@@ -18,26 +18,26 @@
 # in this file. For example if you want to specify the etcd address:
 #
 etcd:
-    host:
-      - "http://172.16.238.10:2379"
-      - "http://172.16.238.11:2379"
-      - "http://172.16.238.12:2379"
+  host:
+    - "http://172.16.238.10:2379"
+    - "http://172.16.238.11:2379"
+    - "http://172.16.238.12:2379"
 
 apisix:
   admin_key:
     -
-      name: "admin"
-      key: edd1c9f034335f136f87ad84b625c8f1 # using fixed API token has security risk, please
-                                            # update it when you deploy to production environment
-      role: admin
+      name: "admin"                          # yamllint disable rule:comments-indentation
+      key: edd1c9f034335f136f87ad84b625c8f1  # using fixed API token has security risk, please
+                                             # update it when you deploy to production environment
+      role: admin                            # yamllint enable rule:comments-indentation
 
-  allow_admin:                  # http://nginx.org/en/docs/http/ngx_http_access_module.html#allow
+  allow_admin:               # http://nginx.org/en/docs/http/ngx_http_access_module.html#allow
     - 0.0.0.0/0              # If we don't set any IP list, then any IP access is allowed by default.
 
   ssl:
-      enable: true
-      ssl_cert: "/usr/local/apisix/certs/apisix.crt"
-      ssl_cert_key: "/usr/local/apisix/certs/apisix.key"
+    enable: true
+    ssl_cert: "/usr/local/apisix/certs/apisix.crt"
+    ssl_cert_key: "/usr/local/apisix/certs/apisix.key"
 
 nginx_config:
   error_log_level: "debug"
diff --git a/api/test/docker/docker-compose.yaml b/api/test/docker/docker-compose.yaml
index 5bdb4f4888..410a078a72 100644
--- a/api/test/docker/docker-compose.yaml
+++ b/api/test/docker/docker-compose.yaml
@@ -113,7 +113,7 @@ services:
     image: johz/upstream:v2.0
     restart: always
     volumes:
-      - ./upstream.conf:/etc/nginx/conf.d/default.conf:ro    
+      - ./upstream.conf:/etc/nginx/conf.d/default.conf:ro
     ports:
       - '80:80/tcp'
       - '1980:1980/tcp'
@@ -167,7 +167,7 @@ services:
       - '9081:9080/tcp'
     networks:
       apisix_dashboard_e2e:
-        ipv4_address: 172.16.238.31 
+        ipv4_address: 172.16.238.31
 
   managerapi:
     build:
@@ -203,5 +203,5 @@ networks:
     ipam:
       driver: default
       config:
-      -
-        subnet: 172.16.238.0/24
+        -
+          subnet: 172.16.238.0/24
diff --git a/api/test/docker/manager-api-conf.yaml b/api/test/docker/manager-api-conf.yaml
index 3e9c9f0ffa..ee1f78398b 100644
--- a/api/test/docker/manager-api-conf.yaml
+++ b/api/test/docker/manager-api-conf.yaml
@@ -26,7 +26,7 @@ conf:
       - 172.16.238.11:2379
       - 172.16.238.12:2379
   log:
-    error_log:
+    error_log:                     # yamllint disable rule:comments-indentation
       level: warn                  # supports levels, lower to higher: debug, info, warn, error, panic, fatal
       file_path: logs/error.log    # supports relative path, absolute path, standard output
                                    # such as: logs/error.log, /tmp/logs/error.log, /dev/stdout, /dev/stderr
@@ -35,9 +35,8 @@ authentication:
                              # *NOTE*: Highly recommended to modify this value to protect `manager api`.
                              # if it's default value, when `manager api` start , it will generate a random string to replace it.
   expire_time: 3600          # jwt token expire time, in second
-  users:
+  users:                     # yamllint enable rule:comments-indentation
     - username: admin        # username and password for login `manager api`
       password: admin
     - username: user
       password: user
-
diff --git a/api/test/docker/upstream.conf b/api/test/docker/upstream.conf
index 9615d5f5b6..ff223b4afb 100644
--- a/api/test/docker/upstream.conf
+++ b/api/test/docker/upstream.conf
@@ -39,7 +39,7 @@ server {
         listen 1982;
         listen 5044;
 
-        
+
         server_tokens off;
 
         location / {
diff --git a/api/test/e2e/base.go b/api/test/e2e/base.go
index 8f4116acb3..99c763d259 100644
--- a/api/test/e2e/base.go
+++ b/api/test/e2e/base.go
@@ -31,6 +31,7 @@ import (
 )
 
 var token string
+var APISIXInternalUrl = "http://172.16.238.30:9080"
 
 func init() {
 	//login to get auth token
diff --git a/api/test/e2e/consumer_test.go b/api/test/e2e/consumer_test.go
index 21d6f455d2..e7ba2316b5 100644
--- a/api/test/e2e/consumer_test.go
+++ b/api/test/e2e/consumer_test.go
@@ -27,185 +27,6 @@ import (
 	"github.com/tidwall/gjson"
 )
 
-func TestConsumer_Create_And_Get(t *testing.T) {
-	tests := []HttpTestCase{
-		{
-			caseDesc:     "check consumer is not exist",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_1",
-			Method:       http.MethodGet,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusNotFound,
-			ExpectBody:   "data not found",
-		},
-		{
-			caseDesc:     "check consumer is not exist",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_2",
-			Method:       http.MethodGet,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusNotFound,
-			ExpectBody:   "data not found",
-		},
-		{
-			caseDesc: "create consumer by POST",
-			Object:   ManagerApiExpect(t),
-			Path:     "/apisix/admin/consumers",
-			Method:   http.MethodPost,
-			Body: `{
-				"username": "consumer_1",
-				"plugins": {
-					"limit-count": {
-					"count": 2,
-					"time_window": 60,
-					"rejected_code": 503,
-					"key": "remote_addr"
-					}
-				},
-				"desc": "test description"
-			}`,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusNotFound,
-			ExpectBody:   "404 page not found",
-		},
-		{
-			caseDesc: "create consumer by PUT",
-			Object:   ManagerApiExpect(t),
-			Path:     "/apisix/admin/consumers",
-			Method:   http.MethodPut,
-			Body: `{
-				"username": "consumer_2",
-				"plugins": {
-					"limit-count": {
-					"count": 2,
-					"time_window": 60,
-					"rejected_code": 503,
-					"key": "remote_addr"
-					}
-				},
-				"desc": "test description"
-			}`,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"code\":0",
-			Sleep:        sleepTime,
-		},
-		{
-			caseDesc:     "get consumer",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_2",
-			Method:       http.MethodGet,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"username\":\"consumer_2\"",
-		},
-		{
-			caseDesc: "create consumer without username",
-			Object:   ManagerApiExpect(t),
-			Path:     "/apisix/admin/consumers",
-			Method:   http.MethodPut,
-			Body: `{
-				"plugins": {
-					"limit-count": {
-					"count": 2,
-					"time_window": 60,
-					"rejected_code": 503,
-					"key": "remote_addr"
-					}
-				},
-				"desc": "test description"
-			}`,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusBadRequest,
-			ExpectBody:   "\"code\":10000",
-		},
-		{
-			caseDesc:     "delete consumer",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_2",
-			Method:       http.MethodDelete,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"code\":0",
-		},
-	}
-
-	for _, tc := range tests {
-		testCaseCheck(tc)
-	}
-}
-
-func TestConsumer_Update_And_Get(t *testing.T) {
-	tests := []HttpTestCase{
-		{
-			caseDesc: "create consumer by PUT",
-			Object:   ManagerApiExpect(t),
-			Path:     "/apisix/admin/consumers",
-			Method:   http.MethodPut,
-			Body: `{
-				"username": "consumer_3",
-				"plugins": {
-					"limit-count": {
-					"count": 2,
-					"time_window": 60,
-					"rejected_code": 503,
-					"key": "remote_addr"
-					}
-				},
-				"desc": "test description"
-			}`,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"code\":0",
-			Sleep:        sleepTime,
-		},
-		{
-			caseDesc: "update consumer by PUT",
-			Object:   ManagerApiExpect(t),
-			Path:     "/apisix/admin/consumers/consumer_3",
-			Method:   http.MethodPut,
-			Body: `{
-				"username": "consumer_3",
-				"plugins": {
-					"limit-count": {
-					"count": 2,
-					"time_window": 60,
-					"rejected_code": 504,
-					"key": "remote_addr"
-					}
-				},
-				"desc": "test description"
-			}`,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"code\":0",
-			Sleep:        sleepTime,
-		},
-		{
-			caseDesc:     "get consumer",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_3",
-			Method:       http.MethodGet,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"rejected_code\":504",
-		},
-		{
-			caseDesc:     "delete consumer",
-			Object:       ManagerApiExpect(t),
-			Path:         "/apisix/admin/consumers/consumer_3",
-			Method:       http.MethodDelete,
-			Headers:      map[string]string{"Authorization": token},
-			ExpectStatus: http.StatusOK,
-			ExpectBody:   "\"code\":0",
-		},
-	}
-
-	for _, tc := range tests {
-		testCaseCheck(tc)
-	}
-}
-
 func TestConsumer_with_key_auth(t *testing.T) {
 	tests := []HttpTestCase{
 		{
diff --git a/api/test/e2e/id_compatible_test.go b/api/test/e2e/id_compatible_test.go
index d9ad70d0dc..ea53c4bd82 100644
--- a/api/test/e2e/id_compatible_test.go
+++ b/api/test/e2e/id_compatible_test.go
@@ -69,7 +69,7 @@ func TestID_Using_Int(t *testing.T) {
 			Path:     "/apisix/admin/services",
 			Body: `{
 				"id": 1,
-				"upstream_id": 1 
+				"upstream_id": 1
 			}`,
 			Headers:      map[string]string{"Authorization": token},
 			ExpectStatus: http.StatusOK,
diff --git a/api/test/e2e/json_schema_validate_test.go b/api/test/e2e/json_schema_validate_test.go
new file mode 100644
index 0000000000..a025b2ec82
--- /dev/null
+++ b/api/test/e2e/json_schema_validate_test.go
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package e2e
+
+import (
+	"net/http"
+	"testing"
+)
+
+func TestSchema_not_exist_field(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc: "config route with non-existent fields",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/routes/r1",
+			Method:   http.MethodPut,
+			Body: `{
+                                "uri": "/hello",
+                                "nonexistent": "test non-existent",
+                                "upstream": {
+                                        "type": "roundrobin",
+                                        "nodes": [{
+                                                "host": "172.16.238.20",
+                                                "port": 1980,
+                                                "weight": 1
+                                        }]
+                                }
+                        }`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusBadRequest,
+			ExpectBody: `{"code":10000,"message":"schema validate failed: (root): Additional property nonexistent is not allowed"}`,
+		},
+		{
+			caseDesc:     "make sure the route create failed",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
diff --git a/api/test/e2e/route_online_debug_test.go b/api/test/e2e/route_online_debug_test.go
new file mode 100644
index 0000000000..4dd88f2a50
--- /dev/null
+++ b/api/test/e2e/route_online_debug_test.go
@@ -0,0 +1,852 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package e2e
+
+import (
+	"io/ioutil"
+	"net/http"
+	"strings"
+	"testing"
+	"time"
+
+	"github.com/stretchr/testify/assert"
+	"github.com/tidwall/gjson"
+)
+
+func TestRoute_Online_Debug_Route_Not_Exist(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "hit route that not exist",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello_",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   "{\"error_msg\":\"404 Route Not Found\"}\n",
+		},
+	}
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+	basepath := "http://127.0.0.1:9000/apisix/admin/debug-request-forwarding"
+	request, _ := http.NewRequest("POST", basepath, strings.NewReader(`{"url": "`+APISIXInternalUrl+`/hello_","method": "GET","request_protocol": "http"}`))
+	request.Header.Add("Authorization", token)
+	resp, err := http.DefaultClient.Do(request)
+	if err != nil {
+		return
+	}
+	defer resp.Body.Close()
+	respBody, _ := ioutil.ReadAll(resp.Body)
+	realBody := gjson.Get(string(respBody), "data")
+	assert.Equal(t, `{"code":404,"message":"404 Not Found","data":{"error_msg":"404 Route Not Found"}}`, realBody.String())
+}
+
+func TestRoute_Online_Debug_Route_With_Query_Params(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "hit route that not exist",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   "{\"error_msg\":\"404 Route Not Found\"}\n",
+		},
+		{
+			caseDesc: "create route with query params",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"vars": [
+					["arg_name","==","aaa"]
+				],
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "online debug route with query params",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello?name=aaa",
+				"request_protocol": "http",
+				"method": "GET"
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Header_Params(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "create route with header params",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"vars": [
+					["http_version","==","v2"]
+				],
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "online debug route with header params",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello",
+				"request_protocol": "http",
+				"method": "GET",
+				"header_params": {
+					"version": ["v2"]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Body_Params(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "create route with method POST",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["POST"],
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "online debug route with body params",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello",
+				"request_protocol": "http",
+				"method": "POST",
+				"body_params": {
+					"name": "test",
+					"desc": "online debug route with body params"
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Basic_Auth(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "create route enable basic-auth plugin",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"plugins": {
+					"basic-auth": {}
+				},
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "make sure the consumer is not created",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusNotFound,
+		},
+		{
+			caseDesc: "create consumer",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/consumers",
+			Method:   http.MethodPost,
+			Body: `{
+				"username": "jack",
+				"plugins": {
+					"basic-auth": {
+						"disable": false,
+						"username": "jack",
+						"password": "123456"
+					}
+				},
+				"desc": "test description"
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "online debug route with username and password",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello",
+				"request_protocol": "http",
+				"method": "GET",
+				"header_params": {
+					"Authorization": ["Basic amFjazoxMjM0NTYKIA=="]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// online debug without basic-auth
+	basepath := "http://127.0.0.1:9000/apisix/admin/debug-request-forwarding"
+	request, _ := http.NewRequest("POST", basepath, strings.NewReader(`{"url": "`+APISIXInternalUrl+`/hello","method": "GET","request_protocol":"http"}`))
+	request.Header.Add("Authorization", token)
+	resp, err := http.DefaultClient.Do(request)
+	if err != nil {
+		return
+	}
+	defer resp.Body.Close()
+	respBody, _ := ioutil.ReadAll(resp.Body)
+	realBody := gjson.Get(string(respBody), "data")
+	assert.Equal(t, `{"code":401,"message":"401 Unauthorized","data":{"message":"Missing authorization in request"}}`, realBody.String())
+
+	// clear test data
+	tests = []HttpTestCase{
+		{
+			caseDesc:     "delete consumer",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify route with the jwt token from just deleted consumer",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			Headers:      map[string]string{"Authorization": "Basic amFjazoxMjM0NTYKIA=="},
+			ExpectStatus: http.StatusUnauthorized,
+			ExpectBody:   `{"message":"Missing related consumer"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Jwt_Auth(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "create route enable jwt-auth plugin",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"plugins": {
+					"jwt-auth": {}
+				},
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "make sure the consumer is not created",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusNotFound,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc: "create consumer",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/consumers",
+			Method:   http.MethodPut,
+			Body: `{
+				"username": "jack",
+				"plugins": {
+					"jwt-auth": {
+						"key": "user-key",
+						"secret": "my-secret-key",
+						"algorithm": "HS256"
+					}
+				},
+				"desc": "test description"
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// sign jwt token
+	body, status, err := httpGet("http://127.0.0.1:9080/apisix/plugin/jwt/sign?key=user-key")
+	assert.Nil(t, err)
+	assert.Equal(t, http.StatusOK, status)
+	jwtToken := string(body)
+
+	time.Sleep(sleepTime)
+
+	tests = []HttpTestCase{
+		{
+			caseDesc: "online debug route with jwt token",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello",
+				"request_protocol": "http",
+				"method": "GET",
+				"header_params": {
+					"Authorization": ["` + jwtToken + `"]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// online debug without jwt-auth
+	basepath := "http://127.0.0.1:9000/apisix/admin/debug-request-forwarding"
+	request, _ := http.NewRequest("POST", basepath, strings.NewReader(`{"url": "`+APISIXInternalUrl+`/hello","method": "GET","request_protocol":"http"}`))
+	request.Header.Add("Authorization", token)
+	resp, err := http.DefaultClient.Do(request)
+	if err != nil {
+		return
+	}
+	defer resp.Body.Close()
+	respBody, _ := ioutil.ReadAll(resp.Body)
+	realBody := gjson.Get(string(respBody), "data")
+	assert.Equal(t, `{"code":401,"message":"401 Unauthorized","data":{"message":"Missing JWT token in request"}}`, realBody.String())
+
+	// clear test data
+	tests = []HttpTestCase{
+		{
+			caseDesc:     "delete consumer",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify route with the jwt token from just deleted consumer",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			Headers:      map[string]string{"Authorization": jwtToken},
+			ExpectStatus: http.StatusUnauthorized,
+			ExpectBody:   `{"message":"Missing related consumer"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Key_Auth(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+		},
+		{
+			caseDesc: "create route enable key-auth plugin",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"plugins": {
+					"key-auth": {}
+				},
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "make sure the consumer is not created",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusNotFound,
+		},
+		{
+			caseDesc: "create consumer",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/consumers",
+			Method:   http.MethodPut,
+			Body: `{
+				"username": "jack",
+				"plugins": {
+					"key-auth": {
+						"key": "user-key"
+					}
+				},
+				"desc": "test description"
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc: "online debug route with apikey",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello",
+				"request_protocol": "http",
+				"method": "GET",
+				"header_params": {
+					"apikey": ["user-key"]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// online debug without key-auth
+	basepath := "http://127.0.0.1:9000/apisix/admin/debug-request-forwarding"
+	request, _ := http.NewRequest("POST", basepath, strings.NewReader(`{"url": "`+APISIXInternalUrl+`/hello","method": "GET","request_protocol": "http"}`))
+	request.Header.Add("Authorization", token)
+	resp, err := http.DefaultClient.Do(request)
+	if err != nil {
+		return
+	}
+	defer resp.Body.Close()
+	respBody, _ := ioutil.ReadAll(resp.Body)
+	realBody := gjson.Get(string(respBody), "data")
+	assert.Equal(t, `{"code":401,"message":"401 Unauthorized","data":{"message":"Missing API key found in request"}}`, realBody.String())
+
+	// clear test data
+	tests = []HttpTestCase{
+		{
+			caseDesc:     "delete consumer",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify route with the jwt token from just deleted consumer",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			Headers:      map[string]string{"apikey": "user-key"},
+			ExpectStatus: http.StatusUnauthorized,
+			ExpectBody:   `{"message":"Missing related consumer"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
+
+func TestRoute_Online_Debug_Route_With_Query_Params_Key_Auth(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc:     "make sure the route is not created ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+		},
+		{
+			caseDesc: "create route enable key-auth plugin",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPut,
+			Path:     "/apisix/admin/routes/r1",
+			Body: `{
+				"uri": "/hello",
+				"methods": ["GET"],
+				"vars": [
+					["arg_name","==","aaa"]
+				],
+				"plugins": {
+					"key-auth": {}
+				},
+				"upstream": {
+					"type": "roundrobin",
+					"nodes": [{
+						"host": "172.16.238.20",
+						"port": 1980,
+						"weight": 1
+					}]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "make sure the consumer is not created",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusNotFound,
+		},
+		{
+			caseDesc: "create consumer",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/consumers",
+			Method:   http.MethodPut,
+			Body: `{
+				"username": "jack",
+				"plugins": {
+					"key-auth": {
+						"key": "user-key"
+					}
+				},
+				"desc": "test description"
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc: "online debug route with apikey",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPost,
+			Path:     "/apisix/admin/debug-request-forwarding",
+			Body: `{
+				"url": "` + APISIXInternalUrl + `/hello?name=aaa",
+				"request_protocol": "http",
+				"method": "GET",
+				"header_params": {
+					"apikey": ["user-key"]
+				}
+			}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// online debug without key-auth
+	basepath := "http://127.0.0.1:9000/apisix/admin/debug-request-forwarding"
+	request, _ := http.NewRequest("POST", basepath, strings.NewReader(`{"url": "`+APISIXInternalUrl+`/hello?name=aaa","method": "GET","request_protocol": "http"}`))
+	request.Header.Add("Authorization", token)
+	resp, err := http.DefaultClient.Do(request)
+	if err != nil {
+		return
+	}
+	defer resp.Body.Close()
+	respBody, _ := ioutil.ReadAll(resp.Body)
+	realBody := gjson.Get(string(respBody), "data")
+	assert.Equal(t, `{"code":401,"message":"401 Unauthorized","data":{"message":"Missing API key found in request"}}`, realBody.String())
+
+	// clear test data
+	tests = []HttpTestCase{
+		{
+			caseDesc:     "delete consumer",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/consumers/jack",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify route with the jwt token from just deleted consumer",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         `/hello`,
+			Query:        "name=aaa",
+			Headers:      map[string]string{"apikey": "user-key"},
+			ExpectStatus: http.StatusUnauthorized,
+			ExpectBody:   `{"message":"Missing related consumer"}`,
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "delete route",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "verify the deleted route ",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			ExpectStatus: http.StatusNotFound,
+			ExpectBody:   `{"error_msg":"404 Route Not Found"}`,
+			Sleep:        sleepTime,
+		},
+	}
+
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
diff --git a/api/test/e2e/route_with_management_fileds_test.go b/api/test/e2e/route_with_management_fileds_test.go
index faa7c998db..59c40fd735 100644
--- a/api/test/e2e/route_with_management_fileds_test.go
+++ b/api/test/e2e/route_with_management_fileds_test.go
@@ -160,7 +160,7 @@ func TestRoute_with_name_desc(t *testing.T) {
 	}
 }
 
-func TestRoute_with_lable(t *testing.T) {
+func TestRoute_with_label(t *testing.T) {
 	tests := []HttpTestCase{
 		{
 			caseDesc: "config route with labels (r1)",
@@ -228,3 +228,138 @@ func TestRoute_with_lable(t *testing.T) {
 		testCaseCheck(tc)
 	}
 }
+
+func TestRoute_search_by_label(t *testing.T) {
+	tests := []HttpTestCase{
+		{
+			caseDesc: "config route with labels (r1)",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/routes/r1",
+			Method:   http.MethodPut,
+			Body: `{
+					"uri": "/hello",
+					"labels": {
+						"build":"16",
+						"env":"production",
+						"version":"v2"
+					},
+					"upstream": {
+						"type": "roundrobin",
+						"nodes": [{
+							"host": "172.16.238.20",
+							"port": 1980,
+							"weight": 1
+						}]
+					}
+				}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc: "config route with labels (r2)",
+			Object:   ManagerApiExpect(t),
+			Path:     "/apisix/admin/routes/r2",
+			Method:   http.MethodPut,
+			Body: `{
+					"uri": "/hello2",
+					"labels": {
+						"build":"17",
+						"env":"dev",
+						"version":"v2",
+						"extra": "test"
+					},
+					"upstream": {
+						"type": "roundrobin",
+						"nodes": [{
+							"host": "172.16.238.20",
+							"port": 1980,
+							"weight": 1
+						}]
+					}
+				}`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "access the route's uri (r1)",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "hello world",
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "verify the route's detail (r1)",
+			Object:       ManagerApiExpect(t),
+			Path:         "/apisix/admin/routes/r1",
+			Method:       http.MethodGet,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "\"labels\":{\"build\":\"16\",\"env\":\"production\",\"version\":\"v2\"",
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "search the route by label",
+			Object:       ManagerApiExpect(t),
+			Path:         "/apisix/admin/routes",
+			Query:        "label=build:16",
+			Method:       http.MethodGet,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "\"labels\":{\"build\":\"16\",\"env\":\"production\",\"version\":\"v2\"",
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "search the route by label (only key)",
+			Object:       ManagerApiExpect(t),
+			Path:         "/apisix/admin/routes",
+			Query:        "label=extra",
+			Method:       http.MethodGet,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "\"labels\":{\"build\":\"17\",\"env\":\"dev\",\"extra\":\"test\",\"version\":\"v2\"",
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "search the route by label (combination)",
+			Object:       ManagerApiExpect(t),
+			Path:         "/apisix/admin/routes",
+			Query:        "label=extra,build:16",
+			Method:       http.MethodGet,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "\"total_size\":2",
+			Sleep:        sleepTime,
+		},
+		{
+			caseDesc:     "delete the route (r1)",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r1",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "delete the route (r2)",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodDelete,
+			Path:         "/apisix/admin/routes/r2",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "access the route after delete it",
+			Object:       APISIXExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello",
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusNotFound,
+			Sleep:        sleepTime,
+		},
+	}
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+}
diff --git a/api/test/e2e/route_with_trace_plugin_test.go b/api/test/e2e/route_with_trace_plugin_test.go
index c51718befa..3092087468 100644
--- a/api/test/e2e/route_with_trace_plugin_test.go
+++ b/api/test/e2e/route_with_trace_plugin_test.go
@@ -43,7 +43,7 @@ func TestRoute_With_Plugin_Skywalking(t *testing.T) {
 				"uri": "/hello",
 				"plugins": {
 					"skywalking": {
-						"sample_ratio": 1 
+						"sample_ratio": 1
 					}
 				},
 				"upstream": {
diff --git a/api/test/e2e/ssl_test.go b/api/test/e2e/ssl_test.go
index 85a332e36b..5290fa3288 100644
--- a/api/test/e2e/ssl_test.go
+++ b/api/test/e2e/ssl_test.go
@@ -112,10 +112,13 @@ func TestSSL_Basic(t *testing.T) {
 			Sleep:        sleepTime,
 		},
 		{
-			caseDesc:     "delete ssl",
-			Object:       ManagerApiExpect(t),
-			Method:       http.MethodDelete,
-			Path:         "/apisix/admin/ssl/1",
+			caseDesc: "disable SSL",
+			Object:   ManagerApiExpect(t),
+			Method:   http.MethodPatch,
+			Path:     "/apisix/admin/ssl/1",
+			Body: `{
+				"status": 0
+			}`,
 			Headers:      map[string]string{"Authorization": token},
 			ExpectStatus: http.StatusOK,
 		},
@@ -125,6 +128,50 @@ func TestSSL_Basic(t *testing.T) {
 		testCaseCheck(tc)
 	}
 
+	// try again after disable SSL, make a HTTPS request
+	// If use the test framework, errors will cause failure, so we need to make a separate https request for testing.
+	time.Sleep(sleepTime)
+	_, err = http.Get("https://www.test2.com:9443")
+	assert.NotNil(t, err)
+	assert.EqualError(t, err, "Get https://www.test2.com:9443: remote error: tls: internal error")
+
+	// enable SSL again
+	tests = []HttpTestCase{
+		{
+			caseDesc:     "enable SSL",
+			Object:       ManagerApiExpect(t),
+			Method:       http.MethodPatch,
+			Path:         "/apisix/admin/ssl/1/status",
+			Body:         `1`,
+			Headers:      map[string]string{"Authorization": token},
+			ExpectStatus: http.StatusOK,
+		},
+		{
+			caseDesc:     "hit the route using HTTPS, make sure enable successful",
+			Object:       APISIXHTTPSExpect(t),
+			Method:       http.MethodGet,
+			Path:         "/hello_",
+			Headers:      map[string]string{"Host": "www.test2.com"},
+			ExpectStatus: http.StatusOK,
+			ExpectBody:   "hello world\n",
+			Sleep:        sleepTime,
+		},
+	}
+	for _, tc := range tests {
+		testCaseCheck(tc)
+	}
+
+	// delete SSL
+	delSSL := HttpTestCase{
+		caseDesc:     "delete SSL",
+		Object:       ManagerApiExpect(t),
+		Method:       http.MethodDelete,
+		Path:         "/apisix/admin/ssl/1",
+		Headers:      map[string]string{"Authorization": token},
+		ExpectStatus: http.StatusOK,
+	}
+	testCaseCheck(delSSL)
+
 	// try again after deleting SSL, make a HTTPS request
 	// If use the test framework, errors will cause failure, so we need to make a separate https request for testing.
 	time.Sleep(sleepTime)
@@ -142,5 +189,4 @@ func TestSSL_Basic(t *testing.T) {
 		ExpectStatus: http.StatusOK,
 	}
 	testCaseCheck(delRoute)
-
 }
diff --git a/api/test/e2e/upstream_test.go b/api/test/e2e/upstream_test.go
index e61e024340..beb0a8c1d6 100644
--- a/api/test/e2e/upstream_test.go
+++ b/api/test/e2e/upstream_test.go
@@ -171,7 +171,7 @@ func TestRoute_Node_Host(t *testing.T) {
 				}],
 				"type": "roundrobin",
 				"pass_host": "rewrite",
-				"upstream_host": "httpbin.org"  
+				"upstream_host": "httpbin.org"
 			}`,
 			Headers:      map[string]string{"Authorization": token},
 			ExpectStatus: http.StatusOK,
diff --git a/api/test/shell/cli_test.sh b/api/test/shell/cli_test.sh
index ad1568d2a8..411130bd3a 100755
--- a/api/test/shell/cli_test.sh
+++ b/api/test/shell/cli_test.sh
@@ -95,6 +95,25 @@ if [[ `grep -c "INFO" ./error.log` -eq '0' ]]; then
     exit 1
 fi
 
+# run on a different path 
+workDir=$(pwd)
+rm -rf html
+mkdir html
+cd html
+echo "hi~" >> index.html
+APISIX_API_WORKDIR=$workDir $workDir/manager-api &
+sleep 5
+
+res=$(curl http://127.0.0.1:9000)
+pkill -f manager-api
+cd -
+rm -rf html
+
+if [[ $res != "hi~" ]]; then
+    echo "failed: manager-api cant run on a different path"
+    exit 1
+fi
+clean_up
 
 # test start info
 
diff --git a/api/test/shell/docker_deploy_test.sh b/api/test/shell/docker_deploy_test.sh
index 65ddd4f2df..27df656aca 100755
--- a/api/test/shell/docker_deploy_test.sh
+++ b/api/test/shell/docker_deploy_test.sh
@@ -20,7 +20,7 @@
 set -ex
 
 # web page
-curl http://127.0.0.1:9000 
+curl http://127.0.0.1:9000
 code=$(curl -k -i -m 20 -o /dev/null -s -w %{http_code} http://127.0.0.1:9000)
 if [ ! $code -eq 200 ]; then
     echo "failed: failed to custom port"
diff --git a/docs/FAQ.md b/docs/FAQ.md
index 66810facda..e4996e7c68 100644
--- a/docs/FAQ.md
+++ b/docs/FAQ.md
@@ -54,3 +54,21 @@ $ api/build-tools/schema-sync.sh /usr/local/apisix
 ```
 
 After the command finishes executing, if you are using a binary `manager-api` that has already been built, you will need to manually copy `api/conf/schema.json` to the `conf` directory under the Dashboard **working directory**. where **working directory** refers to the `conf` directory under this [document](./deploy.md) is the `output` directory, or the directory with the modified name, that is generated in the root directory after the build is complete.
+
+### 5. How to write API documentation
+
+We use [go-swagger](https://github.com/go-swagger/go-swagger) to generate Swagger 2.0 documents, and then convert them to markdown format so that they can be viewed directly in the github repository. Specific steps are as follows:
+
+1. Write comments according to [Specification](https://goswagger.io/use/spec.html). For details, please refer to the existing example `api/internal/handler/route/route.go` in this project.
+
+2. Use the `go-swagger` tool to generate Swagger 2.0 documents.
+
+```shell
+$ swagger generate spec -o ./docs/api/api.yaml --scan-models
+```
+
+3. Use the `swagger-markdown` tool to convert Swagger 2.0 documents into markdown documents.
+
+```shell
+$ swagger-markdown -i ./docs/api/api.yaml
+```
diff --git a/docs/api/api.md b/docs/api/api.md
new file mode 100644
index 0000000000..6bd430c975
--- /dev/null
+++ b/docs/api/api.md
@@ -0,0 +1,360 @@
+<!--
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+-->
+
+# API doc of Manager API.
+Manager API directly operates ETCD and provides data management for Apache APISIX, provides APIs for Front-end or other clients.
+
+**License:** [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0)
+
+### /apisix/admin/check_ssl_cert
+
+#### POST
+##### Summary:
+
+verify SSL cert and key.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| cert | body | cert of SSL | Yes | string |
+| key | body | key of SSL | Yes | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | SSL verify passed | [ApiError](#ApiError) |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/check_ssl_exists
+
+#### POST
+##### Summary:
+
+Check whether the SSL exists.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| cert | body | cert of SSL | Yes | string |
+| key | body | key of SSL | Yes | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | SSL exists | [ApiError](#ApiError) |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/consumers
+
+#### GET
+##### Summary:
+
+Return the consumer list according to the specified page number and page size, and can search consumers by username.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| page | query | page number | No | integer |
+| page_size | query | page size | No | integer |
+| username | query | username of consumer | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | list response | [ [consumer](#consumer) ] |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/notexist/routes
+
+#### GET
+##### Summary:
+
+Return result of route exists checking by name and exclude id.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| name | query | name of route | No | string |
+| exclude | query | id of route that exclude checking | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | route not exists | [ApiError](#ApiError) |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/routes
+
+#### GET
+##### Summary:
+
+Return the route list according to the specified page number and page size, and can search routes by name and uri.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| page | query | page number | No | integer |
+| page_size | query | page size | No | integer |
+| name | query | name of route | No | string |
+| uri | query | uri of route | No | string |
+| label | query | label of route | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | list response | [ [route](#route) ] |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/services
+
+#### GET
+##### Summary:
+
+Return the service list according to the specified page number and page size, and can search services by name.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| page | query | page number | No | integer |
+| page_size | query | page size | No | integer |
+| name | query | name of service | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | list response | [ [service](#service) ] |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/ssl
+
+#### GET
+##### Summary:
+
+Return the SSL list according to the specified page number and page size, and can SSLs search by sni.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| page | query | page number | No | integer |
+| page_size | query | page size | No | integer |
+| sni | query | sni of SSL | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | list response | [ [ssl](#ssl) ] |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/upstreams
+
+#### GET
+##### Summary:
+
+Return the upstream list according to the specified page number and page size, and can search upstreams by name.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| page | query | page number | No | integer |
+| page_size | query | page size | No | integer |
+| name | query | name of upstream | No | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | list response | [ [upstream](#upstream) ] |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### /apisix/admin/user/login
+
+#### POST
+##### Summary:
+
+user login.
+
+##### Parameters
+
+| Name | Located in | Description | Required | Schema |
+| ---- | ---------- | ----------- | -------- | ---- |
+| username | body | user name | Yes | string |
+| password | body | password | Yes | string |
+
+##### Responses
+
+| Code | Description | Schema |
+| ---- | ----------- | ------ |
+| 0 | login success | [ApiError](#ApiError) |
+| default | unexpected error | [ApiError](#ApiError) |
+
+### Models
+
+
+#### ApiError
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| code | long | response code | No |
+| message | string | response message | No |
+
+#### BaseInfo
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| create_time | long |  | No |
+| id | object |  | No |
+| update_time | long |  | No |
+
+#### Consumer
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| create_time | long |  | No |
+| desc | string |  | No |
+| id | object |  | No |
+| labels | object |  | No |
+| plugins | object |  | No |
+| update_time | long |  | No |
+| username | string |  | No |
+
+#### LoginInput
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| password | string | password | No |
+| username | string | user name | No |
+
+#### Route
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| create_time | long |  | No |
+| desc | string |  | No |
+| enable_websocket | boolean |  | No |
+| filter_func | string |  | No |
+| host | string |  | No |
+| hosts | [ string ] |  | No |
+| id | object |  | No |
+| labels | object |  | No |
+| methods | [ string ] |  | No |
+| name | string |  | No |
+| plugins | object |  | No |
+| priority | long |  | No |
+| remote_addr | string |  | No |
+| remote_addrs | [ string ] |  | No |
+| script | object |  | No |
+| service_id | object |  | No |
+| service_protocol | string |  | No |
+| update_time | long |  | No |
+| upstream | [UpstreamDef](#UpstreamDef) |  | No |
+| upstream_id | object |  | No |
+| uri | string |  | No |
+| uris | [ string ] |  | No |
+| vars | object |  | No |
+
+#### SSL
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| cert | string |  | No |
+| certs | [ string ] |  | No |
+| create_time | long |  | No |
+| exptime | long |  | No |
+| id | object |  | No |
+| key | string |  | No |
+| keys | [ string ] |  | No |
+| labels | object |  | No |
+| sni | string |  | No |
+| snis | [ string ] |  | No |
+| status | long |  | No |
+| update_time | long |  | No |
+| validity_end | long |  | No |
+| validity_start | long |  | No |
+
+#### Service
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| create_time | long |  | No |
+| desc | string |  | No |
+| enable_websocket | boolean |  | No |
+| id | object |  | No |
+| labels | object |  | No |
+| name | string |  | No |
+| plugins | object |  | No |
+| script | string |  | No |
+| update_time | long |  | No |
+| upstream | [UpstreamDef](#UpstreamDef) |  | No |
+| upstream_id | object |  | No |
+
+#### Upstream
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| checks | object |  | No |
+| create_time | long |  | No |
+| desc | string |  | No |
+| hash_on | string |  | No |
+| id | object |  | No |
+| k8s_deployment_info | object |  | No |
+| key | string |  | No |
+| labels | object |  | No |
+| name | string |  | No |
+| nodes | object |  | No |
+| pass_host | string |  | No |
+| retries | long |  | No |
+| service_name | string |  | No |
+| timeout | object |  | No |
+| type | string |  | No |
+| update_time | long |  | No |
+| upstream_host | string |  | No |
+
+#### UpstreamDef
+
+| Name | Type | Description | Required |
+| ---- | ---- | ----------- | -------- |
+| checks | object |  | No |
+| desc | string |  | No |
+| hash_on | string |  | No |
+| k8s_deployment_info | object |  | No |
+| key | string |  | No |
+| labels | object |  | No |
+| name | string |  | No |
+| nodes | object |  | No |
+| pass_host | string |  | No |
+| retries | long |  | No |
+| service_name | string |  | No |
+| timeout | object |  | No |
+| type | string |  | No |
+| upstream_host | string |  | No |
diff --git a/docs/deploy-with-docker.md b/docs/deploy-with-docker.md
index c458a8cad5..091f67d4dd 100644
--- a/docs/deploy-with-docker.md
+++ b/docs/deploy-with-docker.md
@@ -39,7 +39,7 @@ $ docker build -t apisix-dashboard:$tag .
 # For users in mainland China, the `ENABLE_PROXY` parameter can be provided to speed up module downloads.
 $ docker build -t apisix-dashboard:$tag . --build-arg ENABLE_PROXY=true
 
-# If you want to use the latest codes to build, you can specify the `APISIX_DASHBOARD_VERSION` parameter to `master`. 
+# If you want to use the latest codes to build, you can specify the `APISIX_DASHBOARD_VERSION` parameter to `master`.
 # This parameter can also be specified as branch name of a specific version, such as `v2.1.1`.
 $ docker build -t apisix-dashboard:$tag . --build-arg APISIX_DASHBOARD_VERSION=master
 ```
diff --git a/docs/deploy.md b/docs/deploy.md
index 657ac080a4..7f8ae1389e 100644
--- a/docs/deploy.md
+++ b/docs/deploy.md
@@ -45,7 +45,7 @@ $ go env -w GOPROXY=https://goproxy.cn,direct
 ## Clone the project
 
 ```sh
-$ git clone -b v2.1.1 https://github.com/apache/apisix-dashboard.git
+$ git clone -b v2.2 https://github.com/apache/apisix-dashboard.git
 ```
 
 ## Build
diff --git a/docs/develop.md b/docs/develop.md
index f78ab2bd64..cb1d89be63 100644
--- a/docs/develop.md
+++ b/docs/develop.md
@@ -28,7 +28,7 @@ Before development, refer to this [guide](./deploy.md) to install dependencies.
 ## Clone the project
 
 ```sh
-$ git clone -b v2.1.1 https://github.com/apache/apisix-dashboard.git
+$ git clone -b v2.2 https://github.com/apache/apisix-dashboard.git
 ```
 
 ## Start developing
@@ -73,4 +73,4 @@ $ yarn install
 $ yarn start
 ```
 
-4. If writing an E2E test, refer to the [E2E Writing Guide](../web/src/e2e/README.md)
+4. If writing an E2E test, refer to the [E2E Writing Guide](./front-end-e2e.md)
diff --git a/docs/front-end-e2e.md b/docs/front-end-e2e.md
new file mode 100644
index 0000000000..d325d2c8e9
--- /dev/null
+++ b/docs/front-end-e2e.md
@@ -0,0 +1,36 @@
+<!--
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+-->
+
+This project uses [Cypress](https://www.cypress.io/) as the front-end E2E test framework.
+
+1. To start the front-end project locally, please refer to [develop](./develop.md) web section.
+   
+2. Open Cypress test-runner. For the use of test-runner, please refer to [test-runner](https://docs.cypress.io/guides/core-concepts/test-runner.html#) Overview.
+   ```sh
+   yarn cypress:open-dev
+   ```
+   
+3. Write your test examples: please refer to the test examples in the `/web/cypress` directory, or see [RWA](https://github.com/cypress-io/cypress-realworld-app) for more examples.
+
+
+Reference links:
+
+- Cypress API Documents: https://docs.cypress.io/api/api/table-of-contents.html
+
+- Cypress Best Practices: https://docs.cypress.io/guides/references/best-practices.html#Organizing-Tests-Logging-In-Controlling-State
diff --git a/web/.husky/.gitignore b/web/.husky/.gitignore
deleted file mode 100644
index 31354ec138..0000000000
--- a/web/.husky/.gitignore
+++ /dev/null
@@ -1 +0,0 @@
-_
diff --git a/web/config/proxy.ts b/web/config/proxy.ts
index 6f2e82f355..fda37479c6 100644
--- a/web/config/proxy.ts
+++ b/web/config/proxy.ts
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 const serveUrlMap = {
-  dev: 'http://40.73.92.163:8080',
+  dev: 'http://139.217.190.60',
   test: 'http://localhost:9000',
 };
 
diff --git a/web/cypress.json b/web/cypress.json
new file mode 100644
index 0000000000..a326fdab07
--- /dev/null
+++ b/web/cypress.json
@@ -0,0 +1,6 @@
+{
+    "viewportWidth": 1920,
+    "viewportHeight": 1080,
+    "baseUrl": "http://localhost:8000",
+    "video": false
+}
diff --git a/web/cypress/integration/route/create_and_delete_route.spec.js b/web/cypress/integration/route/create_and_delete_route.spec.js
new file mode 100644
index 0000000000..39853c683f
--- /dev/null
+++ b/web/cypress/integration/route/create_and_delete_route.spec.js
@@ -0,0 +1,89 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* eslint-disable no-undef */
+
+context('Create and Delete Route', () => {
+  const root_name = `root_${new Date().valueOf()}`;
+
+  beforeEach(() => {
+    // init login 
+    cy.login();
+  })
+
+  it('create route', () => {
+    //  go to route create page
+    cy.visit('/routes/create');
+    cy.contains('Route').click();
+    cy.contains('Create').click();
+
+    // input Name And Description
+    cy.get('#name').type(root_name);
+    cy.get('#desc').type('desc');
+
+    // input Request Basic Define
+    cy.get('#hosts_0').type('11.11.11.11');
+    cy.get('[data-cy=addHost]').click();
+    cy.get('#hosts_1').type('12.12.12.12');
+    cy.get('#remote_addrs_0').type('12.12.12.12');
+    cy.get('[data-cy=addRemoteAddr]').click();
+    cy.get('#remote_addrs_1').type('10.10.10.10');
+    cy.contains('Advanced Routing Matching Conditions').parent().siblings().contains('Create').click();
+
+    // create Advanced Routing Matching Conditions 
+    cy.get('#position').click();
+    cy.contains('Cookie').click();
+    cy.get('.ant-modal').within(() => {
+      cy.get('#name').type('modalName');
+    })
+    cy.get('#operator').click();
+    cy.contains('Equal').click();
+    cy.get('#value').type('value');
+    cy.contains('Confirm').click();
+
+    // go to step2
+    cy.contains('Next').click();
+    cy.wait(400);
+    cy.get('#nodes_0_host').type('12.12.12.12', {
+      timeout: 4000
+    });
+
+    // go to step3
+    cy.contains('Next').click();
+
+    // config prometheus plugin
+    cy.contains('.ant-card', 'prometheus').get('button').first().click();
+    cy.contains('button', 'Cancel').click();
+
+    // go to step4
+    cy.contains('Next').click();
+    cy.contains('Submit').click();
+    cy.contains('SubmitSuccessfully');
+
+    // back to route list page
+    cy.contains('Return Route List').click();
+    cy.url().should('contains', 'routes/list');
+  });
+
+  it('delete the route', () => {
+    cy.visit('/routes/list');
+    cy.get('[title=Name]').type(root_name);
+    cy.contains('查 询').click();
+    cy.contains(root_name).siblings().contains('Delete').click();
+    cy.contains('button', 'Confirm').click();
+    cy.get('.ant-notification-notice-message').should('contain', 'Delete Route Successfully');
+  })
+})
diff --git a/web/cypress/integration/user/login.spec.js b/web/cypress/integration/user/login.spec.js
new file mode 100644
index 0000000000..65e67c2b6a
--- /dev/null
+++ b/web/cypress/integration/user/login.spec.js
@@ -0,0 +1,47 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* eslint-disable no-undef */
+
+context('Login Test', () => {
+  beforeEach(() => {
+    // set default language
+    localStorage.setItem('umi_locale', "en-US");
+  });
+
+  it('login failed with empty username and password', () => {
+    cy.visit('/user/Login');
+    cy.contains('Login').click();
+    cy.get('.ant-form-item-explain').should('contain', 'Please input username');
+    cy.get('.ant-form-item-explain').should('contain', 'Please input password');
+  });
+
+  it('login with invalid credentials', () => {
+    cy.visit('/user/Login');
+    cy.get('#control-ref_username').type('user');
+    cy.get('#control-ref_password').type('invalidPassword');
+    cy.contains('Login').click();
+    cy.get('.ant-notification-notice-message').should('contain', 'Request Error Code: 10000');
+  });
+
+  it('login success', () => {
+    cy.visit('/user/Login');
+    cy.get('#control-ref_username').type('user');
+    cy.get('#control-ref_password').type('user');
+    cy.contains('Login').click();
+    cy.get('.ant-notification-notice-message').should('contain', 'Successfully');
+  });
+})
diff --git a/web/cypress/integration/user/logout.spec.js b/web/cypress/integration/user/logout.spec.js
new file mode 100644
index 0000000000..853f334d30
--- /dev/null
+++ b/web/cypress/integration/user/logout.spec.js
@@ -0,0 +1,34 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* eslint-disable no-undef */
+
+context('Logout Test', () => {
+  beforeEach(() => {
+    cy.login();
+  });
+
+  it('logout', () => {
+    cy.visit('/');
+    cy.contains('.anticon', 'APISIX User', {
+      matchCase: false
+    }).click({
+      force: true
+    });
+    cy.get('[aria-label=logout]').click();
+    cy.url().should('contains', '/user/login');
+  });
+})
diff --git a/web/cypress/plugins/index.js b/web/cypress/plugins/index.js
new file mode 100644
index 0000000000..ed129f29e1
--- /dev/null
+++ b/web/cypress/plugins/index.js
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/**
+ * @type {Cypress.PluginConfig}
+ */
+/* eslint-disable @typescript-eslint/no-unused-vars */
+module.exports = (on, config) => {
+  // `on` is used to hook into various events Cypress emits
+  // `config` is the resolved Cypress config
+}
diff --git a/web/src/e2e/service.js b/web/cypress/support/commands.js
similarity index 53%
rename from web/src/e2e/service.js
rename to web/cypress/support/commands.js
index 49279cd005..bfb1955562 100644
--- a/web/src/e2e/service.js
+++ b/web/cypress/support/commands.js
@@ -14,26 +14,28 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* eslint-disable no-undef */
 
-export const BASE_URL = `http://localhost:${process.env.PORT || 8000}`;
+Cypress.Commands.add('login', () => {
+  const serveUrlMap = {
+    dev: 'http://139.217.190.60',
+    test: 'http://localhost:9000',
+  };
 
-const loginSuccessData = {
-  username: 'admin',
-  password: 'admin',
-};
+  const {
+    SERVE_ENV = 'dev'
+  } = Cypress.env();
 
-const domSelectors = {
-  inputUsername: '#control-ref_username',
-  inputPassword: '#control-ref_password',
-  buttonLogin: '.ant-btn-lg',
-  loginSuccessIcon: '.ant-notification-notice-icon-success',
-};
-
-export const setupLogin = async (page) => {
-  await page.goto(BASE_URL);
-  await page.type(domSelectors.inputUsername, loginSuccessData.username);
-  await page.type(domSelectors.inputPassword, loginSuccessData.password);
-  await page.click(domSelectors.buttonLogin);
-  await page.waitForSelector(domSelectors.loginSuccessIcon);
-  await page.waitForNavigation();
-};
+  cy.request('POST', `${serveUrlMap[SERVE_ENV]}/apisix/admin/user/login`, {
+      "username": "user",
+      "password": "user"
+    })
+    .then(res => {
+      expect(res.body.code).to.equal(0);
+      localStorage.setItem(
+        'token', res.body.data.token
+      );
+      // set default language
+      localStorage.setItem('umi_locale', "en-US");
+    })
+})
diff --git a/web/cypress/support/index.js b/web/cypress/support/index.js
new file mode 100644
index 0000000000..113a8ce4f2
--- /dev/null
+++ b/web/cypress/support/index.js
@@ -0,0 +1,24 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/* eslint-disable no-undef */
+import './commands'
+
+Cypress.on('uncaught:exception', () => {
+  // returning false here prevents Cypress from
+  // failing the test
+  return false
+})
diff --git a/web/package.json b/web/package.json
index 7abfe1c9cb..e66e9de849 100644
--- a/web/package.json
+++ b/web/package.json
@@ -9,7 +9,7 @@
     "dev": "yarn run start:dev",
     "fetch:blocks": "pro fetch-blocks --branch antd@4 && yarn run prettier",
     "i18n-remove": "pro i18n-remove --locale=zh-CN --write",
-    "postinstall": "umi g tmp && cd .. && husky install ./web",
+    "postinstall": "umi g tmp",
     "lint": "umi g tmp && yarn run lint:js && yarn run lint:style && yarn run lint:prettier",
     "lint-staged": "lint-staged",
     "lint-staged:js": "eslint --ext .js,.jsx,.ts,.tsx ",
@@ -20,25 +20,19 @@
     "prettier": "prettier -c --write \"**/*\"",
     "site": "yarn run fetch:blocks && yarn run build",
     "start": "umi dev",
-    "test:e2e": "start-server-and-test 'cross-env SERVE_ENV='test' yarn start' http://localhost:8000 'yarn test'",
+    "test:e2e": "start-server-and-test 'cross-env SERVE_ENV=test yarn start' http-get://localhost:8000 cypress:run-ci",
     "start:dev": "cross-env REACT_APP_ENV=dev MOCK=none umi dev",
     "start:no-mock": "cross-env MOCK=none umi dev",
     "start:no-ui": "cross-env UMI_UI=none umi dev",
     "start:pre": "cross-env REACT_APP_ENV=pre umi dev",
     "start:test": "cross-env REACT_APP_ENV=test MOCK=none umi dev",
-    "pretest": "node ./tests/beforeTest",
-    "test": "umi test",
-    "test:all": "node ./tests/run-tests.js",
     "test:component": "umi test ./src/components",
-    "tsc": "tsc"
+    "tsc": "tsc",
+    "cypress:open": "CYPRESS_SERVE_ENV=test cypress open",
+    "cypress:open-dev": "CYPRESS_SERVE_ENV=dev cypress open",
+    "cypress:run-ci": "CYPRESS_SERVE_ENV=test cypress run"
   },
   "license": "Apache-2.0",
-  "husky": {
-    "hooks": {
-      "commit-msg": "node scripts/verifyCommit.js",
-      "pre-commit": "yarn run lint-staged"
-    }
-  },
   "lint-staged": {
     "**/*.less": "stylelint --syntax less",
     "**/*.{js,jsx,ts,tsx}": "yarn run lint-staged:js",
@@ -106,18 +100,17 @@
     "carlo": "^0.9.46",
     "cross-env": "^7.0.0",
     "cross-port-killer": "^1.1.1",
+    "cypress": "^6.1.0",
     "detect-installer": "^1.0.1",
     "enzyme": "^3.11.0",
     "eslint": "^7.1.0",
     "eslint-plugin-eslint-comments": "^3.2.0",
     "express": "^4.17.1",
-    "husky": "^5.0.4",
     "lint-staged": "^10.0.0",
     "mockjs": "^1.0.1-beta3",
     "pinst": "^2.1.1",
     "prettier": "^2.0.1",
     "pro-download": "1.0.1",
-    "puppeteer": "^5.4.1",
     "puppeteer-core": "^4.0.1",
     "stylelint": "^13.0.0"
   },
diff --git a/web/src/components/Plugin/PluginPage.tsx b/web/src/components/Plugin/PluginPage.tsx
index 6296e748f1..4224af226b 100644
--- a/web/src/components/Plugin/PluginPage.tsx
+++ b/web/src/components/Plugin/PluginPage.tsx
@@ -58,10 +58,20 @@ const PluginPage: React.FC<Props> = ({
 
   const validateData = (pluginName: string, value: PluginComponent.Data) => {
     fetchSchema(pluginName, schemaType).then((schema) => {
+      // NOTE: The frontend will inject the disable property into schema just like the manager-api does
+      if (!schema.properties) {
+        // eslint-disable-next-line
+        schema.properties = {}
+      }
+      // eslint-disable-next-line
+      ;(schema.properties as any).disable = {
+        type: "boolean"
+      }
+
       const { valid, errors } = validate(value, schema);
       if (valid) {
         setName(NEVER_EXIST_PLUGIN_FLAG);
-        onChange({ ...initialData, [pluginName]: { ...value, disable: false } });
+        onChange({ ...initialData, [pluginName]: value });
         return;
       }
       errors?.forEach((item) => {
@@ -146,7 +156,10 @@ const PluginPage: React.FC<Props> = ({
                         disabled={readonly}
                         onChange={(isChecked) => {
                           if (isChecked) {
-                            validateData(item.name, initialData[item.name]);
+                            validateData(item.name, {
+                              ...initialData[item.name],
+                              disable: false
+                            });
                           } else {
                             onChange({
                               ...initialData,
diff --git a/web/src/e2e/Login.e2e.js b/web/src/e2e/Login.e2e.js
deleted file mode 100644
index 5ea3ac91a5..0000000000
--- a/web/src/e2e/Login.e2e.js
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/* eslint-disable import/no-extraneous-dependencies */
-const puppeteer = require('puppeteer');
-
-const { setupLogin, BASE_URL } = require('./service');
-
-let browser;
-const domSelectors = {
-  inputUsername: '#control-ref_username',
-  inputPassword: '#control-ref_password',
-  buttonLogin: '.ant-btn-lg',
-  loginFailedIcon: '.ant-notification-notice-icon-error',
-};
-const loginFailedData = {
-  username: 'admin',
-  password: '123456',
-};
-
-beforeAll(async () => {
-  browser = await puppeteer.launch({
-    headless: true,
-    slowMo: 100,
-  });
-});
-
-describe('Login', () => {
-  test('Login failed with wrong password', async () => {
-    const page = await browser.newPage();
-    await page.goto(BASE_URL);
-    await page.type(domSelectors.inputUsername, loginFailedData.username);
-    await page.type(domSelectors.inputPassword, loginFailedData.password);
-    await page.click(domSelectors.buttonLogin);
-    await page.waitForSelector(domSelectors.loginFailedIcon);
-    await page.close();
-  }, 10000);
-
-  test('Login failed with empty username password', async () => {
-    const page = await browser.newPage();
-    await page.goto(BASE_URL);
-    await page.type(domSelectors.inputUsername, '');
-    await page.type(domSelectors.inputPassword, '');
-    await page.click(domSelectors.buttonLogin);
-    await page.waitForSelector('.ant-form-item-explain');
-    await page.close();
-  }, 10000);
-
-  test('Login success', async () => {
-    const page = await browser.newPage();
-    await setupLogin(page);
-    await page.close();
-  }, 10000);
-
-  afterAll(async () => {
-    await browser.close();
-  });
-});
diff --git a/web/src/e2e/Logout.e2e.js b/web/src/e2e/Logout.e2e.js
deleted file mode 100644
index c10083c783..0000000000
--- a/web/src/e2e/Logout.e2e.js
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-/* eslint-disable import/no-extraneous-dependencies */
-const puppeteer = require('puppeteer');
-
-const { setupLogin } = require('./service');
-
-let browser;
-const domSelectors = {
-  userProfile: '.ant-space-horizontal div:nth-child(2)',
-  dropdownMenuItem: '.ant-dropdown-menu-item',
-  buttonLogin: '.ant-btn-lg',
-  logoutButton: '.ant-dropdown > ul > li:nth-child(3)',
-};
-
-describe('Logout', () => {
-  beforeAll(async () => {
-    browser = await puppeteer.launch({
-      headless: true,
-      slowMo: 100,
-    });
-  });
-
-  test('Logout', async () => {
-    const page = await browser.newPage();
-    await setupLogin(page);
-    await page.click(domSelectors.userProfile);
-    await page.waitForSelector(domSelectors.dropdownMenuItem);
-    await page.waitForSelector(domSelectors.logoutButton);
-    await page.click(domSelectors.logoutButton);
-    await page.waitForSelector(domSelectors.buttonLogin);
-    await page.close();
-  }, 50000);
-
-  afterAll(async () => {
-    await browser.close();
-  });
-});
diff --git a/web/src/e2e/__mocks__/antd-pro-merge-less.js b/web/src/e2e/__mocks__/antd-pro-merge-less.js
deleted file mode 100644
index 510a0f2a1e..0000000000
--- a/web/src/e2e/__mocks__/antd-pro-merge-less.js
+++ /dev/null
@@ -1,24 +0,0 @@
-/*
-* MIT License
-
-* Copyright (c) 2019 Alipay.inc
-
-* Permission is hereby granted, free of charge, to any person obtaining a copy
-* of this software and associated documentation files (the "Software"), to deal
-* in the Software without restriction, including without limitation the rights
-* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-* copies of the Software, and to permit persons to whom the Software is
-* furnished to do so, subject to the following conditions:
-
-* The above copyright notice and this permission notice shall be included in all
-* copies or substantial portions of the Software.
-
-* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-* SOFTWARE.
-*/
-export default undefined;
diff --git a/web/src/e2e/baseLayout.e2e.js b/web/src/e2e/baseLayout.e2e.js
deleted file mode 100644
index f863fea4db..0000000000
--- a/web/src/e2e/baseLayout.e2e.js
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
-* MIT License
-
-* Copyright (c) 2019 Alipay.inc
-
-* Permission is hereby granted, free of charge, to any person obtaining a copy
-* of this software and associated documentation files (the "Software"), to deal
-* in the Software without restriction, including without limitation the rights
-* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-* copies of the Software, and to permit persons to whom the Software is
-* furnished to do so, subject to the following conditions:
-
-* The above copyright notice and this permission notice shall be included in all
-* copies or substantial portions of the Software.
-
-* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-* SOFTWARE.
-*/
-const { uniq } = require('lodash');
-const RouterConfig = require('../../config/config').default.routes;
-
-const BASE_URL = `http://localhost:${process.env.PORT || 8000}`;
-
-function formatter(routes, parentPath = '') {
-  const fixedParentPath = parentPath.replace(/\/{1,}/g, '/');
-  let result = [];
-  routes.forEach((item) => {
-    if (item.path) {
-      result.push(`${fixedParentPath}/${item.path}`.replace(/\/{1,}/g, '/'));
-    }
-    if (item.routes) {
-      result = result.concat(
-        formatter(item.routes, item.path ? `${fixedParentPath}/${item.path}` : parentPath),
-      );
-    }
-  });
-  return uniq(result.filter((item) => !!item));
-}
-
-beforeEach(async () => {
-  await page.goto(`${BASE_URL}`);
-  await page.evaluate(() => {
-    localStorage.setItem('antd-pro-authority', '["admin"]');
-  });
-});
-
-describe('Ant Design Pro E2E test', () => {
-  const testPage = (path) => async () => {
-    await page.goto(`${BASE_URL}${path}`);
-    await page.waitForSelector('footer', {
-      timeout: 2000,
-    });
-    const haveFooter = await page.evaluate(
-      () => document.getElementsByTagName('footer').length > 0,
-    );
-    expect(haveFooter).toBeTruthy();
-  };
-
-  const routers = formatter(RouterConfig);
-  routers.forEach((route) => {
-    it(`test pages ${route}`, testPage(route));
-  });
-
-  it('topmenu should have footer', async () => {
-    const params = '?navTheme=light&layout=topmenu';
-    await page.goto(`${BASE_URL}${params}`);
-    await page.waitForSelector('footer', {
-      timeout: 2000,
-    });
-    const haveFooter = await page.evaluate(
-      () => document.getElementsByTagName('footer').length > 0,
-    );
-    expect(haveFooter).toBeTruthy();
-  });
-});
diff --git a/web/src/pages/Route/components/Step1/RequestConfigView.tsx b/web/src/pages/Route/components/Step1/RequestConfigView.tsx
index ec2538436c..661dc08360 100644
--- a/web/src/pages/Route/components/Step1/RequestConfigView.tsx
+++ b/web/src/pages/Route/components/Step1/RequestConfigView.tsx
@@ -83,6 +83,7 @@ const RequestConfigView: React.FC<RouteModule.Step1PassProps> = ({
               <Form.Item {...FORM_ITEM_WITHOUT_LABEL}>
                 <Button
                   type="dashed"
+                  data-cy="addHost"
                   onClick={() => {
                     add();
                   }}
@@ -161,6 +162,7 @@ const RequestConfigView: React.FC<RouteModule.Step1PassProps> = ({
               <Form.Item {...FORM_ITEM_WITHOUT_LABEL}>
                 <Button
                   type="dashed"
+                  data-cy="addUri"
                   onClick={() => {
                     add();
                   }}
@@ -232,6 +234,7 @@ const RequestConfigView: React.FC<RouteModule.Step1PassProps> = ({
               <Form.Item {...FORM_ITEM_WITHOUT_LABEL}>
                 <Button
                   type="dashed"
+                  data-cy="addRemoteAddr"
                   onClick={() => {
                     add();
                   }}
diff --git a/web/tests/PuppeteerEnvironment.js b/web/tests/PuppeteerEnvironment.js
deleted file mode 100644
index 6ad5040208..0000000000
--- a/web/tests/PuppeteerEnvironment.js
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-// eslint-disable-next-line
-const NodeEnvironment = require('jest-environment-node');
-const getBrowser = require('./getBrowser');
-
-class PuppeteerEnvironment extends NodeEnvironment {
-  // Jest is not available here, so we have to reverse engineer
-  // the setTimeout function, see https://github.com/facebook/jest/blob/v23.1.0/packages/jest-runtime/src/index.js#L823
-  setTimeout(timeout) {
-    if (this.global.jasmine) {
-      // eslint-disable-next-line no-underscore-dangle
-      this.global.jasmine.DEFAULT_TIMEOUT_INTERVAL = timeout;
-    } else {
-      this.global[Symbol.for('TEST_TIMEOUT_SYMBOL')] = timeout;
-    }
-  }
-
-  async setup() {
-    const browser = await getBrowser();
-    const page = await browser.newPage();
-    this.global.browser = browser;
-    this.global.page = page;
-  }
-
-  async teardown() {
-    const { page, browser } = this.global;
-
-    if (page) {
-      await page.close();
-    }
-
-    if (browser) {
-      await browser.disconnect();
-    }
-
-    if (browser) {
-      await browser.close();
-    }
-  }
-}
-
-module.exports = PuppeteerEnvironment;
diff --git a/web/tests/beforeTest.js b/web/tests/beforeTest.js
deleted file mode 100644
index e0c05528cc..0000000000
--- a/web/tests/beforeTest.js
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/* eslint-disable global-require */
-/* eslint-disable import/no-extraneous-dependencies */
-const { execSync } = require('child_process');
-const { join } = require('path');
-const findChrome = require('carlo/lib/find_chrome');
-const detectInstaller = require('detect-installer');
-
-const installPuppeteer = () => {
-  // find can use package manger
-  const packages = detectInstaller(join(__dirname, '../../'));
-  // get installed package manger
-  const packageName = packages.find(detectInstaller.hasPackageCommand) || 'npm';
-  console.log(`🤖 will use ${packageName} install puppeteer`);
-  const command = `${packageName} ${packageName.includes('yarn') ? 'add' : 'i'} puppeteer`;
-  execSync(command, {
-    stdio: 'inherit',
-  });
-};
-
-const initPuppeteer = async () => {
-  try {
-    // eslint-disable-next-line import/no-unresolved
-    const findChromePath = await findChrome({});
-    const { executablePath } = findChromePath;
-    console.log(`🧲 find you browser in ${executablePath}`);
-    return;
-  } catch (error) {
-    console.log('🧲 no find chrome');
-  }
-
-  try {
-    require.resolve('puppeteer');
-  } catch (error) {
-    // need install puppeteer
-    await installPuppeteer();
-  }
-};
-
-initPuppeteer();
diff --git a/web/tests/getBrowser.js b/web/tests/getBrowser.js
deleted file mode 100644
index 83bd3e1057..0000000000
--- a/web/tests/getBrowser.js
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/* eslint-disable global-require */
-/* eslint-disable import/no-extraneous-dependencies */
-const findChrome = require('carlo/lib/find_chrome');
-
-const getBrowser = async () => {
-  try {
-    // eslint-disable-next-line import/no-unresolved
-    const puppeteer = require('puppeteer');
-    const browser = await puppeteer.launch({
-      args: [
-        '--disable-gpu',
-        '--disable-dev-shm-usage',
-        '--no-first-run',
-        '--no-zygote',
-        '--no-sandbox',
-      ],
-    });
-    return browser;
-  } catch (error) {
-    // console.log(error)
-  }
-
-  try {
-    // eslint-disable-next-line import/no-unresolved
-    const puppeteer = require('puppeteer-core');
-    const findChromePath = await findChrome({});
-    const { executablePath } = findChromePath;
-    const browser = await puppeteer.launch({
-      executablePath,
-      args: [
-        '--disable-gpu',
-        '--disable-dev-shm-usage',
-        '--no-first-run',
-        '--no-zygote',
-        '--no-sandbox',
-      ],
-    });
-    return browser;
-  } catch (error) {
-    console.log('🧲 no find chrome');
-  }
-  throw new Error('no find puppeteer');
-};
-
-module.exports = getBrowser;
diff --git a/web/tests/run-tests.js b/web/tests/run-tests.js
deleted file mode 100644
index 3aff0261ef..0000000000
--- a/web/tests/run-tests.js
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-/* eslint-disable eslint-comments/disable-enable-pair */
-/* eslint-disable @typescript-eslint/no-var-requires */
-/* eslint-disable eslint-comments/no-unlimited-disable */
-const { spawn } = require('child_process');
-// eslint-disable-next-line import/no-extraneous-dependencies
-const { kill } = require('cross-port-killer');
-
-const env = Object.create(process.env);
-env.BROWSER = 'none';
-env.TEST = true;
-env.UMI_UI = 'none';
-env.PROGRESS = 'none';
-// flag to prevent multiple test
-let once = false;
-
-const startServer = spawn(/^win/.test(process.platform) ? 'npm.cmd' : 'npm', ['start'], {
-  env,
-});
-
-startServer.stderr.on('data', (data) => {
-  // eslint-disable-next-line
-  console.log(data.toString());
-});
-
-startServer.on('exit', () => {
-  kill(process.env.PORT || 8000);
-});
-
-console.log('Starting development server for e2e tests...');
-startServer.stdout.on('data', (data) => {
-  console.log(data.toString());
-  // hack code , wait umi
-  if (
-    (!once && data.toString().indexOf('Compiled successfully') >= 0) ||
-    data.toString().indexOf('Theme generated successfully') >= 0
-  ) {
-    // eslint-disable-next-line
-    once = true;
-    console.log('Development server is started, ready to run tests.');
-    const testCmd = spawn(
-      /^win/.test(process.platform) ? 'npm.cmd' : 'npm',
-      ['test', '--', '--maxWorkers=1', '--runInBand'],
-      {
-        stdio: 'inherit',
-      },
-    );
-    testCmd.on('exit', (code) => {
-      startServer.kill();
-      process.exit(code);
-    });
-  }
-});
diff --git a/web/yarn.lock b/web/yarn.lock
index f8114a159b..f9c779637d 100644
--- a/web/yarn.lock
+++ b/web/yarn.lock
@@ -1501,6 +1501,50 @@
   resolved "https://registry.npm.taobao.org/@csstools/convert-colors/download/@csstools/convert-colors-1.4.0.tgz#ad495dc41b12e75d588c6db8b9834f08fa131eb7"
   integrity sha1-rUldxBsS511YjG24uYNPCPoTHrc=
 
+"@cypress/listr-verbose-renderer@^0.4.1":
+  version "0.4.1"
+  resolved "https://registry.yarnpkg.com/@cypress/listr-verbose-renderer/-/listr-verbose-renderer-0.4.1.tgz#a77492f4b11dcc7c446a34b3e28721afd33c642a"
+  integrity sha1-p3SS9LEdzHxEajSz4ochr9M8ZCo=
+  dependencies:
+    chalk "^1.1.3"
+    cli-cursor "^1.0.2"
+    date-fns "^1.27.2"
+    figures "^1.7.0"
+
+"@cypress/request@^2.88.5":
+  version "2.88.5"
+  resolved "https://registry.yarnpkg.com/@cypress/request/-/request-2.88.5.tgz#8d7ecd17b53a849cfd5ab06d5abe7d84976375d7"
+  integrity sha512-TzEC1XMi1hJkywWpRfD2clreTa/Z+lOrXDCxxBTBPEcY5azdPi56A6Xw+O4tWJnaJH3iIE7G5aDXZC6JgRZLcA==
+  dependencies:
+    aws-sign2 "~0.7.0"
+    aws4 "^1.8.0"
+    caseless "~0.12.0"
+    combined-stream "~1.0.6"
+    extend "~3.0.2"
+    forever-agent "~0.6.1"
+    form-data "~2.3.2"
+    har-validator "~5.1.3"
+    http-signature "~1.2.0"
+    is-typedarray "~1.0.0"
+    isstream "~0.1.2"
+    json-stringify-safe "~5.0.1"
+    mime-types "~2.1.19"
+    oauth-sign "~0.9.0"
+    performance-now "^2.1.0"
+    qs "~6.5.2"
+    safe-buffer "^5.1.2"
+    tough-cookie "~2.5.0"
+    tunnel-agent "^0.6.0"
+    uuid "^3.3.2"
+
+"@cypress/xvfb@^1.2.4":
+  version "1.2.4"
+  resolved "https://registry.yarnpkg.com/@cypress/xvfb/-/xvfb-1.2.4.tgz#2daf42e8275b39f4aa53c14214e557bd14e7748a"
+  integrity sha512-skbBzPggOVYCbnGgV+0dmBdW/s77ZkAOXIC1knS8NagwDjBrNC1LuXtQJeiN6l+m7lzmHtaoUw/ctJKdqkG57Q==
+  dependencies:
+    debug "^3.1.0"
+    lodash.once "^4.1.1"
+
 "@emotion/is-prop-valid@^0.8.1", "@emotion/is-prop-valid@^0.8.8":
   version "0.8.8"
   resolved "https://registry.npm.taobao.org/@emotion/is-prop-valid/download/@emotion/is-prop-valid-0.8.8.tgz#db28b1c4368a259b60a97311d6a952d4fd01ac1a"
@@ -2000,6 +2044,13 @@
     react-is "^16.9.0"
     shortid "^2.2.14"
 
+"@samverschueren/stream-to-observable@^0.3.0":
+  version "0.3.1"
+  resolved "https://registry.yarnpkg.com/@samverschueren/stream-to-observable/-/stream-to-observable-0.3.1.tgz#a21117b19ee9be70c379ec1877537ef2e1c63301"
+  integrity sha512-c/qwwcHyafOQuVQJj0IlBjf5yYgBI7YPJ77k4fOJYesb41jio65eaJODRUmfYKhTOFBrIZ66kgvGPlNbjuoRdQ==
+  dependencies:
+    any-observable "^0.3.0"
+
 "@sideway/address@^4.1.0":
   version "4.1.0"
   resolved "https://registry.yarnpkg.com/@sideway/address/-/address-4.1.0.tgz#0b301ada10ac4e0e3fa525c90615e0b61a72b78d"
@@ -2657,6 +2708,16 @@
   dependencies:
     "@types/node" "*"
 
+"@types/sinonjs__fake-timers@^6.0.1":
+  version "6.0.2"
+  resolved "https://registry.yarnpkg.com/@types/sinonjs__fake-timers/-/sinonjs__fake-timers-6.0.2.tgz#3a84cf5ec3249439015e14049bd3161419bf9eae"
+  integrity sha512-dIPoZ3g5gcx9zZEszaxLSVTvMReD3xxyyDnQUjA6IYDG9Ba2AV0otMPs+77sG9ojB4Qr2N2Vk5RnKeuA0X/0bg==
+
+"@types/sizzle@^2.3.2":
+  version "2.3.2"
+  resolved "https://registry.yarnpkg.com/@types/sizzle/-/sizzle-2.3.2.tgz#a811b8c18e2babab7d542b3365887ae2e4d9de47"
+  integrity sha512-7EJYyKTL7tFR8+gDbB6Wwz/arpGa0Mywk1TJbNzKzHtzbwVmY4HR9WqS5VV7dsBUKQmPNr192jHr/VpBluj/hg==
+
 "@types/sockjs-client@1.1.1":
   version "1.1.1"
   resolved "https://registry.npm.taobao.org/@types/sockjs-client/download/@types/sockjs-client-1.1.1.tgz#1ef133b5a79d51447a93ce16164706c0164b5548"
@@ -3877,7 +3938,7 @@ ansi-colors@^4.1.1:
   resolved "https://registry.npm.taobao.org/ansi-colors/download/ansi-colors-4.1.1.tgz#cbb9ae256bf750af1eab344f229aa27fe94ba348"
   integrity sha1-y7muJWv3UK8eqzRPIpqif+lLo0g=
 
-ansi-escapes@^3.1.0, ansi-escapes@^3.2.0:
+ansi-escapes@^3.0.0, ansi-escapes@^3.1.0, ansi-escapes@^3.2.0:
   version "3.2.0"
   resolved "https://registry.npm.taobao.org/ansi-escapes/download/ansi-escapes-3.2.0.tgz#8780b98ff9dbf5638152d1f1fe5c1d7b4442976b"
   integrity sha1-h4C5j/nb9WOBUtHx/lwde0RCl2s=
@@ -4015,6 +4076,11 @@ antd@^4.1.2, antd@^4.1.3, antd@^4.1.5, antd@^4.2.0, antd@^4.4.0:
     scroll-into-view-if-needed "^2.2.25"
     warning "^4.0.3"
 
+any-observable@^0.3.0:
+  version "0.3.0"
+  resolved "https://registry.yarnpkg.com/any-observable/-/any-observable-0.3.0.tgz#af933475e5806a67d0d7df090dd5e8bef65d119b"
+  integrity sha512-/FQM1EDkTsf63Ub2C6O7GuYFDsSXUwsaZDurV0np41ocwq0jthUAYCmhBX9f+KwlaCgIuWyr/4WlUQUBfKfZog==
+
 any-promise@^1.0.0:
   version "1.3.0"
   resolved "https://registry.npm.taobao.org/any-promise/download/any-promise-1.3.0.tgz#abc6afeedcea52e809cdc0376aed3ce39635d17f"
@@ -4051,6 +4117,11 @@ arch@^2.1.1:
   resolved "https://registry.npm.taobao.org/arch/download/arch-2.1.2.tgz#0c52bbe7344bb4fa260c443d2cbad9c00ff2f0bf"
   integrity sha1-DFK75zRLtPomDEQ9LLrZwA/y8L8=
 
+arch@^2.1.2:
+  version "2.2.0"
+  resolved "https://registry.yarnpkg.com/arch/-/arch-2.2.0.tgz#1bc47818f305764f23ab3306b0bfc086c5a29d11"
+  integrity sha512-Of/R0wqp83cgHozfIYLbBMnej79U/SVGOOyuB3VVFv1NRM/PSFMK12x9KVtiYzJqmnU5WR2qp0Z5rHb7sWGnFQ==
+
 argparse@^1.0.10, argparse@^1.0.7:
   version "1.0.10"
   resolved "https://registry.npm.taobao.org/argparse/download/argparse-1.0.10.tgz?cache=0&sync_timestamp=1597414347077&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fargparse%2Fdownload%2Fargparse-1.0.10.tgz#bcd6791ea5ae09725e17e5ad988134cd40b3d911"
@@ -4281,6 +4352,11 @@ async@^2.6.2:
   dependencies:
     lodash "^4.17.14"
 
+async@^3.2.0:
+  version "3.2.0"
+  resolved "https://registry.yarnpkg.com/async/-/async-3.2.0.tgz#b3a2685c5ebb641d3de02d161002c60fc9f85720"
+  integrity sha512-TR2mEZFVOj2pLStYxLht7TyfuRzaydfpxr3k9RpHIzMgw7A64dzsdqCxH1WJyQdoe8T10nDXd9wnEigmiuHIZw==
+
 asynckit@^0.4.0:
   version "0.4.0"
   resolved "https://registry.npm.taobao.org/asynckit/download/asynckit-0.4.0.tgz#c79ed97f7f34cb8f2ba1bc9790bcc366474b4b79"
@@ -4614,7 +4690,12 @@ blink-diff@^1.0.13:
     preceptor-core "~0.10.0"
     promise "6.0.0"
 
-bluebird@3.7.2, bluebird@^3.5.5:
+blob-util@2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/blob-util/-/blob-util-2.0.2.tgz#3b4e3c281111bb7f11128518006cdc60b403a1eb"
+  integrity sha512-T7JQa+zsXXEa6/8ZhHcQEW1UFfVM49Ts65uBkFL6fz2QmrElqmbajIDJvuA0tEhRe5eIjpV9ZF+0RfZR9voJFQ==
+
+bluebird@3.7.2, bluebird@^3.5.5, bluebird@^3.7.2:
   version "3.7.2"
   resolved "https://registry.npm.taobao.org/bluebird/download/bluebird-3.7.2.tgz#9f229c15be272454ffa973ace0dbee79a1b0c36f"
   integrity sha1-nyKcFb4nJFT/qXOs4NvueaGww28=
@@ -4894,6 +4975,11 @@ cacheable-request@^6.0.0:
     normalize-url "^4.1.0"
     responselike "^1.0.2"
 
+cachedir@^2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/cachedir/-/cachedir-2.3.0.tgz#0c75892a052198f0b21c7c1804d8331edfcae0e8"
+  integrity sha512-A+Fezp4zxnit6FanDmv9EqXNAi3vt9DWp51/71UEhXukb7QUuvtv9344h91dyAxuTLoSYJFU299qzR3tzwPAhw==
+
 call-me-maybe@^1.0.1:
   version "1.0.1"
   resolved "https://registry.npm.taobao.org/call-me-maybe/download/call-me-maybe-1.0.1.tgz#26d208ea89e37b5cbde60250a15f031c16a4d66b"
@@ -5026,7 +5112,7 @@ chalk@4.1.0, chalk@^4.0.0, chalk@^4.1.0:
     ansi-styles "^4.1.0"
     supports-color "^7.1.0"
 
-chalk@^1.1.3:
+chalk@^1.0.0, chalk@^1.1.3:
   version "1.1.3"
   resolved "https://registry.npm.taobao.org/chalk/download/chalk-1.1.3.tgz#a8115c55e4a702fe4d150abd3872822a7e09fc98"
   integrity sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=
@@ -5070,7 +5156,7 @@ chardet@^0.7.0:
   resolved "https://registry.npm.taobao.org/chardet/download/chardet-0.7.0.tgz?cache=0&sync_timestamp=1594010705529&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fchardet%2Fdownload%2Fchardet-0.7.0.tgz#90094849f0937f2eedc2425d0d28a9e5f0cbad9e"
   integrity sha1-kAlISfCTfy7twkJdDSip5fDLrZ4=
 
-check-more-types@2.24.0:
+check-more-types@2.24.0, check-more-types@^2.24.0:
   version "2.24.0"
   resolved "https://registry.yarnpkg.com/check-more-types/-/check-more-types-2.24.0.tgz#1420ffb10fd444dcfc79b43891bbfffd32a84600"
   integrity sha1-FCD/sQ/URNz8ebQ4kbv//TKoRgA=
@@ -5203,7 +5289,14 @@ cli-color@^1.4.0:
     memoizee "^0.4.14"
     timers-ext "^0.1.5"
 
-cli-cursor@^2.1.0:
+cli-cursor@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/cli-cursor/-/cli-cursor-1.0.2.tgz#64da3f7d56a54412e59794bd62dc35295e8f2987"
+  integrity sha1-ZNo/fValRBLll5S9Ytw1KV6PKYc=
+  dependencies:
+    restore-cursor "^1.0.1"
+
+cli-cursor@^2.0.0, cli-cursor@^2.1.0:
   version "2.1.0"
   resolved "https://registry.npm.taobao.org/cli-cursor/download/cli-cursor-2.1.0.tgz#b35dac376479facc3e94747d41d0d0f5238ffcb5"
   integrity sha1-s12sN2R5+sw+lHR9QdDQ9SOP/LU=
@@ -5222,6 +5315,16 @@ cli-spinners@^2.0.0, cli-spinners@^2.2.0:
   resolved "https://registry.npm.taobao.org/cli-spinners/download/cli-spinners-2.4.0.tgz?cache=0&sync_timestamp=1595080565423&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fcli-spinners%2Fdownload%2Fcli-spinners-2.4.0.tgz#c6256db216b878cfba4720e719cec7cf72685d7f"
   integrity sha1-xiVtsha4eM+6RyDnGc7Hz3JoXX8=
 
+cli-table3@~0.6.0:
+  version "0.6.0"
+  resolved "https://registry.yarnpkg.com/cli-table3/-/cli-table3-0.6.0.tgz#b7b1bc65ca8e7b5cef9124e13dc2b21e2ce4faee"
+  integrity sha512-gnB85c3MGC7Nm9I/FkiasNBOKjOiO1RNuXXarQms37q4QMpWdlbBgD/VnOStA2faG1dpXMv31RFApjX1/QdgWQ==
+  dependencies:
+    object-assign "^4.1.0"
+    string-width "^4.2.0"
+  optionalDependencies:
+    colors "^1.1.2"
+
 cli-table@^0.3.1:
   version "0.3.1"
   resolved "https://registry.npm.taobao.org/cli-table/download/cli-table-0.3.1.tgz#f53b05266a8b1a0b934b3d0821e6e2dc5914ae23"
@@ -5229,6 +5332,14 @@ cli-table@^0.3.1:
   dependencies:
     colors "1.0.3"
 
+cli-truncate@^0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/cli-truncate/-/cli-truncate-0.2.1.tgz#9f15cfbb0705005369216c626ac7d05ab90dd574"
+  integrity sha1-nxXPuwcFAFNpIWxiasfQWrkN1XQ=
+  dependencies:
+    slice-ansi "0.0.4"
+    string-width "^1.0.1"
+
 cli-truncate@^2.1.0:
   version "2.1.0"
   resolved "https://registry.npm.taobao.org/cli-truncate/download/cli-truncate-2.1.0.tgz#c39e28bf05edcde5be3b98992a22deed5a2b93c7"
@@ -5358,6 +5469,11 @@ coa@^2.0.2:
     chalk "^2.4.1"
     q "^1.1.2"
 
+code-point-at@^1.0.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/code-point-at/-/code-point-at-1.1.0.tgz#0d070b4d043a5bea33a2f1a40e2edb3d9a4ccf77"
+  integrity sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c=
+
 codemirror@5.57.0:
   version "5.57.0"
   resolved "https://registry.yarnpkg.com/codemirror/-/codemirror-5.57.0.tgz#d26365b72f909f5d2dbb6b1209349ca1daeb2d50"
@@ -5431,6 +5547,11 @@ colors@1.0.3:
   resolved "https://registry.npm.taobao.org/colors/download/colors-1.0.3.tgz#0433f44d809680fdeb60ed260f1b0c262e82a40b"
   integrity sha1-BDP0TYCWgP3rYO0mDxsMJi6CpAs=
 
+colors@^1.1.2:
+  version "1.4.0"
+  resolved "https://registry.yarnpkg.com/colors/-/colors-1.4.0.tgz#c50491479d4c1bdaed2c9ced32cf7c7dc2360f78"
+  integrity sha512-a+UqTh4kgZg/SlGvfbzDHpgRu7AAQOmmqRHJnxhRZICKFUT91brVhNNt58CMWU9PsBbv3PDCZUHbVxuDiH2mtA==
+
 combined-stream@^1.0.6, combined-stream@~1.0.6:
   version "1.0.8"
   resolved "https://registry.npm.taobao.org/combined-stream/download/combined-stream-1.0.8.tgz#c3d45a8b34fd730631a110a8a2520682b31d5a7f"
@@ -5453,6 +5574,16 @@ commander@^2.18.0, commander@^2.19.0, commander@^2.20.0:
   resolved "https://registry.npm.taobao.org/commander/download/commander-2.20.3.tgz?cache=0&sync_timestamp=1595168173997&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fcommander%2Fdownload%2Fcommander-2.20.3.tgz#fd485e84c03eb4881c20722ba48035e8531aeb33"
   integrity sha1-/UhehMA+tIgcIHIrpIA16FMa6zM=
 
+commander@^5.1.0:
+  version "5.1.0"
+  resolved "https://registry.yarnpkg.com/commander/-/commander-5.1.0.tgz#46abbd1652f8e059bddaef99bbdcb2ad9cf179ae"
+  integrity sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==
+
+common-tags@^1.8.0:
+  version "1.8.0"
+  resolved "https://registry.yarnpkg.com/common-tags/-/common-tags-1.8.0.tgz#8e3153e542d4a39e9b10554434afaaf98956a937"
+  integrity sha512-6P6g0uetGpW/sdyUy/iQQCbFF0kWVMSIVSyYz7Zgjcgh8mgw8PQzDNZeyZ5DQ2gM7LBoZPHmnjz8rUthkBG5tw==
+
 commondir@^1.0.1:
   version "1.0.1"
   resolved "https://registry.npm.taobao.org/commondir/download/commondir-1.0.1.tgz#ddd800da0c66127393cca5950ea968a3aaf1253b"
@@ -6108,6 +6239,50 @@ cyclist@^1.0.1:
   resolved "https://registry.npm.taobao.org/cyclist/download/cyclist-1.0.1.tgz#596e9698fd0c80e12038c2b82d6eb1b35b6224d9"
   integrity sha1-WW6WmP0MgOEgOMK4LW6xs1tiJNk=
 
+cypress@^6.1.0:
+  version "6.1.0"
+  resolved "https://registry.yarnpkg.com/cypress/-/cypress-6.1.0.tgz#af2596cb110aa98eaf75fef3d8ab379ca0ff2413"
+  integrity sha512-uQnSxRcZ6hkf9R5cr8KpRBTzN88QZwLIImbf5DWa5RIxH6o5Gpff58EcjiYhAR8/8p9SGv7O6SRygq4H+k0Qpw==
+  dependencies:
+    "@cypress/listr-verbose-renderer" "^0.4.1"
+    "@cypress/request" "^2.88.5"
+    "@cypress/xvfb" "^1.2.4"
+    "@types/sinonjs__fake-timers" "^6.0.1"
+    "@types/sizzle" "^2.3.2"
+    arch "^2.1.2"
+    blob-util "2.0.2"
+    bluebird "^3.7.2"
+    cachedir "^2.3.0"
+    chalk "^4.1.0"
+    check-more-types "^2.24.0"
+    cli-table3 "~0.6.0"
+    commander "^5.1.0"
+    common-tags "^1.8.0"
+    debug "^4.1.1"
+    eventemitter2 "^6.4.2"
+    execa "^4.0.2"
+    executable "^4.1.1"
+    extract-zip "^1.7.0"
+    fs-extra "^9.0.1"
+    getos "^3.2.1"
+    is-ci "^2.0.0"
+    is-installed-globally "^0.3.2"
+    lazy-ass "^1.6.0"
+    listr "^0.14.3"
+    lodash "^4.17.19"
+    log-symbols "^4.0.0"
+    minimist "^1.2.5"
+    moment "^2.27.0"
+    ospath "^1.2.2"
+    pretty-bytes "^5.4.1"
+    ramda "~0.26.1"
+    request-progress "^3.0.0"
+    supports-color "^7.2.0"
+    tmp "~0.2.1"
+    untildify "^4.0.0"
+    url "^0.11.0"
+    yauzl "^2.10.0"
+
 d@1, d@^1.0.1:
   version "1.0.1"
   resolved "https://registry.npm.taobao.org/d/download/d-1.0.1.tgz#8698095372d58dbee346ffd0c7093f99f8f9eb5a"
@@ -6137,6 +6312,11 @@ data-urls@^1.1.0:
     whatwg-mimetype "^2.2.0"
     whatwg-url "^7.0.0"
 
+date-fns@^1.27.2:
+  version "1.30.1"
+  resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-1.30.1.tgz#2e71bf0b119153dbb4cc4e88d9ea5acfb50dc05c"
+  integrity sha512-hBSVCvSmWC+QypYObzwGOd9wqdDpOt+0wl0KbU+R+uuZBS1jN8VsD1ss3irQDknRj5NvxiTF6oj/nDRnN/UQNw==
+
 date-fns@^2.15.0:
   version "2.15.0"
   resolved "https://registry.npm.taobao.org/date-fns/download/date-fns-2.15.0.tgz?cache=0&sync_timestamp=1594999213209&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fdate-fns%2Fdownload%2Fdate-fns-2.15.0.tgz#424de6b3778e4e69d3ff27046ec136af58ae5d5f"
@@ -6344,11 +6524,6 @@ detect-port-alt@1.1.6:
     address "^1.0.1"
     debug "^2.6.0"
 
-devtools-protocol@0.0.809251:
-  version "0.0.809251"
-  resolved "https://registry.yarnpkg.com/devtools-protocol/-/devtools-protocol-0.0.809251.tgz#300b3366be107d5c46114ecb85274173e3999518"
-  integrity sha512-pf+2OY6ghMDPjKkzSWxHMq+McD+9Ojmq5XVRYpv/kPd9sTMQxzEt21592a31API8qRjro0iYYOc3ag46qF/1FA==
-
 dicer@0.2.5:
   version "0.2.5"
   resolved "https://registry.npm.taobao.org/dicer/download/dicer-0.2.5.tgz#5996c086bb33218c812c090bddc09cd12facb70f"
@@ -6629,6 +6804,11 @@ electron-to-chromium@^1.3.122, electron-to-chromium@^1.3.523:
   resolved "https://registry.npm.taobao.org/electron-to-chromium/download/electron-to-chromium-1.3.548.tgz?cache=0&sync_timestamp=1598413021714&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Felectron-to-chromium%2Fdownload%2Felectron-to-chromium-1.3.548.tgz#b1bda6b24f7a1c1fa6250bb039a0bbed148f26f2"
   integrity sha1-sb2msk96HB+mJQuwOaC77RSPJvI=
 
+elegant-spinner@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/elegant-spinner/-/elegant-spinner-1.0.1.tgz#db043521c95d7e303fd8f345bedc3349cfb0729e"
+  integrity sha1-2wQ1IcldfjA/2PNFvtwzSc+wcp4=
+
 elliptic@^6.5.3:
   version "6.5.3"
   resolved "https://registry.npm.taobao.org/elliptic/download/elliptic-6.5.3.tgz#cb59eb2efdaf73a0bd78ccd7015a62ad6e0f93d6"
@@ -7471,6 +7651,11 @@ event-stream@=3.3.4:
     stream-combiner "~0.0.4"
     through "~2.3.1"
 
+eventemitter2@^6.4.2:
+  version "6.4.3"
+  resolved "https://registry.yarnpkg.com/eventemitter2/-/eventemitter2-6.4.3.tgz#35c563619b13f3681e7eb05cbdaf50f56ba58820"
+  integrity sha512-t0A2msp6BzOf+QAcI6z9XMktLj52OjGQg+8SJH6v5+3uxNpWYRR3wQmfA+6xtMU9kOC59qk9licus5dYcrYkMQ==
+
 eventemitter3@^4.0.0:
   version "4.0.6"
   resolved "https://registry.npm.taobao.org/eventemitter3/download/eventemitter3-4.0.6.tgz#1258f6fa51b4908aadc2cd624fcd6e64f99f49d6"
@@ -7545,6 +7730,21 @@ execa@4.0.3, execa@^4.0.0, execa@^4.0.3:
     signal-exit "^3.0.2"
     strip-final-newline "^2.0.0"
 
+execa@^4.0.2:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/execa/-/execa-4.1.0.tgz#4e5491ad1572f2f17a77d388c6c857135b22847a"
+  integrity sha512-j5W0//W7f8UxAn8hXVnwG8tLwdiUy4FJLcSupCg6maBYZDpyBvTApK7KyuI4bKj8KOh1r2YH+6ucuYtJv1bTZA==
+  dependencies:
+    cross-spawn "^7.0.0"
+    get-stream "^5.0.0"
+    human-signals "^1.1.1"
+    is-stream "^2.0.0"
+    merge-stream "^2.0.0"
+    npm-run-path "^4.0.0"
+    onetime "^5.1.0"
+    signal-exit "^3.0.2"
+    strip-final-newline "^2.0.0"
+
 execall@^1.0.0:
   version "1.0.0"
   resolved "https://registry.npm.taobao.org/execall/download/execall-1.0.0.tgz#73d0904e395b3cab0658b08d09ec25307f29bb73"
@@ -7559,11 +7759,23 @@ execall@^2.0.0:
   dependencies:
     clone-regexp "^2.1.0"
 
+executable@^4.1.1:
+  version "4.1.1"
+  resolved "https://registry.yarnpkg.com/executable/-/executable-4.1.1.tgz#41532bff361d3e57af4d763b70582db18f5d133c"
+  integrity sha512-8iA79xD3uAch729dUG8xaaBBFGaEa0wdD2VkYLFHwlqosEj/jT66AzcreRDSgV7ehnNLBW2WR5jIXwGKjVdTLg==
+  dependencies:
+    pify "^2.2.0"
+
 exenv@^1.2.0:
   version "1.2.2"
   resolved "https://registry.npm.taobao.org/exenv/download/exenv-1.2.2.tgz#2ae78e85d9894158670b03d47bec1f03bd91bb9d"
   integrity sha1-KueOhdmJQVhnCwPUe+wfA72Ru50=
 
+exit-hook@^1.0.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/exit-hook/-/exit-hook-1.1.1.tgz#f05ca233b48c05d54fff07765df8507e95c02ff8"
+  integrity sha1-8FyiM7SMBdVP/wd2XfhQfpXAL/g=
+
 exit@^0.1.2:
   version "0.1.2"
   resolved "https://registry.npm.taobao.org/exit/download/exit-0.1.2.tgz#0632638f8d877cc82107d30a0fff1a17cba1cd0c"
@@ -7680,7 +7892,7 @@ extglob@^2.0.4:
     snapdragon "^0.8.1"
     to-regex "^3.0.1"
 
-extract-zip@^1.6.6:
+extract-zip@^1.6.6, extract-zip@^1.7.0:
   version "1.7.0"
   resolved "https://registry.npm.taobao.org/extract-zip/download/extract-zip-1.7.0.tgz?cache=0&sync_timestamp=1591773082587&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fextract-zip%2Fdownload%2Fextract-zip-1.7.0.tgz#556cc3ae9df7f452c493a0cfb51cc30277940927"
   integrity sha1-VWzDrp339FLEk6DPtRzDAneUCSc=
@@ -7827,6 +8039,14 @@ figgy-pudding@^3.5.1:
   resolved "https://registry.npm.taobao.org/figgy-pudding/download/figgy-pudding-3.5.2.tgz#b4eee8148abb01dcf1d1ac34367d59e12fa61d6e"
   integrity sha1-tO7oFIq7Adzx0aw0Nn1Z4S+mHW4=
 
+figures@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/figures/-/figures-1.7.0.tgz#cbe1e3affcf1cd44b80cadfed28dc793a9701d2e"
+  integrity sha1-y+Hjr/zxzUS4DK3+0o3Hk6lwHS4=
+  dependencies:
+    escape-string-regexp "^1.0.5"
+    object-assign "^4.1.0"
+
 figures@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npm.taobao.org/figures/download/figures-2.0.0.tgz#3ab1a2d2a62c8bfb431a0c94cb797a2fce27c962"
@@ -8130,7 +8350,7 @@ fs-extra@^8.0.1:
     jsonfile "^4.0.0"
     universalify "^0.1.0"
 
-fs-extra@^9.0.0:
+fs-extra@^9.0.0, fs-extra@^9.0.1:
   version "9.0.1"
   resolved "https://registry.npm.taobao.org/fs-extra/download/fs-extra-9.0.1.tgz#910da0062437ba4c39fedd863f1675ccfefcb9fc"
   integrity sha1-kQ2gBiQ3ukw5/t2GPxZ1zP78ufw=
@@ -8258,6 +8478,13 @@ getnpmregistry@^1.0.1:
   dependencies:
     node-fetch "^2.6.0"
 
+getos@^3.2.1:
+  version "3.2.1"
+  resolved "https://registry.yarnpkg.com/getos/-/getos-3.2.1.tgz#0134d1f4e00eb46144c5a9c0ac4dc087cbb27dc5"
+  integrity sha512-U56CfOK17OKgTVqozZjUKNdkfEv6jk5WISBJ8SHoagjE6L69zOwl3Z+O8myjY9MEW3i2HPWQBt/LTbCgcC973Q==
+  dependencies:
+    async "^3.2.0"
+
 getpass@^0.1.1:
   version "0.1.7"
   resolved "https://registry.npm.taobao.org/getpass/download/getpass-0.1.7.tgz#5eff8e3e684d569ae4cb2b1282604e8ba62149fa"
@@ -8317,6 +8544,13 @@ glob@7.1.6, glob@^7.1.1, glob@^7.1.2, glob@^7.1.3, glob@^7.1.4, glob@^7.1.6:
     once "^1.3.0"
     path-is-absolute "^1.0.0"
 
+global-dirs@^2.0.1:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/global-dirs/-/global-dirs-2.1.0.tgz#e9046a49c806ff04d6c1825e196c8f0091e8df4d"
+  integrity sha512-MG6kdOUh/xBnyo9cJFeIKkLEc1AyFq42QTU4XiX51i2NEdxLxLWXIjEjmqKeSuKR7pAZjTqUVoT2b2huxVLgYQ==
+  dependencies:
+    ini "1.3.7"
+
 global-modules@2.0.0, global-modules@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npm.taobao.org/global-modules/download/global-modules-2.0.0.tgz#997605ad2345f27f51539bea26574421215c7780"
@@ -8860,11 +9094,6 @@ human-signals@^1.1.1:
   resolved "https://registry.npm.taobao.org/human-signals/download/human-signals-1.1.1.tgz#c5b1cd14f50aeae09ab6c59fe63ba3395fe4dfa3"
   integrity sha1-xbHNFPUK6uCatsWf5jujOV/k36M=
 
-husky@^5.0.4:
-  version "5.0.4"
-  resolved "https://registry.yarnpkg.com/husky/-/husky-5.0.4.tgz#24e666d560f340ce70bf58e7658eb574e3bddcca"
-  integrity sha512-35tdr4zrmJrpMconZggELF8zzNuddp2NEpPc4AjplPoYJauPZU6WuvCCrJYOTZv5UUj9C15ikQWCcTXk4jJj9Q==
-
 hyphenate-style-name@^1.0.0:
   version "1.0.4"
   resolved "https://registry.npm.taobao.org/hyphenate-style-name/download/hyphenate-style-name-1.0.4.tgz#691879af8e220aea5750e8827db4ef62a54e361d"
@@ -9059,6 +9288,11 @@ inherits@2.0.3:
   resolved "https://registry.npm.taobao.org/inherits/download/inherits-2.0.3.tgz#633c2c83e3da42a502f52466022480f4208261de"
   integrity sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=
 
+ini@1.3.7:
+  version "1.3.7"
+  resolved "https://registry.yarnpkg.com/ini/-/ini-1.3.7.tgz#a09363e1911972ea16d7a8851005d84cf09a9a84"
+  integrity sha512-iKpRpXP+CrP2jyrxvg1kMUpXDyRUFDWurxbnVT1vQPx+Wz9uCYsMIqYuSBLV+PAaZG/d7kRLKRFc9oDMsH+mFQ==
+
 ini@^1.3.4, ini@^1.3.5:
   version "1.3.5"
   resolved "https://registry.npm.taobao.org/ini/download/ini-1.3.5.tgz#eee25f56db1c9ec6085e0c22778083f596abf927"
@@ -9379,6 +9613,13 @@ is-extglob@^2.1.0, is-extglob@^2.1.1:
   resolved "https://registry.npm.taobao.org/is-extglob/download/is-extglob-2.1.1.tgz#a88c02535791f02ed37c76a1b9ea9773c833f8c2"
   integrity sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=
 
+is-fullwidth-code-point@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz#ef9e31386f031a7f0d643af82fde50c457ef00cb"
+  integrity sha1-754xOG8DGn8NZDr4L95QxFfvAMs=
+  dependencies:
+    number-is-nan "^1.0.0"
+
 is-fullwidth-code-point@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npm.taobao.org/is-fullwidth-code-point/download/is-fullwidth-code-point-2.0.0.tgz#a3b30a5c4f199183167aaab93beefae3ddfb654f"
@@ -9413,6 +9654,14 @@ is-hexadecimal@^1.0.0:
   resolved "https://registry.npm.taobao.org/is-hexadecimal/download/is-hexadecimal-1.0.4.tgz#cc35c97588da4bd49a8eedd6bc4082d44dcb23a7"
   integrity sha1-zDXJdYjaS9Saju3WvECC1E3LI6c=
 
+is-installed-globally@^0.3.2:
+  version "0.3.2"
+  resolved "https://registry.yarnpkg.com/is-installed-globally/-/is-installed-globally-0.3.2.tgz#fd3efa79ee670d1187233182d5b0a1dd00313141"
+  integrity sha512-wZ8x1js7Ia0kecP/CHM/3ABkAmujX7WPvQk6uu3Fly/Mk44pySulQpnHG46OMjHGXApINnV4QhY3SWnECO2z5g==
+  dependencies:
+    global-dirs "^2.0.1"
+    is-path-inside "^3.0.1"
+
 is-interactive@^1.0.0:
   version "1.0.0"
   resolved "https://registry.npm.taobao.org/is-interactive/download/is-interactive-1.0.0.tgz#cea6e6ae5c870a7b0a0004070b7b587e0252912e"
@@ -9460,6 +9709,18 @@ is-object@^1.0.1:
   resolved "https://registry.npm.taobao.org/is-object/download/is-object-1.0.1.tgz#8952688c5ec2ffd6b03ecc85e769e02903083470"
   integrity sha1-iVJojF7C/9awPsyF52ngKQMINHA=
 
+is-observable@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/is-observable/-/is-observable-1.1.0.tgz#b3e986c8f44de950867cab5403f5a3465005975e"
+  integrity sha512-NqCa4Sa2d+u7BWc6CukaObG3Fh+CU9bvixbpcXYhy2VvYS7vVGIdAgnIS5Ks3A/cqk4rebLJ9s8zBstT2aKnIA==
+  dependencies:
+    symbol-observable "^1.1.0"
+
+is-path-inside@^3.0.1:
+  version "3.0.2"
+  resolved "https://registry.yarnpkg.com/is-path-inside/-/is-path-inside-3.0.2.tgz#f5220fc82a3e233757291dddc9c5877f2a1f3017"
+  integrity sha512-/2UGPSgmtqwo1ktx8NDHjuPwZWmHhO+gj0f93EkhLB5RgW9RZevWYYlIkS6zePc6U2WpOdQYIwHe9YC4DWEBVg==
+
 is-plain-obj@2.1.0, is-plain-obj@^2.0.0:
   version "2.1.0"
   resolved "https://registry.npm.taobao.org/is-plain-obj/download/is-plain-obj-2.1.0.tgz#45e42e37fccf1f40da8e5f76ee21515840c09287"
@@ -9477,7 +9738,7 @@ is-plain-object@^2.0.1, is-plain-object@^2.0.3, is-plain-object@^2.0.4:
   dependencies:
     isobject "^3.0.1"
 
-is-promise@^2.1:
+is-promise@^2.1, is-promise@^2.1.0:
   version "2.2.2"
   resolved "https://registry.npm.taobao.org/is-promise/download/is-promise-2.2.2.tgz#39ab959ccbf9a774cf079f7b40c7a26f763135f1"
   integrity sha1-OauVnMv5p3TPB597QMeib3YxNfE=
@@ -10561,7 +10822,7 @@ last-call-webpack-plugin@^3.0.0:
     lodash "^4.17.5"
     webpack-sources "^1.1.0"
 
-lazy-ass@1.6.0:
+lazy-ass@1.6.0, lazy-ass@^1.6.0:
   version "1.6.0"
   resolved "https://registry.yarnpkg.com/lazy-ass/-/lazy-ass-1.6.0.tgz#7999655e8646c17f089fdd187d150d3324d54513"
   integrity sha1-eZllXoZGwX8In90YfRUNMyTVRRM=
@@ -10678,6 +10939,35 @@ lint-staged@^10.0.0:
     string-argv "0.3.1"
     stringify-object "^3.3.0"
 
+listr-silent-renderer@^1.1.1:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/listr-silent-renderer/-/listr-silent-renderer-1.1.1.tgz#924b5a3757153770bf1a8e3fbf74b8bbf3f9242e"
+  integrity sha1-kktaN1cVN3C/Go4/v3S4u/P5JC4=
+
+listr-update-renderer@^0.5.0:
+  version "0.5.0"
+  resolved "https://registry.yarnpkg.com/listr-update-renderer/-/listr-update-renderer-0.5.0.tgz#4ea8368548a7b8aecb7e06d8c95cb45ae2ede6a2"
+  integrity sha512-tKRsZpKz8GSGqoI/+caPmfrypiaq+OQCbd+CovEC24uk1h952lVj5sC7SqyFUm+OaJ5HN/a1YLt5cit2FMNsFA==
+  dependencies:
+    chalk "^1.1.3"
+    cli-truncate "^0.2.1"
+    elegant-spinner "^1.0.1"
+    figures "^1.7.0"
+    indent-string "^3.0.0"
+    log-symbols "^1.0.2"
+    log-update "^2.3.0"
+    strip-ansi "^3.0.1"
+
+listr-verbose-renderer@^0.5.0:
+  version "0.5.0"
+  resolved "https://registry.yarnpkg.com/listr-verbose-renderer/-/listr-verbose-renderer-0.5.0.tgz#f1132167535ea4c1261102b9f28dac7cba1e03db"
+  integrity sha512-04PDPqSlsqIOaaaGZ+41vq5FejI9auqTInicFRndCBgE3bXG8D6W1I+mWhk+1nqbHmyhla/6BUrd5OSiHwKRXw==
+  dependencies:
+    chalk "^2.4.1"
+    cli-cursor "^2.1.0"
+    date-fns "^1.27.2"
+    figures "^2.0.0"
+
 listr2@^2.6.0:
   version "2.6.0"
   resolved "https://registry.npm.taobao.org/listr2/download/listr2-2.6.0.tgz?cache=0&sync_timestamp=1597631153159&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Flistr2%2Fdownload%2Flistr2-2.6.0.tgz#788a3d202978a1b8582062952cbc49272c8e206a"
@@ -10692,6 +10982,21 @@ listr2@^2.6.0:
     rxjs "^6.6.2"
     through "^2.3.8"
 
+listr@^0.14.3:
+  version "0.14.3"
+  resolved "https://registry.yarnpkg.com/listr/-/listr-0.14.3.tgz#2fea909604e434be464c50bddba0d496928fa586"
+  integrity sha512-RmAl7su35BFd/xoMamRjpIE4j3v+L28o8CT5YhAXQJm1fD+1l9ngXY8JAQRJ+tFK2i5njvi0iRUKV09vPwA0iA==
+  dependencies:
+    "@samverschueren/stream-to-observable" "^0.3.0"
+    is-observable "^1.1.0"
+    is-promise "^2.1.0"
+    is-stream "^1.1.0"
+    listr-silent-renderer "^1.1.1"
+    listr-update-renderer "^0.5.0"
+    listr-verbose-renderer "^0.5.0"
+    p-map "^2.0.0"
+    rxjs "^6.3.3"
+
 load-json-file@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npm.taobao.org/load-json-file/download/load-json-file-2.0.0.tgz#7947e42149af80d696cbf797bcaabcfe1fe29ca8"
@@ -10842,6 +11147,11 @@ lodash.memoize@4.1.2, lodash.memoize@^4.1.2:
   resolved "https://registry.npm.taobao.org/lodash.memoize/download/lodash.memoize-4.1.2.tgz#bcc6c49a42a2840ed997f323eada5ecd182e0bfe"
   integrity sha1-vMbEmkKihA7Zl/Mj6tpezRguC/4=
 
+lodash.once@^4.1.1:
+  version "4.1.1"
+  resolved "https://registry.yarnpkg.com/lodash.once/-/lodash.once-4.1.1.tgz#0dd3971213c7c56df880977d504c88fb471a97ac"
+  integrity sha1-DdOXEhPHxW34gJd9UEyI+0cal6w=
+
 lodash.snakecase@^4.0.1:
   version "4.1.1"
   resolved "https://registry.npm.taobao.org/lodash.snakecase/download/lodash.snakecase-4.1.1.tgz#39d714a35357147837aefd64b5dcbb16becd8f8d"
@@ -10912,6 +11222,13 @@ lodash@4.17.20, "lodash@>=3.5 <5", lodash@^4.15.0, lodash@^4.17.10, lodash@^4.17
   resolved "https://registry.npm.taobao.org/lodash/download/lodash-4.17.20.tgz?cache=0&sync_timestamp=1597336001963&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Flodash%2Fdownload%2Flodash-4.17.20.tgz#b44a9b6297bcb698f1c51a3545a2b3b368d59c52"
   integrity sha1-tEqbYpe8tpjxxRo1RaKzs2jVnFI=
 
+log-symbols@^1.0.2:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/log-symbols/-/log-symbols-1.0.2.tgz#376ff7b58ea3086a0f09facc74617eca501e1a18"
+  integrity sha1-N2/3tY6jCGoPCfrMdGF+ylAeGhg=
+  dependencies:
+    chalk "^1.0.0"
+
 log-symbols@^2.0.0, log-symbols@^2.2.0:
   version "2.2.0"
   resolved "https://registry.npm.taobao.org/log-symbols/download/log-symbols-2.2.0.tgz#5740e1c5d6f0dfda4ad9323b5332107ef6b4c40a"
@@ -10933,6 +11250,15 @@ log-symbols@^4.0.0:
   dependencies:
     chalk "^4.0.0"
 
+log-update@^2.3.0:
+  version "2.3.0"
+  resolved "https://registry.yarnpkg.com/log-update/-/log-update-2.3.0.tgz#88328fd7d1ce7938b29283746f0b1bc126b24708"
+  integrity sha1-iDKP19HOeTiykoN0bwsbwSayRwg=
+  dependencies:
+    ansi-escapes "^3.0.0"
+    cli-cursor "^2.0.0"
+    wrap-ansi "^3.0.1"
+
 log-update@^4.0.0:
   version "4.0.0"
   resolved "https://registry.npm.taobao.org/log-update/download/log-update-4.0.0.tgz#589ecd352471f2a1c0c570287543a64dfd20e0a1"
@@ -11752,7 +12078,7 @@ node-fetch@2.6.0, node-fetch@^2.6.0:
   resolved "https://registry.npm.taobao.org/node-fetch/download/node-fetch-2.6.0.tgz#e633456386d4aa55863f676a7ab0daa8fdecb0fd"
   integrity sha1-5jNFY4bUqlWGP2dqerDaqP3ssP0=
 
-node-fetch@2.6.1, node-fetch@^2.6.1:
+node-fetch@2.6.1:
   version "2.6.1"
   resolved "https://registry.npm.taobao.org/node-fetch/download/node-fetch-2.6.1.tgz?cache=0&sync_timestamp=1599309120224&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fnode-fetch%2Fdownload%2Fnode-fetch-2.6.1.tgz#045bd323631f76ed2e2b55573394416b639a0052"
   integrity sha1-BFvTI2Mfdu0uK1VXM5RBa2OaAFI=
@@ -11947,6 +12273,11 @@ num2fraction@^1.2.2:
   resolved "https://registry.npm.taobao.org/num2fraction/download/num2fraction-1.2.2.tgz#6f682b6a027a4e9ddfa4564cd2589d1d4e669ede"
   integrity sha1-b2gragJ6Tp3fpFZM0lidHU5mnt4=
 
+number-is-nan@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/number-is-nan/-/number-is-nan-1.0.1.tgz#097b602b53422a522c1afb8790318336941a011d"
+  integrity sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0=
+
 nwsapi@^2.1.3, nwsapi@^2.2.0:
   version "2.2.0"
   resolved "https://registry.npm.taobao.org/nwsapi/download/nwsapi-2.2.0.tgz#204879a9e3d068ff2a55139c2c772780681a38b7"
@@ -12084,6 +12415,11 @@ once@^1.3.0, once@^1.3.1, once@^1.4.0:
   dependencies:
     wrappy "1"
 
+onetime@^1.0.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/onetime/-/onetime-1.1.0.tgz#a1f7838f8314c516f05ecefcbc4ccfe04b4ed789"
+  integrity sha1-ofeDj4MUxRbwXs78vEzP4EtO14k=
+
 onetime@^2.0.0:
   version "2.0.1"
   resolved "https://registry.npm.taobao.org/onetime/download/onetime-2.0.1.tgz#067428230fd67443b2794b22bba528b6867962d4"
@@ -12206,6 +12542,11 @@ os-tmpdir@~1.0.2:
   resolved "https://registry.npm.taobao.org/os-tmpdir/download/os-tmpdir-1.0.2.tgz#bbe67406c79aa85c5cfec766fe5734555dfa1274"
   integrity sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=
 
+ospath@^1.2.2:
+  version "1.2.2"
+  resolved "https://registry.yarnpkg.com/ospath/-/ospath-1.2.2.tgz#1276639774a3f8ef2572f7fe4280e0ea4550c07b"
+  integrity sha1-EnZjl3Sj+O8lcvf+QoDg6kVQwHs=
+
 p-cancelable@^1.0.0:
   version "1.1.0"
   resolved "https://registry.npm.taobao.org/p-cancelable/download/p-cancelable-1.1.0.tgz#d078d15a3af409220c886f1d9a0ca2e441ab26cc"
@@ -12271,6 +12612,11 @@ p-locate@^4.1.0:
   dependencies:
     p-limit "^2.2.0"
 
+p-map@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/p-map/-/p-map-2.1.0.tgz#310928feef9c9ecc65b68b17693018a665cea175"
+  integrity sha512-y3b8Kpd8OAN444hxfBbFfj1FY/RjtTd8tzYwhUqNYXx0fXx2iX4maP4Qr6qhIKbQXI02wTLAda4fYUbDagTUFw==
+
 p-map@^4.0.0:
   version "4.0.0"
   resolved "https://registry.npm.taobao.org/p-map/download/p-map-4.0.0.tgz#bb2f95a5eda2ec168ec9274e06a747c3e2904d2b"
@@ -12547,7 +12893,7 @@ picomatch@^2.0.4, picomatch@^2.0.5, picomatch@^2.2.1:
   resolved "https://registry.npm.taobao.org/picomatch/download/picomatch-2.2.2.tgz#21f333e9b6b8eaff02468f5146ea406d345f4dad"
   integrity sha1-IfMz6ba46v8CRo9RRupAbTRfTa0=
 
-pify@^2.0.0, pify@^2.3.0:
+pify@^2.0.0, pify@^2.2.0, pify@^2.3.0:
   version "2.3.0"
   resolved "https://registry.npm.taobao.org/pify/download/pify-2.3.0.tgz#ed141a6ac043a849ea588498e7dca8b15330e90c"
   integrity sha1-7RQaasBDqEnqWISY59yosVMw6Qw=
@@ -13482,6 +13828,11 @@ prettier@^2.0.1, prettier@^2.0.2:
   resolved "https://registry.npm.taobao.org/prettier/download/prettier-2.1.1.tgz?cache=0&sync_timestamp=1598414107882&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fprettier%2Fdownload%2Fprettier-2.1.1.tgz#d9485dd5e499daa6cb547023b87a6cf51bee37d6"
   integrity sha1-2Uhd1eSZ2qbLVHAjuHps9RvuN9Y=
 
+pretty-bytes@^5.4.1:
+  version "5.4.1"
+  resolved "https://registry.yarnpkg.com/pretty-bytes/-/pretty-bytes-5.4.1.tgz#cd89f79bbcef21e3d21eb0da68ffe93f803e884b"
+  integrity sha512-s1Iam6Gwz3JI5Hweaz4GoCD1WUNUIyzePFy5+Js2hjwGVt2Z79wNN+ZKOZ2vB6C+Xs6njyB84Z1IthQg8d9LxA==
+
 pretty-format@^25.2.1, pretty-format@^25.5.0:
   version "25.5.0"
   resolved "https://registry.npm.taobao.org/pretty-format/download/pretty-format-25.5.0.tgz?cache=0&sync_timestamp=1598096539151&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fpretty-format%2Fdownload%2Fpretty-format-25.5.0.tgz#7873c1d774f682c34b8d48b6743a2bf2ac55791a"
@@ -13702,24 +14053,6 @@ puppeteer-core@~1.12.0:
     rimraf "^2.6.1"
     ws "^6.1.0"
 
-puppeteer@^5.4.1:
-  version "5.4.1"
-  resolved "https://registry.yarnpkg.com/puppeteer/-/puppeteer-5.4.1.tgz#f2038eb23a0f593ed2cce0d6e7cd5c43aecd6756"
-  integrity sha512-8u6r9tFm3gtMylU4uCry1W/CeAA8uczKMONvGvivkTsGqKA7iB7DWO2CBFYlB9GY6/IEoq9vkI5slJWzUBkwNw==
-  dependencies:
-    debug "^4.1.0"
-    devtools-protocol "0.0.809251"
-    extract-zip "^2.0.0"
-    https-proxy-agent "^4.0.0"
-    node-fetch "^2.6.1"
-    pkg-dir "^4.2.0"
-    progress "^2.0.1"
-    proxy-from-env "^1.0.0"
-    rimraf "^3.0.2"
-    tar-fs "^2.0.0"
-    unbzip2-stream "^1.3.3"
-    ws "^7.2.3"
-
 q@^1.1.2:
   version "1.5.1"
   resolved "https://registry.npm.taobao.org/q/download/q-1.5.1.tgz#7e32f75b41381291d04611f1bf14109ac00651d7"
@@ -13799,6 +14132,11 @@ railroad-diagrams@^1.0.0:
   resolved "https://registry.npm.taobao.org/railroad-diagrams/download/railroad-diagrams-1.0.0.tgz#eb7e6267548ddedfb899c1b90e57374559cddb7e"
   integrity sha1-635iZ1SN3t+4mcG5Dlc3RVnN234=
 
+ramda@~0.26.1:
+  version "0.26.1"
+  resolved "https://registry.yarnpkg.com/ramda/-/ramda-0.26.1.tgz#8d41351eb8111c55353617fc3bbffad8e4d35d06"
+  integrity sha512-hLWjpy7EnsDBb0p+Z3B7rPi3GDeRG5ZtiI33kJhTt+ORCd38AbAIjB/9zRIUoeTbE/AVX5ZkU7m6bznsvrf8eQ==
+
 randexp@0.4.6:
   version "0.4.6"
   resolved "https://registry.npm.taobao.org/randexp/download/randexp-0.4.6.tgz#e986ad5e5e31dae13ddd6f7b3019aa7c87f60ca3"
@@ -15093,6 +15431,13 @@ replace-ext@^1.0.0:
   resolved "https://registry.npm.taobao.org/replace-ext/download/replace-ext-1.0.1.tgz#2d6d996d04a15855d967443631dd5f77825b016a"
   integrity sha1-LW2ZbQShWFXZZ0Q2Md1fd4JbAWo=
 
+request-progress@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/request-progress/-/request-progress-3.0.0.tgz#4ca754081c7fec63f505e4faa825aa06cd669dbe"
+  integrity sha1-TKdUCBx/7GP1BeT6qCWqBs1mnb4=
+  dependencies:
+    throttleit "^1.0.0"
+
 request-promise-core@1.1.4:
   version "1.1.4"
   resolved "https://registry.npm.taobao.org/request-promise-core/download/request-promise-core-1.1.4.tgz?cache=0&sync_timestamp=1595380405821&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Frequest-promise-core%2Fdownload%2Frequest-promise-core-1.1.4.tgz#3eedd4223208d419867b78ce815167d10593a22f"
@@ -15216,6 +15561,14 @@ responselike@^1.0.2:
   dependencies:
     lowercase-keys "^1.0.0"
 
+restore-cursor@^1.0.1:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/restore-cursor/-/restore-cursor-1.0.1.tgz#34661f46886327fed2991479152252df92daa541"
+  integrity sha1-NGYfRohjJ/7SmRR5FSJS35LapUE=
+  dependencies:
+    exit-hook "^1.0.0"
+    onetime "^1.0.0"
+
 restore-cursor@^2.0.0:
   version "2.0.0"
   resolved "https://registry.npm.taobao.org/restore-cursor/download/restore-cursor-2.0.0.tgz#9f7ee287f82fd326d4fd162923d62129eee0dfaf"
@@ -15478,6 +15831,13 @@ runscript@^1.4.0:
     debug "^2.6.8"
     is-type-of "^1.1.0"
 
+rxjs@^6.3.3, rxjs@^6.5.5:
+  version "6.6.3"
+  resolved "https://registry.yarnpkg.com/rxjs/-/rxjs-6.6.3.tgz#8ca84635c4daa900c0d3967a6ee7ac60271ee552"
+  integrity sha512-trsQc+xYYXZ3urjOiJOuCOa5N3jAZ3eiSpQB5hIT8zGlL2QfnHLJ2r7GMkBGuIausdJN1OneaI6gQlsqNHHmZQ==
+  dependencies:
+    tslib "^1.9.0"
+
 rxjs@^6.4.0, rxjs@^6.6.0, rxjs@^6.6.2:
   version "6.6.2"
   resolved "https://registry.npm.taobao.org/rxjs/download/rxjs-6.6.2.tgz#8096a7ac03f2cc4fe5860ef6e572810d9e01c0d2"
@@ -15485,13 +15845,6 @@ rxjs@^6.4.0, rxjs@^6.6.0, rxjs@^6.6.2:
   dependencies:
     tslib "^1.9.0"
 
-rxjs@^6.5.5:
-  version "6.6.3"
-  resolved "https://registry.yarnpkg.com/rxjs/-/rxjs-6.6.3.tgz#8ca84635c4daa900c0d3967a6ee7ac60271ee552"
-  integrity sha512-trsQc+xYYXZ3urjOiJOuCOa5N3jAZ3eiSpQB5hIT8zGlL2QfnHLJ2r7GMkBGuIausdJN1OneaI6gQlsqNHHmZQ==
-  dependencies:
-    tslib "^1.9.0"
-
 safe-buffer@5.1.2, safe-buffer@~5.1.0, safe-buffer@~5.1.1:
   version "5.1.2"
   resolved "https://registry.npm.taobao.org/safe-buffer/download/safe-buffer-5.1.2.tgz?cache=0&sync_timestamp=1589129010497&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fsafe-buffer%2Fdownload%2Fsafe-buffer-5.1.2.tgz#991ec69d296e0313747d59bdfd2b745c35f8828d"
@@ -15837,6 +16190,11 @@ slash@^3.0.0:
   resolved "https://registry.npm.taobao.org/slash/download/slash-3.0.0.tgz?cache=0&sync_timestamp=1588851832661&other_urls=https%3A%2F%2Fregistry.npm.taobao.org%2Fslash%2Fdownload%2Fslash-3.0.0.tgz#6539be870c165adbd5240220dbe361f1bc4d4634"
   integrity sha1-ZTm+hwwWWtvVJAIg2+Nh8bxNRjQ=
 
+slice-ansi@0.0.4:
+  version "0.0.4"
+  resolved "https://registry.yarnpkg.com/slice-ansi/-/slice-ansi-0.0.4.tgz#edbf8903f66f7ce2f8eafd6ceed65e264c831b35"
+  integrity sha1-7b+JA/ZvfOL46v1s7tZeJkyDGzU=
+
 slice-ansi@^2.1.0:
   version "2.1.0"
   resolved "https://registry.npm.taobao.org/slice-ansi/download/slice-ansi-2.1.0.tgz#cacd7693461a637a5788d92a7dd4fba068e81636"
@@ -16286,7 +16644,16 @@ string-length@^3.1.0:
     astral-regex "^1.0.0"
     strip-ansi "^5.2.0"
 
-string-width@^2.0.0, string-width@^2.1.0:
+string-width@^1.0.1:
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/string-width/-/string-width-1.0.2.tgz#118bdf5b8cdc51a2a7e70d211e07e2b0b9b107d3"
+  integrity sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=
+  dependencies:
+    code-point-at "^1.0.0"
+    is-fullwidth-code-point "^1.0.0"
+    strip-ansi "^3.0.0"
+
+string-width@^2.0.0, string-width@^2.1.0, string-width@^2.1.1:
   version "2.1.1"
   resolved "https://registry.npm.taobao.org/string-width/download/string-width-2.1.1.tgz#ab93f27a8dc13d28cac815c462143a6d9012ae9e"
   integrity sha1-q5Pyeo3BPSjKyBXEYhQ6bZASrp4=
@@ -16412,7 +16779,7 @@ strip-ansi@6.0.0, strip-ansi@^6.0.0:
   dependencies:
     ansi-regex "^5.0.0"
 
-strip-ansi@^3.0.0:
+strip-ansi@^3.0.0, strip-ansi@^3.0.1:
   version "3.0.1"
   resolved "https://registry.npm.taobao.org/strip-ansi/download/strip-ansi-3.0.1.tgz#6a385fb8853d952d5ff05d0e8aaf94278dc63dcf"
   integrity sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=
@@ -16837,6 +17204,13 @@ supports-color@^7.0.0, supports-color@^7.1.0:
   dependencies:
     has-flag "^4.0.0"
 
+supports-color@^7.2.0:
+  version "7.2.0"
+  resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-7.2.0.tgz#1b7dcdcb32b8138801b3e478ba6a51caa89648da"
+  integrity sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==
+  dependencies:
+    has-flag "^4.0.0"
+
 supports-hyperlinks@^1.0.1:
   version "1.0.1"
   resolved "https://registry.npm.taobao.org/supports-hyperlinks/download/supports-hyperlinks-1.0.1.tgz#71daedf36cc1060ac5100c351bb3da48c29c0ef7"
@@ -16960,7 +17334,7 @@ sylvanas@^0.4.0:
     import-fresh "^3.1.0"
     prettier "^1.17.1"
 
-symbol-observable@^1.0.3, symbol-observable@^1.2.0:
+symbol-observable@^1.0.3, symbol-observable@^1.1.0, symbol-observable@^1.2.0:
   version "1.2.0"
   resolved "https://registry.npm.taobao.org/symbol-observable/download/symbol-observable-1.2.0.tgz#c22688aed4eab3cdc2dfeacbb561660560a00804"
   integrity sha1-wiaIrtTqs83C3+rLtWFmBWCgCAQ=
@@ -17089,6 +17463,11 @@ throat@^5.0.0:
   resolved "https://registry.npm.taobao.org/throat/download/throat-5.0.0.tgz#c5199235803aad18754a667d659b5e72ce16764b"
   integrity sha1-xRmSNYA6rRh1SmZ9ZZtecs4Wdks=
 
+throttleit@^1.0.0:
+  version "1.0.0"
+  resolved "https://registry.yarnpkg.com/throttleit/-/throttleit-1.0.0.tgz#9e785836daf46743145a5984b6268d828528ac6c"
+  integrity sha1-nnhYNtr0Z0MUWlmEtiaNgoUorGw=
+
 through2@^2.0.0:
   version "2.0.5"
   resolved "https://registry.npm.taobao.org/through2/download/through2-2.0.5.tgz#01c1e39eb31d07cb7d03a96a70823260b23132cd"
@@ -17157,6 +17536,13 @@ tmp@^0.0.33:
   dependencies:
     os-tmpdir "~1.0.2"
 
+tmp@~0.2.1:
+  version "0.2.1"
+  resolved "https://registry.yarnpkg.com/tmp/-/tmp-0.2.1.tgz#8457fc3037dcf4719c251367a1af6500ee1ccf14"
+  integrity sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ==
+  dependencies:
+    rimraf "^3.0.0"
+
 tmpl@1.0.x:
   version "1.0.4"
   resolved "https://registry.npm.taobao.org/tmpl/download/tmpl-1.0.4.tgz#23640dd7b42d00433911140820e5cf440e521dd1"
@@ -17738,6 +18124,11 @@ unstated-next@^1.1.0:
   resolved "https://registry.npm.taobao.org/unstated-next/download/unstated-next-1.1.0.tgz#7bb4911a12fdf3cc8ad3eb11a0b315e4a8685ea8"
   integrity sha1-e7SRGhL988yK0+sRoLMV5KhoXqg=
 
+untildify@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/untildify/-/untildify-4.0.0.tgz#2bc947b953652487e4600949fb091e3ae8cd919b"
+  integrity sha512-KK8xQ1mkzZeg9inewmFVDNkg3l5LUhoq9kN6iWYB/CC9YMG8HA+c1Q8HwDe6dEX7kErrEVNVBO3fWsVq5iDgtw==
+
 upath@^1.1.1:
   version "1.2.0"
   resolved "https://registry.npm.taobao.org/upath/download/upath-1.2.0.tgz#8f66dbcd55a883acdae4408af8b035a5044c1894"
@@ -18292,6 +18683,14 @@ worker-rpc@^0.1.0:
   dependencies:
     microevent.ts "~0.1.1"
 
+wrap-ansi@^3.0.1:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/wrap-ansi/-/wrap-ansi-3.0.1.tgz#288a04d87eda5c286e060dfe8f135ce8d007f8ba"
+  integrity sha1-KIoE2H7aXChuBg3+jxNc6NAH+Lo=
+  dependencies:
+    string-width "^2.1.1"
+    strip-ansi "^4.0.0"
+
 wrap-ansi@^6.0.0, wrap-ansi@^6.2.0:
   version "6.2.0"
   resolved "https://registry.npm.taobao.org/wrap-ansi/download/wrap-ansi-6.2.0.tgz#e9393ba07102e6c91a3b221478f0257cd2856e53"
