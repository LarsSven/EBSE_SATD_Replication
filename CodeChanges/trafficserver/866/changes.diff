diff --git a/proxy/InkAPI.cc b/proxy/InkAPI.cc
index b12e82c730a..e0beb2336be 100644
--- a/proxy/InkAPI.cc
+++ b/proxy/InkAPI.cc
@@ -2339,7 +2339,12 @@ TSStringPercentEncode(const char *str, int str_len, char *dst, size_t dst_size,
   sdk_assert(str_len < static_cast<int>(dst_size));
 
   // TODO: Perhaps we should make escapify_url() deal with const properly...
-  if (NULL == LogUtils::escapify_url(NULL, const_cast<char *>(str), str_len, &new_len, dst, dst_size, map)) {
+  // You would think making escapify_url const correct for the source argument would be easy, but in the case where
+  // No escaping is needed, the source argument is returned.  If there is a destination argument, the source is copied over
+  // However, if there is no destination argument, none is allocated.  I don't understand the full possibility of calling cases.
+  // It seems like we might want to review how this is being called and perhaps create a number of smaller accessor methods that
+  // can be set up correctly.
+  if (NULL == LogUtils::pure_escapify_url(NULL, const_cast<char *>(str), str_len, &new_len, dst, dst_size, map)) {
     if (length) {
       *length = 0;
     }
diff --git a/proxy/logging/LogUtils.cc b/proxy/logging/LogUtils.cc
index 22a1cb11c9a..92cda9ad61c 100644
--- a/proxy/logging/LogUtils.cc
+++ b/proxy/logging/LogUtils.cc
@@ -254,16 +254,23 @@ LogUtils::strip_trailing_newline(char *buf)
 }
 
 /*-------------------------------------------------------------------------
-  LogUtils::escapify_url
+  LogUtils::escapify_url_common
 
   This routine will escapify a URL to remove spaces (and perhaps other ugly
   characters) from a URL and replace them with a hex escape sequence.
   Since the escapes are larger (multi-byte) than the characters being
   replaced, the string returned will be longer than the string passed.
+
+  This is a worker function called by escapify_url and pure_escapify_url.  These
+  functions differ on whether the function tries to detect and avoid
+  double URL encoding (escapify_url) or not (pure_escapify_url)
   -------------------------------------------------------------------------*/
 
+namespace
+{
 char *
-LogUtils::escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, char *dst, size_t dst_size, const unsigned char *map)
+escapify_url_common(Arena *arena, char *url, size_t len_in, int *len_out, char *dst, size_t dst_size, const unsigned char *map,
+                    bool pure_escape)
 {
   // codes_to_escape is a bitmap encoding the codes that should be escaped.
   // These are all the codes defined in section 2.4.3 of RFC 2396
@@ -359,6 +366,22 @@ LogUtils::escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, cha
   while (from < in_url_end) {
     unsigned char c = *from;
     if (map[c / 8] & (1 << (7 - c % 8))) {
+      /*
+       * If two characters following a '%' don't need to be encoded, then it must
+       * mean that the three character sequence is already encoded.  Just copy it over.
+       */
+      if (!pure_escape && (*from == '%') && ((from + 2) < in_url_end)) {
+        unsigned char c1   = *(from + 1);
+        unsigned char c2   = *(from + 2);
+        bool needsEncoding = ((map[c1 / 8] & (1 << (7 - c1 % 8))) || (map[c2 / 8] & (1 << (7 - c2 % 8))));
+        if (!needsEncoding) {
+          out_len -= 2;
+          Debug("log-utils", "character already encoded..skipping %c, %c, %c", *from, *(from + 1), *(from + 2));
+          *to++ = *from++;
+          continue;
+        }
+      }
+
       *to++ = '%';
       *to++ = hex_digit[c / 16];
       *to++ = hex_digit[c % 16];
@@ -372,6 +395,20 @@ LogUtils::escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, cha
   *len_out = out_len;
   return new_url;
 }
+}
+
+char *
+LogUtils::escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, char *dst, size_t dst_size, const unsigned char *map)
+{
+  return escapify_url_common(arena, url, len_in, len_out, dst, dst_size, map, false);
+}
+
+char *
+LogUtils::pure_escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, char *dst, size_t dst_size,
+                            const unsigned char *map)
+{
+  return escapify_url_common(arena, url, len_in, len_out, dst, dst_size, map, true);
+}
 
 /*-------------------------------------------------------------------------
   LogUtils::remove_content_type_attributes
diff --git a/proxy/logging/LogUtils.h b/proxy/logging/LogUtils.h
index 4a0737d60b3..908f93fed75 100644
--- a/proxy/logging/LogUtils.h
+++ b/proxy/logging/LogUtils.h
@@ -51,6 +51,8 @@ void manager_alarm(AlarmType alarm_type, const char *msg, ...) TS_PRINTFLIKE(2,
 void strip_trailing_newline(char *buf);
 char *escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, char *dst = NULL, size_t dst_size = 0,
                    const unsigned char *map = NULL);
+char *pure_escapify_url(Arena *arena, char *url, size_t len_in, int *len_out, char *dst = NULL, size_t dst_size = 0,
+                        const unsigned char *map = NULL);
 char *int64_to_str(char *buf, unsigned int buf_size, int64_t val, unsigned int *total_chars, unsigned int req_width = 0,
                    char pad_char = '0');
 void remove_content_type_attributes(char *type_str, int *type_len);
