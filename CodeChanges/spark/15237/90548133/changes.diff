diff --git a/core/src/main/scala/org/apache/spark/scheduler/SchedulableBuilder.scala b/core/src/main/scala/org/apache/spark/scheduler/SchedulableBuilder.scala
index 641b7bd903afd..ef23f60504354 100644
--- a/core/src/main/scala/org/apache/spark/scheduler/SchedulableBuilder.scala
+++ b/core/src/main/scala/org/apache/spark/scheduler/SchedulableBuilder.scala
@@ -22,8 +22,6 @@ import java.util.{NoSuchElementException, Properties}
 
 import scala.xml.XML
 
-import org.apache.commons.lang3.StringUtils
-
 import org.apache.spark.SparkConf
 import org.apache.spark.internal.Logging
 import org.apache.spark.scheduler.SchedulingMode.SchedulingMode
@@ -106,13 +104,13 @@ private[spark] class FairSchedulableBuilder(val rootPool: Pool, conf: SparkConf)
 
       val poolName = (poolNode \ POOL_NAME_PROPERTY).text
 
-      val xmlSchedulingMode = (poolNode \ SCHEDULING_MODE_PROPERTY).text
+      val xmlSchedulingMode = (poolNode \ SCHEDULING_MODE_PROPERTY).text.trim.toUpperCase
       val schedulingMode = getSchedulingModeValue(xmlSchedulingMode, DEFAULT_SCHEDULING_MODE)
 
-      val xmlMinShare = (poolNode \ MINIMUM_SHARES_PROPERTY).text
+      val xmlMinShare = (poolNode \ MINIMUM_SHARES_PROPERTY).text.trim
       val minShare = getIntValue(MINIMUM_SHARES_PROPERTY, xmlMinShare, DEFAULT_MINIMUM_SHARE)
 
-      val xmlWeight = (poolNode \ WEIGHT_PROPERTY).text
+      val xmlWeight = (poolNode \ WEIGHT_PROPERTY).text.trim
       val weight = getIntValue(WEIGHT_PROPERTY, xmlWeight, DEFAULT_WEIGHT)
 
       rootPool.addSchedulable(new Pool(poolName, schedulingMode, minShare, weight))
@@ -123,34 +121,31 @@ private[spark] class FairSchedulableBuilder(val rootPool: Pool, conf: SparkConf)
   }
 
   private def getSchedulingModeValue(data: String, defaultValue: SchedulingMode): SchedulingMode = {
-    if (StringUtils.isNotBlank(data)
-      && checkType(SchedulingMode.withName(data.toUpperCase))
-      && SchedulingMode.withName(data.toUpperCase) != SchedulingMode.NONE) {
-      SchedulingMode.withName(data.toUpperCase)
-    } else {
-      logWarning(s"Unsupported schedulingMode: $data, using the default schedulingMode: " +
-        s"$defaultValue")
-      defaultValue
+    val warningMessage = s"Unsupported schedulingMode: $data, using the default schedulingMode: " +
+      s"$defaultValue"
+    try {
+      if (SchedulingMode.withName(data) != SchedulingMode.NONE) {
+        SchedulingMode.withName(data)
+      } else {
+        logWarning(warningMessage)
+        defaultValue
+      }
+    } catch {
+      case e: NoSuchElementException =>
+        logWarning(warningMessage)
+        defaultValue
     }
   }
 
   private def getIntValue(propertyName: String, data: String, defaultValue: Int): Int = {
-    if (StringUtils.isNotBlank(data) && checkType(data.toInt)) {
-      data.toInt
-    } else {
-      logWarning(s"$propertyName is blank or invalid: $data, using the default $propertyName: " +
-        s"$defaultValue")
-      defaultValue
-    }
-  }
-
-  private def checkType(fun: => Any): Boolean = {
     try {
-      fun
-      true
+      data.toInt
     } catch {
-      case e: NumberFormatException => false
-      case e: NoSuchElementException => false
+      case e: NumberFormatException =>
+        logWarning(s"Error while loading scheduler allocation file at $schedulerAllocFile. " +
+          s"$propertyName is blank or invalid: $data, using the default $propertyName: " +
+          s"$defaultValue")
+        defaultValue
     }
   }
 
diff --git a/core/src/test/resources/fairscheduler-with-invalid-data.xml b/core/src/test/resources/fairscheduler-with-invalid-data.xml
index 3084025f2c0b2..9d05fbc76283d 100644
--- a/core/src/test/resources/fairscheduler-with-invalid-data.xml
+++ b/core/src/test/resources/fairscheduler-with-invalid-data.xml
@@ -72,4 +72,19 @@
         <weight>2</weight>
         <schedulingMode></schedulingMode>
     </pool>
+    <pool name="pool_with_min_share_surrounded_whitespace">
+        <minShare> 3 </minShare>
+        <weight>2</weight>
+        <schedulingMode>FAIR</schedulingMode>
+    </pool>
+    <pool name="pool_with_weight_surrounded_whitespace">
+        <minShare>1</minShare>
+        <weight> 2 </weight>
+        <schedulingMode>FAIR</schedulingMode>
+    </pool>
+    <pool name="pool_with_scheduling_mode_surrounded_whitespace">
+        <minShare>3</minShare>
+        <weight>2</weight>
+        <schedulingMode> FAIR </schedulingMode>
+    </pool>
 </allocations>
diff --git a/core/src/test/scala/org/apache/spark/scheduler/PoolSuite.scala b/core/src/test/scala/org/apache/spark/scheduler/PoolSuite.scala
index fa3029e07ad6e..8fc0a3adb10b4 100644
--- a/core/src/test/scala/org/apache/spark/scheduler/PoolSuite.scala
+++ b/core/src/test/scala/org/apache/spark/scheduler/PoolSuite.scala
@@ -31,10 +31,9 @@ class PoolSuite extends SparkFunSuite with LocalSparkContext {
   val LOCAL = "local"
   val APP_NAME = "PoolSuite"
   val SCHEDULER_ALLOCATION_FILE_PROPERTY = "spark.scheduler.allocation.file"
-  val SCHEDULER_POOL_PROPERTY = "spark.scheduler.pool"
 
   def createTaskSetManager(stageId: Int, numTasks: Int, taskScheduler: TaskSchedulerImpl)
-  : TaskSetManager = {
+    : TaskSetManager = {
     val tasks = Array.tabulate[Task[_]](numTasks) { i =>
       new FakeTask(stageId, i, Nil)
     }
@@ -94,9 +93,9 @@ class PoolSuite extends SparkFunSuite with LocalSparkContext {
     verifyPool(rootPool, "3", 0, 1, FIFO)
 
     val properties1 = new Properties()
-    properties1.setProperty(SCHEDULER_POOL_PROPERTY, "1")
+    properties1.setProperty(schedulableBuilder.FAIR_SCHEDULER_PROPERTIES, "1")
     val properties2 = new Properties()
-    properties2.setProperty(SCHEDULER_POOL_PROPERTY, "2")
+    properties2.setProperty(schedulableBuilder.FAIR_SCHEDULER_PROPERTIES, "2")
 
     val taskSetManager10 = createTaskSetManager(0, 1, taskScheduler)
     val taskSetManager11 = createTaskSetManager(1, 1, taskScheduler)
@@ -178,7 +177,7 @@ class PoolSuite extends SparkFunSuite with LocalSparkContext {
     scheduleTaskAndVerifyId(3, rootPool, 2)
   }
 
-  test("FairSchedulableBuilder sets default values for blank or invalid datas") {
+  test("SPARK-17663: FairSchedulableBuilder sets default values for blank or invalid datas") {
     val xmlPath = getClass.getClassLoader.getResource("fairscheduler-with-invalid-data.xml")
       .getFile()
     val conf = new SparkConf().set(SCHEDULER_ALLOCATION_FILE_PROPERTY, xmlPath)
@@ -199,6 +198,9 @@ class PoolSuite extends SparkFunSuite with LocalSparkContext {
     verifyPool(rootPool, "pool_with_empty_min_share", 0, 3, FAIR)
     verifyPool(rootPool, "pool_with_empty_weight", 2, 1, FAIR)
     verifyPool(rootPool, "pool_with_empty_scheduling_mode", 2, 2, FIFO)
+    verifyPool(rootPool, "pool_with_min_share_surrounded_whitespace", 3, 2, FAIR)
+    verifyPool(rootPool, "pool_with_weight_surrounded_whitespace", 1, 2, FAIR)
+    verifyPool(rootPool, "pool_with_scheduling_mode_surrounded_whitespace", 3, 2, FAIR)
   }
 
   private def verifyPool(rootPool: Pool, poolName: String, expectedInitMinShare: Int,
