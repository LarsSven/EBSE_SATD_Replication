diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java
index e3bfb2cb3631..48e1b9b2854e 100644
--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java
+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java
@@ -3541,7 +3541,7 @@ private List<SupplyPartitionInfo> assignHistoricalSuppliers(
             long maxCntr = maxCntrObj != null ? maxCntrObj.cnt : 0;
 
             NavigableSet<Long> nonMaxCntrs = e.getValue().headSet(maxCntr, false)
-                //Empty partition cannot be rebalanced by history effectively.
+                // Empty partition cannot be rebalanced by history effectively.
                 .tailSet(0L, false);
 
             // If minimal counter equals maximum then historical supplier does not necessary.
diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/IgniteHistoricalIteratorException.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/IgniteHistoricalIteratorException.java
index 5b641b253812..868cd55adeb2 100644
--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/IgniteHistoricalIteratorException.java
+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/IgniteHistoricalIteratorException.java
@@ -45,4 +45,13 @@ public IgniteHistoricalIteratorException(Throwable cause) {
     public IgniteHistoricalIteratorException(String msg, Throwable cause) {
         super(msg, cause);
     }
+
+    /**
+     * Creates a new exception with the specified message.
+     *
+     * @param msg Detail message.
+     */
+    public IgniteHistoricalIteratorException(String msg) {
+        super(msg);
+    }
 }
diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java
index 6cedc6fe2da7..a01085d3b1d3 100644
--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java
+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheOffheapManager.java
@@ -129,7 +129,7 @@ public class GridCacheOffheapManager extends IgniteCacheOffheapManagerImpl imple
      * Default is {@code 5}. Iterator starts from 5 updates earlier than expected.
      *
      */
-    public final long walAtomicCacheMargin = IgniteSystemProperties.getLong(
+    private final long walAtomicCacheMargin = IgniteSystemProperties.getLong(
         "WAL_MARGIN_FOR_ATOMIC_CACHE_HISTORICAL_REBALANCE", 5);
 
     /**
@@ -1027,11 +1027,8 @@ private Metas getOrAllocateCacheMetas() throws IgniteCheckedException {
 
         FileWALPointer latestReservedPointer = (FileWALPointer)database.latestWalPointerReservedForPreloading();
 
-        if (latestReservedPointer == null) {
-            log.warning("Historical iterator wasn't created, because WAL isn't reserved.");
-
-            return null;
-        }
+        if (latestReservedPointer == null)
+            throw new IgniteHistoricalIteratorException("Historical iterator wasn't created, because WAL isn't reserved.");
 
         Map<Integer, Long> partsCounters = new HashMap<>();
 
diff --git a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/checkpoint/CheckpointHistory.java b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/checkpoint/CheckpointHistory.java
index b5b244746460..511164ab5e2d 100644
--- a/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/checkpoint/CheckpointHistory.java
+++ b/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/checkpoint/CheckpointHistory.java
@@ -297,11 +297,7 @@ public List<CheckpointEntry> onWalTruncated(WALPointer ptr) {
 
                 CheckpointEntry oldestCpInHistory = firstCheckpoint();
 
-                Iterator<Map.Entry<GroupPartitionId, CheckpointEntry>> iter = earliestCp.entrySet().iterator();
-
-                while (iter.hasNext()) {
-                    Map.Entry<GroupPartitionId, CheckpointEntry> grpPartPerCp = iter.next();
-
+                for (Map.Entry<GroupPartitionId, CheckpointEntry> grpPartPerCp : earliestCp.entrySet()) {
                     if (grpPartPerCp.getValue() == deletedCpEntry)
                         grpPartPerCp.setValue(oldestCpInHistory);
                 }
@@ -452,6 +448,7 @@ private IgniteBiTuple<Long, Long> calculateWalSegmentsCovered() {
      * @param grpId Group id.
      * @param partsCounter Partition mapped to update counter.
      * @param latestReservedPointer Latest reserved WAL pointer.
+     * @param margin Margin pointer.
      * @return Earliest WAL pointer for group specified.
      */
     @Nullable public FileWALPointer searchEarliestWalPointer(
@@ -472,13 +469,7 @@ private IgniteBiTuple<Long, Long> calculateWalSegmentsCovered() {
         for (Long cpTs : checkpoints(true)) {
             CheckpointEntry cpEntry = entry(cpTs);
 
-            while (!F.isEmpty(historyPointerCandidate)) {
-                FileWALPointer ptr = historyPointerCandidate.poll()
-                    .choose(cpEntry, margin, partsCounter);
-
-                if (minPtr == null || ptr.compareTo(minPtr) < 0)
-                    minPtr = ptr;
-            }
+            minPtr = getMinimalPointer(partsCounter, margin, minPtr, historyPointerCandidate, cpEntry);
 
             Iterator<Map.Entry<Integer, Long>> iter = modifiedPartsCounter.entrySet().iterator();
 
@@ -511,7 +502,7 @@ private IgniteBiTuple<Long, Long> calculateWalSegmentsCovered() {
                 }
             }
 
-            if ((F.isEmpty(modifiedPartsCounter) && F.isEmpty(historyPointerCandidate)) || ptr.compareTo(latestReservedPointer) <= 0)
+            if ((F.isEmpty(modifiedPartsCounter) && F.isEmpty(historyPointerCandidate)) || ptr.compareTo(latestReservedPointer) == 0)
                 break;
         }
 
@@ -522,9 +513,31 @@ private IgniteBiTuple<Long, Long> calculateWalSegmentsCovered() {
                 + entry.getKey() + ", partCntrSince=" + entry.getValue() + "]");
         }
 
+        minPtr = getMinimalPointer(partsCounter, margin, minPtr, historyPointerCandidate, null);
+
+        return minPtr;
+    }
+
+    /**
+     * Finds a minimal WAL pointer.
+     *
+     * @param partsCounter Partition mapped to update counter.
+     * @param margin Margin pointer.
+     * @param minPtr Minimal WAL pointer which was determined before.
+     * @param historyPointerCandidate Collection of candidates for a historical WAL pointer.
+     * @param cpEntry Checkpoint entry.
+     * @return Minimal WAL pointer.
+     */
+    private FileWALPointer getMinimalPointer(
+        Map<Integer, Long> partsCounter,
+        long margin,
+        FileWALPointer minPtr,
+        LinkedList<WalPointerCandidate> historyPointerCandidate,
+        CheckpointEntry cpEntry
+    ) {
         while (!F.isEmpty(historyPointerCandidate)) {
             FileWALPointer ptr = historyPointerCandidate.poll()
-                .choose(null, margin, partsCounter);
+                .choose(cpEntry, margin, partsCounter);
 
             if (minPtr == null || ptr.compareTo(minPtr) < 0)
                 minPtr = ptr;
@@ -540,19 +553,19 @@ private IgniteBiTuple<Long, Long> calculateWalSegmentsCovered() {
      */
     private class WalPointerCandidate {
         /** Group id. */
-        private int grpId;
+        private final int grpId;
 
         /** Partition id. */
-        private int part;
+        private final int part;
 
         /** Partition counter. */
-        private long partContr;
+        private final long partContr;
 
         /** WAL pointer. */
-        private FileWALPointer walPntr;
+        private final FileWALPointer walPntr;
 
         /** Partition counter at the moment of WAL pointer. */
-        private long walPntrCntr;
+        private final long walPntrCntr;
 
         /**
          * @param grpId Group id.
diff --git a/modules/core/src/test/java/org/apache/ignite/cache/ResetLostPartitionTest.java b/modules/core/src/test/java/org/apache/ignite/cache/ResetLostPartitionTest.java
index 670509a2a337..3b972ef80afe 100644
--- a/modules/core/src/test/java/org/apache/ignite/cache/ResetLostPartitionTest.java
+++ b/modules/core/src/test/java/org/apache/ignite/cache/ResetLostPartitionTest.java
@@ -68,11 +68,11 @@ public class ResetLostPartitionTest extends GridCommonAbstractTest {
 
     /** {@inheritDoc} */
     @Override protected void afterTest() throws Exception {
+        super.afterTest();
+
         stopAllGrids();
 
         cleanPersistenceDir();
-
-        super.afterTest();
     }
 
     /** {@inheritDoc} */
@@ -262,9 +262,8 @@ private int averageSizeAroundAllNodes() {
         int totalSize = 0;
 
         for (Ignite ignite : IgnitionEx.allGrids()) {
-            for (String cacheName : CACHE_NAMES) {
+            for (String cacheName : CACHE_NAMES)
                 totalSize += ignite.cache(cacheName).size();
-            }
         }
 
         return totalSize / IgnitionEx.allGrids().size();
diff --git a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CachePartitionLostAfterSupplierHasLeftTest.java b/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CachePartitionLostAfterSupplierHasLeftTest.java
index 767a1f7ae8b6..cae4974f6de7 100644
--- a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CachePartitionLostAfterSupplierHasLeftTest.java
+++ b/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/CachePartitionLostAfterSupplierHasLeftTest.java
@@ -108,11 +108,11 @@ public class CachePartitionLostAfterSupplierHasLeftTest extends GridCommonAbstra
      * {@inheritDoc}
      */
     @Override protected void afterTest() throws Exception {
+        super.afterTest();
+
         stopAllGrids();
 
         cleanPersistenceDir();
-
-        super.afterTest();
     }
 
     /**
diff --git a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRecoveryTxLogicalRecordsTest.java b/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRecoveryTxLogicalRecordsTest.java
index a43377d61b9d..7f3847485683 100644
--- a/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRecoveryTxLogicalRecordsTest.java
+++ b/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/wal/WalRecoveryTxLogicalRecordsTest.java
@@ -372,7 +372,7 @@ public void testHistoricalRebalanceIterator() throws Exception {
                 map.addHistorical(0, i, entries, PARTS);
 
                 GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",
-                    new FileWALPointer(0,0,0));
+                    new FileWALPointer(0, 0, 0));
 
                 try (IgniteRebalanceIterator it = offh.rebalanceIterator(map, topVer)) {
                     assertNotNull(it);
@@ -391,14 +391,14 @@ public void testHistoricalRebalanceIterator() throws Exception {
                     assertFalse(it.hasNext());
                 }
                 finally {
-                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",null);
+                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading", null);
                 }
 
                 map = new IgniteDhtDemandedPartitionsMap();
                 map.addHistorical(1, i, entries, PARTS);
 
                 GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",
-                    new FileWALPointer(0,0,0));
+                    new FileWALPointer(0, 0, 0));
 
                 try (IgniteRebalanceIterator it = offh.rebalanceIterator(map, topVer)) {
                     assertNotNull(it);
@@ -417,7 +417,7 @@ public void testHistoricalRebalanceIterator() throws Exception {
                     assertFalse(it.hasNext());
                 }
                 finally {
-                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",null);
+                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading", null);
                 }
             }
 
@@ -439,7 +439,7 @@ public void testHistoricalRebalanceIterator() throws Exception {
                 map.addHistorical(0, i, entries, PARTS);
 
                 GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",
-                    new FileWALPointer(0,0,0));
+                    new FileWALPointer(0, 0, 0));
 
                 try (IgniteRebalanceIterator it = offh.rebalanceIterator(map, topVer)) {
                     long end = System.currentTimeMillis();
@@ -468,14 +468,14 @@ public void testHistoricalRebalanceIterator() throws Exception {
                     assertFalse(it.hasNext());
                 }
                 finally {
-                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",null);
+                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading", null);
                 }
 
                 map = new IgniteDhtDemandedPartitionsMap();
                 map.addHistorical(1, i, entries, PARTS);
 
                 GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",
-                    new FileWALPointer(0,0,0));
+                    new FileWALPointer(0, 0, 0));
 
                 try (IgniteRebalanceIterator it = offh.rebalanceIterator(map, topVer)) {
                     assertNotNull(it);
@@ -494,7 +494,7 @@ public void testHistoricalRebalanceIterator() throws Exception {
                     assertFalse(it.hasNext());
                 }
                 finally {
-                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",null);
+                    GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading", null);
                 }
             }
         }
@@ -987,7 +987,7 @@ private List<CacheDataRow> rows(Ignite ignite, int part, long from, long to) thr
         List<CacheDataRow> rows = new ArrayList<>();
 
         GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",
-            new FileWALPointer(0,0,0));
+            new FileWALPointer(0, 0, 0));
 
         try (IgniteRebalanceIterator it = offh.rebalanceIterator(map, topVer)) {
             assertNotNull(it);
@@ -996,7 +996,7 @@ private List<CacheDataRow> rows(Ignite ignite, int part, long from, long to) thr
                 rows.add(it.next());
         }
         finally {
-            GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading",null);
+            GridTestUtils.setFieldValue(grp.shared().database(), "reservedForPreloading", null);
         }
 
         return rows;
