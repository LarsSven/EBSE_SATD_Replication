diff --git a/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java b/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java
index a05132ec0e..84ca0bbe96 100644
--- a/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java
+++ b/phoenix-core/src/it/java/org/apache/phoenix/end2end/AlterTableIT.java
@@ -1387,5 +1387,27 @@ public void testAlterTableWithIndexesExtendPk() throws Exception {
 		}
 	}
 
+    @Test
+    public void testAddNonPKColumnWhenlastPKIsVARBINARYOrARRAY() throws Exception {
+        String tableName1 = generateUniqueName();
+        String tableName2 = generateUniqueName();
+        Properties props = PropertiesUtil.deepCopy(TestUtil.TEST_PROPERTIES);
+        try (Connection conn = DriverManager.getConnection(getUrl(), props);
+          Statement stmt = conn.createStatement()) {
+            conn.setAutoCommit(false);
+
+            String ddl = "CREATE TABLE " + tableName1 + " (id VARBINARY PRIMARY KEY, col1 INTEGER)";
+            stmt.execute(ddl);
+
+            String alterDdl = "ALTER TABLE " + tableName1 + " ADD col2 INTEGER";
+            stmt.execute(alterDdl);
+
+            String ddl2 = "CREATE TABLE " + tableName2 + " (id INTEGER ARRAY PRIMARY KEY, col1 INTEGER)";
+            stmt.execute(ddl2);
+
+            String alterDdl2 = "ALTER TABLE " + tableName2 + " ADD col2 INTEGER";
+            stmt.execute(alterDdl2);
+        }
+    }
 }
  
diff --git a/phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java b/phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java
index 3b6a77eca7..7891ebdcb3 100644
--- a/phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java
+++ b/phoenix-core/src/main/java/org/apache/phoenix/schema/MetaDataClient.java
@@ -3593,15 +3593,16 @@ public MutationState addColumn(PTable table, List<ColumnDef> origColumnDefs,
 
                 int position = table.getColumns().size();
 
-                List<PColumn> currentPKs = table.getPKColumns();
-                if (numCols > 0) {
+                boolean addPKColumns = columnDefs.stream().anyMatch(ColumnDef::isPK);
+                if (addPKColumns) {
+                    List<PColumn> currentPKs = table.getPKColumns();
                     PColumn lastPK = currentPKs.get(currentPKs.size()-1);
-                    // Disallow adding columns if the last column is VARBIANRY.
+                    // Disallow adding columns if the last column in the primary key is VARBIANRY or ARRAY.
                     if (lastPK.getDataType() == PVarbinary.INSTANCE || lastPK.getDataType().isArrayType()) {
                         throw new SQLExceptionInfo.Builder(SQLExceptionCode.VARBINARY_LAST_PK)
                         .setColumnName(lastPK.getName().getString()).build().buildException();
                     }
-                    // Disallow adding columns if last column is fixed width and nullable.
+                    // Disallow adding columns if last column in the primary key is fixed width and nullable.
                     if (lastPK.isNullable() && lastPK.getDataType().isFixedWidth()) {
                         throw new SQLExceptionInfo.Builder(SQLExceptionCode.NULLABLE_FIXED_WIDTH_LAST_PK)
                         .setColumnName(lastPK.getName().getString()).build().buildException();
