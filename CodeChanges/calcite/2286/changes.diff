diff --git a/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java b/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java
index 6aed23c58e8..00b45e8b321 100644
--- a/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java
+++ b/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java
@@ -25,7 +25,7 @@
 import org.apache.calcite.plan.RelOptPlanner;
 import org.apache.calcite.plan.RelOptRule;
 import org.apache.calcite.plan.RelOptTable;
-import org.apache.calcite.plan.RelRule;
+import org.apache.calcite.plan.RelTrait;
 import org.apache.calcite.plan.RelTraitSet;
 import org.apache.calcite.prepare.Prepare;
 import org.apache.calcite.rel.InvalidRelException;
@@ -221,6 +221,7 @@ private JdbcRules() {
   /** Creates a list of rules with the given JDBC convention instance. */
   public static List<RelOptRule> rules(JdbcConvention out) {
     final ImmutableList.Builder<RelOptRule> b = ImmutableList.builder();
+    b.add(JdbcToEnumerableConverterRule.create(out));
     foreachRule(out, b::add);
     return b.build();
   }
@@ -230,14 +231,27 @@ public static List<RelOptRule> rules(JdbcConvention out) {
   public static List<RelOptRule> rules(JdbcConvention out,
       RelBuilderFactory relBuilderFactory) {
     final ImmutableList.Builder<RelOptRule> b = ImmutableList.builder();
+    b.add(JdbcToEnumerableConverterRule.create(out)
+        .config.withRelBuilderFactory(relBuilderFactory).toRule());
     foreachRule(out, r ->
         b.add(r.config.withRelBuilderFactory(relBuilderFactory).toRule()));
     return b.build();
   }
 
+  /** Creates a list of rules with the given JDBC convention instance
+   * and builder factory. */
+  public static List<RelOptRule> rules(RelTrait in, JdbcConvention out,
+      RelBuilderFactory relBuilderFactory) {
+    final ImmutableList.Builder<RelOptRule> b = ImmutableList.builder();
+    b.add(JdbcToEnumerableConverterRule.create(out)
+        .config.withRelBuilderFactory(relBuilderFactory).toRule());
+    foreachRule(out, r ->
+        b.add(r.config.withInTrait(in).withRelBuilderFactory(relBuilderFactory).toRule()));
+    return b.build();
+  }
+
   private static void foreachRule(JdbcConvention out,
-      Consumer<RelRule<?>> consumer) {
-    consumer.accept(JdbcToEnumerableConverterRule.create(out));
+      Consumer<ConverterRule> consumer) {
     consumer.accept(JdbcJoinRule.create(out));
     consumer.accept(JdbcCalcRule.create(out));
     consumer.accept(JdbcProjectRule.create(out));
diff --git a/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java b/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java
index d676f9e1550..8573f6a6277 100644
--- a/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java
+++ b/core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java
@@ -30,9 +30,9 @@
  */
 public class JdbcToEnumerableConverterRule extends ConverterRule {
   /** Creates a JdbcToEnumerableConverterRule. */
-  public static JdbcToEnumerableConverterRule create(JdbcConvention out) {
+  public static JdbcToEnumerableConverterRule create(JdbcConvention in) {
     return Config.INSTANCE
-        .withConversion(RelNode.class, out, EnumerableConvention.INSTANCE,
+        .withConversion(RelNode.class, in, EnumerableConvention.INSTANCE,
             "JdbcToEnumerableConverterRule")
         .withRuleFactory(JdbcToEnumerableConverterRule::new)
         .toRule(JdbcToEnumerableConverterRule.class);
