diff --git a/babel/src/main/codegen/config.fmpp b/babel/src/main/codegen/config.fmpp
index f8f4a0bd96b..a016f41cfed 100644
--- a/babel/src/main/codegen/config.fmpp
+++ b/babel/src/main/codegen/config.fmpp
@@ -554,6 +554,7 @@ data: {
         "JSON_ARRAYAGG",
         "JSON_EXISTS",
         "JSON_VALUE",
+        "JSON_PRETTY",
         "JSON_OBJECT",
         "JSON_OBJECTAGG",
         "JSON_QUERY",
diff --git a/core/src/main/codegen/config.fmpp b/core/src/main/codegen/config.fmpp
index 4021ab10bf1..c988b2893b4 100644
--- a/core/src/main/codegen/config.fmpp
+++ b/core/src/main/codegen/config.fmpp
@@ -160,6 +160,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/core/src/main/codegen/templates/Parser.jj b/core/src/main/codegen/templates/Parser.jj
index 07c8cf81930..4a0402209c1 100644
--- a/core/src/main/codegen/templates/Parser.jj
+++ b/core/src/main/codegen/templates/Parser.jj
@@ -4822,6 +4822,8 @@ SqlNode BuiltinFunctionCall() :
         node = JsonExistsFunctionCall() { return node; }
     |
         node = JsonValueFunctionCall() { return node; }
+    |
+        node = JsonPrettyFunctionCall() { return node; }
     |
         node = JsonQueryFunctionCall() { return node; }
     |
@@ -5070,6 +5072,22 @@ SqlCall JsonValueFunctionCall() :
     }
 }
 
+SqlCall JsonPrettyFunctionCall() :
+{
+    final SqlNode[] args = new SqlNode[1];
+    SqlNode e;
+    final Span span;
+}
+{
+    <JSON_PRETTY> { span = span(); }
+    <LPAREN> e = JsonValueExpression(true) {
+        args[0] = e;
+    }
+    <RPAREN> {
+        return SqlStdOperatorTable.JSON_PRETTY.createCall(span.end(this), args);
+    }
+}
+
 List<SqlNode> JsonQueryEmptyOrErrorBehavior() :
 {
     final List<SqlNode> list = new ArrayList<SqlNode>();
@@ -6337,6 +6355,7 @@ SqlPostfixOperator PostfixRowOperator() :
 |   < JSON_ARRAYAGG: "JSON_ARRAYAGG">
 |   < JSON_EXISTS: "JSON_EXISTS" >
 |   < JSON_VALUE: "JSON_VALUE" >
+|   < JSON_PRETTY: "JSON_PRETTY" >
 |   < JSON_OBJECT: "JSON_OBJECT">
 |   < JSON_TYPE: "JSON_TYPE">
 |   < JSON_OBJECTAGG: "JSON_OBJECTAGG">
diff --git a/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java b/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java
index 6059d5e32f2..cef6f584079 100644
--- a/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java
+++ b/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java
@@ -165,6 +165,7 @@
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_EXISTS;
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_OBJECT;
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_OBJECTAGG;
+import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_PRETTY;
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_QUERY;
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_STRUCTURED_VALUE_EXPRESSION;
 import static org.apache.calcite.sql.fun.SqlStdOperatorTable.JSON_TYPE;
@@ -452,6 +453,7 @@ public Expression implement(RexToLixTranslator translator,
     defineMethod(JSON_QUERY, BuiltInMethod.JSON_QUERY.method, NullPolicy.NONE);
     defineMethod(JSON_OBJECT, BuiltInMethod.JSON_OBJECT.method, NullPolicy.NONE);
     defineMethod(JSON_TYPE, BuiltInMethod.JSON_TYPE.method, NullPolicy.NONE);
+    defineMethod(JSON_PRETTY, BuiltInMethod.JSON_PRETTY.method, NullPolicy.NONE);
     aggMap.put(JSON_OBJECTAGG,
         JsonObjectAggImplementor
             .supplierFor(BuiltInMethod.JSON_OBJECTAGG_ADD.method));
diff --git a/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java b/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java
index c9da744ac16..64ba0faa5ee 100644
--- a/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java
+++ b/core/src/main/java/org/apache/calcite/runtime/CalciteResource.java
@@ -858,6 +858,9 @@ ExInst<CalciteException> invalidTypesForComparison(String clazzName0, String op,
 
   @BaseMessage("Unknown JSON type in JSON_TYPE function, and the object is: ''{0}''")
   ExInst<CalciteException> unknownObjectOfJsonType(String value);
+
+  @BaseMessage("Cannot serialize object to JSON, and the object is: ''{0}''")
+  ExInst<CalciteException> exceptionWhileSerializingToJson(String value);
 }
 
 // End CalciteResource.java
diff --git a/core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java b/core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java
index 6f17efd20be..c7a1d5e91f5 100644
--- a/core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java
+++ b/core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java
@@ -48,7 +48,6 @@
 import com.jayway.jsonpath.JsonPath;
 import com.jayway.jsonpath.Option;
 import com.jayway.jsonpath.spi.json.JacksonJsonProvider;
-import com.jayway.jsonpath.spi.json.JsonProvider;
 import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;
 import com.jayway.jsonpath.spi.mapper.MappingProvider;
 
@@ -130,7 +129,7 @@ public Enumerator<Object[]> enumerator() {
       Pattern.compile("^\\s*(?<mode>strict|lax)\\s+(?<spec>.+)$",
           Pattern.CASE_INSENSITIVE | Pattern.DOTALL | Pattern.MULTILINE);
 
-  private static final JsonProvider JSON_PATH_JSON_PROVIDER =
+  private static final JacksonJsonProvider JSON_PATH_JSON_PROVIDER =
       new JacksonJsonProvider();
   private static final MappingProvider JSON_PATH_MAPPING_PROVIDER =
       new JacksonMappingProvider();
@@ -2676,6 +2675,15 @@ public static void jsonArrayAggAdd(List list, Object element,
     }
   }
 
+  public static String jsonPretty(Object input) {
+    try {
+      return JSON_PATH_JSON_PROVIDER.getObjectMapper().writerWithDefaultPrettyPrinter()
+          .writeValueAsString(input);
+    } catch (Exception e) {
+      throw RESOURCE.exceptionWhileSerializingToJson(input.toString()).ex();
+    }
+  }
+
   public static String jsonType(Object o) {
     final String result;
     try {
diff --git a/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java b/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java
new file mode 100644
index 00000000000..cc33d3146a8
--- /dev/null
+++ b/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java
@@ -0,0 +1,68 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to you under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.calcite.sql.fun;
+
+import org.apache.calcite.sql.SqlCall;
+import org.apache.calcite.sql.SqlFunction;
+import org.apache.calcite.sql.SqlFunctionCategory;
+import org.apache.calcite.sql.SqlKind;
+import org.apache.calcite.sql.SqlLiteral;
+import org.apache.calcite.sql.SqlNode;
+import org.apache.calcite.sql.SqlOperandCountRange;
+import org.apache.calcite.sql.SqlWriter;
+import org.apache.calcite.sql.parser.SqlParserPos;
+import org.apache.calcite.sql.type.OperandTypes;
+import org.apache.calcite.sql.type.ReturnTypes;
+import org.apache.calcite.sql.type.SqlOperandCountRanges;
+import org.apache.calcite.sql.type.SqlOperandTypeChecker;
+import org.apache.calcite.sql.validate.SqlValidator;
+
+/**
+ * The <code>JSON_TYPE</code> function.
+ */
+public class SqlJsonPrettyFunction extends SqlFunction {
+
+  public SqlJsonPrettyFunction() {
+    super("JSON_PRETTY",
+        SqlKind.OTHER_FUNCTION,
+        ReturnTypes.VARCHAR_2000,
+        null,
+        OperandTypes.ANY,
+        SqlFunctionCategory.SYSTEM);
+  }
+
+  @Override public SqlOperandCountRange getOperandCountRange() {
+    return SqlOperandCountRanges.of(1);
+  }
+
+  @Override protected void checkOperandCount(SqlValidator validator,
+      SqlOperandTypeChecker argType, SqlCall call) {
+    assert call.operandCount() == 1;
+  }
+
+  @Override public SqlCall createCall(SqlLiteral functionQualifier,
+      SqlParserPos pos, SqlNode... operands) {
+    return super.createCall(functionQualifier, pos, operands);
+  }
+
+  @Override public void unparse(SqlWriter writer, SqlCall call, int leftPrec,
+      int rightPrec) {
+    super.unparse(writer, call, 0, 0);
+  }
+}
+
+// End SqlJsonPrettyFunction.java
diff --git a/core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java b/core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java
index 754f9c3bbbc..65d57c1945d 100644
--- a/core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java
+++ b/core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java
@@ -1297,6 +1297,9 @@ public boolean argumentMustBeScalar(int ordinal) {
   public static final SqlFunction JSON_VALUE =
       new SqlJsonValueFunction("JSON_VALUE", false);
 
+  public static final SqlFunction JSON_PRETTY =
+          new SqlJsonPrettyFunction();
+
   public static final SqlFunction JSON_VALUE_ANY =
       new SqlJsonValueFunction("JSON_VALUE_ANY", true);
 
diff --git a/core/src/main/java/org/apache/calcite/util/BuiltInMethod.java b/core/src/main/java/org/apache/calcite/util/BuiltInMethod.java
index 5e2c06ff689..8388b4d2e6f 100644
--- a/core/src/main/java/org/apache/calcite/util/BuiltInMethod.java
+++ b/core/src/main/java/org/apache/calcite/util/BuiltInMethod.java
@@ -283,6 +283,7 @@ public enum BuiltInMethod {
   JSON_OBJECT(SqlFunctions.class, "jsonObject",
       SqlJsonConstructorNullClause.class),
   JSON_TYPE(SqlFunctions.class, "jsonType", Object.class),
+  JSON_PRETTY(SqlFunctions.class, "jsonPretty", Object.class),
   JSON_OBJECTAGG_ADD(SqlFunctions.class, "jsonObjectAggAdd", Map.class,
       String.class, Object.class, SqlJsonConstructorNullClause.class),
   JSON_ARRAY(SqlFunctions.class, "jsonArray",
@@ -532,6 +533,10 @@ public enum BuiltInMethod {
     this(null, null, Types.lookupField(clazz, fieldName));
     assert dummy : "dummy value for method overloading must be true";
   }
+
+  public String getMethodName() {
+    return method.getName();
+  }
 }
 
 // End BuiltInMethod.java
diff --git a/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties b/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties
index 7c90a9b24a2..1acd73fe24e 100644
--- a/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties
+++ b/core/src/main/resources/org/apache/calcite/runtime/CalciteResource.properties
@@ -279,4 +279,5 @@ QueryExecutionTimeoutReached=Timeout of ''{0}'' ms for query execution is reache
 AmbiguousSortOrderInJsonArrayAggFunc=Including both WITHIN GROUP(...) and inside ORDER BY in a single JSON_ARRAYAGG call is not allowed
 ExceptionWhilePerformingQueryOnJdbcSubSchema = While executing SQL [{0}] on JDBC sub-schema
 UnknownObjectOfJsonType=Unknown JSON type in JSON_TYPE function, and the object is: ''{0}''
+ExceptionWhileSerializingToJson=Cannot serialize object to JSON, and the object is: ''{0}''
 # End CalciteResource.properties
diff --git a/core/src/test/codegen/config.fmpp b/core/src/test/codegen/config.fmpp
index 991914ec1d2..d194b6558a8 100644
--- a/core/src/test/codegen/config.fmpp
+++ b/core/src/test/codegen/config.fmpp
@@ -144,6 +144,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java b/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java
index aa5a6769b71..7a930379eac 100644
--- a/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java
+++ b/core/src/test/java/org/apache/calcite/rel/rel2sql/RelToSqlConverterTest.java
@@ -2989,6 +2989,13 @@ private void checkLiteral2(String expression, String expected) {
     sql(query).ok(expected);
   }
 
+  @Test public void testJsonPretty() {
+    String query = "select json_pretty(\"product_name\") from \"product\"";
+    final String expected = "SELECT JSON_PRETTY(\"product_name\" FORMAT JSON)\n"
+            + "FROM \"foodmart\".\"product\"";
+    sql(query).ok(expected);
+  }
+
   @Test public void testJsonValue() {
     String query = "select json_value(\"product_name\", 'lax $') from \"product\"";
     // todo translate to JSON_VALUE rather than CAST
diff --git a/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java b/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
index a4ce6c944d1..03ab6721048 100644
--- a/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
+++ b/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
@@ -8417,6 +8417,13 @@ public void subTestIntervalSecondFailsValidation() {
         "JSON_ARRAY(JSON_ARRAY('foo', 'bar' ABSENT ON NULL) FORMAT JSON ABSENT ON NULL)");
   }
 
+  @Test public void testJsonPretty() {
+    checkExp("json_pretty('foo')",
+            "JSON_PRETTY('foo' FORMAT JSON)");
+    checkExp("json_pretty(null)",
+            "JSON_PRETTY(NULL FORMAT JSON)");
+  }
+
   @Test public void testJsonArrayAgg1() {
     checkExp("json_arrayagg(\"column\")",
         "JSON_ARRAYAGG(`column` ABSENT ON NULL)");
diff --git a/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java b/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
index 9773b1e63a3..de5bc9aff0b 100644
--- a/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
+++ b/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
@@ -4473,6 +4473,15 @@ private void checkNullOperand(SqlTester tester, String op) {
         "{\"foo\":{\"foo\":\"bar\"}}", "VARCHAR(2000) NOT NULL");
   }
 
+  @Test public void testJsonPretty() {
+    tester.checkString("json_pretty('{\"foo\":100}')",
+        "{\n  \"foo\" : 100\n}", "VARCHAR(2000) NOT NULL");
+    tester.checkString("json_pretty('[1,2,3]')",
+        "[ 1, 2, 3 ]", "VARCHAR(2000) NOT NULL");
+    tester.checkString("json_pretty('null')",
+        "null", "VARCHAR(2000) NOT NULL");
+  }
+
   @Test public void testJsonType() {
     tester.setFor(SqlStdOperatorTable.JSON_TYPE);
     tester.checkString("json_type('\"1\"')",
diff --git a/core/src/test/java/org/apache/calcite/test/JdbcTest.java b/core/src/test/java/org/apache/calcite/test/JdbcTest.java
index a4aa8dfbb70..8767bf7de39 100644
--- a/core/src/test/java/org/apache/calcite/test/JdbcTest.java
+++ b/core/src/test/java/org/apache/calcite/test/JdbcTest.java
@@ -6803,6 +6803,18 @@ public void testGetDate() throws Exception {
         .returns("C1=OBJECT; C2=ARRAY; C3=INTEGER; C4=BOOLEAN\n");
   }
 
+  @Test
+  public void testJsonPretty() {
+    CalciteAssert.that()
+        .query("SELECT JSON_PRETTY(v) AS c1\n"
+            + "FROM (VALUES ('{\"a\": [10, true],\"b\": [10, true]}')) as t(v)\n"
+            + "limit 10")
+        .returns("C1={\n"
+            + "  \"a\" : [ 10, true ],\n"
+            + "  \"b\" : [ 10, true ]\n"
+            + "}\n");
+  }
+
   /**
    * Test case for
    * <a href="https://issues.apache.org/jira/browse/CALCITE-2609">[CALCITE-2609]
diff --git a/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java b/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
index 311f2c8bba1..52af58f0f9c 100644
--- a/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
+++ b/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
@@ -23,8 +23,10 @@
 import org.apache.calcite.sql.SqlJsonQueryEmptyOrErrorBehavior;
 import org.apache.calcite.sql.SqlJsonQueryWrapperBehavior;
 import org.apache.calcite.sql.SqlJsonValueEmptyOrErrorBehavior;
+import org.apache.calcite.util.BuiltInMethod;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.primitives.Longs;
 import com.jayway.jsonpath.InvalidJsonException;
 import com.jayway.jsonpath.PathNotFoundException;
 
@@ -53,27 +55,7 @@
  * Unit test for the methods in {@link SqlFunctions} that implement JSON processing functions.
  */
 public class SqlJsonFunctionsTest {
-  public static final String INVOC_DESC_JSON_VALUE_EXPRESSION =
-      "jsonValueExpression";
-  public static final String INVOC_DESC_JSON_STRUCTURED_VALUE_EXPRESSION =
-      "jsonStructuredValueExpression";
-  public static final String INVOC_DESC_JSON_API_COMMON_SYNTAX =
-      "jsonApiCommonSyntax";
-  public static final String INVOC_DESC_JSON_EXISTS = "jsonExists";
-  public static final String INVOC_DESC_JSON_VALUE_ANY = "jsonValueAny";
-  public static final String INVOC_DESC_JSON_QUERY = "jsonQuery";
-  public static final String INVOC_DESC_JSONIZE = "jsonize";
   public static final String INVOC_DESC_DEJSONIZE = "dejsonize";
-  public static final String INVOC_DESC_JSON_OBJECT = "jsonObject";
-  public static final String INVOC_DESC_JSON_TYPE = "jsonType";
-  public static final String INVOC_DESC_JSON_OBJECT_AGG_ADD =
-      "jsonObjectAggAdd";
-  public static final String INVOC_DESC_JSON_ARRAY = "jsonArray";
-  public static final String INVOC_DESC_JSON_ARRAY_AGG_ADD = "jsonArrayAggAdd";
-  public static final String INVOC_DESC_IS_JSON_VALUE = "isJsonValue";
-  public static final String INVOC_DESC_IS_JSON_SCALAR = "isJsonScalar";
-  public static final String INVOC_DESC_IS_JSON_ARRAY = "isJsonArray";
-  public static final String INVOC_DESC_IS_JSON_OBJECT = "isJsonObject";
 
   @Test
   public void testJsonValueExpression() {
@@ -443,6 +425,19 @@ public void testJsonize() {
         is("{}"));
   }
 
+  @Test
+  public void assertJsonPretty() {
+    assertJsonPretty(new HashMap<>(), is("{ }"));
+    assertJsonPretty(Longs.asList(1, 2), is("[ 1, 2 ]"));
+
+    Object input = new Object() {
+      private final Object self = this;
+    };
+    CalciteException expected = new CalciteException(
+        "Cannot serialize object to JSON, and the object is: '" + input + "'", null);
+    assertJsonPrettyFailed(input, errorMatches(expected));
+  }
+
   @Test
   public void testDejsonize() {
     assertDejsonize("{}",
@@ -554,34 +549,34 @@ public void testJsonPredicate() {
   private void assertJsonValueExpression(String input,
       Matcher<Object> matcher) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_VALUE_EXPRESSION, input),
+        invocationDesc(BuiltInMethod.JSON_VALUE_EXPRESSION.getMethodName(), input),
         SqlFunctions.jsonValueExpression(input), matcher);
   }
 
   private void assertJsonStructuredValueExpression(Object input,
       Matcher<Object> matcher) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_STRUCTURED_VALUE_EXPRESSION, input),
+        invocationDesc(BuiltInMethod.JSON_STRUCTURED_VALUE_EXPRESSION.getMethodName(), input),
         SqlFunctions.jsonStructuredValueExpression(input), matcher);
   }
 
   private void assertJsonApiCommonSyntax(Object input, String pathSpec,
       Matcher<? super SqlFunctions.PathContext> matcher) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_API_COMMON_SYNTAX, input, pathSpec),
+        invocationDesc(BuiltInMethod.JSON_API_COMMON_SYNTAX.getMethodName(), input, pathSpec),
         SqlFunctions.jsonApiCommonSyntax(input, pathSpec), matcher);
   }
 
   private void assertJsonExists(Object input, SqlJsonExistsErrorBehavior errorBehavior,
       Matcher<? super Boolean> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_JSON_EXISTS, input, errorBehavior),
+    assertThat(invocationDesc(BuiltInMethod.JSON_EXISTS.getMethodName(), input, errorBehavior),
         SqlFunctions.jsonExists(input, errorBehavior), matcher);
   }
 
   private void assertJsonExistsFailed(Object input,
       SqlJsonExistsErrorBehavior errorBehavior,
       Matcher<? super Throwable> matcher) {
-    assertFailed(invocationDesc(INVOC_DESC_JSON_EXISTS, input, errorBehavior),
+    assertFailed(invocationDesc(BuiltInMethod.JSON_EXISTS.getMethodName(), input, errorBehavior),
         () -> SqlFunctions.jsonExists(input, errorBehavior), matcher);
   }
 
@@ -592,7 +587,7 @@ private void assertJsonValueAny(Object input,
       Object defaultValueOnError,
       Matcher<Object> matcher) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_VALUE_ANY, input, emptyBehavior,
+        invocationDesc(BuiltInMethod.JSON_VALUE_ANY.getMethodName(), input, emptyBehavior,
             defaultValueOnEmpty, errorBehavior, defaultValueOnError),
         SqlFunctions.jsonValueAny(input, emptyBehavior, defaultValueOnEmpty,
             errorBehavior, defaultValueOnError),
@@ -606,7 +601,7 @@ private void assertJsonValueAnyFailed(Object input,
       Object defaultValueOnError,
       Matcher<? super Throwable> matcher) {
     assertFailed(
-        invocationDesc(INVOC_DESC_JSON_VALUE_ANY, input, emptyBehavior,
+        invocationDesc(BuiltInMethod.JSON_VALUE_ANY.getMethodName(), input, emptyBehavior,
             defaultValueOnEmpty, errorBehavior, defaultValueOnError),
         () -> SqlFunctions.jsonValueAny(input, emptyBehavior,
             defaultValueOnEmpty, errorBehavior, defaultValueOnError),
@@ -619,7 +614,7 @@ private void assertJsonQuery(Object input,
       SqlJsonQueryEmptyOrErrorBehavior errorBehavior,
       Matcher<? super String> matcher) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_QUERY, input, wrapperBehavior,
+        invocationDesc(BuiltInMethod.JSON_QUERY.getMethodName(), input, wrapperBehavior,
             emptyBehavior, errorBehavior),
         SqlFunctions.jsonQuery(input, wrapperBehavior, emptyBehavior,
             errorBehavior),
@@ -632,7 +627,7 @@ private void assertJsonQueryFailed(Object input,
       SqlJsonQueryEmptyOrErrorBehavior errorBehavior,
       Matcher<? super Throwable> matcher) {
     assertFailed(
-        invocationDesc(INVOC_DESC_JSON_QUERY, input, wrapperBehavior,
+        invocationDesc(BuiltInMethod.JSON_QUERY.getMethodName(), input, wrapperBehavior,
             emptyBehavior, errorBehavior),
         () -> SqlFunctions.jsonQuery(input, wrapperBehavior, emptyBehavior,
             errorBehavior),
@@ -641,11 +636,25 @@ private void assertJsonQueryFailed(Object input,
 
   private void assertJsonize(Object input,
       Matcher<? super String> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_JSONIZE, input),
+    assertThat(invocationDesc(BuiltInMethod.JSONIZE.getMethodName(), input),
         SqlFunctions.jsonize(input),
         matcher);
   }
 
+  private void assertJsonPretty(Object input,
+      Matcher<? super String> matcher) {
+    assertThat(invocationDesc(BuiltInMethod.JSON_PRETTY.getMethodName(), input),
+        SqlFunctions.jsonPretty(input),
+        matcher);
+  }
+
+  private void assertJsonPrettyFailed(Object input,
+      Matcher<? super Throwable> matcher) {
+    assertFailed(invocationDesc(BuiltInMethod.JSON_PRETTY.getMethodName(), input),
+        () -> SqlFunctions.jsonPretty(input),
+        matcher);
+  }
+
   private void assertDejsonize(String input,
       Matcher<Object> matcher) {
     assertThat(invocationDesc(INVOC_DESC_DEJSONIZE, input),
@@ -663,7 +672,7 @@ private void assertDejsonizeFailed(String input,
   private void assertJsonObject(Matcher<? super String> matcher,
       SqlJsonConstructorNullClause nullClause,
       Object... kvs) {
-    assertThat(invocationDesc(INVOC_DESC_JSON_OBJECT, nullClause, kvs),
+    assertThat(invocationDesc(BuiltInMethod.JSON_OBJECT.getMethodName(), nullClause, kvs),
         SqlFunctions.jsonObject(nullClause, kvs),
         matcher);
   }
@@ -671,7 +680,7 @@ private void assertJsonObject(Matcher<? super String> matcher,
   private void assertJsonType(Matcher<? super String> matcher,
                                 String input) {
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_TYPE, input),
+        invocationDesc(BuiltInMethod.JSON_TYPE.getMethodName(), input),
         SqlFunctions.jsonType(
                 SqlFunctions.dejsonize(input)),
         matcher);
@@ -682,13 +691,13 @@ private void assertJsonObjectAggAdd(Map map, String k, Object v,
       Matcher<? super Map> matcher) {
     SqlFunctions.jsonObjectAggAdd(map, k, v, nullClause);
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_OBJECT_AGG_ADD, map, k, v, nullClause),
+        invocationDesc(BuiltInMethod.JSON_ARRAYAGG_ADD.getMethodName(), map, k, v, nullClause),
         map, matcher);
   }
 
   private void assertJsonArray(Matcher<? super String> matcher,
       SqlJsonConstructorNullClause nullClause, Object... elements) {
-    assertThat(invocationDesc(INVOC_DESC_JSON_ARRAY, nullClause, elements),
+    assertThat(invocationDesc(BuiltInMethod.JSON_ARRAY.getMethodName(), nullClause, elements),
         SqlFunctions.jsonArray(nullClause, elements),
         matcher);
   }
@@ -698,35 +707,35 @@ private void assertJsonArrayAggAdd(List list, Object element,
       Matcher<? super List> matcher) {
     SqlFunctions.jsonArrayAggAdd(list, element, nullClause);
     assertThat(
-        invocationDesc(INVOC_DESC_JSON_ARRAY_AGG_ADD, list, element,
+        invocationDesc(BuiltInMethod.JSON_ARRAYAGG_ADD.getMethodName(), list, element,
             nullClause),
         list, matcher);
   }
 
   private void assertIsJsonValue(String input,
       Matcher<? super Boolean> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_IS_JSON_VALUE, input),
+    assertThat(invocationDesc(BuiltInMethod.IS_JSON_VALUE.getMethodName(), input),
         SqlFunctions.isJsonValue(input),
         matcher);
   }
 
   private void assertIsJsonScalar(String input,
       Matcher<? super Boolean> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_IS_JSON_SCALAR, input),
+    assertThat(invocationDesc(BuiltInMethod.IS_JSON_SCALAR.getMethodName(), input),
         SqlFunctions.isJsonScalar(input),
         matcher);
   }
 
   private void assertIsJsonArray(String input,
       Matcher<? super Boolean> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_IS_JSON_ARRAY, input),
+    assertThat(invocationDesc(BuiltInMethod.IS_JSON_ARRAY.getMethodName(), input),
         SqlFunctions.isJsonArray(input),
         matcher);
   }
 
   private void assertIsJsonObject(String input,
       Matcher<? super Boolean> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_IS_JSON_OBJECT, input),
+    assertThat(invocationDesc(BuiltInMethod.IS_JSON_OBJECT.getMethodName(), input),
         SqlFunctions.isJsonObject(input),
         matcher);
   }
diff --git a/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java b/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
index 882ab4b7e6e..b9cb5e53fe6 100644
--- a/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
+++ b/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
@@ -10769,12 +10769,21 @@ private void checkCustomColumnResolving(String table) {
         "(?s).*Expected a character type*");
   }
 
+  @Test public void testJsonPretty() {
+    check("select json_pretty(ename) from emp");
+    checkExp("json_pretty('{\"foo\":\"bar\"}')");
+    checkExpType("json_pretty('{\"foo\":\"bar\"}')", "VARCHAR(2000) NOT NULL");
+    checkFails("select json_pretty(^NULL^) from emp", "(?s).*Illegal use of .NULL.*");
+    checkFails("select json_pretty(^1^) from emp",
+            "(.*)JSON_VALUE_EXPRESSION(.*)");
+  }
+
   @Test public void testJsonType() {
     check("select json_type(ename) from emp");
     checkExp("json_type('{\"foo\":\"bar\"}')");
     checkExpType("json_type('{\"foo\":\"bar\"}')", "VARCHAR(20) NOT NULL");
     checkFails("select json_type(^1^) from emp",
-            "(.*)JSON_VALUE_EXPRESSION(.*)");
+        "(.*)JSON_VALUE_EXPRESSION(.*)");
   }
 
   @Test public void testJsonObjectAgg() {
diff --git a/server/src/main/codegen/config.fmpp b/server/src/main/codegen/config.fmpp
index d4d72439c59..12f53c7f9cc 100644
--- a/server/src/main/codegen/config.fmpp
+++ b/server/src/main/codegen/config.fmpp
@@ -152,6 +152,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/site/_docs/reference.md b/site/_docs/reference.md
index 2ade41311e4..ff792455071 100644
--- a/site/_docs/reference.md
+++ b/site/_docs/reference.md
@@ -566,6 +566,7 @@ JSON,
 **JSON_EXISTS**,
 **JSON_OBJECT**,
 **JSON_OBJECTAGG**,
+JSON_PRETTY,
 **JSON_QUERY**,
 JSON_TYPE,
 **JSON_VALUE**,
@@ -2001,6 +2002,7 @@ Note:
 | Operator syntax                                   | Description
 |:------------------------------------------------- |:-----------
 | JSON_TYPE(value) | Returns a string indicating the type of a JSON **value**. This can be an object, an array, or a scalar type
+| JSON_PRETTY(value) | Returns a pretty-printing of JSON **value**.
 
 Example SQL:
 
