diff --git a/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java b/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java
index f6965f7ab58..fd636d926eb 100644
--- a/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java
+++ b/server/src/main/java/org/apache/calcite/server/ServerDdlExecutor.java
@@ -380,7 +380,10 @@ public void execute(SqlCreateSchema create,
     final Pair<CalciteSchema, String> pair = schema(context, true, create.name);
     final SchemaPlus subSchema0 = pair.left.plus().getSubSchema(pair.right);
     if (subSchema0 != null) {
-      if (!create.getReplace() && !create.ifNotExists) {
+      if (create.ifNotExists) {
+        return;
+      }
+      if (!create.getReplace()) {
         throw SqlUtil.newContextException(create.name.getParserPosition(),
             RESOURCE.schemaExists(pair.right));
       }
@@ -503,12 +506,14 @@ public void execute(SqlCreateTable create,
         };
     if (pair.left.plus().getTable(pair.right) != null) {
       // Table exists.
-      if (!create.ifNotExists) {
+      if (create.ifNotExists) {
+        return;
+      }
+      if (!create.getReplace()) {
         // They did not specify IF NOT EXISTS, so give error.
         throw SqlUtil.newContextException(create.name.getParserPosition(),
             RESOURCE.tableExists(pair.right));
       }
-      return;
     }
     // Table does not exist. Create it.
     pair.left.add(pair.right,
diff --git a/server/src/test/java/org/apache/calcite/test/ServerTest.java b/server/src/test/java/org/apache/calcite/test/ServerTest.java
index 45db9fb80c3..559e949e3d9 100644
--- a/server/src/test/java/org/apache/calcite/test/ServerTest.java
+++ b/server/src/test/java/org/apache/calcite/test/ServerTest.java
@@ -54,6 +54,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -127,6 +128,16 @@ static Connection connect() throws SQLException {
         assertThat(r.getInt(1), is(1));
         assertThat(r.next(), is(false));
       }
+
+      assertDoesNotThrow(() -> {
+        s.execute("create schema if not exists s");
+        s.executeUpdate("insert into s.t values 2");
+      }, "IF NOT EXISTS should not overwrite the existing schema");
+
+      assertDoesNotThrow(() -> {
+        s.execute("create or replace schema s");
+        s.execute("create table s.t (i int not null)");
+      }, "REPLACE must overwrite the existing schema");
     }
   }
 
@@ -169,10 +180,6 @@ static Connection connect() throws SQLException {
     }
   }
 
-  /** Test case for
-   * <a href="https://issues.apache.org/jira/browse/CALCITE-3046">[CALCITE-3046]
-   * CompileException when inserting casted value of composited user defined type
-   * into table</a>. */
   @Test void testCreateTable() throws Exception {
     try (Connection c = connect();
          Statement s = c.createStatement()) {
@@ -207,6 +214,11 @@ static Connection connect() throws SQLException {
       assertThat(b, is(false));
       x = s.executeUpdate("insert into t2 values (1, NULL)");
       assertThat(x, is(1));
+
+      assertDoesNotThrow(() -> {
+        s.execute("create or replace table t2 (i int not null)");
+        s.executeUpdate("insert into t2 values (1)");
+      }, "REPLACE must recreate the table, leaving only one column");
     }
   }
 
@@ -273,6 +285,10 @@ static Connection connect() throws SQLException {
     }
   }
 
+  /** Test case for
+   * <a href="https://issues.apache.org/jira/browse/CALCITE-3046">[CALCITE-3046]
+   * CompileException when inserting casted value of composited user defined type
+   * into table</a>. */
   @Test void testInsertCastedValueOfCompositeUdt() throws Exception {
     try (Connection c = connect();
          Statement s = c.createStatement()) {
