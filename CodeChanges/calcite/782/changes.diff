diff --git a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java
index 7aaf1419ff9..70badcf0024 100644
--- a/core/src/main/java/org/apache/calcite/rex/RexSimplify.java
+++ b/core/src/main/java/org/apache/calcite/rex/RexSimplify.java
@@ -540,6 +540,10 @@ private RexNode simplifyCoalesce(RexCall call) {
     case 0:
       return rexBuilder.makeNullLiteral(call.type);
     case 1:
+      // ensure type consistency, especially nullability.
+      if (!call.getType().equals(operands.get(0).getType())) {
+        return rexBuilder.makeAbstractCast(call.getType(), operands.get(0));
+      }
       return operands.get(0);
     default:
       if (operands.equals(call.operands)) {
diff --git a/core/src/test/java/org/apache/calcite/test/RexProgramTest.java b/core/src/test/java/org/apache/calcite/test/RexProgramTest.java
index 733579d0592..1c011b81609 100644
--- a/core/src/test/java/org/apache/calcite/test/RexProgramTest.java
+++ b/core/src/test/java/org/apache/calcite/test/RexProgramTest.java
@@ -1703,6 +1703,36 @@ private void checkExponentialCnf(int n) {
     assertThat(result.getOperands().get(2), is((RexNode) falseLiteral));
   }
 
+  /** Test case for
+   * <a href="https://issues.apache.org/jira/browse/CALCITE-2455">[CALCITE-2455]
+   * simplifyCoalesce of constant should match nullability</a>. */
+  @Test public void testSimplifyCoalesceWithConstant() {
+    RexNode inputRef1 = rexBuilder.makeInputRef(
+        typeFactory.createTypeWithNullability(
+            typeFactory.createSqlType(SqlTypeName.VARCHAR), true), 0);
+    RexNode inputRef2 = rexBuilder.makeInputRef(
+        typeFactory.createTypeWithNullability(
+            typeFactory.createSqlType(SqlTypeName.VARCHAR), true), 1);
+    RexCall coalesceNode = (RexCall) coalesce(inputRef2, inputRef1);
+
+    ImmutableList.Builder<RexNode> newOperands = ImmutableList.builder();
+    newOperands.add(rexBuilder.makeLiteral("S")).add(coalesceNode.operands.get(1));
+    // Clone for cases when Coalesce's operand is replaced with a constant by
+    // some rule.
+    coalesceNode = coalesceNode.clone(coalesceNode.getType(), newOperands.build());
+    RexNode result = simplify.simplify(coalesceNode);
+    assertThat("simplify of " + coalesceNode + " is Nullable",
+        result.getType().isNullable(), is(true));
+    assertThat("simplify of " + coalesceNode + " is VARCHAR type",
+        result.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));
+
+    RexNode result1 = simplify.simplifyPreservingType(coalesceNode);
+    assertThat("simplify of " + coalesceNode + " is Nullable",
+        result1.getType().isNullable(), is(true));
+    assertThat("simplify of " + coalesceNode + " is VARCHAR type",
+        result1.getType().getSqlTypeName(), is(SqlTypeName.VARCHAR));
+  }
+
   @Test public void testSimplifyCaseNullableBoolean() {
     RexNode condition = eq(
         rexBuilder.makeInputRef(
