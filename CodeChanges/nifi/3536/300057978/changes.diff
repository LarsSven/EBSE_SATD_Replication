diff --git a/nifi-api/src/main/java/org/apache/nifi/parameter/ParameterDescriptor.java b/nifi-api/src/main/java/org/apache/nifi/parameter/ParameterDescriptor.java
index 88c4ca475ce..bf785bf7279 100644
--- a/nifi-api/src/main/java/org/apache/nifi/parameter/ParameterDescriptor.java
+++ b/nifi-api/src/main/java/org/apache/nifi/parameter/ParameterDescriptor.java
@@ -77,7 +77,7 @@ public int hashCode() {
 
     public static class Builder {
         private String name;
-        private String description = "";
+        private String description;
         private boolean sensitive;
 
         public Builder name(final String name) {
@@ -88,7 +88,7 @@ public Builder name(final String name) {
         }
 
         public Builder description(final String description) {
-            this.description = description == null ? "" : description.trim();
+            this.description = description == null ? null : description.trim();
             return this;
         }
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
index 5390fadf8a4..2dbb1a74d73 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/Query.java
@@ -25,12 +25,12 @@
 import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 import org.apache.nifi.expression.AttributeValueDecorator;
+import org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser;
 import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.parameter.ParameterParser;
 import org.apache.nifi.parameter.ParameterReference;
 import org.apache.nifi.parameter.ParameterToken;
 import org.apache.nifi.parameter.ParameterTokenList;
-import org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser;
 import org.apache.nifi.processor.exception.ProcessException;
 
 import java.util.ArrayList;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardExpressionLanguageCompiler.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardExpressionLanguageCompiler.java
index 2e669a9e770..fe95d871bba 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardExpressionLanguageCompiler.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/StandardExpressionLanguageCompiler.java
@@ -18,8 +18,8 @@
 
 import org.apache.nifi.attribute.expression.language.exception.AttributeExpressionLanguageParsingException;
 import org.apache.nifi.expression.AttributeExpression;
-import org.apache.nifi.expression.ExpressionLanguageCompiler;
 import org.apache.nifi.expression.AttributeExpression.ResultType;
+import org.apache.nifi.expression.ExpressionLanguageCompiler;
 import org.apache.nifi.parameter.ParameterLookup;
 import org.apache.nifi.registry.VariableRegistry;
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java
index 95d284cf110..eb258a4e06d 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/compile/ExpressionCompiler.java
@@ -1108,7 +1108,8 @@ private Evaluator<String> newStringLiteralEvaluator(final String literalValue) {
 
         final List<Range> ranges = Query.extractExpressionRanges(literalValue);
         if (ranges.isEmpty()) {
-            return addToken(new StringLiteralEvaluator(literalValue), literalValue);
+            final List<Range> escapedRanges = Query.extractEscapedRanges(literalValue);
+            return newStringLiteralEvaluatorForEscapedRanges(literalValue, escapedRanges);
         }
 
         final List<Evaluator<?>> evaluators = new ArrayList<>();
@@ -1151,6 +1152,44 @@ private Evaluator<String> newStringLiteralEvaluator(final String literalValue) {
         return lastEvaluator;
     }
 
+    private Evaluator<String> newStringLiteralEvaluatorForEscapedRanges(final String literalValue, final List<Range> escapedRanges) {
+        if (escapedRanges.isEmpty()) {
+            return addToken(new StringLiteralEvaluator(literalValue), literalValue);
+        }
+
+        int lastIndex = 0;
+        final List<Evaluator<?>> evaluators = new ArrayList<>();
+        for (final Range range : escapedRanges) {
+            final String treeText = literalValue.substring(range.getStart(), range.getEnd() + 1);
+
+            if (range.getStart() > lastIndex) {
+                evaluators.add(new StringLiteralEvaluator(literalValue.substring(lastIndex, range.getStart())));
+            }
+
+            final Evaluator<?> evaluator = new StringLiteralEvaluator(Query.unescape(treeText));
+            evaluators.add(evaluator);
+            lastIndex = range.getEnd() + 1;
+        }
+
+
+        final Range lastRange = escapedRanges.get(escapedRanges.size() - 1);
+        if (lastRange.getEnd() + 1 < literalValue.length()) {
+            final String treeText = literalValue.substring(lastRange.getEnd() + 1);
+            evaluators.add(new StringLiteralEvaluator(treeText));
+        }
+
+        if (evaluators.size() == 1) {
+            return toStringEvaluator(evaluators.get(0));
+        }
+
+        Evaluator<String> lastEvaluator = toStringEvaluator(evaluators.get(0));
+        for (int i = 1; i < evaluators.size(); i++) {
+            lastEvaluator = new AppendEvaluator(lastEvaluator, toStringEvaluator(evaluators.get(i)));
+        }
+
+        this.evaluators.addAll(evaluators);
+        return lastEvaluator;
+    }
 
     private Evaluator<Boolean> buildBooleanEvaluator(final Tree tree) {
         switch (tree.getType()) {
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java
index a77bbe9592b..3d55e2ab51e 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/DateQueryResult.java
@@ -16,10 +16,10 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation;
 
-import java.util.Date;
-
 import org.apache.nifi.expression.AttributeExpression.ResultType;
 
+import java.util.Date;
+
 public class DateQueryResult implements QueryResult<Date> {
 
     private final Date date;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java
index 7eabaa8605a..7371dffa1d2 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/BooleanCastEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java
index db0782ce56f..b7c4428e6d0 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DateCastEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DecimalCastEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DecimalCastEvaluator.java
index 6d4e20011bb..6f84bc684fb 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DecimalCastEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/DecimalCastEvaluator.java
@@ -20,7 +20,6 @@
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java
index 42e51c6af87..5de82a1bc34 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/NumberCastEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/WholeNumberCastEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/WholeNumberCastEvaluator.java
index cfff4e04203..d74ff180724 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/WholeNumberCastEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/cast/WholeNumberCastEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.DateQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.DecimalQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.NumberQueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AndEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AndEvaluator.java
index 5faf360252d..ae326dac3bd 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AndEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AndEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AppendEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AppendEvaluator.java
index e0b7d154b52..cdb74086420 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AppendEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/AppendEvaluator.java
@@ -16,9 +16,6 @@
  */
 package org.apache.nifi.attribute.expression.language.evaluation.functions;
 
-import java.util.Map;
-
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64EncodeEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64EncodeEvaluator.java
index 4494da9895a..4ed4ecbcb70 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64EncodeEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/Base64EncodeEvaluator.java
@@ -22,7 +22,6 @@
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.StringQueryResult;
 
-import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EndsWithEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EndsWithEvaluator.java
index 9044605d155..3d915bbe0c1 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EndsWithEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EndsWithEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsIgnoreCaseEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsIgnoreCaseEvaluator.java
index 8544a68f2e9..af6a6e1654a 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsIgnoreCaseEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/EqualsIgnoreCaseEvaluator.java
@@ -19,7 +19,6 @@
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanEvaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.BooleanQueryResult;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 
diff --git a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FormatEvaluator.java b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FormatEvaluator.java
index 4e380491246..1daa427d378 100644
--- a/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FormatEvaluator.java
+++ b/nifi-commons/nifi-expression-language/src/main/java/org/apache/nifi/attribute/expression/language/evaluation/functions/FormatEvaluator.java
@@ -18,7 +18,6 @@
 
 import org.apache.nifi.attribute.expression.language.EvaluationContext;
 import org.apache.nifi.attribute.expression.language.evaluation.DateEvaluator;
-import org.apache.nifi.attribute.expression.language.evaluation.EvaluatorState;
 import org.apache.nifi.attribute.expression.language.evaluation.Evaluator;
 import org.apache.nifi.attribute.expression.language.evaluation.QueryResult;
 import org.apache.nifi.attribute.expression.language.evaluation.StringEvaluator;
diff --git a/nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestValueLookup.java b/nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestValueLookup.java
index 1010ac776f7..97935fdfb8c 100644
--- a/nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestValueLookup.java
+++ b/nifi-commons/nifi-expression-language/src/test/java/org/apache/nifi/attribute/expression/language/TestValueLookup.java
@@ -16,14 +16,16 @@
  */
 package org.apache.nifi.attribute.expression.language;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.apache.nifi.flowfile.FlowFile;
 import org.apache.nifi.registry.VariableRegistry;
 import org.junit.Test;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
+
+import java.util.HashMap;
+import java.util.Map;
+
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class TestValueLookup {
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextDTO.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextDTO.java
index 0903e7ed19e..d40fa31b6c2 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextDTO.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextDTO.java
@@ -17,6 +17,7 @@
 package org.apache.nifi.web.api.dto;
 
 import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 
 import javax.xml.bind.annotation.XmlType;
@@ -26,7 +27,8 @@
 public class ParameterContextDTO {
     private String identifier;
     private String name;
-    private Set<ParameterDTO> parameters;
+    private String description;
+    private Set<ParameterEntity> parameters;
     private Set<ProcessGroupEntity> boundProcessGroups;
 
     public void setId(String id) {
@@ -47,12 +49,21 @@ public String getName() {
         return name;
     }
 
-    public void setParameters(final Set<ParameterDTO> parameters) {
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    @ApiModelProperty("The Description of the Parameter Context.")
+    public String getDescription() {
+        return description;
+    }
+
+    public void setParameters(final Set<ParameterEntity> parameters) {
         this.parameters = parameters;
     }
 
     @ApiModelProperty("The Parameters for the Parameter Context")
-    public Set<ParameterDTO> getParameters() {
+    public Set<ParameterEntity> getParameters() {
         return parameters;
     }
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateRequestDTO.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateRequestDTO.java
index 69df6d9f0ca..76acc8d054c 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateRequestDTO.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/ParameterContextUpdateRequestDTO.java
@@ -17,12 +17,15 @@
 package org.apache.nifi.web.api.dto;
 
 import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 
 import javax.xml.bind.annotation.XmlType;
+import java.util.Set;
 
 @XmlType(name = "parameterContextUpdateRequest")
 public class ParameterContextUpdateRequestDTO extends AsynchronousRequestDTO<ParameterContextUpdateStepDTO> {
     private ParameterContextDTO parameterContext;
+    private Set<AffectedComponentEntity> affectedComponents;
 
     @ApiModelProperty(value = "The Parameter Context that is being operated on. This may not be populated until the request has successfully completed.", readOnly = true)
     public ParameterContextDTO getParameterContext() {
@@ -32,4 +35,13 @@ public ParameterContextDTO getParameterContext() {
     public void setParameterContext(final ParameterContextDTO parameterContext) {
         this.parameterContext = parameterContext;
     }
+
+    @ApiModelProperty(value = "The components that are affected by the update.", readOnly = true)
+    public Set<AffectedComponentEntity> getAffectedComponents() {
+        return affectedComponents;
+    }
+
+    public void setAffectedComponents(final Set<AffectedComponentEntity> affectedComponents) {
+        this.affectedComponents = affectedComponents;
+    }
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
index 2ef6115aaed..479375e425d 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/dto/flow/ProcessGroupFlowDTO.java
@@ -33,6 +33,7 @@ public class ProcessGroupFlowDTO {
     private String id;
     private String uri;
     private String parentGroupId;
+    private String parameterContextId;
     private FlowBreadcrumbEntity breadcrumb;
     private FlowDTO flow;
     private Date lastRefreshed;
@@ -125,4 +126,13 @@ public Date getLastRefreshed() {
     public void setLastRefreshed(Date lastRefreshed) {
         this.lastRefreshed = lastRefreshed;
     }
+
+    @ApiModelProperty("The ID of the Parameter Context, or null if no Parameter Context has been bound to the Process Group")
+    public String getParameterContextId() {
+        return parameterContextId;
+    }
+
+    public void setParameterContextId(String parameterContextId) {
+        this.parameterContextId = parameterContextId;
+    }
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterContextsEntity.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterContextsEntity.java
index 300e18b1e49..3f581af4766 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterContextsEntity.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterContextsEntity.java
@@ -17,13 +17,17 @@
 package org.apache.nifi.web.api.entity;
 
 import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.web.api.dto.util.TimeAdapter;
 
 import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
+import java.util.Date;
 import java.util.Set;
 
 @XmlRootElement(name = "parameterContexts")
 public class ParameterContextsEntity extends Entity {
     private Set<ParameterContextEntity> parameterContexts;
+    private Date currentTime;
 
     @ApiModelProperty("The Parameter Contexts")
     public Set<ParameterContextEntity> getParameterContexts() {
@@ -33,4 +37,18 @@ public Set<ParameterContextEntity> getParameterContexts() {
     public void setParameterContexts(final Set<ParameterContextEntity> parameterContexts) {
         this.parameterContexts = parameterContexts;
     }
+
+    @XmlJavaTypeAdapter(TimeAdapter.class)
+    @ApiModelProperty(
+        value = "The current time on the system.",
+        dataType = "string",
+        readOnly = true
+    )
+    public Date getCurrentTime() {
+        return currentTime;
+    }
+
+    public void setCurrentTime(Date currentTime) {
+        this.currentTime = currentTime;
+    }
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterEntity.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterEntity.java
new file mode 100644
index 00000000000..e77c0ae7599
--- /dev/null
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-client-dto/src/main/java/org/apache/nifi/web/api/entity/ParameterEntity.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.web.api.entity;
+
+import io.swagger.annotations.ApiModelProperty;
+import org.apache.nifi.web.api.dto.ParameterDTO;
+import org.apache.nifi.web.api.dto.WritablePermission;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "parameterEntity")
+public class ParameterEntity extends Entity implements WritablePermission {
+    private Boolean canWrite;
+    private ParameterDTO parameter;
+
+    @ApiModelProperty("The parameter information")
+    public ParameterDTO getParameter() {
+        return parameter;
+    }
+
+    public void setParameter(final ParameterDTO parameter) {
+        this.parameter = parameter;
+    }
+
+    @Override
+    @ApiModelProperty(value = "Indicates whether the user can write a given resource.", readOnly = true)
+    public Boolean getCanWrite() {
+        return canWrite;
+    }
+
+    @Override
+    public void setCanWrite(final Boolean canWrite) {
+        this.canWrite = canWrite;
+    }
+}
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java
index 9665ca1d2c6..d29a669a7e7 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/main/java/org/apache/nifi/authorization/FileAccessPolicyProvider.java
@@ -625,10 +625,6 @@ private void populateInitialAdmin(final Authorizations authorizations) {
         // grant the user read/write access to the /controller resource
         addUserToAccessPolicy(authorizations, ResourceType.Controller.getValue(), initialAdmin.getIdentifier(), READ_CODE);
         addUserToAccessPolicy(authorizations, ResourceType.Controller.getValue(), initialAdmin.getIdentifier(), WRITE_CODE);
-
-        // grant the user read/write access to the /parameter-contexts resource
-        addUserToAccessPolicy(authorizations, ResourceType.ParameterContext.getValue(), initialAdmin.getIdentifier(), READ_CODE);
-        addUserToAccessPolicy(authorizations, ResourceType.ParameterContext.getValue(), initialAdmin.getIdentifier(), WRITE_CODE);
     }
 
     /**
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAccessPolicyProviderTest.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAccessPolicyProviderTest.java
index 6e85ba9bbed..2f500512517 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAccessPolicyProviderTest.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAccessPolicyProviderTest.java
@@ -556,7 +556,7 @@ public void testOnConfiguredWhenInitialAdminProvided() throws Exception {
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = accessPolicyProvider.getAccessPolicies();
-        assertEquals(14, policies.size());
+        assertEquals(12, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
@@ -596,7 +596,7 @@ public void testOnConfiguredWhenInitialAdminProvidedAndNoFlowExists() throws Exc
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = accessPolicyProvider.getAccessPolicies();
-        assertEquals(10, policies.size());
+        assertEquals(8, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
@@ -636,7 +636,7 @@ public void testOnConfiguredWhenInitialAdminProvidedAndFlowIsNull() throws Excep
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = accessPolicyProvider.getAccessPolicies();
-        assertEquals(10, policies.size());
+        assertEquals(8, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
index c556edf4ebd..e83e97ae2f6 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-file-authorizer/src/test/java/org/apache/nifi/authorization/FileAuthorizerTest.java
@@ -557,7 +557,7 @@ public void testOnConfiguredWhenInitialAdminProvided() throws Exception {
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = authorizer.getAccessPolicies();
-        assertEquals(14, policies.size());
+        assertEquals(12, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
@@ -595,7 +595,7 @@ public void testOnConfiguredWhenInitialAdminProvidedAndNoFlowExists() throws Exc
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = authorizer.getAccessPolicies();
-        assertEquals(10, policies.size());
+        assertEquals(8, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
@@ -633,7 +633,7 @@ public void testOnConfiguredWhenInitialAdminProvidedAndFlowIsNull() throws Excep
         assertEquals(adminIdentity, adminUser.getIdentity());
 
         final Set<AccessPolicy> policies = authorizer.getAccessPolicies();
-        assertEquals(10, policies.size());
+        assertEquals(8, policies.size());
 
         final String rootGroupResource = ResourceType.ProcessGroup.getValue() + "/" + ROOT_GROUP_ID;
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextMerger.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextMerger.java
index ca2d2843651..7278b542893 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextMerger.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextMerger.java
@@ -24,6 +24,7 @@
 import org.apache.nifi.web.api.dto.ParameterDTO;
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 import org.apache.nifi.web.api.entity.ParameterContextEntity;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 
 import java.util.ArrayList;
@@ -58,8 +59,9 @@ public static void merge(final ParameterContextEntity target, final Map<NodeIden
 
     public static void merge(final ParameterContextDTO target, final Map<NodeIdentifier, ParameterContextDTO> entityMap) {
         final Map<String, ProcessGroupEntity> mergedBoundGroups = new HashMap<>();
-        final Map<String, Map<String, AffectedComponentEntity>> affectedComponentsByParametrName = new HashMap<>();
+        final Map<String, Map<String, AffectedComponentEntity>> affectedComponentsByParameterName = new HashMap<>();
 
+        final Set<String> unwritableParameters = new HashSet<>();
         for (final Map.Entry<NodeIdentifier, ParameterContextDTO> entry : entityMap.entrySet()) {
             final NodeIdentifier nodeId = entry.getKey();
             final ParameterContextDTO contextDto = entry.getValue();
@@ -81,8 +83,14 @@ public static void merge(final ParameterContextDTO target, final Map<NodeIdentif
             }
 
             if (contextDto.getParameters() != null) {
-                for (final ParameterDTO parameterDto : contextDto.getParameters()) {
-                    final Map<String, AffectedComponentEntity> affectedComponentsById = affectedComponentsByParametrName.computeIfAbsent(parameterDto.getName(), key -> new HashMap<>());
+                for (final ParameterEntity parameterEntity : contextDto.getParameters()) {
+                    final ParameterDTO parameterDto = parameterEntity.getParameter();
+
+                    if (!parameterEntity.getCanWrite()) {
+                        unwritableParameters.add(parameterDto.getName());
+                    }
+
+                    final Map<String, AffectedComponentEntity> affectedComponentsById = affectedComponentsByParameterName.computeIfAbsent(parameterDto.getName(), key -> new HashMap<>());
 
                     for (final AffectedComponentEntity referencingComponent : parameterDto.getReferencingComponents()) {
                         AffectedComponentEntity mergedAffectedComponent = affectedComponentsById.get(referencingComponent.getId());
@@ -100,8 +108,14 @@ public static void merge(final ParameterContextDTO target, final Map<NodeIdentif
         target.setBoundProcessGroups(new HashSet<>(mergedBoundGroups.values()));
 
         // Set the merged parameter dto's
-        for (final ParameterDTO parameterDto : target.getParameters()) {
-            final Map<String, AffectedComponentEntity> componentMap = affectedComponentsByParametrName.get(parameterDto.getName());
+        for (final ParameterEntity parameterEntity : target.getParameters()) {
+            final ParameterDTO parameterDto = parameterEntity.getParameter();
+            final boolean unwritable = unwritableParameters.contains(parameterDto.getName());
+            if (unwritable) {
+                parameterEntity.setCanWrite(false);
+            }
+
+            final Map<String, AffectedComponentEntity> componentMap = affectedComponentsByParameterName.get(parameterDto.getName());
             parameterDto.setReferencingComponents(new HashSet<>(componentMap.values()));
         }
     }
@@ -118,7 +132,7 @@ private static void merge(final ProcessGroupEntity merged, final NodeIdentifier
             additionalNodeId.getApiAddress(), additionalNodeId.getApiPort());
     }
 
-    private static void merge(final AffectedComponentEntity merged, final AffectedComponentEntity additional) {
+    static void merge(final AffectedComponentEntity merged, final AffectedComponentEntity additional) {
         PermissionsDtoMerger.mergePermissions(merged.getPermissions(), additional.getPermissions());
 
         if (!Boolean.TRUE.equals(merged.getPermissions().getCanRead()) || additional.getComponent() == null) {
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextUpdateEndpointMerger.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextUpdateEndpointMerger.java
index 65546967789..3ea4aac58aa 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextUpdateEndpointMerger.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-cluster/src/main/java/org/apache/nifi/cluster/coordination/http/endpoints/ParameterContextUpdateEndpointMerger.java
@@ -21,11 +21,13 @@
 import org.apache.nifi.cluster.protocol.NodeIdentifier;
 import org.apache.nifi.web.api.dto.ParameterContextDTO;
 import org.apache.nifi.web.api.dto.ParameterContextUpdateRequestDTO;
+import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 import org.apache.nifi.web.api.entity.ParameterContextUpdateRequestEntity;
 
 import java.net.URI;
 import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
@@ -51,6 +53,7 @@ protected void mergeResponses(final ParameterContextUpdateRequestEntity clientEn
 
         final ParameterContextUpdateRequestDTO clientUpdateRequestDto = clientEntity.getRequest();
 
+        final Map<String, AffectedComponentEntity> affectedComponentEntities = new HashMap<>();
         for (final ParameterContextUpdateRequestEntity requestEntity : entityMap.values()) {
             final ParameterContextUpdateRequestDTO updateRequestDto = requestEntity.getRequest();
             clientUpdateRequestDto.setComplete(clientUpdateRequestDto.isComplete() && updateRequestDto.isComplete());
@@ -61,12 +64,24 @@ protected void mergeResponses(final ParameterContextUpdateRequestEntity clientEn
 
             clientUpdateRequestDto.setLastUpdated(new Date(Math.min(clientUpdateRequestDto.getLastUpdated().getTime(), updateRequestDto.getLastUpdated().getTime())));
             clientUpdateRequestDto.setPercentCompleted(Math.min(clientUpdateRequestDto.getPercentCompleted(), updateRequestDto.getPercentCompleted()));
+
+            // Merge the Affected Components.
+            for (final AffectedComponentEntity entity : requestEntity.getRequest().getAffectedComponents()) {
+                final AffectedComponentEntity mergedAffectedComponentEntity = affectedComponentEntities.get(entity.getId());
+                if (mergedAffectedComponentEntity == null) {
+                    affectedComponentEntities.put(entity.getId(), entity);
+                    return;
+                }
+
+                ParameterContextMerger.merge(mergedAffectedComponentEntity, entity);
+            }
         }
 
         final Map<NodeIdentifier, ParameterContextDTO> contextDtoMap = new HashMap<>();
         entityMap.forEach( (nodeId, entity) -> contextDtoMap.put(nodeId, entity.getRequest().getParameterContext()));
 
         ParameterContextMerger.merge(clientUpdateRequestDto.getParameterContext(), contextDtoMap);
+        clientUpdateRequestDto.setAffectedComponents(new HashSet<>(affectedComponentEntities.values()));
     }
 
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
index bf10d30d8d2..5e64a213526 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/controller/AbstractComponentNode.java
@@ -390,7 +390,6 @@ private boolean removeProperty(final String name, final boolean allowRemovalOfRe
         }
 
         final PropertyDescriptor descriptor = getComponent().getPropertyDescriptor(name);
-        String value = null;
 
         final boolean allowRemoval = allowRemovalOfRequiredProperties || !descriptor.isRequired();
         if (!allowRemoval) {
@@ -402,6 +401,7 @@ private boolean removeProperty(final String name, final boolean allowRemovalOfRe
             return false;
         }
 
+        final String value = propertyConfiguration.getEffectiveValue(getParameterContext());
         if (descriptor.getControllerServiceDefinition() != null) {
             if (value != null) {
                 final ControllerServiceNode oldNode = serviceProvider.getControllerServiceNode(value);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/parameter/ParameterContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/parameter/ParameterContext.java
index 4ac4ef6df86..dae4d9e22d3 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/parameter/ParameterContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core-api/src/main/java/org/apache/nifi/parameter/ParameterContext.java
@@ -40,6 +40,17 @@ public interface ParameterContext extends ParameterLookup, Authorizable {
      */
     void setName(String name);
 
+    /**
+     * @return a user-supplied description for the Parameter Context
+     */
+    String getDescription();
+
+    /**
+     * Sets the description for the Parameter Context
+     * @param description the description
+     */
+    void setDescription(String description);
+
     /**
      * Updates the Parameters within this context to match the given set of Parameters.
      * @param updatedParameters the updated set of parameters
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
index 37c30bc0877..92972f87d26 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/StandardFlowSynchronizer.java
@@ -95,6 +95,7 @@
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
 import org.apache.nifi.web.api.dto.TemplateDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Document;
@@ -199,7 +200,8 @@ public void sync(final FlowController controller, final DataFlow proposedFlow, f
                 existingFlowEmpty = root.isEmpty()
                     && flowManager.getAllReportingTasks().isEmpty()
                     && flowManager.getAllControllerServices().isEmpty()
-                    && controller.getFlowRegistryClient().getRegistryIdentifiers().isEmpty();
+                    && controller.getFlowRegistryClient().getRegistryIdentifiers().isEmpty()
+                    && controller.getFlowManager().getParameterContextManager().getParameterContexts().isEmpty();
             } else {
                 existingFlow = readFlowFromDisk();
                 if (existingFlow == null || existingFlow.length == 0) {
@@ -543,10 +545,13 @@ private boolean withinTemplate(final Element element) {
 
     private ParameterContext createParameterContext(final ParameterContextDTO dto, final FlowManager flowManager) {
         final Set<Parameter> parameters = dto.getParameters().stream()
+            .map(ParameterEntity::getParameter)
             .map(this::createParameter)
             .collect(Collectors.toSet());
 
-        return flowManager.createParameterContext(dto.getId(), dto.getName(), parameters);
+        final ParameterContext context = flowManager.createParameterContext(dto.getId(), dto.getName(), parameters);
+        context.setDescription(dto.getDescription());
+        return context;
     }
 
     private Parameter createParameter(final ParameterDTO dto) {
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
index 18acff21227..a58559139bc 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/flow/StandardFlowManager.java
@@ -591,10 +591,6 @@ public void removeReportingTask(final ReportingTaskNode reportingTaskNode) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, reportingTaskNode.getReportingTask(), reportingTaskNode.getConfigurationContext());
         }
 
-        // TODO: Probably should create a method on ComponentNode: `List<ControllerServiceNode> getReferencedControllerServices()` This same code block (or something similar)
-        //  is scattered all throughout the codebase. If we look at references to ComponentNode.getEffectivePropertyValues(), it will show the same thing over & over.
-        //  ALSO - double-check what happens if we have a component reference Controller Service A two times - here we would remove the reference twice, but do we add the reference
-        //  twice? If not, we need to address that!
         for (final Map.Entry<PropertyDescriptor, String> entry : reportingTaskNode.getEffectivePropertyValues().entrySet()) {
             final PropertyDescriptor descriptor = entry.getKey();
             if (descriptor.getControllerServiceDefinition() != null) {
@@ -651,7 +647,6 @@ public void removeRootControllerService(final ControllerServiceNode service) {
             ReflectionUtils.quietlyInvokeMethodsWithAnnotation(OnRemoved.class, service.getControllerServiceImplementation(), configurationContext);
         }
 
-        // TODO: Again - add getReferencedControllerServices() method. It would be more efficient than this, calculating the effective property values every time.
         for (final Map.Entry<PropertyDescriptor, String> entry : service.getEffectivePropertyValues().entrySet()) {
             final PropertyDescriptor descriptor = entry.getKey();
             if (descriptor.getControllerServiceDefinition() != null) {
@@ -750,7 +745,7 @@ public ParameterContext createParameterContext(final String id, final String nam
         }
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(this);
-        final ParameterContext parameterContext = new StandardParameterContext(id, name, referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(id, name, referenceManager, flowController);
         parameterContext.setParameters(parameters);
         parameterContextManager.addParameterContext(parameterContext);
         return parameterContext;
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
index ffe86a760f4..16515c8a8c4 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/FlowFromDOMFactory.java
@@ -22,9 +22,9 @@
 import org.apache.nifi.encrypt.EncryptionException;
 import org.apache.nifi.encrypt.StringEncryptor;
 import org.apache.nifi.groups.RemoteProcessGroupPortDescriptor;
+import org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser;
 import org.apache.nifi.parameter.ParameterParser;
 import org.apache.nifi.parameter.ParameterTokenList;
-import org.apache.nifi.parameter.ExpressionLanguageAwareParameterParser;
 import org.apache.nifi.remote.StandardRemoteProcessGroupPortDescriptor;
 import org.apache.nifi.scheduling.ExecutionNode;
 import org.apache.nifi.scheduling.SchedulingStrategy;
@@ -46,6 +46,7 @@
 import org.apache.nifi.web.api.dto.RemoteProcessGroupDTO;
 import org.apache.nifi.web.api.dto.ReportingTaskDTO;
 import org.apache.nifi.web.api.dto.VersionControlInformationDTO;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.w3c.dom.Element;
@@ -148,12 +149,12 @@ public static ParameterContextDTO getParameterContext(final Element element, fin
 
         dto.setId(getString(element, "id"));
         dto.setName(getString(element, "name"));
+        dto.setDescription(getString(element, "description"));
 
-        final Set<ParameterDTO> parameterDtos = new LinkedHashSet<>();
+        final Set<ParameterEntity> parameterDtos = new LinkedHashSet<>();
         final List<Element> parameterElements = FlowFromDOMFactory.getChildrenByTagName(element, "parameter");
         for (final Element parameterElement : parameterElements) {
             final ParameterDTO parameterDto = new ParameterDTO();
-            parameterDtos.add(parameterDto);
 
             parameterDto.setName(getString(parameterElement, "name"));
             parameterDto.setDescription(getString(parameterElement, "description"));
@@ -161,6 +162,10 @@ public static ParameterContextDTO getParameterContext(final Element element, fin
 
             final String value = decrypt(getString(parameterElement, "value"), encryptor);
             parameterDto.setValue(value);
+
+            final ParameterEntity parameterEntity = new ParameterEntity();
+            parameterEntity.setParameter(parameterDto);
+            parameterDtos.add(parameterEntity);
         }
 
         dto.setParameters(parameterDtos);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
index f83428b4e30..a5c31b705e3 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/serialization/StandardFlowSerializer.java
@@ -162,6 +162,7 @@ private void addParameterContexts(final Element parentElement, final ParameterCo
 
             addStringElement(parameterContextElement, "id", parameterContext.getIdentifier());
             addStringElement(parameterContextElement, "name", parameterContext.getName());
+            addStringElement(parameterContextElement, "description", parameterContext.getDescription());
 
             for (final Parameter parameter : parameterContext.getParameters().values()) {
                 addParameter(parameterContextElement, parameter);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
index 0ac53517309..3cf3df29b83 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/fingerprint/FingerprintFactory.java
@@ -314,6 +314,7 @@ private void orderByChildElement(final List<Element> toSort, final String childT
     private StringBuilder addParameterContext(final StringBuilder builder, final Element parameterContextElement) {
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(parameterContextElement, "id"));
         appendFirstValue(builder, DomUtils.getChildNodesByTagName(parameterContextElement, "name"));
+        appendFirstValue(builder, DomUtils.getChildNodesByTagName(parameterContextElement, "description"));
 
         final List<Element> parameterElements = DomUtils.getChildElementsByTagName(parameterContextElement, "parameter");
         if (parameterElements == null || parameterElements.isEmpty()) {
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java
index c0f49fd224f..e5d12a5173c 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/parameter/StandardParameterContext.java
@@ -44,20 +44,23 @@ public class StandardParameterContext implements ParameterContext {
 
     private final String id;
     private final ParameterReferenceManager parameterReferenceManager;
+    private final Authorizable parentAuthorizable;
 
     private String name;
     private long version = 0L;
     private final Map<ParameterDescriptor, Parameter> parameters = new LinkedHashMap<>();
+    private volatile String description;
 
     private final ReadWriteLock rwLock = new ReentrantReadWriteLock();
     private final Lock readLock = rwLock.readLock();
     private final Lock writeLock = rwLock.writeLock();
 
 
-    public StandardParameterContext(final String id, final String name, final ParameterReferenceManager parameterReferenceManager) {
+    public StandardParameterContext(final String id, final String name, final ParameterReferenceManager parameterReferenceManager, final Authorizable parentAuthorizable) {
         this.id = Objects.requireNonNull(id);
         this.name = Objects.requireNonNull(name);
         this.parameterReferenceManager = parameterReferenceManager;
+        this.parentAuthorizable = parentAuthorizable;
     }
 
     @Override
@@ -84,6 +87,16 @@ public void setName(final String name) {
         }
     }
 
+    @Override
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    @Override
+    public String getDescription() {
+        return description;
+    }
+
     public void setParameters(final Set<Parameter> updatedParameters) {
         writeLock.lock();
         try {
@@ -91,19 +104,35 @@ public void setParameters(final Set<Parameter> updatedParameters) {
 
             verifyCanSetParameters(updatedParameters);
 
+            boolean changeAffectingComponents = false;
             for (final Parameter parameter : updatedParameters) {
-                if (parameter.getValue() == null) {
+                if (parameter.getValue() == null && parameter.getDescriptor().getDescription() == null) {
                     parameters.remove(parameter.getDescriptor());
+                    changeAffectingComponents = true;
+                } else if (parameter.getValue() == null) {
+                    // Value is null but description is not. Just update the description of the existing Parameter.
+                    final Parameter existingParameter = parameters.get(parameter.getDescriptor());
+                    final ParameterDescriptor existingDescriptor = existingParameter.getDescriptor();
+                    final ParameterDescriptor replacementDescriptor = new ParameterDescriptor.Builder()
+                        .from(existingDescriptor)
+                        .description(parameter.getDescriptor().getDescription())
+                        .build();
+
+                    final Parameter replacementParameter = new Parameter(replacementDescriptor, existingParameter.getValue());
+                    parameters.put(parameter.getDescriptor(), replacementParameter);
                 } else {
                     parameters.put(parameter.getDescriptor(), parameter);
+                    changeAffectingComponents = true;
                 }
             }
 
-            for (final ProcessGroup processGroup : parameterReferenceManager.getProcessGroupsBound(this)) {
-                try {
-                    processGroup.onParameterContextUpdated();
-                } catch (final Exception e) {
-                    logger.error("Failed to notify {} that Parameter Context was updated", processGroup, e);
+            if (changeAffectingComponents) {
+                for (final ProcessGroup processGroup : parameterReferenceManager.getProcessGroupsBound(this)) {
+                    try {
+                        processGroup.onParameterContextUpdated();
+                    } catch (final Exception e) {
+                        logger.error("Failed to notify {} that Parameter Context was updated", processGroup, e);
+                    }
                 }
             }
         } finally {
@@ -171,10 +200,19 @@ public void verifyCanSetParameters(final Set<Parameter> updatedParameters) {
         for (final Parameter updatedParameter : updatedParameters) {
             validateSensitiveFlag(updatedParameter);
 
-            if (updatedParameter.getValue() == null) {
+            // Parameters' names and sensitivity flags are immutable. However, the description and value are mutable. If both value and description are
+            // set to `null`, this is the indication that the Parameter should be removed. If the value is `null` but the Description is supplied, the user
+            // is indicating that only the description is to be changed.
+            if (updatedParameter.getValue() == null && updatedParameter.getDescriptor().getDescription() == null) {
                 validateReferencingComponents(updatedParameter, "remove");
-            } else {
+            } else if (updatedParameter.getValue() != null) {
                 validateReferencingComponents(updatedParameter, "update");
+            } else {
+                // Only parameter is changing. No value is set. This means that the Parameter must already exist.
+                final Optional<Parameter> existing = getParameter(updatedParameter.getDescriptor());
+                if (!existing.isPresent()) {
+                    throw new IllegalStateException("Cannot add Parameter '" + updatedParameter.getDescriptor().getName() + "' without providing a value");
+                }
             }
         }
     }
@@ -188,7 +226,7 @@ private void validateSensitiveFlag(final Parameter updatedParameter) {
         }
 
         final ParameterDescriptor existingDescriptor = existingParameter.getDescriptor();
-        if (existingDescriptor.isSensitive() != updatedDescriptor.isSensitive()) {
+        if (existingDescriptor.isSensitive() != updatedDescriptor.isSensitive() && updatedParameter.getValue() != null) {
             final String existingSensitiveDescription = existingDescriptor.isSensitive() ? "sensitive" : "not sensitive";
             final String updatedSensitiveDescription = updatedDescriptor.isSensitive() ? "sensitive" : "not sensitive";
 
@@ -251,7 +289,7 @@ public Authorizable getParentAuthorizable() {
         return new Authorizable() {
             @Override
             public Authorizable getParentAuthorizable() {
-                return null;
+                return parentAuthorizable;
             }
 
             @Override
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
index f64ad42d225..425b0a7f848 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
@@ -71,15 +71,6 @@ public StandardProcessContext(final ProcessorNode processorNode, final Controlle
             }
 
             if (value != null) {
-//                final List<Range> ranges = Query.extractExpressionRanges(value);
-//
-//                final PreparedQuery pq;
-//                if (ranges.isEmpty()) {
-//                    pq = EmptyPreparedQuery.forText(properties.get(desc));
-//                } else {
-//                    pq = Query.prepare(value);
-//                }
-
                 final PreparedQuery pq = Query.prepare(value);
                 preparedQueries.put(desc, pq);
             }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
index 921e48078c5..fef9b7b5b89 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
@@ -194,7 +194,6 @@ public String getProcessGroupIdentifier() {
         return groupId;
     }
 
-    // TODO: Keep this up-to-date in AbstractComponentNode and inject it in?
     @Override
     public Collection<String> getReferencedParameters(final String propertyName) {
         final PropertyDescriptor descriptor = new PropertyDescriptor.Builder().name(propertyName).build();
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd
index 2d59f548214..ca43ebce19d 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/resources/FlowConfiguration.xsd
@@ -67,6 +67,7 @@
         <xs:sequence>
             <xs:element name="id" type="NonEmptyStringType" />
             <xs:element name="name" type="NonEmptyStringType" />
+            <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1" />
             <xs:element name="parameter" type="ParameterType" minOccurs="0" maxOccurs="unbounded" />
         </xs:sequence>
     </xs:complexType>
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/cs/ControllerServiceReferencingProcessor.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/cs/ControllerServiceReferencingProcessor.java
index 82438e8f016..3b6df47d1f7 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/cs/ControllerServiceReferencingProcessor.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/cs/ControllerServiceReferencingProcessor.java
@@ -24,17 +24,30 @@
 import org.apache.nifi.processor.Relationship;
 import org.apache.nifi.processor.exception.ProcessException;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 
 public class ControllerServiceReferencingProcessor extends AbstractProcessor {
-    private final PropertyDescriptor SERVICE = new PropertyDescriptor.Builder()
+    protected static final PropertyDescriptor SERVICE = new PropertyDescriptor.Builder()
         .name("Counter Service")
         .identifiesControllerService(Counter.class)
         .required(true)
         .build();
 
+    protected static final PropertyDescriptor OPTIONAL_SERVICE = new PropertyDescriptor.Builder()
+        .name("Optional Service")
+        .identifiesControllerService(Counter.class)
+        .required(false)
+        .build();
+
+    protected static final PropertyDescriptor IGNORED_OPTIONAL_SERVICE = new PropertyDescriptor.Builder()
+        .name("Ignored Optional Service")
+        .identifiesControllerService(Counter.class)
+        .required(false)
+        .build();
+
     @Override
     public Set<Relationship> getRelationships() {
         return Collections.singleton(FrameworkIntegrationTest.REL_SUCCESS);
@@ -42,11 +55,16 @@ public Set<Relationship> getRelationships() {
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
-        return Collections.singletonList(SERVICE);
+        return Arrays.asList(SERVICE, OPTIONAL_SERVICE, IGNORED_OPTIONAL_SERVICE);
     }
 
     @Override
     public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {
         context.getProperty(SERVICE).asControllerService(Counter.class).increment(1L);
+
+        final Counter optionalCounter = context.getProperty(OPTIONAL_SERVICE).asControllerService(Counter.class);
+        if (optionalCounter != null) {
+            optionalCounter.increment(1L);
+        }
     }
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/parameters/ParametersIT.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/parameters/ParametersIT.java
index 1ecfd9c94c9..b91269c9eca 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/parameters/ParametersIT.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/parameters/ParametersIT.java
@@ -53,7 +53,7 @@ public void testSimpleParameterSubstitution() throws ExecutionException, Interru
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -78,7 +78,7 @@ public void testParameterSubstitutionWithinELWhenELNotSupported() throws Executi
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -103,7 +103,7 @@ public void testParameterSubstitutionWithinELWhenELIsSupported() throws Executio
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -128,7 +128,7 @@ public void testMixAndMatchELAndParameters() throws ExecutionException, Interrup
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -160,7 +160,7 @@ public void testParametersInELFromNewPropertyValueAndText() throws ExecutionExce
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -179,7 +179,7 @@ public void testParametersInELFromNewPropertyValueAndText() throws ExecutionExce
     }
 
     @Test
-    public void testParametersWhereELSupportedByNotPresent() throws ExecutionException, InterruptedException {
+    public void testParametersWhereELSupportedButNotPresent() throws ExecutionException, InterruptedException {
         final ProcessorNode generate = createProcessorNode(GenerateProcessor.class);
         final ProcessorNode updateAttribute = createProcessorNode(UpdateAttributeWithEL.class);
         final ProcessorNode terminate = getTerminateProcessor();
@@ -188,7 +188,7 @@ public void testParametersWhereELSupportedByNotPresent() throws ExecutionExcepti
         final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
 
         final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
         parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
 
         getRootGroup().setParameterContext(parameterContext);
@@ -209,4 +209,50 @@ public void testParametersWhereELSupportedByNotPresent() throws ExecutionExcepti
         assertEquals("unitunit", flowFileRecord.getAttribute("bar"));
         assertEquals("foounitbar", flowFileRecord.getAttribute("baz"));
     }
+
+    @Test
+    public void testCornerCases() throws ExecutionException, InterruptedException {
+        final ProcessorNode generate = createProcessorNode(GenerateProcessor.class);
+        final ProcessorNode updateAttribute = createProcessorNode(UpdateAttributeWithEL.class);
+        final ProcessorNode terminate = getTerminateProcessor();
+
+        final Connection generatedFlowFileConnection = connect(generate, updateAttribute, REL_SUCCESS);
+        final Connection updatedAttributeConnection = connect(updateAttribute, terminate, REL_SUCCESS);
+
+        final ParameterReferenceManager referenceManager = new StandardParameterReferenceManager(getFlowController().getFlowManager());
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "param-context", referenceManager, null);
+        parameterContext.setParameters(Collections.singleton(new Parameter(new ParameterDescriptor.Builder().name("test").build(), "unit")));
+
+        getRootGroup().setParameterContext(parameterContext);
+
+        final Map<String, String> variables = new HashMap<>();
+        variables.put("#{test}", "variable #{test}");
+        variables.put("${var}", "variable ${var}");
+        variables.put("var", "abc");
+        variables.put("abc", "123");
+        getRootGroup().setVariables(variables);
+
+        final Map<String, String> properties = new HashMap<>();
+        properties.put("foo", "${#{test}}");  // References a Parameter named 'test'
+        properties.put("bar", "${'#{test}'}");  // Parameter reference is quoted, which means that it's treated as a String, not a reference. This references a variable/attribute named '#{test}'
+        properties.put("baz", "${ # this is a comment\n#{test}}"); // Test Parameter reference following a comment in EL
+        properties.put("multi", "${ #### this is a comment\n#{test}}");  // Test several #'s for a comment, followed by a parameter reference
+        properties.put("embedded", "${'$${var}'}");  // Here, we reference a variable/attribute named '${var}' - since EL Expressions can be embedded even within quotes, we must escape with extra $.
+        properties.put("indirect", "${'${var}'}"); // Reference a variable/attribute whose name is defined by variable/attribute 'var' - i.e., reference variable 'var', whose value is 'abc', then
+                                                   // use that to reference variable "abc" to get a value of 123
+        updateAttribute.setProperties(properties);
+
+        triggerOnce(generate);
+        triggerOnce(updateAttribute);
+
+        final FlowFileQueue flowFileQueue = updatedAttributeConnection.getFlowFileQueue();
+        final FlowFileRecord flowFileRecord = flowFileQueue.poll(Collections.emptySet());
+
+        assertEquals("unit", flowFileRecord.getAttribute("foo"));
+        assertEquals("variable #{test}", flowFileRecord.getAttribute("bar"));
+        assertEquals("unit", flowFileRecord.getAttribute("baz"));
+        assertEquals("unit", flowFileRecord.getAttribute("multi"));
+        assertEquals("variable ${var}", flowFileRecord.getAttribute("embedded"));
+        assertEquals("123", flowFileRecord.getAttribute("indirect"));
+    }
 }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/processor/ProcessorParameterTokenIT.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/processor/ProcessorParameterTokenIT.java
index 94b36dfe3cb..3843d2aea78 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/processor/ProcessorParameterTokenIT.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/integration/processor/ProcessorParameterTokenIT.java
@@ -74,7 +74,7 @@ public void testProperReferences() throws ExecutionException, InterruptedExcepti
         final ProcessorNode procNode = createProcessorNode(WriteText.class);
         procNode.setAutoTerminatedRelationships(Collections.singleton(REL_SUCCESS));
 
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "testEscapedParameterReference", ParameterReferenceManager.EMPTY);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "testEscapedParameterReference", ParameterReferenceManager.EMPTY, null);
         getRootGroup().setParameterContext(parameterContext);
 
         final Set<Parameter> parameters = new HashSet<>();
@@ -104,7 +104,7 @@ public void testSensitiveParameters() throws ExecutionException, InterruptedExce
         final ProcessorNode procNode = createProcessorNode(WriteText.class);
         procNode.setAutoTerminatedRelationships(Collections.singleton(REL_SUCCESS));
 
-        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "testEscapedParameterReference", ParameterReferenceManager.EMPTY);
+        final ParameterContext parameterContext = new StandardParameterContext(UUID.randomUUID().toString(), "testEscapedParameterReference", ParameterReferenceManager.EMPTY, null);
         getRootGroup().setParameterContext(parameterContext);
 
         final Set<Parameter> parameters = new HashSet<>();
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
index af0e3e97c85..1b211a2d37f 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/parameter/TestStandardParameterContext.java
@@ -34,13 +34,14 @@
 import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.testng.Assert.assertNull;
 
 public class TestStandardParameterContext {
 
     @Test
     public void testUpdatesApply() {
         final ParameterReferenceManager referenceManager = new HashMapParameterReferenceManager();
-        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager);
+        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager, null);
 
         final ParameterDescriptor abcDescriptor = new ParameterDescriptor.Builder().name("abc").build();
         final ParameterDescriptor xyzDescriptor = new ParameterDescriptor.Builder().name("xyz").build();
@@ -54,12 +55,12 @@ public void testUpdatesApply() {
 
         final Parameter abcParam = context.getParameter("abc").get();
         assertEquals(abcDescriptor, abcParam.getDescriptor());
-        assertEquals("", abcParam.getDescriptor().getDescription());
+        assertNull(abcParam.getDescriptor().getDescription());
         assertEquals("123", abcParam.getValue());
 
         final Parameter xyzParam = context.getParameter("xyz").get();
         assertEquals(xyzDescriptor, xyzParam.getDescriptor());
-        assertEquals("", xyzParam.getDescriptor().getDescription());
+        assertNull(xyzParam.getDescriptor().getDescription());
         assertEquals("242526", xyzParam.getValue());
 
         final Set<Parameter> secondParameters = new HashSet<>();
@@ -92,11 +93,47 @@ public void testUpdatesApply() {
         assertEquals("other", context.getParameter("foo").get().getValue());
     }
 
+    @Test
+    public void testUpdateDescription() {
+        final ParameterReferenceManager referenceManager = new HashMapParameterReferenceManager();
+        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager, null);
+
+        final ParameterDescriptor abcDescriptor = new ParameterDescriptor.Builder().name("abc").description("abc").build();
+
+        final Set<Parameter> parameters = new HashSet<>();
+        parameters.add(new Parameter(abcDescriptor, "123"));
+
+        context.setParameters(parameters);
+
+        Parameter abcParam = context.getParameter("abc").get();
+        assertEquals(abcDescriptor, abcParam.getDescriptor());
+        assertEquals("abc", abcParam.getDescriptor().getDescription());
+        assertEquals("123", abcParam.getValue());
+
+        ParameterDescriptor updatedDescriptor = new ParameterDescriptor.Builder().name("abc").description("Updated").build();
+        final Parameter newDescriptionParam = new Parameter(updatedDescriptor, "321");
+        context.setParameters(Collections.singleton(newDescriptionParam));
+
+        abcParam = context.getParameter("abc").get();
+        assertEquals(abcDescriptor, abcParam.getDescriptor());
+        assertEquals("Updated", abcParam.getDescriptor().getDescription());
+        assertEquals("321", abcParam.getValue());
+
+        updatedDescriptor = new ParameterDescriptor.Builder().name("abc").description("Updated Again").build();
+        final Parameter paramWithoutValue = new Parameter(updatedDescriptor, null);
+        context.setParameters(Collections.singleton(paramWithoutValue));
+
+        abcParam = context.getParameter("abc").get();
+        assertEquals(abcDescriptor, abcParam.getDescriptor());
+        assertEquals("Updated Again", abcParam.getDescriptor().getDescription());
+        assertEquals("321", abcParam.getValue());
+    }
+
     @Test
     public void testChangingSensitivity() {
         // Ensure no changes applied
         final ParameterReferenceManager referenceManager = new HashMapParameterReferenceManager();
-        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager);
+        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager, null);
 
         final ParameterDescriptor abcDescriptor = new ParameterDescriptor.Builder().name("abc").sensitive(true).build();
         final ParameterDescriptor xyzDescriptor = new ParameterDescriptor.Builder().name("xyz").build();
@@ -134,7 +171,7 @@ public void testChangingSensitivity() {
     @Test
     public void testChangingParameterForRunningProcessor() {
         final HashMapParameterReferenceManager referenceManager = new HashMapParameterReferenceManager();
-        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager);
+        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager, null);
 
         final ProcessorNode procNode = Mockito.mock(ProcessorNode.class);
         Mockito.when(procNode.isRunning()).thenReturn(false);
@@ -181,7 +218,7 @@ public void testChangingParameterForRunningProcessor() {
     @Test
     public void testChangingParameterForEnabledControllerService() {
         final HashMapParameterReferenceManager referenceManager = new HashMapParameterReferenceManager();
-        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager);
+        final StandardParameterContext context = new StandardParameterContext("unit-test-context", "unit-test-context", referenceManager, null);
 
         final ControllerServiceNode serviceNode = Mockito.mock(ControllerServiceNode.class);
         Mockito.when(serviceNode.getState()).thenReturn(ControllerServiceState.ENABLED);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java
index f5110770edd..7623976f305 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/authorization/StandardAuthorizableLookup.java
@@ -159,17 +159,6 @@ public Resource getResource() {
         }
     };
 
-    private static final Authorizable PARAMETER_CONTEXTS_AUTHORIZABLE = new Authorizable() {
-        @Override
-        public Authorizable getParentAuthorizable() {
-            return null;
-        }
-
-        @Override
-        public Resource getResource() {
-            return ResourceFactory.getParameterContextsResource();
-        }
-    };
 
     // nifi core components
     private ControllerFacade controllerFacade;
@@ -781,7 +770,17 @@ public Authorizable getSystem() {
 
     @Override
     public Authorizable getParameterContexts() {
-        return PARAMETER_CONTEXTS_AUTHORIZABLE;
+        return new Authorizable() {
+            @Override
+            public Authorizable getParentAuthorizable() {
+                return getController();
+            }
+
+            @Override
+            public Resource getResource() {
+                return ResourceFactory.getParameterContextsResource();
+            }
+        };
     }
 
     /**
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
index 8086e207bfd..d2046205b80 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/NiFiServiceFacade.java
@@ -1552,6 +1552,14 @@ VersionControlInformationEntity setVersionControlInformation(Revision processGro
     ProcessGroupEntity updateProcessGroupContents(Revision revision, String groupId, VersionControlInformationDTO versionControlInfo, VersionedFlowSnapshot snapshot,
                                                   String componentIdSeed, boolean verifyNotModified, boolean updateSettings, boolean updateDescendantVersionedFlows);
 
+    /**
+     * Returns a Set representing all components that will be affected by updating the Parameter Context that is represented by the given DTO.
+     *
+     * @param parameterContextDto the Parameter Context DTO that represents all changes that are to occur to a Parameter Context
+     * @return a Set representing all components that will be affected by the update
+     */
+    Set<AffectedComponentEntity> getActiveComponentsAffectedByParameterContextUpdate(ParameterContextDTO parameterContextDto);
+
     /**
      * Returns a Set representing all components that will be affected by updating the Parameter Context that is represented by the given DTO.
      *
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
index 5c01fc0ad40..d7078d9afcd 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/StandardNiFiServiceFacade.java
@@ -248,6 +248,7 @@
 import org.apache.nifi.web.api.entity.FunnelEntity;
 import org.apache.nifi.web.api.entity.LabelEntity;
 import org.apache.nifi.web.api.entity.ParameterContextEntity;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.api.entity.PortEntity;
 import org.apache.nifi.web.api.entity.PortStatusEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
@@ -1044,8 +1045,9 @@ public List<ComponentValidationResultEntity> validateComponents(final ParameterC
         final ParameterContext parameterContext = parameterContextDAO.getParameterContext(parameterContextDto.getId());
         final Set<ProcessGroup> boundProcessGroups = parameterContext.getParameterReferenceManager().getProcessGroupsBound(parameterContext);
 
-        final ParameterContext updatedParameterContext = new StandardParameterContext(parameterContext.getIdentifier(), parameterContext.getName(), ParameterReferenceManager.EMPTY);
+        final ParameterContext updatedParameterContext = new StandardParameterContext(parameterContext.getIdentifier(), parameterContext.getName(), ParameterReferenceManager.EMPTY, null);
         final Set<Parameter> parameters = parameterContextDto.getParameters().stream()
+            .map(ParameterEntity::getParameter)
             .map(this::createParameter)
             .collect(Collectors.toSet());
         updatedParameterContext.setParameters(parameters);
@@ -1142,24 +1144,36 @@ public ParameterContextEntity deleteParameterContext(final Revision revision, fi
 
     }
 
+
+    public Set<AffectedComponentEntity> getActiveComponentsAffectedByParameterContextUpdate(final ParameterContextDTO parameterContextDto) {
+        return getComponentsAffectedByParameterContextUpdate(parameterContextDto, false);
+    }
+
     @Override
     public Set<AffectedComponentEntity> getComponentsAffectedByParameterContextUpdate(final ParameterContextDTO parameterContextDto) {
+        return getComponentsAffectedByParameterContextUpdate(parameterContextDto, true);
+    }
+
+    private Set<AffectedComponentEntity> getComponentsAffectedByParameterContextUpdate(final ParameterContextDTO parameterContextDto, final boolean includeInactive) {
         final ProcessGroup rootGroup = processGroupDAO.getProcessGroup("root");
         final List<ProcessGroup> groupsReferencingParameterContext = rootGroup.findAllProcessGroups(
             group -> group.getParameterContext() != null && group.getParameterContext().getIdentifier().equals(parameterContextDto.getId()));
 
-
         final Set<ComponentNode> affectedComponents = new HashSet<>();
         for (final ProcessGroup group : groupsReferencingParameterContext) {
             for (final ProcessorNode processor : group.getProcessors()) {
                 if (!processor.getReferencedParameterNames().isEmpty()) {
-                    affectedComponents.add(processor);
+                    if (includeInactive || processor.isRunning()) {
+                        affectedComponents.add(processor);
+                    }
                 }
             }
 
             for (final ControllerServiceNode service : group.getControllerServices(false)) {
                 if (!service.getReferencedParameterNames().isEmpty()) {
-                    affectedComponents.add(service);
+                    if (includeInactive || service.isActive()) {
+                        affectedComponents.add(service);
+                    }
                 }
             }
         }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
index 114c740d703..bcaa3044a81 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/ParameterContextResource.java
@@ -23,6 +23,7 @@
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.Authorization;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.nifi.authorization.AuthorizableLookup;
 import org.apache.nifi.authorization.Authorizer;
 import org.apache.nifi.authorization.RequestAction;
 import org.apache.nifi.authorization.resource.Authorizable;
@@ -47,6 +48,7 @@
 import org.apache.nifi.web.api.dto.ParameterContextUpdateRequestDTO;
 import org.apache.nifi.web.api.dto.ParameterContextUpdateStepDTO;
 import org.apache.nifi.web.api.dto.ParameterContextValidationRequestDTO;
+import org.apache.nifi.web.api.dto.ParameterDTO;
 import org.apache.nifi.web.api.dto.RevisionDTO;
 import org.apache.nifi.web.api.entity.AffectedComponentEntity;
 import org.apache.nifi.web.api.entity.ComponentValidationResultEntity;
@@ -56,6 +58,7 @@
 import org.apache.nifi.web.api.entity.ParameterContextUpdateRequestEntity;
 import org.apache.nifi.web.api.entity.ParameterContextValidationRequestEntity;
 import org.apache.nifi.web.api.entity.ParameterContextsEntity;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
 import org.apache.nifi.web.api.request.ClientIdParameter;
 import org.apache.nifi.web.api.request.LongParameter;
@@ -85,7 +88,9 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Date;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -132,6 +137,8 @@ public class ParameterContextResource extends ApplicationResource {
         }
     )
     public Response getParameterContexts() {
+        authorizeParameterContexts();
+
         if (isReplicateRequest()) {
             return replicate(HttpMethod.GET);
         }
@@ -139,11 +146,29 @@ public Response getParameterContexts() {
         final Set<ParameterContextEntity> parameterContexts = serviceFacade.getParameterContexts();
         final ParameterContextsEntity entity = new ParameterContextsEntity();
         entity.setParameterContexts(parameterContexts);
+        entity.setCurrentTime(new Date());
 
         // generate the response
         return generateOkResponse(entity).build();
     }
 
+    private void authorizeParameterContexts() {
+        serviceFacade.authorizeAccess(lookup -> {
+            final Authorizable parameterContextsAuthorizable = lookup.getParameterContexts();
+            parameterContextsAuthorizable.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
+        });
+    }
+
+    private void authorizeReadParameterContext(final String parameterContextId) {
+        if (parameterContextId == null) {
+            throw new IllegalArgumentException("Parameter Context ID must be specified");
+        }
+
+        serviceFacade.authorizeAccess(lookup -> {
+            final Authorizable parameterContext = lookup.getParameterContext(parameterContextId);
+            parameterContext.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
+        });
+    }
 
     @GET
     @Consumes(MediaType.WILDCARD)
@@ -164,16 +189,13 @@ public Response getParameterContexts() {
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
     public Response getParameterContext(@ApiParam("The ID of the Parameter Context") @PathParam("id") final String parameterContextId) {
+        // authorize access
+        authorizeReadParameterContext(parameterContextId);
+
         if (isReplicateRequest()) {
             return replicate(HttpMethod.GET);
         }
 
-        // authorize access
-        serviceFacade.authorizeAccess(lookup -> {
-            final Authorizable parameterContext = lookup.getParameterContext(parameterContextId);
-            parameterContext.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
-        });
-
         // get the specified parameter context
         final ParameterContextEntity entity = serviceFacade.getParameterContext(parameterContextId, NiFiUserUtils.getNiFiUser());
         entity.setUri(generateResourceUri("parameter-contexts", entity.getId()));
@@ -319,7 +341,7 @@ public Response updateParameterContext(
     @POST
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("update-requests")
+    @Path("{contextId}/update-requests")
     @ApiOperation(
         value = "Initiate the Update Request of a Parameter Context",
         response = ParameterContextUpdateRequestEntity.class,
@@ -342,6 +364,7 @@ public Response updateParameterContext(
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
     public Response submitParameterContextUpdate(
+        @PathParam("contextId") final String contextId,
         @ApiParam(value = "The updated version of the parameter context.", required = true) final ParameterContextEntity requestEntity) {
 
         // Verify the request
@@ -358,8 +381,8 @@ public Response submitParameterContextUpdate(
         if (contextDto.getId() == null) {
             throw new IllegalArgumentException("Parameter Context's ID must be specified");
         }
-        if (requestEntity.getId() == null) {
-            throw new IllegalArgumentException("Entity's ID must be specified");
+        if (!contextDto.getId().equals(contextId)) {
+            throw new IllegalArgumentException("ID of Parameter Context in message body does not match Parameter Context ID supplied in URI");
         }
 
         // We will perform the updating of the Parameter Context in a background thread because it can be a long-running process.
@@ -381,6 +404,7 @@ public Response submitParameterContextUpdate(
         // 9. Re-Enable all affected Controller Services
         // 10. Re-Start all Processors
 
+        final Set<AffectedComponentEntity> activeAffectedComponents = serviceFacade.getActiveComponentsAffectedByParameterContextUpdate(contextDto);
         final Set<AffectedComponentEntity> affectedComponents = serviceFacade.getComponentsAffectedByParameterContextUpdate(contextDto);
         logger.debug("Received Update Request for Parameter Context: {}; the following {} components will be affected: {}", requestEntity, affectedComponents.size(), affectedComponents);
 
@@ -394,23 +418,12 @@ public Response submitParameterContextUpdate(
             requestRevision,
             lookup -> {
                 // Verify READ and WRITE permissions for user, for the Parameter Context itself
-                final Authorizable parameterContext = lookup.getParameterContext(requestEntity.getId());
+                final Authorizable parameterContext = lookup.getParameterContext(contextId);
                 parameterContext.authorize(authorizer, RequestAction.READ, user);
                 parameterContext.authorize(authorizer, RequestAction.WRITE, user);
 
                 // Verify READ and WRITE permissions for user, for every component that is affected
-                for (final AffectedComponentEntity entity : affectedComponents) {
-                    final AffectedComponentDTO dto = entity.getComponent();
-                    if (AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR.equals(dto.getReferenceType())) {
-                        final Authorizable processor = lookup.getProcessor(dto.getId()).getAuthorizable();
-                        processor.authorize(authorizer, RequestAction.READ, user);
-                        processor.authorize(authorizer, RequestAction.WRITE, user);
-                    } else if (AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE.equals(dto.getReferenceType())) {
-                        final Authorizable service = lookup.getControllerService(dto.getId()).getAuthorizable();
-                        service.authorize(authorizer, RequestAction.READ, user);
-                        service.authorize(authorizer, RequestAction.WRITE, user);
-                    }
-                }
+                activeAffectedComponents.forEach(component -> authorizeAffectedComponent(component, lookup, user, true, true));
             },
             () -> {
                 // Verify Request
@@ -420,11 +433,55 @@ public Response submitParameterContextUpdate(
         );
     }
 
+    private void authorizeAffectedComponent(final AffectedComponentEntity entity, final AuthorizableLookup lookup, final NiFiUser user, final boolean requireRead, final boolean requireWrite) {
+        final AffectedComponentDTO dto = entity.getComponent();
+        if (dto == null) {
+            // If the DTO is null, it is an indication that the user does not have permissions.
+            // However, we don't want to just throw an AccessDeniedException because we would rather
+            // ensure that all of the appropriate actions are taken by the pluggable Authorizer. As a result,
+            // we attempt to find the component as a Processor and fall back to finding it as a Controller Service.
+            // We then go ahead and attempt the authorization, expecting it to fail.
+            Authorizable authorizable;
+            try {
+                authorizable = lookup.getProcessor(entity.getId()).getAuthorizable();
+            } catch (final ResourceNotFoundException rnfe) {
+                authorizable = lookup.getControllerService(entity.getId()).getAuthorizable();
+            }
+
+            if (requireRead) {
+                authorizable.authorize(authorizer, RequestAction.READ, user);
+            }
+            if (requireWrite) {
+                authorizable.authorize(authorizer, RequestAction.WRITE, user);
+            }
+        }
+
+        if (AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR.equals(dto.getReferenceType())) {
+            final Authorizable processor = lookup.getProcessor(dto.getId()).getAuthorizable();
+
+            if (requireRead) {
+                processor.authorize(authorizer, RequestAction.READ, user);
+            }
+            if (requireWrite) {
+                processor.authorize(authorizer, RequestAction.WRITE, user);
+            }
+        } else if (AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE.equals(dto.getReferenceType())) {
+            final Authorizable service = lookup.getControllerService(dto.getId()).getAuthorizable();
+
+            if (requireRead) {
+                service.authorize(authorizer, RequestAction.READ, user);
+            }
+            if (requireWrite) {
+                service.authorize(authorizer, RequestAction.WRITE, user);
+            }
+        }
+    }
+
 
     @GET
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("update-requests/{id}")
+    @Path("{contextId}/update-requests/{requestId}")
     @ApiOperation(
         value = "Returns the Update Request with the given ID",
         response = ParameterContextUpdateRequestEntity.class,
@@ -441,15 +498,20 @@ public Response submitParameterContextUpdate(
         @ApiResponse(code = 404, message = "The specified resource could not be found."),
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
-    public Response getParameterContextUpdate(@ApiParam("The ID of the Update Request") @PathParam("id") final String updateRequestId) {
-        return retrieveUpdateRequest("update-requests", updateRequestId);
+    public Response getParameterContextUpdate(
+        @ApiParam("The ID of the Parameter Context") @PathParam("contextId") final String contextId,
+        @ApiParam("The ID of the Update Request") @PathParam("requestId") final String updateRequestId) {
+
+        authorizeReadParameterContext(contextId);
+
+        return retrieveUpdateRequest("update-requests", contextId, updateRequestId);
     }
 
 
     @DELETE
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("update-requests/{id}")
+    @Path("{contextId}/update-requests/{requestId}")
     @ApiOperation(
         value = "Deletes the Update Request with the given ID",
         response = ParameterContextUpdateRequestEntity.class,
@@ -472,9 +534,11 @@ public Response deleteUpdateRequest(
             required = false
         )
         @QueryParam(DISCONNECTED_NODE_ACKNOWLEDGED) @DefaultValue("false") final Boolean disconnectedNodeAcknowledged,
-        @ApiParam("The ID of the Update Request") @PathParam("id") final String updateRequestId) {
+        @ApiParam("The ID of the ParameterContext") @PathParam("contextId") final String contextId,
+        @ApiParam("The ID of the Update Request") @PathParam("requestId") final String updateRequestId) {
 
-        return deleteUpdateRequest("update-requests", updateRequestId, disconnectedNodeAcknowledged.booleanValue());
+        authorizeReadParameterContext(contextId);
+        return deleteUpdateRequest("update-requests", contextId, updateRequestId, disconnectedNodeAcknowledged.booleanValue());
     }
 
 
@@ -557,7 +621,7 @@ public Response deleteParameterContext(
     @POST
     @Consumes(MediaType.APPLICATION_JSON)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("validation-requests")
+    @Path("{contextId}/validation-requests")
     @ApiOperation(
         value = "Initiate a Validation Request to determine how the validity of components will change if a Parameter Context were to be updated",
         response = ParameterContextValidationRequestEntity.class,
@@ -577,7 +641,10 @@ public Response deleteParameterContext(
         @ApiResponse(code = 404, message = "The specified resource could not be found."),
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
-    public Response submitValidationRequest(@ApiParam(value = "The validation request", required=true) final ParameterContextValidationRequestEntity requestEntity) {
+    public Response submitValidationRequest(
+        @PathParam("contextId") final String contextId,
+        @ApiParam(value = "The validation request", required=true) final ParameterContextValidationRequestEntity requestEntity) {
+
         final ParameterContextValidationRequestDTO requestDto = requestEntity.getRequest();
         if (requestDto == null) {
             throw new IllegalArgumentException("Parameter Context must be specified");
@@ -600,18 +667,35 @@ public Response submitValidationRequest(@ApiParam(value = "The validation reques
             serviceFacade,
             requestEntity,
             lookup -> {
-                final Authorizable parameterContext = lookup.getParameterContext(requestEntity.getRequest().getParameterContext().getId());
+                final Authorizable parameterContext = lookup.getParameterContext(contextId);
                 parameterContext.authorize(authorizer, RequestAction.READ, NiFiUserUtils.getNiFiUser());
+
+                authorizeReferencingComponents(requestEntity.getRequest().getParameterContext().getId(), lookup, NiFiUserUtils.getNiFiUser());
             },
             () -> {},
             entity -> performAsyncValidation(entity, NiFiUserUtils.getNiFiUser())
         );
     }
 
+    private void authorizeReferencingComponents(final String parameterContextId, final AuthorizableLookup lookup, final NiFiUser user) {
+        final ParameterContextEntity context = serviceFacade.getParameterContext(parameterContextId, NiFiUserUtils.getNiFiUser());
+
+        for (final ParameterEntity parameterEntity : context.getComponent().getParameters()) {
+            final ParameterDTO dto = parameterEntity.getParameter();
+            if (dto == null) {
+                continue;
+            }
+
+            for (final AffectedComponentEntity affectedComponent : dto.getReferencingComponents()) {
+                authorizeAffectedComponent(affectedComponent, lookup, user, true, false);
+            }
+        }
+    }
+
     @GET
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("validation-requests/{id}")
+    @Path("{contextId}/validation-requests/{id}")
     @ApiOperation(
         value = "Returns the Validation Request with the given ID",
         response = ParameterContextValidationRequestEntity.class,
@@ -628,18 +712,23 @@ public Response submitValidationRequest(@ApiParam(value = "The validation reques
         @ApiResponse(code = 404, message = "The specified resource could not be found."),
         @ApiResponse(code = 409, message = "The request was valid but NiFi was not in the appropriate state to process it. Retrying the same request later may be successful.")
     })
-    public Response getValidationRequest(@ApiParam("The ID of the Validation Request") @PathParam("id") final String validationRequestId) {
+    public Response getValidationRequest(
+        @ApiParam("The ID of the Parameter Context") @PathParam("contextId") final String contextId,
+        @ApiParam("The ID of the Validation Request") @PathParam("id") final String validationRequestId) {
+
+        authorizeReadParameterContext(contextId);
+
         if (isReplicateRequest()) {
             return replicate("GET");
         }
 
-        return retrieveValidationRequest("validation-requests", validationRequestId);
+        return retrieveValidationRequest("validation-requests", contextId, validationRequestId);
     }
 
     @DELETE
     @Consumes(MediaType.WILDCARD)
     @Produces(MediaType.APPLICATION_JSON)
-    @Path("validation-requests/{id}")
+    @Path("{contextId}/validation-requests/{id}")
     @ApiOperation(
         value = "Deletes the Validation Request with the given ID",
         response = ParameterContextValidationRequestEntity.class,
@@ -662,15 +751,18 @@ public Response deleteValidationRequest(
             required = false
         )
         @QueryParam(DISCONNECTED_NODE_ACKNOWLEDGED) @DefaultValue("false") final Boolean disconnectedNodeAcknowledged,
+        @ApiParam("The ID of the Parameter Context") @PathParam("contextId") final String contextId,
         @ApiParam("The ID of the Update Request") @PathParam("id") final String validationRequestId) {
 
+        authorizeReadParameterContext(contextId);
+
         if (isReplicateRequest()) {
             return replicate(HttpMethod.DELETE);
         } else if (isDisconnectedFromCluster()) {
             verifyDisconnectedNodeModification(disconnectedNodeAcknowledged);
         }
 
-        return deleteValidationRequest("validation-requests", validationRequestId, disconnectedNodeAcknowledged.booleanValue());
+        return deleteValidationRequest("validation-requests", contextId, validationRequestId, disconnectedNodeAcknowledged.booleanValue());
     }
 
 
@@ -727,8 +819,8 @@ private Response submitUpdateRequest(final Revision requestRevision, final Initi
         // Create an asynchronous request that will occur in the background, because this request may
         // result in stopping components, which can take an indeterminate amount of time.
         final String requestId = UUID.randomUUID().toString();
-        final AsynchronousWebRequest<ParameterContextEntity> request = new StandardAsynchronousWebRequest<>(requestId, requestWrapper.getParameterContextEntity().getId(),
-            requestWrapper.getUser(), getUpdateSteps());
+        final String contextId = requestWrapper.getParameterContextEntity().getComponent().getId();
+        final AsynchronousWebRequest<ParameterContextEntity> request = new StandardAsynchronousWebRequest<>(requestId, contextId, requestWrapper.getUser(), getUpdateSteps());
 
         // Submit the request to be performed in the background
         final Consumer<AsynchronousWebRequest<ParameterContextEntity>> updateTask = asyncRequest -> {
@@ -751,7 +843,7 @@ private Response submitUpdateRequest(final Revision requestRevision, final Initi
         updateRequestManager.submitRequest("update-requests", requestId, request, updateTask);
 
         // Generate the response.
-        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(request, "update-requests", requestId);
+        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(request, "update-requests", contextId, requestId);
         return generateOkResponse(updateRequestEntity).build();
     }
 
@@ -770,11 +862,13 @@ private ParameterContextEntity updateParameterContext(final AsynchronousWebReque
         throws LifecycleManagementException, ResumeFlowException {
 
         final Set<AffectedComponentEntity> runningProcessors = affectedComponents.stream()
-            .filter(component -> AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR.equals(component.getComponent().getReferenceType()))
+            .filter(entity -> entity.getComponent() != null)
+            .filter(entity -> AffectedComponentDTO.COMPONENT_TYPE_PROCESSOR.equals(entity.getComponent().getReferenceType()))
             .filter(component -> "Running".equalsIgnoreCase(component.getComponent().getState()))
             .collect(Collectors.toSet());
 
         final Set<AffectedComponentEntity> enabledControllerServices = affectedComponents.stream()
+            .filter(entity -> entity.getComponent() != null)
             .filter(dto -> AffectedComponentDTO.COMPONENT_TYPE_CONTROLLER_SERVICE.equals(dto.getComponent().getReferenceType()))
             .filter(dto -> "Enabled".equalsIgnoreCase(dto.getComponent().getState()))
             .collect(Collectors.toSet());
@@ -970,7 +1064,7 @@ private Set<AffectedComponentEntity> getUpdatedEntities(final Set<AffectedCompon
     }
 
 
-    private Response retrieveValidationRequest(final String requestType, final String requestId) {
+    private Response retrieveValidationRequest(final String requestType, final String contextId, final String requestId) {
         if (requestId == null) {
             throw new IllegalArgumentException("Request ID must be specified.");
         }
@@ -978,11 +1072,11 @@ private Response retrieveValidationRequest(final String requestType, final Strin
         final NiFiUser user = NiFiUserUtils.getNiFiUser();
 
         final AsynchronousWebRequest<ComponentValidationResultsEntity> asyncRequest = validationRequestManager.getRequest(requestType, requestId, user);
-        final ParameterContextValidationRequestEntity requestEntity = createValidationRequestEntity(asyncRequest, requestType, requestId);
+        final ParameterContextValidationRequestEntity requestEntity = createValidationRequestEntity(asyncRequest, contextId, requestType, requestId);
         return generateOkResponse(requestEntity).build();
     }
 
-    private Response deleteValidationRequest(final String requestType, final String requestId, final boolean disconnectedNodeAcknowledged) {
+    private Response deleteValidationRequest(final String requestType, final String contextId, final String requestId, final boolean disconnectedNodeAcknowledged) {
         if (requestId == null) {
             throw new IllegalArgumentException("Request ID must be specified.");
         }
@@ -1003,19 +1097,19 @@ private Response deleteValidationRequest(final String requestType, final String
             asyncRequest.cancel();
         }
 
-        final ParameterContextValidationRequestEntity requestEntity = createValidationRequestEntity(asyncRequest, requestType, requestId);
+        final ParameterContextValidationRequestEntity requestEntity = createValidationRequestEntity(asyncRequest, contextId, requestType, requestId);
         return generateOkResponse(requestEntity).build();
     }
 
     private ParameterContextValidationRequestEntity createValidationRequestEntity(final AsynchronousWebRequest<ComponentValidationResultsEntity> asyncRequest, final String requestType,
-                                                                                  final String requestId) {
+                                                                                  final String contextId, final String requestId) {
         final ParameterContextValidationRequestDTO requestDto = new ParameterContextValidationRequestDTO();
 
         requestDto.setComplete(asyncRequest.isComplete());
         requestDto.setFailureReason(asyncRequest.getFailureReason());
         requestDto.setLastUpdated(asyncRequest.getLastUpdated());
         requestDto.setRequestId(requestId);
-        requestDto.setUri(generateResourceUri("parameter-contexts", requestType, requestId));
+        requestDto.setUri(generateResourceUri("parameter-contexts", contextId, requestType, requestId));
         requestDto.setState(asyncRequest.getState());
         requestDto.setPercentCompleted(asyncRequest.getPercentComplete());
         requestDto.setComponentValidationResults(asyncRequest.getResults());
@@ -1025,7 +1119,7 @@ private ParameterContextValidationRequestEntity createValidationRequestEntity(fi
         return entity;
     }
 
-    private Response retrieveUpdateRequest(final String requestType, final String requestId) {
+    private Response retrieveUpdateRequest(final String requestType, final String contextId, final String requestId) {
         if (requestId == null) {
             throw new IllegalArgumentException("Request ID must be specified.");
         }
@@ -1034,11 +1128,11 @@ private Response retrieveUpdateRequest(final String requestType, final String re
 
         // request manager will ensure that the current is the user that submitted this request
         final AsynchronousWebRequest<ParameterContextEntity> asyncRequest = updateRequestManager.getRequest(requestType, requestId, user);
-        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(asyncRequest, requestType, requestId);
+        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(asyncRequest, requestType, contextId, requestId);
         return generateOkResponse(updateRequestEntity).build();
     }
 
-    private Response deleteUpdateRequest(final String requestType, final String requestId, final boolean disconnectedNodeAcknowledged) {
+    private Response deleteUpdateRequest(final String requestType, final String contextId, final String requestId, final boolean disconnectedNodeAcknowledged) {
         if (requestId == null) {
             throw new IllegalArgumentException("Request ID must be specified.");
         }
@@ -1059,17 +1153,18 @@ private Response deleteUpdateRequest(final String requestType, final String requ
             asyncRequest.cancel();
         }
 
-        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(asyncRequest, requestType, requestId);
+        final ParameterContextUpdateRequestEntity updateRequestEntity = createUpdateRequestEntity(asyncRequest, requestType, contextId, requestId);
         return generateOkResponse(updateRequestEntity).build();
     }
 
-    private ParameterContextUpdateRequestEntity createUpdateRequestEntity(final AsynchronousWebRequest<ParameterContextEntity> asyncRequest, final String requestType, final String requestId) {
+    private ParameterContextUpdateRequestEntity createUpdateRequestEntity(final AsynchronousWebRequest<ParameterContextEntity> asyncRequest, final String requestType,
+                                                                          final String contextId, final String requestId) {
         final ParameterContextUpdateRequestDTO updateRequestDto = new ParameterContextUpdateRequestDTO();
         updateRequestDto.setComplete(asyncRequest.isComplete());
         updateRequestDto.setFailureReason(asyncRequest.getFailureReason());
         updateRequestDto.setLastUpdated(asyncRequest.getLastUpdated());
         updateRequestDto.setRequestId(requestId);
-        updateRequestDto.setUri(generateResourceUri("parameter-contexts", requestType, requestId));
+        updateRequestDto.setUri(generateResourceUri("parameter-contexts", contextId, requestType, requestId));
         updateRequestDto.setState(asyncRequest.getState());
         updateRequestDto.setPercentCompleted(asyncRequest.getPercentComplete());
 
@@ -1083,10 +1178,24 @@ private ParameterContextUpdateRequestEntity createUpdateRequestEntity(final Asyn
         }
         updateRequestDto.setUpdateSteps(updateSteps);
 
+        // Populate the Affected Components
+        final ParameterContextEntity contextEntity = serviceFacade.getParameterContext(asyncRequest.getComponentId(), NiFiUserUtils.getNiFiUser());
+        final Set<AffectedComponentEntity> affectedComponents = new HashSet<>();
+        for (final ParameterEntity parameterEntity : contextEntity.getComponent().getParameters()) {
+            final ParameterDTO parameterDto = parameterEntity.getParameter();
+            if (parameterDto == null) {
+                continue;
+            }
+
+            affectedComponents.addAll(parameterDto.getReferencingComponents());
+        }
+
+        updateRequestDto.setAffectedComponents(affectedComponents);
+
         final ParameterContextUpdateRequestEntity updateRequestEntity = new ParameterContextUpdateRequestEntity();
 
+        // If the request is complete, include the new representation of the Parameter Context along with its new Revision. Otherwise, do not include the information, since it is 'stale'
         if (updateRequestDto.isComplete()) {
-            final ParameterContextEntity contextEntity = serviceFacade.getParameterContext(asyncRequest.getComponentId(), NiFiUserUtils.getNiFiUser());
             updateRequestDto.setParameterContext(contextEntity == null ? null : contextEntity.getComponent());
             updateRequestEntity.setParameterContextRevision(contextEntity == null ? null : contextEntity.getRevision());
         }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
index d799fe17332..093501723da 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/api/dto/DtoFactory.java
@@ -132,6 +132,7 @@
 import org.apache.nifi.provenance.lineage.LineageNode;
 import org.apache.nifi.provenance.lineage.ProvenanceEventLineageNode;
 import org.apache.nifi.registry.ComponentVariableRegistry;
+import org.apache.nifi.registry.VariableDescriptor;
 import org.apache.nifi.registry.flow.FlowRegistry;
 import org.apache.nifi.registry.flow.VersionControlInformation;
 import org.apache.nifi.registry.flow.VersionedComponent;
@@ -216,6 +217,7 @@
 import org.apache.nifi.web.api.entity.ConnectionStatusSnapshotEntity;
 import org.apache.nifi.web.api.entity.ControllerServiceEntity;
 import org.apache.nifi.web.api.entity.FlowBreadcrumbEntity;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.api.entity.PortEntity;
 import org.apache.nifi.web.api.entity.PortStatusSnapshotEntity;
 import org.apache.nifi.web.api.entity.ProcessGroupEntity;
@@ -1364,6 +1366,7 @@ public ParameterContextDTO createParameterContextDto(final ParameterContext para
         final ParameterContextDTO dto = new ParameterContextDTO();
         dto.setId(parameterContext.getIdentifier());
         dto.setName(parameterContext.getName());
+        dto.setDescription(parameterContext.getDescription());
 
         final Set<ProcessGroupEntity> boundGroups = new HashSet<>();
         for (final ProcessGroup processGroup : parameterContext.getParameterReferenceManager().getProcessGroupsBound(parameterContext)) {
@@ -1375,15 +1378,26 @@ public ParameterContextDTO createParameterContextDto(final ParameterContext para
         }
         dto.setBoundProcessGroups(boundGroups);
 
-        final Set<ParameterDTO> parameterDtos = new LinkedHashSet<>();
+        final Set<ParameterEntity> parameterEntities = new LinkedHashSet<>();
         for (final Parameter parameter : parameterContext.getParameters().values()) {
-            parameterDtos.add(createParameterDto(parameterContext, parameter, revisionManager));
+            parameterEntities.add(createParameterEntity(parameterContext, parameter, revisionManager));
         }
 
-        dto.setParameters(parameterDtos);
+        dto.setParameters(parameterEntities);
         return dto;
     }
 
+    public ParameterEntity createParameterEntity(final ParameterContext parameterContext, final Parameter parameter, final RevisionManager revisionManager) {
+        final ParameterDTO dto = createParameterDto(parameterContext, parameter, revisionManager);
+        final ParameterEntity entity = new ParameterEntity();
+        entity.setParameter(dto);
+
+        final boolean canWrite = isWritable(dto.getReferencingComponents());
+        entity.setCanWrite(canWrite);
+
+        return entity;
+    }
+
     public ParameterDTO createParameterDto(final ParameterContext parameterContext, final Parameter parameter, final RevisionManager revisionManager) {
         final ParameterDescriptor descriptor = parameter.getDescriptor();
 
@@ -2105,6 +2119,8 @@ public ProcessGroupFlowDTO createProcessGroupFlowDto(final ProcessGroup group, f
             dto.setParentGroupId(parent.getIdentifier());
         }
 
+        final ParameterContext parameterContext = group.getParameterContext();
+        dto.setParameterContextId(parameterContext == null ? null : parameterContext.getIdentifier());
         return dto;
     }
 
@@ -2125,7 +2141,7 @@ public FlowDTO createFlowDto(final ProcessGroup group, final ProcessGroupStatus
             final PermissionsDTO accessPolicy = createPermissionsDto(connection);
             final ConnectionStatusDTO status = getComponentStatus(
                 () -> groupStatus.getConnectionStatus().stream().filter(connectionStatus -> connection.getIdentifier().equals(connectionStatus.getId())).findFirst().orElse(null),
-                connectionStatus -> createConnectionStatusDto(connectionStatus)
+                this::createConnectionStatusDto
             );
             flow.getConnections().add(entityFactory.createConnectionEntity(dto, revision, accessPolicy, status));
         }
@@ -2664,7 +2680,7 @@ public VariableRegistryDTO createVariableRegistryDto(final ProcessGroup processG
         final ComponentVariableRegistry variableRegistry = processGroup.getVariableRegistry();
 
         final List<String> variableNames = variableRegistry.getVariableMap().keySet().stream()
-            .map(descriptor -> descriptor.getName())
+            .map(VariableDescriptor::getName)
             .collect(Collectors.toList());
 
         final Set<VariableEntity> variableEntities = new LinkedHashSet<>();
@@ -2677,17 +2693,9 @@ public VariableRegistryDTO createVariableRegistryDto(final ProcessGroup processG
 
             final Set<AffectedComponentEntity> affectedComponentEntities = createAffectedComponentEntities(processGroup.getComponentsAffectedByVariable(variableName), revisionManager);
 
-            boolean canWrite = true;
-            for (final AffectedComponentEntity affectedComponent : affectedComponentEntities) {
-                final PermissionsDTO permissions = affectedComponent.getPermissions();
-                if (!permissions.getCanRead() || !permissions.getCanWrite()) {
-                    canWrite = false;
-                    break;
-                }
-            }
-
             variableDto.setAffectedComponents(affectedComponentEntities);
 
+            final boolean canWrite = isWritable(affectedComponentEntities);
             final VariableEntity variableEntity = new VariableEntity();
             variableEntity.setVariable(variableDto);
             variableEntity.setCanWrite(canWrite);
@@ -2702,6 +2710,17 @@ public VariableRegistryDTO createVariableRegistryDto(final ProcessGroup processG
         return registryDto;
     }
 
+    private boolean isWritable(final Collection<AffectedComponentEntity> affectedComponentEntities) {
+        for (final AffectedComponentEntity affectedComponent : affectedComponentEntities) {
+            final PermissionsDTO permissions = affectedComponent.getPermissions();
+            if (!permissions.getCanRead() || !permissions.getCanWrite()) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
     public VariableRegistryUpdateRequestDTO createVariableRegistryUpdateRequestDto(final VariableRegistryUpdateRequest request) {
         final VariableRegistryUpdateRequestDTO dto = new VariableRegistryUpdateRequestDTO();
         dto.setComplete(request.isComplete());
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java
index 1b46e777787..f02615c6594 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardParameterContextDAO.java
@@ -33,6 +33,7 @@
 import org.apache.nifi.web.ResourceNotFoundException;
 import org.apache.nifi.web.api.dto.ParameterContextDTO;
 import org.apache.nifi.web.api.dto.ParameterDTO;
+import org.apache.nifi.web.api.entity.ParameterEntity;
 import org.apache.nifi.web.dao.ParameterContextDAO;
 
 import java.util.Collections;
@@ -57,16 +58,21 @@ public void verifyCreate(final ParameterContextDTO parameterContextDto) {
     @Override
     public ParameterContext createParameterContext(final ParameterContextDTO parameterContextDto) {
         final Set<Parameter> parameters = getParameters(parameterContextDto);
-        return flowManager.createParameterContext(parameterContextDto.getId(), parameterContextDto.getName(), parameters);
+        final ParameterContext parameterContext = flowManager.createParameterContext(parameterContextDto.getId(), parameterContextDto.getName(), parameters);
+        if (parameterContextDto.getDescription() != null) {
+            parameterContext.setDescription(parameterContextDto.getDescription());
+        }
+        return parameterContext;
     }
 
     private Set<Parameter> getParameters(final ParameterContextDTO parameterContextDto) {
-        final Set<ParameterDTO> parameterDtos = parameterContextDto.getParameters();
+        final Set<ParameterEntity> parameterDtos = parameterContextDto.getParameters();
         if (parameterDtos == null) {
             return Collections.emptySet();
         }
 
         return parameterContextDto.getParameters().stream()
+            .map(ParameterEntity::getParameter)
             .map(this::createParameter)
             .collect(Collectors.toSet());
     }
@@ -103,16 +109,14 @@ public ParameterContext updateParameterContext(final ParameterContextDTO paramet
         final ParameterContext context = getParameterContext(parameterContextDto.getId());
 
         if (parameterContextDto.getName() != null) {
-            final boolean conflict = flowManager.getParameterContextManager().getParameterContexts().stream()
-                .anyMatch(paramContext -> paramContext.getName().equals(parameterContextDto.getName()) && !paramContext.getIdentifier().equals(parameterContextDto.getId()));
-
-            if (conflict) {
-                throw new IllegalStateException("Cannot update Parameter Context name because another Parameter Context already exists with the name '" + parameterContextDto.getName() + "'");
-            }
-
+            verifyNoNamingConflict(parameterContextDto.getName(), parameterContextDto.getId());
             context.setName(parameterContextDto.getName());
         }
 
+        if (parameterContextDto.getDescription() != null) {
+            context.setDescription(parameterContextDto.getDescription());
+        }
+
         if (parameterContextDto.getParameters() != null) {
             final Set<Parameter> parameters = getParameters(parameterContextDto);
             context.setParameters(parameters);
@@ -123,10 +127,11 @@ public ParameterContext updateParameterContext(final ParameterContextDTO paramet
 
     @Override
     public void verifyUpdate(final ParameterContextDTO parameterContextDto, final boolean verifyComponentStates) {
-        verifyNoNamingConflict(parameterContextDto.getName());
+        verifyNoNamingConflict(parameterContextDto.getName(), parameterContextDto.getId());
 
         final ParameterContext currentContext = getParameterContext(parameterContextDto.getId());
-        for (final ParameterDTO parameterDto : parameterContextDto.getParameters()) {
+        for (final ParameterEntity parameterEntity : parameterContextDto.getParameters()) {
+            final ParameterDTO parameterDto = parameterEntity.getParameter();
             final String parameterName = parameterDto.getName();
             final ParameterReferenceManager referenceManager = currentContext.getParameterReferenceManager();
 
@@ -174,16 +179,35 @@ private void verifyParameterUpdate(final String parameterName, final ComponentNo
         }
     }
 
+    /**
+     * Ensures that no Parameter Context exists with the given name. If any does already exist with this name, an IllegalStateException will be thrown.
+     * @param contextName the name of the Parameter Context
+     * @throws IllegalStateException if any Parameter Context already exists with the given name
+     */
     private void verifyNoNamingConflict(final String contextName) {
+        verifyNoNamingConflict(contextName, null);
+    }
+
+    /**
+     * Ensures that no Parameter Context exists with the given name, unless that Parameter Context also has the given identifier. If any does already exist with this name, and its identifier does
+     * not match the given identifier, an IllegalStateException will be thrown. Otherwise, this method will return gracefully.
+     * @param contextName the name of the Parameter Context
+     * @param contextId the Identifier of the Parameter Context whose name should not be compared against the given name
+     * @throws IllegalStateException if any Parameter Context already exists with the given name and a non-matching identifier
+     */
+    private void verifyNoNamingConflict(final String contextName, final String contextId) {
         if (contextName == null) {
             return;
         }
 
-        final boolean conflict = flowManager.getParameterContextManager().getParameterContexts().stream()
-            .anyMatch(paramContext -> paramContext.getName().equals(contextName));
+        for (final ParameterContext parameterContext : flowManager.getParameterContextManager().getParameterContexts()) {
+            if (parameterContext.getName().equals(contextName)) {
+                if (contextId == null || contextId.equals(parameterContext.getIdentifier())) {
+                    continue;
+                }
 
-        if (conflict) {
-            throw new IllegalStateException("Cannot update Parameter Context name because another Parameter Context already exists with the name '" + contextName + "'");
+                throw new IllegalStateException("Cannot update Parameter Context name because another Parameter Context already exists with the name '" + contextName + "'");
+            }
         }
     }
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
index 1f963a455b7..fb4b212bdcc 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/dao/impl/StandardProcessGroupDAO.java
@@ -318,7 +318,9 @@ public ProcessGroup updateProcessGroup(ProcessGroupDTO processGroupDTO) {
         final String comments = processGroupDTO.getComments();
 
         final String parameterContextId = processGroupDTO.getParameterContextId();
-        if (parameterContextId != null) {
+        if (parameterContextId == null) {
+            group.setParameterContext(null);
+        } else {
             final ParameterContext parameterContext = flowController.getFlowManager().getParameterContextManager().getParameterContext(parameterContextId);
             if (parameterContext == null) {
                 throw new IllegalStateException("Cannot set Process Group's Parameter Context because no Parameter Context exists with ID " + parameterContextId);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java
index 19ce8c3550c..23825e7dd1f 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-web/nifi-web-api/src/main/java/org/apache/nifi/web/util/ClusterReplicationComponentLifecycle.java
@@ -363,7 +363,8 @@ public Set<AffectedComponentEntity> activateControllerServices(final URI origina
      * @return <code>true</code> if successful, <code>false</code> if unable to wait for services to reach the desired state
      */
     private boolean waitForControllerServiceStatus(final NiFiUser user, final URI originalUri, final String groupId, final Set<String> serviceIds,
-                                                   final ControllerServiceState desiredState, final Pause pause, final InvalidComponentAction invalidComponentAction) throws InterruptedException, LifecycleManagementException {
+                                                   final ControllerServiceState desiredState, final Pause pause, final InvalidComponentAction invalidComponentAction)
+                            throws InterruptedException, LifecycleManagementException {
 
         URI groupUri;
         try {
diff --git a/nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessParameterContext.java b/nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessParameterContext.java
index 88969b035c0..e48a965274b 100644
--- a/nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessParameterContext.java
+++ b/nifi-stateless/nifi-stateless-core/src/main/java/org/apache/nifi/stateless/core/StatelessParameterContext.java
@@ -51,6 +51,15 @@ public String getName() {
     public void setName(final String name) {
     }
 
+    @Override
+    public String getDescription() {
+        return "NiFi Stateless Parameter Context";
+    }
+
+    @Override
+    public void setDescription(final String description) {
+    }
+
     @Override
     public void setParameters(final Set<Parameter> updatedParameters) {
         throw new UnsupportedOperationException();
