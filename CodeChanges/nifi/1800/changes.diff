diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api-nar/pom.xml b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api-nar/pom.xml
new file mode 100644
index 00000000000..e64c2aa4428
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api-nar/pom.xml
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements. See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License. You may obtain a copy of the License at
+  http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.nifi.leaderelection</groupId>
+        <artifactId>nifi-leaderelection-services</artifactId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>nifi-zookeeper-election-service-api-nar</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>nar</packaging>
+    <properties>
+        <maven.javadoc.skip>true</maven.javadoc.skip>
+        <source.skip>true</source.skip>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.nifi</groupId>
+            <artifactId>nifi-standard-services-api-nar</artifactId>
+            <type>nar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.nifi.leaderelection</groupId>
+            <artifactId>nifi-zookeeper-election-service-api</artifactId>
+            <version>1.0-SNAPSHOT</version>
+        </dependency>
+    </dependencies>
+
+</project>
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/pom.xml b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/pom.xml
new file mode 100644
index 00000000000..2a23a9124ec
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/pom.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
+	license agreements. See the NOTICE file distributed with this work for additional 
+	information regarding copyright ownership. The ASF licenses this file to 
+	You under the Apache License, Version 2.0 (the "License"); you may not use 
+	this file except in compliance with the License. You may obtain a copy of 
+	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
+	by applicable law or agreed to in writing, software distributed under the 
+	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
+	OF ANY KIND, either express or implied. See the License for the specific 
+	language governing permissions and limitations under the License. -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>org.apache.nifi.leaderelection</groupId>
+		<artifactId>nifi-leaderelection-services</artifactId>
+		<version>1.0-SNAPSHOT</version>
+	</parent>
+
+	<artifactId>nifi-zookeeper-election-service-api</artifactId>
+	<packaging>jar</packaging>
+
+	<dependencies>
+		<dependency>
+			<groupId>org.apache.nifi</groupId>
+			<artifactId>nifi-api</artifactId>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.zookeeper</groupId>
+			<artifactId>zookeeper</artifactId>
+			<version>3.4.6</version>
+		</dependency>
+	</dependencies>
+</project>
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElection.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElection.java
new file mode 100644
index 00000000000..ba64d0c53c9
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-api/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElection.java
@@ -0,0 +1,32 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.leaderelection.zookeeper;
+
+import java.util.List;
+
+import org.apache.nifi.annotation.documentation.CapabilityDescription;
+import org.apache.nifi.annotation.documentation.Tags;
+import org.apache.nifi.controller.ControllerService;
+
+@Tags({"Election", "Leader", "Zookeeper"})
+@CapabilityDescription("Zookeeper Based Election API.")
+public interface ZookeeperElection extends ControllerService {
+    public boolean isLeader();
+    public List<String> aliveElectors();
+    public long LastElection();
+    public String ID();
+}
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-nar/pom.xml b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-nar/pom.xml
new file mode 100644
index 00000000000..0c7b35e5caa
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service-nar/pom.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements. See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License. You may obtain a copy of the License at
+  http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.nifi.leaderelection</groupId>
+        <artifactId>nifi-leaderelection-services</artifactId>
+        <version>1.0-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>nifi-zookeeper-election-service-nar</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>nar</packaging>
+    <properties>
+        <maven.javadoc.skip>true</maven.javadoc.skip>
+        <source.skip>true</source.skip>
+    </properties>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.apache.nifi.leaderelection</groupId>
+            <artifactId>nifi-zookeeper-election-service-api-nar</artifactId>
+            <version>1.0-SNAPSHOT</version>
+            <type>nar</type>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.nifi.leaderelection</groupId>
+            <artifactId>nifi-zookeeper-election-service</artifactId>
+            <version>1.0-SNAPSHOT</version>
+        </dependency>
+    </dependencies>
+
+</project>
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/pom.xml b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/pom.xml
new file mode 100644
index 00000000000..218e9588daf
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/pom.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor 
+	license agreements. See the NOTICE file distributed with this work for additional 
+	information regarding copyright ownership. The ASF licenses this file to 
+	You under the Apache License, Version 2.0 (the "License"); you may not use 
+	this file except in compliance with the License. You may obtain a copy of 
+	the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
+	by applicable law or agreed to in writing, software distributed under the 
+	License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS 
+	OF ANY KIND, either express or implied. See the License for the specific 
+	language governing permissions and limitations under the License. -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+
+	<parent>
+		<groupId>org.apache.nifi.leaderelection</groupId>
+		<artifactId>nifi-leaderelection-services</artifactId>
+		<version>1.0-SNAPSHOT</version>
+	</parent>
+
+	<artifactId>nifi-zookeeper-election-service</artifactId>
+	<packaging>jar</packaging>
+
+	<dependencies>
+		<dependency>
+			<groupId>org.apache.nifi.leaderelection</groupId>
+			<artifactId>nifi-zookeeper-election-service-api</artifactId>
+			<version>1.0-SNAPSHOT</version>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.nifi</groupId>
+			<artifactId>nifi-api</artifactId>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.nifi</groupId>
+			<artifactId>nifi-processor-utils</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.nifi</groupId>
+			<artifactId>nifi-mock</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-simple</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.curator</groupId>
+			<artifactId>curator-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.curator</groupId>
+			<artifactId>curator-framework</artifactId>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+</project>
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcess.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcess.java
new file mode 100644
index 00000000000..5892585a77d
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcess.java
@@ -0,0 +1,238 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.nifi.leaderelection.zookeeper;
+
+import java.io.IOException;
+import java.util.Collections;
+import java.util.LinkedList;
+import java.util.List;
+
+import org.apache.zookeeper.CreateMode;
+import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.Op;
+import org.apache.zookeeper.WatchedEvent;
+import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.Watcher.Event.EventType;
+import org.apache.zookeeper.Watcher.Event.KeeperState;
+import org.apache.zookeeper.ZooDefs.Ids;
+import org.apache.zookeeper.ZooKeeper;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class ZookeeperElectionProcess implements Runnable {
+    private static final Logger logger = LoggerFactory.getLogger(ZookeeperElectionProcess.class);
+
+    private final String DEFAULT_ZNODE;
+    private final String ZK_SEQ = "/n_";
+
+    private String watchedElector;
+    private String electorID;
+    private boolean isLeader = false;
+    private final ElectionZookeeper ezk;
+
+    public ZookeeperElectionProcess(String ElectionZNodeName, String ZKHosts, Integer timeout) throws IOException {
+        DEFAULT_ZNODE = ElectionZNodeName;
+        ezk = new ElectionZookeeper(ZKHosts, new ElectorWatcher(), timeout);
+    }
+    /**
+     * This method should return a list of all currently participating peers
+     * It could be for peer discovery or for for general internal leadership
+     * tracking needs.
+     * @return - List of alive electors
+     */
+    public List<String> aliveElectors() {
+        return ezk.getZNodeChildren(DEFAULT_ZNODE);
+    }
+    /**
+     * Return if the current elector is the leader or not
+     * @return - If current leader return True, else False
+     */
+    public boolean isLeader() {
+        return isLeader;
+    }
+    /**
+     * long based gmt epoch of the last election, should return the znode ctime
+     * of the lowest seq elector
+     * @return long of epoch of last election
+     */
+    public long LastElection() {
+        return ezk.getZNodeCreationTime(DEFAULT_ZNODE+"/"+Collections.min(ezk.getZNodeChildren(DEFAULT_ZNODE)));
+    }
+    public String ID(){
+        return electorID;
+    }
+    /**
+     * Have host join the election this includes making the default znode if
+     * required for the election if we are first otherwise we need to start
+     * watching the follower in front of us
+     */
+    private void joinElection() {
+        List<String> voters = ezk.getZNodeChildren(DEFAULT_ZNODE);
+        // use natural ordering to find the leader (lowest seq voter)
+        Collections.sort(voters);
+        if (electorID.endsWith(voters.get(0))|| voters.size() <= 1) {
+            // we are leader - be the leader man go check yourself out!
+            isLeader = true;
+            logger.info("Is Now Election Leader " + electorID + " for Election at: " + DEFAULT_ZNODE);
+        } else {
+            // we are not leader - watch the guy in front of us and ourself... Setup the watchedElector variable for the ElectorWatcher
+            watchedElector = DEFAULT_ZNODE+"/"+voters.get(voters.indexOf(electorID) + 1);
+            ezk.watchZNode(watchedElector);
+        }
+        ezk.watchZNode(electorID);
+        logger.debug(electorID + " has joined election " + DEFAULT_ZNODE);
+    }
+    @Override
+    public void run() {
+        try {
+            ezk.createElectionAbsolutePath(DEFAULT_ZNODE);
+            electorID = ezk.createZNode(DEFAULT_ZNODE + ZK_SEQ, true);
+        } catch (Exception e){
+            logger.error("Issue Creating Election Root or Inital Voter Node, destroying session with Zookeeper");
+            destroy();
+            throw new IllegalStateException(e.getMessage());
+        }
+        joinElection();
+    }
+    public void destroy() {
+        ezk.cleanShutdown();
+        Thread.currentThread().interrupt();;
+    }
+    // Internal class for managing the zK interface for the election.
+    public class ElectionZookeeper {
+        private ZooKeeper zK;
+        public ElectionZookeeper(String connectionSting, final ElectorWatcher electorWatch, Integer timeout)
+                throws IOException {
+            zK = new ZooKeeper(connectionSting, timeout, electorWatch);
+        }
+        /**
+         * We only need to create a root election node if not exists, and one
+         * for our vote that is always EPH_SEQ
+         * @param znodePath - path to create
+         * @param ephimeral - should it be EPHEMERAL_SEQUENTIAL or not
+         * @return - boolean created ZNode Path
+         * @throws KeeperException -- could be ACL or already exists
+         * @throws InterruptedException -- issues connecting
+         */
+        public String createZNode(final String znodePath, final boolean ephimeral) {
+                String createdPath;
+                try {
+                    createdPath = zK.create(znodePath, null/* data */, Ids.OPEN_ACL_UNSAFE,
+                            ephimeral ? CreateMode.EPHEMERAL_SEQUENTIAL : CreateMode.PERSISTENT);
+                } catch (KeeperException | InterruptedException e) {
+                    throw new IllegalStateException(e.getMessage());
+                }
+                return createdPath;
+        }
+        public void createElectionAbsolutePath(final String znodePath){
+            try{
+                //Due to ZK Atomic Nature we are stuck with separate creates or multi-obj
+                List<Op> ops = new LinkedList<Op>();
+                String absoluteBuild = "";
+                for(String part : DEFAULT_ZNODE.split("/")){
+                    if(part.length() > 0){
+                        absoluteBuild += "/"+part;
+                        ops.add(Op.create(absoluteBuild, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT));
+                    }
+                }
+                zK.multi(ops);
+                } catch (KeeperException.NodeExistsException e) {
+                    //Dont Care - Can only occur for Root Election Node
+                } catch (Exception e){
+                    logger.error("Issue Creating Election Root or Inital Voter Node");
+                    throw new IllegalStateException(e.getMessage());
+                }
+        }
+        public void removeZNode(String znodePath){
+            try{
+                zK.delete(znodePath, -1);
+            }catch (KeeperException.NoNodeException e){
+                logger.debug("ZNode was expired before we attempted to cleanup");
+            }catch (Exception e){
+                logger.error("Failed to remove ZNode");
+                throw new IllegalStateException(e.getMessage());
+            }
+        }
+        public boolean watchZNode(String znodePath) {
+            boolean watched = false;
+            try {
+                if (zK.exists(znodePath, true) != null) {
+                    watched = true;
+                }
+            } catch (KeeperException | InterruptedException e) {
+                throw new IllegalStateException(e);
+            }
+            return watched;
+        }
+        public List<String> getZNodeChildren(String znodePath) {
+            List<String> childNodes = null;
+            try {
+                childNodes = zK.getChildren(znodePath, false);
+            } catch (KeeperException | InterruptedException e) {
+                throw new IllegalStateException(e);
+            }
+
+            return childNodes;
+        }
+        public long getZNodeCreationTime(String znodePath) {
+            try {
+                return zK.exists(znodePath, false).getCtime();
+            } catch (KeeperException | InterruptedException e) {
+                throw new IllegalStateException(e);
+            }
+        }
+        protected void cleanShutdown(){
+             try {
+                 logger.info("Shutting Down Election at: " + DEFAULT_ZNODE);
+                zK.close();
+            } catch (InterruptedException e) {
+                logger.error("Interrupt Occured While Shutting Down " + e.getMessage());
+            }finally {
+                zK = null;
+                Thread.currentThread().interrupt();
+            }
+        }
+    }// End ElectionZookeeper Class
+    public class ElectorWatcher implements Watcher {
+        @Override
+        public void process(WatchedEvent event) {
+            final EventType eventType = event.getType();
+            final KeeperState keeperState = event.getState();
+            if (EventType.NodeDeleted.equals(eventType)) {
+                try {
+                if (event.getPath().equalsIgnoreCase(watchedElector)) {
+                    //The guy we are following in line to vote died, rejoin
+                    joinElection();
+                    } else if (event.getPath().equalsIgnoreCase(electorID)){
+                        //We died... Rejoin, try to delete our old node just in case it still exists
+                        logger.warn(electorID + " Lost Leader Status for election at: " + DEFAULT_ZNODE);
+                        isLeader = false;
+                        electorID = ezk.createZNode(DEFAULT_ZNODE + ZK_SEQ, true);
+                        joinElection();
+                }
+                } catch (Exception e) {
+                     logger.debug("Somthing Bad Just Occured in the Watcher Catchall - removing our own node if possible " + e.getMessage());
+                     ezk.removeZNode(electorID);
+                     throw new IllegalStateException(e);
+                }
+            }else if(KeeperState.Expired.equals(keeperState) || KeeperState.Disconnected.equals(keeperState) ){
+            	logger.info("Expired KeeperState - Attempting renew");
+            }
+        }
+    } // End FollowerWatcher Class
+}
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionService.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionService.java
new file mode 100644
index 00000000000..6fefa98177b
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionService.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.leaderelection.zookeeper;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.regex.Pattern;
+
+import org.apache.nifi.annotation.documentation.CapabilityDescription;
+import org.apache.nifi.annotation.documentation.Tags;
+import org.apache.nifi.annotation.lifecycle.OnDisabled;
+import org.apache.nifi.annotation.lifecycle.OnEnabled;
+import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.controller.AbstractControllerService;
+import org.apache.nifi.controller.ConfigurationContext;
+import org.apache.nifi.processor.util.StandardValidators;
+import org.apache.nifi.reporting.InitializationException;
+
+@Tags({"Election", "Leader", "Zookeeper"})
+@CapabilityDescription(" Leader//Follower based election using Zookeeper")
+public class ZookeeperElectionService extends AbstractControllerService implements ZookeeperElection {
+    public static final PropertyDescriptor zkHosts = new PropertyDescriptor
+            .Builder().name("Zookeeper Hosts")
+            .description("Hosts String for connecting to Zookeeper ie: host:port,host2:port,host3:port")
+            .required(true)
+            .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
+            .build();
+    public static final PropertyDescriptor sessionTimeout = new PropertyDescriptor
+            .Builder().name("Timeout")
+            .description("Amount of time to wait for heartbeats from Zookeeper before delaring the session invalid")
+            .required(true)
+            .defaultValue("5000")
+            .addValidator(StandardValidators.POSITIVE_INTEGER_VALIDATOR)
+            .build();
+    public static final Pattern zkElectionPathRegEx = Pattern.compile("^\\/.*\\w[\\/]{0}$");
+    public static final PropertyDescriptor zkElectionNode = new PropertyDescriptor
+            .Builder().name("Zookeeper Election Path")
+            .description("The absolute znode path to use for the election. Voters will show up under this node. ie: /elections/election123")
+            .required(true)
+            .addValidator(StandardValidators.createRegexMatchingValidator(zkElectionPathRegEx))
+            .expressionLanguageSupported(false)
+            .build();
+    private static final List<PropertyDescriptor> properties;
+    static {
+        final List<PropertyDescriptor> props = new ArrayList<>();
+        props.add(zkHosts);
+        props.add(sessionTimeout);
+        props.add(zkElectionNode);
+        properties = Collections.unmodifiableList(props);
+    }
+    @Override
+    protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
+        return properties;
+    }
+    private volatile ZookeeperElectionProcess election;
+
+    @OnEnabled
+    public void onEnabled(final ConfigurationContext context) throws InitializationException, IOException {
+               election = new ZookeeperElectionProcess(context.getProperty(zkElectionNode).getValue(), context.getProperty(zkHosts).getValue() ,context.getProperty(sessionTimeout).asInteger());
+               election.run();
+    }
+    @OnDisabled
+    public void shutdown() {
+         election.destroy();
+         election = null;
+    }
+     @Override
+     public boolean isLeader() {
+          return election.isLeader();
+     }
+     @Override
+     public List<String> aliveElectors() {
+          return election.aliveElectors();
+     }
+     @Override
+     public long LastElection() {
+          return election.LastElection();
+     }
+     @Override
+     public String ID() {
+          return election.ID();
+     }
+}
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/resources/META-INF/services/org.apache.nifi.controller.ControllerService b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/resources/META-INF/services/org.apache.nifi.controller.ControllerService
new file mode 100644
index 00000000000..14168c58a02
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/main/resources/META-INF/services/org.apache.nifi.controller.ControllerService
@@ -0,0 +1,15 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+org.apache.nifi.leaderelection.zookeeper.ZookeeperElectionService
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcessTests.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcessTests.java
new file mode 100644
index 00000000000..98753649fbf
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionProcessTests.java
@@ -0,0 +1,201 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.nifi.leaderelection.zookeeper;
+
+import java.io.IOException;
+import java.util.Collections;
+
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.CuratorFrameworkFactory;
+import org.apache.curator.retry.ExponentialBackoffRetry;
+import org.apache.curator.test.TestingServer;
+import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.ZooKeeper;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+import junit.framework.TestCase;
+@RunWith(JUnit4.class)
+public class ZookeeperElectionProcessTests extends TestCase {
+     final String electionName = "/electionTests";
+     final Integer timeout = 5000;
+     ZooKeeper masterTestZK;
+     ZookeeperElectionProcess zep1;
+     ZookeeperElectionProcess zep2;
+     ZookeeperElectionProcess zep3;
+     TestingServer zkTestServer;
+     String zkhosts = "localhost:2181";
+    protected void setUp() throws Exception {
+        super.setUp();
+    }
+    @Before
+    public void before() throws Exception{
+        zkTestServer = new TestingServer(2181, true);
+        zkTestServer.start();
+        zkhosts = zkTestServer.getConnectString();
+        CuratorFramework client = CuratorFrameworkFactory.builder()
+                .namespace("my_namespace")
+                .connectString(zkTestServer.getConnectString())
+                .retryPolicy(new ExponentialBackoffRetry(1000, 1))
+                .build();
+        client.start();
+        client.blockUntilConnected();
+    }
+    @After
+    public void stopZkServer() throws IOException {
+        zkTestServer.close();
+        }
+    protected void tearDown() throws InterruptedException, KeeperException {
+         zep1 = null;
+         zep2 = null;
+         zep3 = null;
+         masterTestZK.delete(electionName, -1);
+         masterTestZK.close();
+         masterTestZK = null;
+        }
+    @Test
+    public void SingleNodeLeaderRejoin() throws IOException, InterruptedException, KeeperException{
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        masterTestZK = new ZooKeeper(zkhosts, timeout, null);
+        zep1.run();
+        String id1 = zep1.ID();
+        boolean leader1 = zep1.isLeader();
+        masterTestZK.delete(id1, -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        String id2 = zep1.ID();
+        boolean leader2 =  zep1.isLeader();
+        if(id1 != id2 && leader1 == true && leader2 == true){
+            assertTrue(true);
+            }else {
+            assertTrue(false);
+        }
+    }
+    @Test
+    public void TripletNodeLeaderLostRejoinOnce() throws IOException, InterruptedException, KeeperException {
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep2 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep3 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep1.run();
+        zep2.run();
+        zep3.run();
+        masterTestZK = new ZooKeeper(zkhosts, timeout, null);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep1.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        assertTrue(zep2.isLeader());
+        assertFalse(zep3.isLeader());
+        assertFalse(zep1.isLeader());
+    }
+    @Test
+    public void TripletNodeLeaderLostRejoinCircle() throws IOException, InterruptedException, KeeperException{
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep2 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep3 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep1.run();
+        zep2.run();
+        zep3.run();
+        masterTestZK = new ZooKeeper(zkhosts, timeout, null);
+        Thread.sleep(100L);//Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep1.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep2.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep3.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        assertTrue(zep1.isLeader());
+        assertFalse(zep2.isLeader());
+        assertFalse(zep3.isLeader());
+    }
+    @Test
+    public void TripletNodeLeaderLostRejoinCircleReverse() throws IOException, InterruptedException, KeeperException{
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep2 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep3 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep1.run();
+        zep2.run();
+        zep3.run();
+        masterTestZK = new ZooKeeper(zkhosts, timeout, null);
+        Thread.sleep(100L);//Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep3.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep2.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        masterTestZK.delete(zep1.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        assertTrue(zep1.aliveElectors().size()==3);
+        assertTrue(zep3.isLeader());
+    }
+    @Test
+    public void AliveHostsChanges() throws InterruptedException, IOException, KeeperException {
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep1.run();
+        Thread.sleep(100L);
+        assertTrue(zep1.aliveElectors().size() == 1);
+        zep2 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep2.run();
+        Thread.sleep(100L);
+        assertTrue(zep1.aliveElectors().size() == 2);
+        zep3 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep3.run();
+        Thread.sleep(100L);
+        assertTrue(zep1.aliveElectors().size() == 3);
+    }
+    @Test
+    public void LastElectionTests() throws IOException, InterruptedException, KeeperException {
+        zep1 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep2 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep3 = new ZookeeperElectionProcess(electionName, zkhosts, timeout);
+        zep1.run();
+        zep2.run();
+        zep3.run();
+        masterTestZK = new ZooKeeper(zkhosts, timeout, null);
+        long lastTime = masterTestZK.exists(electionName+"/"+Collections.min(masterTestZK.getChildren(electionName, false)), false).getCtime();
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        if ( lastTime == zep1.LastElection()
+                && lastTime == zep2.LastElection()
+                && lastTime == zep3.LastElection() )
+            assertTrue(true);
+        else{
+            assertTrue(false);
+        }
+        masterTestZK.delete(zep1.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        lastTime = masterTestZK.exists(electionName+"/"+Collections.min(masterTestZK.getChildren(electionName, false)), false).getCtime();
+        if ( lastTime == zep1.LastElection()
+                && lastTime == zep2.LastElection()
+                && lastTime == zep3.LastElection() )
+            assertTrue(true);
+        else{
+            assertTrue(false);
+        }
+        masterTestZK.delete(zep2.ID(), -1);
+        masterTestZK.delete(zep3.ID(), -1);
+        Thread.sleep(100L); //Gotta give the watch more then a clock cycle to get over here!
+        lastTime = masterTestZK.exists(electionName+"/"+Collections.min(masterTestZK.getChildren(electionName, false)), false).getCtime();
+        if ( lastTime == zep1.LastElection()
+                && lastTime == zep2.LastElection()
+                && lastTime == zep3.LastElection() )
+            assertTrue(true);
+        else{
+            assertTrue(false);
+        }
+    }
+}
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionTestProcessor.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionTestProcessor.java
new file mode 100644
index 00000000000..37b92fa2989
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeeperElectionTestProcessor.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.leaderelection.zookeeper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.apache.nifi.components.PropertyDescriptor;
+import org.apache.nifi.processor.AbstractProcessor;
+import org.apache.nifi.processor.ProcessContext;
+import org.apache.nifi.processor.ProcessSession;
+import org.apache.nifi.processor.exception.ProcessException;
+
+public class ZookeeperElectionTestProcessor extends AbstractProcessor {
+
+    public static final PropertyDescriptor ELECTIONSERVICE = new PropertyDescriptor
+            .Builder()
+            .name("ZookeeperElectionService")
+            .description("The Zookeeper service to use for election voting")
+            .identifiesControllerService(ZookeeperElection.class)
+            .required(true)
+            .build();
+    @Override
+    public void onTrigger(ProcessContext context, ProcessSession session) throws ProcessException {
+        final ZookeeperElectionService election = context.getProperty(ELECTIONSERVICE).asControllerService(ZookeeperElectionService.class);
+        election.isLeader();
+    }
+    @Override
+    protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
+        List<PropertyDescriptor> propDescs = new ArrayList<>();
+        propDescs.add(ELECTIONSERVICE);
+        return propDescs;
+    }
+}
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeperElectionServiceTests.java b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeperElectionServiceTests.java
new file mode 100644
index 00000000000..34a7e0cca98
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/nifi-zookeeper-election-service/src/test/java/org/apache/nifi/leaderelection/zookeeper/ZookeperElectionServiceTests.java
@@ -0,0 +1,200 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.nifi.leaderelection.zookeeper;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.curator.framework.CuratorFramework;
+import org.apache.curator.framework.CuratorFrameworkFactory;
+import org.apache.curator.retry.ExponentialBackoffRetry;
+import org.apache.curator.test.TestingServer;
+import org.apache.nifi.reporting.InitializationException;
+import org.apache.nifi.util.TestRunner;
+import org.apache.nifi.util.TestRunners;
+import org.apache.zookeeper.data.Stat;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+public class ZookeperElectionServiceTests {
+    final String electionName = "/goatElection";
+    final Integer timeout = 1000;
+    ZookeeperElectionService service1;
+    ZookeeperElectionService service2;
+    TestingServer zkTestServer;
+    CuratorFramework client;
+    String zkhosts = "localhost:2181";
+    @Before
+    public void before() throws Exception{
+        zkTestServer = new TestingServer(2181, true);
+        zkTestServer.start();
+        zkhosts = zkTestServer.getConnectString();
+        client = CuratorFrameworkFactory.builder()
+                .namespace("")
+                .connectString(zkTestServer.getConnectString())
+                .retryPolicy(new ExponentialBackoffRetry(1000, 5))
+                .build();
+        client.start();
+        client.blockUntilConnected();
+    }
+    @After
+    public void stopZkServer() throws IOException {
+        zkTestServer.close();
+    }
+    @Test
+    public void ValidServiceConnection() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, electionName);
+        runner.enableControllerService(service1);
+        runner.assertValid(service1);
+    }
+    @Test
+    public void InvalidServiceConnection() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, electionName);
+        runner.assertNotValid(service1);
+    }
+    @Test
+    public void isTheLeaderTest() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, electionName);
+        runner.enableControllerService(service1);
+        assertTrue(service1.isLeader());
+    }
+    @Test
+    public void isNotTheLeaderTest() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        service2 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, electionName);
+        runner.enableControllerService(service1);
+        runner.addControllerService("goatElection", service2);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, electionName);
+        runner.enableControllerService(service2);
+        assertTrue(service1.isLeader());
+        assertFalse(service2.isLeader());
+    }
+    @Test
+    public void multidepthZNodePathTest() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/goat/bear/man");
+        runner.enableControllerService(service1);
+        assertTrue(service1.isLeader());
+    }
+    @Test
+    public void zNodePathCharTest() throws InitializationException {
+        final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+        service1 = new ZookeeperElectionService();
+        runner.addControllerService("goatElection", service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+        runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/111");
+        runner.assertValid(service1);
+        runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/111/");
+        runner.assertNotValid(service1);
+    }
+    @Test(expected=java.lang.InterruptedException.class)
+    public void properZNodeCountOnDisable() throws Exception {
+         final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+         service1 = new ZookeeperElectionService();
+         runner.addControllerService("goatElection", service1);
+         runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+         runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+         runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/111");
+         runner.enableControllerService(service1);
+         runner.disableControllerService(service1);
+         List<String>  kids = client.getChildren().forPath("/electionmulti/111");
+         Stat  rootStillExists = client.checkExists().forPath("/electionmulti/111");
+         assertTrue(kids.size() == 0);
+         assertTrue(rootStillExists != null);
+     }
+    @Test(expected=java.lang.InterruptedException.class)
+    public void disableLeadershipChanges() throws Exception {
+         final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+         service1 = new ZookeeperElectionService();
+         runner.addControllerService("goatElection", service1);
+         runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+         runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+         runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/333");
+         runner.enableControllerService(service1);
+         service2 = new ZookeeperElectionService();
+         runner.addControllerService("goatElection2", service2);
+         runner.setProperty(service2, ZookeeperElectionService.zkHosts, zkhosts);
+         runner.setProperty(service2, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+         runner.setProperty(service2, ZookeeperElectionService.zkElectionNode, "/electionmulti/333");
+         runner.enableControllerService(service2);
+         assertTrue(service1.isLeader());
+         assertTrue(service1.aliveElectors().size() == 2);
+         runner.disableControllerService(service1);
+         Thread.sleep(100); //'Watch Based'
+         assertTrue(service2.isLeader());
+         runner.enableControllerService(service1);
+         assertFalse(service1.isLeader());
+         runner.disableControllerService(service2);
+         Thread.sleep(100); //'Watch Based'
+         assertTrue(service1.isLeader());
+    }
+    @Test
+    public void ConnectionLossChanges() throws Exception{
+    	 final TestRunner runner = TestRunners.newTestRunner(ZookeeperElectionTestProcessor.class);
+         service1 = new ZookeeperElectionService();
+         runner.addControllerService("goatElection", service1);
+         runner.setProperty(service1, ZookeeperElectionService.zkHosts, zkhosts);
+         runner.setProperty(service1, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+         runner.setProperty(service1, ZookeeperElectionService.zkElectionNode, "/electionmulti/333");
+         runner.enableControllerService(service1);
+         service2 = new ZookeeperElectionService();
+         runner.addControllerService("goatElection2", service2);
+         runner.setProperty(service2, ZookeeperElectionService.zkHosts, zkhosts);
+         runner.setProperty(service2, ZookeeperElectionService.sessionTimeout, String.valueOf(timeout));
+         runner.setProperty(service2, ZookeeperElectionService.zkElectionNode, "/electionmulti/333");
+         runner.enableControllerService(service2);
+    	String id1 = service1.ID();
+    	String id2 = service2.ID();
+    	zkTestServer.stop();
+    	Thread.sleep(4000);
+    	zkTestServer.start();
+    	
+    	assertFalse(id1.equalsIgnoreCase(service1.ID()));
+    	assertFalse(id2.equalsIgnoreCase(service2.ID()));
+
+    }
+}
\ No newline at end of file
diff --git a/nifi-nar-bundles/nifi-leaderelection-services/pom.xml b/nifi-nar-bundles/nifi-leaderelection-services/pom.xml
new file mode 100644
index 00000000000..36bc2a0d7f6
--- /dev/null
+++ b/nifi-nar-bundles/nifi-leaderelection-services/pom.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements. See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License. You may obtain a copy of the License at
+  http://www.apache.org/licenses/LICENSE-2.0
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.nifi</groupId>
+        <artifactId>nifi-nar-bundles</artifactId>
+        <version>1.0.0</version>
+    </parent>
+
+    <groupId>org.apache.nifi.leaderelection</groupId>
+    <artifactId>nifi-leaderelection-services</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <packaging>pom</packaging>
+
+    <modules>
+        <module>nifi-zookeeper-election-service-api</module>
+        <module>nifi-zookeeper-election-service-api-nar</module>
+        <module>nifi-zookeeper-election-service</module>
+        <module>nifi-zookeeper-election-service-nar</module>
+    </modules>
+
+</project>
