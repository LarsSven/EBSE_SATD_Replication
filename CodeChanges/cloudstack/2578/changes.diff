diff --git a/api/src/main/java/org/apache/cloudstack/api/ApiCommandJobType.java b/api/src/main/java/org/apache/cloudstack/api/ApiCommandJobType.java
index b95831b3d206..d35598b508da 100644
--- a/api/src/main/java/org/apache/cloudstack/api/ApiCommandJobType.java
+++ b/api/src/main/java/org/apache/cloudstack/api/ApiCommandJobType.java
@@ -52,5 +52,6 @@ public enum ApiCommandJobType {
     DedicatedGuestVlanRange,
     GuestOs,
     GuestOsMapping,
-    Network
+    Network,
+    Management
 }
diff --git a/api/src/main/java/org/apache/cloudstack/api/ResponseGenerator.java b/api/src/main/java/org/apache/cloudstack/api/ResponseGenerator.java
index 4fb248cd1055..80d6d4be0656 100644
--- a/api/src/main/java/org/apache/cloudstack/api/ResponseGenerator.java
+++ b/api/src/main/java/org/apache/cloudstack/api/ResponseGenerator.java
@@ -22,6 +22,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import org.apache.cloudstack.affinity.AffinityGroup;
 import org.apache.cloudstack.affinity.AffinityGroupResponse;
 import org.apache.cloudstack.api.ApiConstants.HostDetails;
@@ -64,6 +65,7 @@
 import org.apache.cloudstack.api.response.LBStickinessResponse;
 import org.apache.cloudstack.api.response.ListResponse;
 import org.apache.cloudstack.api.response.LoadBalancerResponse;
+import org.apache.cloudstack.api.response.ManagementServerResponse;
 import org.apache.cloudstack.api.response.NetworkACLItemResponse;
 import org.apache.cloudstack.api.response.NetworkACLResponse;
 import org.apache.cloudstack.api.response.NetworkOfferingResponse;
@@ -462,4 +464,6 @@ List<TemplateResponse> createTemplateResponses(ResponseView view, VirtualMachine
     ListResponse<UpgradeRouterTemplateResponse> createUpgradeRouterTemplateResponse(List<Long> jobIds);
 
     SSHKeyPairResponse createSSHKeyPairResponse(SSHKeyPair sshkeyPair, boolean privatekey);
+
+    ManagementServerResponse createManagementResponse(ManagementServerHost mgmt);
 }
diff --git a/api/src/main/java/org/apache/cloudstack/api/command/admin/management/ListMgmtsCmd.java b/api/src/main/java/org/apache/cloudstack/api/command/admin/management/ListMgmtsCmd.java
new file mode 100644
index 000000000000..a53be0efb6f0
--- /dev/null
+++ b/api/src/main/java/org/apache/cloudstack/api/command/admin/management/ListMgmtsCmd.java
@@ -0,0 +1,78 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//   http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing,
+// software distributed under the License is distributed on an
+// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied.  See the License for the
+// specific language governing permissions and limitations
+// under the License.
+package org.apache.cloudstack.api.command.admin.management;
+
+import org.apache.cloudstack.api.APICommand;
+import org.apache.cloudstack.api.ApiCommandJobType;
+import org.apache.cloudstack.api.ApiConstants;
+import org.apache.cloudstack.api.BaseListCmd;
+import org.apache.cloudstack.api.Parameter;
+import org.apache.cloudstack.api.response.HostResponse;
+import org.apache.cloudstack.api.response.ListResponse;
+import org.apache.cloudstack.api.response.ManagementServerResponse;
+import org.apache.log4j.Logger;
+
+@APICommand(name = "listManagementServers", description = "Lists management servers.", responseObject = ManagementServerResponse.class,
+        requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)
+public class ListMgmtsCmd extends BaseListCmd {
+    public static final Logger s_logger = Logger.getLogger(ListMgmtsCmd.class.getName());
+
+    private static final String s_name = "listmanagementserversresponse";
+
+    /////////////////////////////////////////////////////
+    //////////////// API parameters /////////////////////
+    /////////////////////////////////////////////////////
+
+    @Parameter(name = ApiConstants.ID, type = CommandType.UUID, entityType = HostResponse.class, description = "the id of the management server")
+    private Long id;
+
+    @Parameter(name = ApiConstants.NAME, type = CommandType.STRING, description = "the name of the management server")
+    private String hostName;
+
+    /////////////////////////////////////////////////////
+    /////////////////// Accessors ///////////////////////
+    /////////////////////////////////////////////////////
+
+    public Long getId() {
+        return id;
+    }
+
+    public String getHostName() {
+        return hostName;
+    }
+
+    /////////////////////////////////////////////////////
+    /////////////// API Implementation///////////////////
+    /////////////////////////////////////////////////////
+
+    @Override
+    public String getCommandName() {
+        return s_name;
+    }
+
+    @Override
+    public ApiCommandJobType getInstanceType() {
+        return ApiCommandJobType.Host;
+    }
+
+    @Override
+    public void execute() {
+        ListResponse<ManagementServerResponse> response = _queryService.listManagementServers(this);
+        response.setResponseName(getCommandName());
+        this.setResponseObject(response);
+    }
+}
diff --git a/api/src/main/java/org/apache/cloudstack/api/response/ManagementServerResponse.java b/api/src/main/java/org/apache/cloudstack/api/response/ManagementServerResponse.java
new file mode 100644
index 000000000000..efb7d878ddae
--- /dev/null
+++ b/api/src/main/java/org/apache/cloudstack/api/response/ManagementServerResponse.java
@@ -0,0 +1,59 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//   http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing,
+// software distributed under the License is distributed on an
+// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied.  See the License for the
+// specific language governing permissions and limitations
+// under the License.
+package org.apache.cloudstack.api.response;
+
+import org.apache.cloudstack.management.ManagementServerHost;
+import com.cloud.serializer.Param;
+import com.google.gson.annotations.SerializedName;
+import org.apache.cloudstack.api.ApiConstants;
+import org.apache.cloudstack.api.BaseResponse;
+import org.apache.cloudstack.api.EntityReference;
+
+@EntityReference(value = ManagementServerHost.class)
+public class ManagementServerResponse extends BaseResponse {
+    @SerializedName(ApiConstants.ID)
+    @Param(description = "the ID of the management server")
+    private String id;
+
+    @SerializedName(ApiConstants.NAME)
+    @Param(description = "the name of the management server")
+    private String name;
+
+    @SerializedName(ApiConstants.STATE)
+    @Param(description = "the state of the management server")
+    private ManagementServerHost.State state;
+
+    @SerializedName(ApiConstants.VERSION)
+    @Param(description = "the version of the management server")
+    private String version;
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setState(ManagementServerHost.State state) {
+        this.state = state;
+    }
+
+    public void setVersion(String version) {
+        this.version = version;
+    }
+}
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHost.java b/api/src/main/java/org/apache/cloudstack/management/ManagementServerHost.java
similarity index 88%
rename from framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHost.java
rename to api/src/main/java/org/apache/cloudstack/management/ManagementServerHost.java
index 7fc57b75692c..11e1cae9bf6f 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHost.java
+++ b/api/src/main/java/org/apache/cloudstack/management/ManagementServerHost.java
@@ -14,19 +14,23 @@
 // KIND, either express or implied.  See the License for the
 // specific language governing permissions and limitations
 // under the License.
-package com.cloud.cluster;
+package org.apache.cloudstack.management;
 
 public interface ManagementServerHost {
+    enum State {
+        Up, Down
+    }
+
     long getId();
 
-    public static enum State {
-        Up, Starting, Down
-    };
+    String getUuid();
 
     long getMsid();
 
     State getState();
 
+    String getName();
+
     String getVersion();
 
     String getServiceIP();
diff --git a/api/src/main/java/org/apache/cloudstack/management/ManagementServerHostPeer.java b/api/src/main/java/org/apache/cloudstack/management/ManagementServerHostPeer.java
new file mode 100644
index 000000000000..d41d1b74723b
--- /dev/null
+++ b/api/src/main/java/org/apache/cloudstack/management/ManagementServerHostPeer.java
@@ -0,0 +1,30 @@
+// Licensed to the Apache Software Foundation (ASF) under one
+// or more contributor license agreements.  See the NOTICE file
+// distributed with this work for additional information
+// regarding copyright ownership.  The ASF licenses this file
+// to you under the Apache License, Version 2.0 (the
+// "License"); you may not use this file except in compliance
+// with the License.  You may obtain a copy of the License at
+//
+//   http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing,
+// software distributed under the License is distributed on an
+// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+// KIND, either express or implied.  See the License for the
+// specific language governing permissions and limitations
+// under the License.
+package org.apache.cloudstack.management;
+
+import org.apache.cloudstack.api.InternalIdentity;
+
+import java.util.Date;
+
+public interface ManagementServerHostPeer extends InternalIdentity {
+
+    long getOwnerMshost();
+    long getPeerMshost();
+    long getPeerRunid();
+    ManagementServerHost.State getPeerState();
+    Date getLastUpdateTime();
+}
\ No newline at end of file
diff --git a/api/src/main/java/org/apache/cloudstack/query/QueryService.java b/api/src/main/java/org/apache/cloudstack/query/QueryService.java
index de9fbb55a26c..ac29dff23a63 100644
--- a/api/src/main/java/org/apache/cloudstack/query/QueryService.java
+++ b/api/src/main/java/org/apache/cloudstack/query/QueryService.java
@@ -23,6 +23,7 @@
 import org.apache.cloudstack.api.command.admin.host.ListHostsCmd;
 import org.apache.cloudstack.api.command.admin.host.ListHostTagsCmd;
 import org.apache.cloudstack.api.command.admin.internallb.ListInternalLBVMsCmd;
+import org.apache.cloudstack.api.command.admin.management.ListMgmtsCmd;
 import org.apache.cloudstack.api.command.admin.router.ListRoutersCmd;
 import org.apache.cloudstack.api.command.admin.storage.ListImageStoresCmd;
 import org.apache.cloudstack.api.command.admin.storage.ListSecondaryStagingStoresCmd;
@@ -58,6 +59,7 @@
 import org.apache.cloudstack.api.response.ImageStoreResponse;
 import org.apache.cloudstack.api.response.InstanceGroupResponse;
 import org.apache.cloudstack.api.response.ListResponse;
+import org.apache.cloudstack.api.response.ManagementServerResponse;
 import org.apache.cloudstack.api.response.ProjectAccountResponse;
 import org.apache.cloudstack.api.response.ProjectInvitationResponse;
 import org.apache.cloudstack.api.response.ProjectResponse;
@@ -141,4 +143,6 @@ public interface QueryService {
     ListResponse<StorageTagResponse> searchForStorageTags(ListStorageTagsCmd cmd);
 
     ListResponse<HostTagResponse> searchForHostTags(ListHostTagsCmd cmd);
+
+    ListResponse<ManagementServerResponse> listManagementServers(ListMgmtsCmd cmd);
 }
diff --git a/engine/orchestration/src/main/java/com/cloud/agent/manager/ClusteredAgentManagerImpl.java b/engine/orchestration/src/main/java/com/cloud/agent/manager/ClusteredAgentManagerImpl.java
index d0cced3007a3..7a16971ee71d 100644
--- a/engine/orchestration/src/main/java/com/cloud/agent/manager/ClusteredAgentManagerImpl.java
+++ b/engine/orchestration/src/main/java/com/cloud/agent/manager/ClusteredAgentManagerImpl.java
@@ -69,7 +69,7 @@
 import com.cloud.cluster.ClusterManagerListener;
 import com.cloud.cluster.ClusterServicePdu;
 import com.cloud.cluster.ClusteredAgentRebalanceService;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.cluster.ManagementServerHostVO;
 import com.cloud.cluster.agentlb.AgentLoadBalancerPlanner;
 import com.cloud.cluster.agentlb.HostTransferMapVO;
diff --git a/engine/orchestration/src/main/java/com/cloud/vm/ClusteredVirtualMachineManagerImpl.java b/engine/orchestration/src/main/java/com/cloud/vm/ClusteredVirtualMachineManagerImpl.java
index 77c69f34bf8e..b8995f6aa4a5 100644
--- a/engine/orchestration/src/main/java/com/cloud/vm/ClusteredVirtualMachineManagerImpl.java
+++ b/engine/orchestration/src/main/java/com/cloud/vm/ClusteredVirtualMachineManagerImpl.java
@@ -24,7 +24,7 @@
 
 import com.cloud.cluster.ClusterManager;
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 
 public class ClusteredVirtualMachineManagerImpl extends VirtualMachineManagerImpl implements ClusterManagerListener {
 
diff --git a/engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41120to41200.java b/engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41120to41200.java
index 88cffb722a00..f68f04a53aa8 100644
--- a/engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41120to41200.java
+++ b/engine/schema/src/main/java/com/cloud/upgrade/dao/Upgrade41120to41200.java
@@ -19,11 +19,16 @@
 
 import java.io.InputStream;
 import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
 
 import com.cloud.utils.exception.CloudRuntimeException;
+import org.apache.log4j.Logger;
 
 public class Upgrade41120to41200 implements DbUpgrade {
 
+    final static Logger LOG = Logger.getLogger(Upgrade41120to41200.class);
+
     @Override
     public String[] getUpgradableVersionRange() {
         return new String[] {"4.11.2.0", "4.12.0.0"};
@@ -52,7 +57,15 @@ public InputStream[] getPrepareScripts() {
 
     @Override
     public void performDataMigration(Connection conn) {
+        updateManagementServerHostUuid(conn);
+    }
 
+    private void updateManagementServerHostUuid(Connection conn) {
+        try (final PreparedStatement updateStatement = conn.prepareStatement("UPDATE cloud.mshost SET uuid=UUID()")) {
+            updateStatement.executeUpdate();
+        } catch (SQLException e) {
+            LOG.error("Failed to add an UUID to each management server.", e);
+        }
     }
 
     @Override
diff --git a/engine/schema/src/main/resources/META-INF/db/schema-41120to41200.sql b/engine/schema/src/main/resources/META-INF/db/schema-41120to41200.sql
index 325c77812b3b..f6a748572f9a 100644
--- a/engine/schema/src/main/resources/META-INF/db/schema-41120to41200.sql
+++ b/engine/schema/src/main/resources/META-INF/db/schema-41120to41200.sql
@@ -37,4 +37,7 @@ INSERT INTO `cloud`.`role_permissions` (`uuid`, `role_id`, `rule`, `permission`,
 UPDATE `cloud`.`async_job` SET `removed` = now() WHERE `removed` IS NULL;
 
 -- PR#1448 update description of 'execute.in.sequence.network.element.commands' parameter to reflect an unused command that has been removed. The removed class command is 'UserDataCommand'.
-update `cloud`.`configuration` set description = 'If set to true, DhcpEntryCommand, SavePasswordCommand, VmDataCommand will be synchronized on the agent side. If set to false, these commands become asynchronous. Default value is false.' where name = 'execute.in.sequence.network.element.commands'; 
\ No newline at end of file
+update `cloud`.`configuration` set description = 'If set to true, DhcpEntryCommand, SavePasswordCommand, VmDataCommand will be synchronized on the agent side. If set to false, these commands become asynchronous. Default value is false.' where name = 'execute.in.sequence.network.element.commands'; 
+
+-- PR#2578 New column for listManagementServers API call
+ALTER TABLE `mshost` ADD COLUMN `uuid` varchar(40) AFTER `name`;
diff --git a/framework/cluster/pom.xml b/framework/cluster/pom.xml
index c9b61d666d56..853d9f0b7167 100644
--- a/framework/cluster/pom.xml
+++ b/framework/cluster/pom.xml
@@ -47,8 +47,7 @@
             <groupId>org.apache.cloudstack</groupId>
             <artifactId>cloud-api</artifactId>
             <version>${project.version}</version>
-            <type>test-jar</type>
-            <scope>test</scope>
         </dependency>
     </dependencies>
+
 </project>
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ClusterFenceManagerImpl.java b/framework/cluster/src/main/java/com/cloud/cluster/ClusterFenceManagerImpl.java
index 0b14be8be0de..4f5e0344e73b 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ClusterFenceManagerImpl.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ClusterFenceManagerImpl.java
@@ -22,6 +22,7 @@
 import javax.inject.Inject;
 import javax.naming.ConfigurationException;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import org.apache.log4j.Logger;
 import org.springframework.stereotype.Component;
 
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManager.java b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManager.java
index 86d6fb3ab9f1..c4a800c79504 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManager.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManager.java
@@ -16,6 +16,7 @@
 // under the License.
 package com.cloud.cluster;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import org.apache.cloudstack.framework.config.ConfigKey;
 
 import com.cloud.utils.component.Manager;
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerImpl.java b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerImpl.java
index d4717cada55d..8786bfdd2286 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerImpl.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerImpl.java
@@ -31,6 +31,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.UUID;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -39,6 +40,7 @@
 import javax.inject.Inject;
 import javax.naming.ConfigurationException;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import org.apache.cloudstack.framework.config.ConfigDepot;
 import org.apache.cloudstack.framework.config.ConfigKey;
 import org.apache.cloudstack.framework.config.Configurable;
@@ -951,7 +953,7 @@ public ManagementServerHostVO doInTransaction(final TransactionStatus status) {
                     mshost = new ManagementServerHostVO();
                     mshost.setMsid(_msId);
                     mshost.setRunid(_runId);
-                    mshost.setName(NetUtils.getHostName());
+                    mshost.setName(NetUtils.getCanonicalHostName());
                     mshost.setVersion(version);
                     mshost.setServiceIP(_clusterNodeIP);
                     mshost.setServicePort(_currentServiceAdapter.getServicePort());
@@ -959,12 +961,13 @@ public ManagementServerHostVO doInTransaction(final TransactionStatus status) {
                     mshost.setRemoved(null);
                     mshost.setAlertCount(0);
                     mshost.setState(ManagementServerHost.State.Up);
+                    mshost.setUuid(UUID.randomUUID().toString());
                     _mshostDao.persist(mshost);
                     if (s_logger.isInfoEnabled()) {
                         s_logger.info("New instance of management server msid " + _msId + ", runId " + _runId + " is being started");
                     }
                 } else {
-                    _mshostDao.update(mshost.getId(), _runId, NetUtils.getHostName(), version, _clusterNodeIP, _currentServiceAdapter.getServicePort(),
+                    _mshostDao.update(mshost.getId(), _runId, NetUtils.getCanonicalHostName(), version, _clusterNodeIP, _currentServiceAdapter.getServicePort(),
                             DateUtil.currentGMTTime());
                     if (s_logger.isInfoEnabled()) {
                         s_logger.info("Management server " + _msId + ", runId " + _runId + " is being started");
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerListener.java b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerListener.java
index 2fe1f24bbe57..61af3ef9982d 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerListener.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ClusterManagerListener.java
@@ -16,6 +16,8 @@
 // under the License.
 package com.cloud.cluster;
 
+import org.apache.cloudstack.management.ManagementServerHost;
+
 import java.util.List;
 
 public interface ClusterManagerListener {
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostPeerVO.java b/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostPeerVO.java
index 5b7e988330c9..a381bb412e20 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostPeerVO.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostPeerVO.java
@@ -29,11 +29,13 @@
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
+import org.apache.cloudstack.management.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHostPeer;
 import com.cloud.utils.DateUtil;
 
 @Entity
 @Table(name = "mshost_peer")
-public class ManagementServerHostPeerVO {
+public class ManagementServerHostPeerVO implements ManagementServerHostPeer {
 
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
@@ -77,6 +79,7 @@ public void setId(long id) {
         this.id = id;
     }
 
+    @Override
     public long getOwnerMshost() {
         return ownerMshost;
     }
@@ -85,6 +88,7 @@ public void setOwnerMshost(long ownerMshost) {
         this.ownerMshost = ownerMshost;
     }
 
+    @Override
     public long getPeerMshost() {
         return peerMshost;
     }
@@ -93,6 +97,7 @@ public void setPeerMshost(long peerMshost) {
         this.peerMshost = peerMshost;
     }
 
+    @Override
     public long getPeerRunid() {
         return peerRunid;
     }
@@ -101,6 +106,7 @@ public void setPeerRunid(long peerRunid) {
         this.peerRunid = peerRunid;
     }
 
+    @Override
     public ManagementServerHost.State getPeerState() {
         return peerState;
     }
@@ -109,6 +115,7 @@ public void setPeerState(ManagementServerHost.State peerState) {
         this.peerState = peerState;
     }
 
+    @Override
     public Date getLastUpdateTime() {
         return lastUpdateTime;
     }
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostVO.java b/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostVO.java
index f93c2ac24673..121b939c5981 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostVO.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/ManagementServerHostVO.java
@@ -17,6 +17,7 @@
 package com.cloud.cluster;
 
 import java.util.Date;
+import java.util.UUID;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
@@ -29,6 +30,7 @@
 import javax.persistence.Temporal;
 import javax.persistence.TemporalType;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.utils.db.GenericDao;
 
 @Entity
@@ -40,6 +42,9 @@ public class ManagementServerHostVO implements ManagementServerHost {
     @Column(name = "id")
     private long id;
 
+    @Column(name = "uuid")
+    private String uuid;
+
     @Column(name = "msid", updatable = true, nullable = false)
     private long msid;
 
@@ -81,6 +86,7 @@ public ManagementServerHostVO(long msid, long runid, String serviceIP, int servi
         this.serviceIP = serviceIP;
         this.servicePort = servicePort;
         lastUpdateTime = updateTime;
+        this.uuid = UUID.randomUUID().toString();
     }
 
     @Override
@@ -92,6 +98,15 @@ public void setId(long id) {
         this.id = id;
     }
 
+    @Override
+    public String getUuid() {
+        return uuid;
+    }
+
+    public void setUuid(String uuid) {
+        this.uuid = uuid;
+    }
+
     public long getRunid() {
         return runid;
     }
@@ -109,6 +124,7 @@ public void setMsid(long msid) {
         this.msid = msid;
     }
 
+    @Override
     public String getName() {
         return name;
     }
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDao.java b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDao.java
index d6b25c1c7f4d..610826932af4 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDao.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDao.java
@@ -19,8 +19,8 @@
 import java.util.Date;
 import java.util.List;
 
-import com.cloud.cluster.ManagementServerHost;
-import com.cloud.cluster.ManagementServerHost.State;
+import org.apache.cloudstack.management.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost.State;
 import com.cloud.cluster.ManagementServerHostVO;
 import com.cloud.utils.db.Filter;
 import com.cloud.utils.db.GenericDao;
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDaoImpl.java b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDaoImpl.java
index 3ab4d97ee05a..74f8481a31d9 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDaoImpl.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostDaoImpl.java
@@ -28,8 +28,8 @@
 import org.apache.log4j.Logger;
 
 import com.cloud.cluster.ClusterInvalidSessionException;
-import com.cloud.cluster.ManagementServerHost;
-import com.cloud.cluster.ManagementServerHost.State;
+import org.apache.cloudstack.management.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost.State;
 import com.cloud.cluster.ManagementServerHostVO;
 import com.cloud.utils.DateUtil;
 import com.cloud.utils.db.DB;
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDao.java b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDao.java
index 6d21049bd560..f799116e091b 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDao.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDao.java
@@ -16,7 +16,7 @@
 // under the License.
 package com.cloud.cluster.dao;
 
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.cluster.ManagementServerHostPeerVO;
 import com.cloud.utils.db.GenericDao;
 
diff --git a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDaoImpl.java b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDaoImpl.java
index a43fcfc8d304..a7a56c738c16 100644
--- a/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDaoImpl.java
+++ b/framework/cluster/src/main/java/com/cloud/cluster/dao/ManagementServerHostPeerDaoImpl.java
@@ -21,7 +21,7 @@
 
 import org.apache.log4j.Logger;
 
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.cluster.ManagementServerHostPeerVO;
 import com.cloud.utils.db.DB;
 import com.cloud.utils.db.GenericDaoBase;
diff --git a/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java b/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java
index 1845dbf8aa1c..c9c366c4554b 100644
--- a/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java
+++ b/framework/jobs/src/main/java/org/apache/cloudstack/framework/jobs/impl/AsyncJobManagerImpl.java
@@ -62,7 +62,7 @@
 import org.slf4j.MDC;
 
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.storage.DataStoreRole;
 import com.cloud.storage.Snapshot;
 import com.cloud.storage.dao.SnapshotDao;
diff --git a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java
index f586f3938215..7a168d4cb023 100644
--- a/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java
+++ b/plugins/hypervisors/vmware/src/main/java/com/cloud/hypervisor/vmware/manager/VmwareManagerImpl.java
@@ -26,7 +26,7 @@
 import com.cloud.agent.api.StartupRoutingCommand;
 import com.cloud.api.query.dao.TemplateJoinDao;
 import com.cloud.cluster.ClusterManager;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.cluster.dao.ManagementServerHostPeerDao;
 import com.cloud.configuration.Config;
 import com.cloud.dc.ClusterDetailsDao;
diff --git a/plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java b/plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java
index 8b76a1770a3c..37f1f559483f 100644
--- a/plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java
+++ b/plugins/metrics/src/main/java/org/apache/cloudstack/metrics/MetricsServiceImpl.java
@@ -25,6 +25,7 @@
 import com.cloud.capacity.CapacityManager;
 import com.cloud.capacity.dao.CapacityDao;
 import com.cloud.capacity.dao.CapacityDaoImpl;
+import com.cloud.cluster.dao.ManagementServerHostDao;
 import com.cloud.dc.DataCenter;
 import com.cloud.dc.dao.ClusterDao;
 import com.cloud.dc.dao.DataCenterDao;
@@ -95,6 +96,8 @@ public class MetricsServiceImpl extends ComponentLifecycleBase implements Metric
     private DomainRouterDao domainRouterDao;
     @Inject
     private CapacityDao capacityDao;
+    @Inject
+    private ManagementServerHostDao managementServerHostDao;
 
     protected MetricsServiceImpl() {
         super();
@@ -138,6 +141,7 @@ public InfrastructureResponse listInfrastructure() {
             }
         }
         response.setCpuSockets(cpuSockets);
+        response.setManagementServers(managementServerHostDao.listAll().size());
         return response;
     }
 
diff --git a/plugins/metrics/src/main/java/org/apache/cloudstack/response/InfrastructureResponse.java b/plugins/metrics/src/main/java/org/apache/cloudstack/response/InfrastructureResponse.java
index a4db345d21d8..03b54abd2ec3 100644
--- a/plugins/metrics/src/main/java/org/apache/cloudstack/response/InfrastructureResponse.java
+++ b/plugins/metrics/src/main/java/org/apache/cloudstack/response/InfrastructureResponse.java
@@ -59,6 +59,10 @@ public class InfrastructureResponse extends BaseResponse {
     @Param(description = "Number of cpu sockets")
     private Integer cpuSockets;
 
+    @SerializedName("managementservers")
+    @Param(description = "Number of management servers")
+    private Integer managementServers;
+
     public InfrastructureResponse() {
         setObjectName("infrastructure");
     }
@@ -98,4 +102,8 @@ public void setRouters(final Integer routers) {
     public void setCpuSockets(final Integer cpuSockets) {
         this.cpuSockets = cpuSockets;
     }
+
+    public void setManagementServers(Integer managementServers) {
+        this.managementServers = managementServers;
+    }
 }
diff --git a/server/src/main/java/com/cloud/api/ApiResponseHelper.java b/server/src/main/java/com/cloud/api/ApiResponseHelper.java
index 9f51cbb5ae41..74ffb50fe5dd 100644
--- a/server/src/main/java/com/cloud/api/ApiResponseHelper.java
+++ b/server/src/main/java/com/cloud/api/ApiResponseHelper.java
@@ -16,6 +16,7 @@
 // under the License.
 package com.cloud.api;
 
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.utils.crypt.DBEncryptionUtil;
 import com.cloud.tags.dao.ResourceTagDao;
 import com.cloud.agent.api.VgpuTypesInfo;
@@ -235,6 +236,7 @@
 import org.apache.cloudstack.api.response.LBStickinessResponse;
 import org.apache.cloudstack.api.response.ListResponse;
 import org.apache.cloudstack.api.response.LoadBalancerResponse;
+import org.apache.cloudstack.api.response.ManagementServerResponse;
 import org.apache.cloudstack.api.response.NetworkACLItemResponse;
 import org.apache.cloudstack.api.response.NetworkACLResponse;
 import org.apache.cloudstack.api.response.NetworkOfferingResponse;
@@ -3975,4 +3977,12 @@ public SSHKeyPairResponse createSSHKeyPairResponse(SSHKeyPair sshkeyPair, boolea
         response.setDomainName(domain.getName());
         return response;
     }
+    public ManagementServerResponse createManagementResponse(ManagementServerHost mgmt) {
+        ManagementServerResponse response = new ManagementServerResponse();
+        response.setId(mgmt.getUuid());
+        response.setName(mgmt.getName());
+        response.setVersion(mgmt.getVersion());
+        response.setState(mgmt.getState());
+        return response;
+    }
 }
diff --git a/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java b/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java
index 935147004929..cecec5d1516b 100644
--- a/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java
+++ b/server/src/main/java/com/cloud/api/query/QueryManagerImpl.java
@@ -25,6 +25,8 @@
 
 import javax.inject.Inject;
 
+import com.cloud.cluster.ManagementServerHostVO;
+import com.cloud.cluster.dao.ManagementServerHostDao;
 import org.apache.cloudstack.acl.ControlledEntity.ACLType;
 import org.apache.cloudstack.affinity.AffinityGroupDomainMapVO;
 import org.apache.cloudstack.affinity.AffinityGroupResponse;
@@ -41,6 +43,7 @@
 import org.apache.cloudstack.api.command.admin.host.ListHostsCmd;
 import org.apache.cloudstack.api.command.admin.internallb.ListInternalLBVMsCmd;
 import org.apache.cloudstack.api.command.admin.iso.ListIsosCmdByAdmin;
+import org.apache.cloudstack.api.command.admin.management.ListMgmtsCmd;
 import org.apache.cloudstack.api.command.admin.router.ListRoutersCmd;
 import org.apache.cloudstack.api.command.admin.storage.ListImageStoresCmd;
 import org.apache.cloudstack.api.command.admin.storage.ListSecondaryStagingStoresCmd;
@@ -80,6 +83,7 @@
 import org.apache.cloudstack.api.response.ImageStoreResponse;
 import org.apache.cloudstack.api.response.InstanceGroupResponse;
 import org.apache.cloudstack.api.response.ListResponse;
+import org.apache.cloudstack.api.response.ManagementServerResponse;
 import org.apache.cloudstack.api.response.ProjectAccountResponse;
 import org.apache.cloudstack.api.response.ProjectInvitationResponse;
 import org.apache.cloudstack.api.response.ProjectResponse;
@@ -376,6 +380,9 @@ public class QueryManagerImpl extends MutualExclusiveIdsManagerBase implements Q
     @Inject
     DataStoreManager dataStoreManager;
 
+    @Inject
+    ManagementServerHostDao managementServerHostDao;
+
     /*
      * (non-Javadoc)
      *
@@ -3683,6 +3690,23 @@ protected ResourceDetailResponse createResourceDetailsResponse(ResourceDetail re
         return resourceDetailResponse;
     }
 
+    @Override
+    public ListResponse<ManagementServerResponse> listManagementServers(ListMgmtsCmd cmd) {
+        ListResponse<ManagementServerResponse> response = new ListResponse<>();
+        List<ManagementServerResponse> result = new ArrayList<>();
+        for (ManagementServerHostVO mgmt : managementServerHostDao.listAll()) {
+            ManagementServerResponse mgmtResponse = new ManagementServerResponse();
+            mgmtResponse.setId(mgmt.getUuid());
+            mgmtResponse.setName(mgmt.getName());
+            mgmtResponse.setState(mgmt.getState());
+            mgmtResponse.setVersion(mgmt.getVersion());
+            mgmtResponse.setObjectName("managementserver");
+            result.add(mgmtResponse);
+        }
+        response.setResponses(result);
+        return response;
+     }
+
     @Override
     public String getConfigComponentName() {
         return QueryService.class.getSimpleName();
diff --git a/server/src/main/java/com/cloud/ha/HighAvailabilityManagerImpl.java b/server/src/main/java/com/cloud/ha/HighAvailabilityManagerImpl.java
index d4356f6b04a2..49211f5eba37 100644
--- a/server/src/main/java/com/cloud/ha/HighAvailabilityManagerImpl.java
+++ b/server/src/main/java/com/cloud/ha/HighAvailabilityManagerImpl.java
@@ -38,7 +38,7 @@
 import com.cloud.agent.AgentManager;
 import com.cloud.alert.AlertManager;
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.configuration.Config;
 import com.cloud.dc.ClusterDetailsDao;
 import com.cloud.dc.DataCenterVO;
diff --git a/server/src/main/java/com/cloud/server/LockMasterListener.java b/server/src/main/java/com/cloud/server/LockMasterListener.java
index 8c8ff91d89ae..27cf74f4375b 100644
--- a/server/src/main/java/com/cloud/server/LockMasterListener.java
+++ b/server/src/main/java/com/cloud/server/LockMasterListener.java
@@ -19,7 +19,7 @@
 import java.util.List;
 
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.utils.db.Merovingian2;
 
 /**
diff --git a/server/src/main/java/com/cloud/server/ManagementServerImpl.java b/server/src/main/java/com/cloud/server/ManagementServerImpl.java
index 4cd2811cc204..8e77f498e1f2 100644
--- a/server/src/main/java/com/cloud/server/ManagementServerImpl.java
+++ b/server/src/main/java/com/cloud/server/ManagementServerImpl.java
@@ -104,6 +104,7 @@
 import org.apache.cloudstack.api.command.admin.iso.ListIsosCmdByAdmin;
 import org.apache.cloudstack.api.command.admin.iso.RegisterIsoCmdByAdmin;
 import org.apache.cloudstack.api.command.admin.loadbalancer.ListLoadBalancerRuleInstancesCmdByAdmin;
+import org.apache.cloudstack.api.command.admin.management.ListMgmtsCmd;
 import org.apache.cloudstack.api.command.admin.network.AddNetworkDeviceCmd;
 import org.apache.cloudstack.api.command.admin.network.AddNetworkServiceProviderCmd;
 import org.apache.cloudstack.api.command.admin.network.CreateManagementNetworkIpRangeCmd;
@@ -3039,6 +3040,7 @@ public List<Class<?>> getCommands() {
         cmdList.add(CreateManagementNetworkIpRangeCmd.class);
         cmdList.add(DeleteManagementNetworkIpRangeCmd.class);
         cmdList.add(UploadTemplateDirectDownloadCertificate.class);
+        cmdList.add(ListMgmtsCmd.class);
 
         // Out-of-band management APIs for admins
         cmdList.add(EnableOutOfBandManagementForHostCmd.class);
diff --git a/server/src/main/java/com/cloud/storage/StorageManagerImpl.java b/server/src/main/java/com/cloud/storage/StorageManagerImpl.java
index c9e34835b62d..9be4ddbf2354 100644
--- a/server/src/main/java/com/cloud/storage/StorageManagerImpl.java
+++ b/server/src/main/java/com/cloud/storage/StorageManagerImpl.java
@@ -115,7 +115,7 @@
 import com.cloud.capacity.CapacityVO;
 import com.cloud.capacity.dao.CapacityDao;
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.configuration.Config;
 import com.cloud.configuration.ConfigurationManager;
 import com.cloud.configuration.ConfigurationManagerImpl;
diff --git a/server/src/main/java/org/apache/cloudstack/ha/HAManagerImpl.java b/server/src/main/java/org/apache/cloudstack/ha/HAManagerImpl.java
index 86ac0376de43..ab269b1052c2 100644
--- a/server/src/main/java/org/apache/cloudstack/ha/HAManagerImpl.java
+++ b/server/src/main/java/org/apache/cloudstack/ha/HAManagerImpl.java
@@ -60,7 +60,7 @@
 import org.apache.log4j.Logger;
 
 import com.cloud.cluster.ClusterManagerListener;
-import com.cloud.cluster.ManagementServerHost;
+import org.apache.cloudstack.management.ManagementServerHost;
 import com.cloud.dc.ClusterDetailsDao;
 import com.cloud.dc.ClusterDetailsVO;
 import com.cloud.dc.DataCenter;
diff --git a/tools/apidoc/gen_toc.py b/tools/apidoc/gen_toc.py
index 3bf52a36a462..1b2a979d443b 100644
--- a/tools/apidoc/gen_toc.py
+++ b/tools/apidoc/gen_toc.py
@@ -190,7 +190,8 @@
     'listElastistorInterface': 'Misc',
     'cloudian': 'Cloudian',
     'Sioc' : 'Sioc',
-    'Diagnostics': 'Diagnostics'
+    'Diagnostics': 'Diagnostics',
+    'Management': 'Management',
     }
 
 
diff --git a/ui/css/cloudstack3.css b/ui/css/cloudstack3.css
index 9eea2e590d43..04df6f5161bb 100644
--- a/ui/css/cloudstack3.css
+++ b/ui/css/cloudstack3.css
@@ -9730,7 +9730,8 @@ div#details-tab-aclRules td.cidrlist span {
   top: 68px;
 }
 
-.system-dashboard.zone .status_box li.system-vms .icon {
+.system-dashboard.zone .status_box li.system-vms .icon,
+.system-dashboard.zone .status_box li.management-servers .icon {
   background-position: -408px -399px;
 }
 
diff --git a/ui/index.html b/ui/index.html
index 7a8e3da0177d..4664b8c9c907 100644
--- a/ui/index.html
+++ b/ui/index.html
@@ -1218,6 +1218,15 @@ <h3><translate key="label.set.up.zone.type"/></h3>
                                   view-all-title="label.sockets"
                                   view-all-target="sockets"><translate key="label.view.all"/></span>
                         </li>
+                        <li class="block management-servers">
+                            <span class="header"><translate key="label.management.servers"/></span>
+                            <span class="icon">&nbsp;</span>
+                            <span class="overview total" data-item="managementServerCount"></span>
+                            <span class="button view-all clusters"
+                                  tr="label.management.servers" trf="view-all-title"
+                                  view-all-title="label.management.servers"
+                                  view-all-target="managementServers"><translate key="label.view.all"/></span>
+                        </li>
                     </ul>
                 </div>
             </div>
diff --git a/ui/l10n/en.js b/ui/l10n/en.js
index 59fa35779ec3..d6843c2690b7 100644
--- a/ui/l10n/en.js
+++ b/ui/l10n/en.js
@@ -1014,6 +1014,7 @@ var dictionary = {
 "label.management":"Management",
 "label.management.ips":"Management IP Addresses",
 "label.management.server":"Management Server",
+"label.management.servers":"Management Servers",
 "label.mac.address.changes":"MAC Address Changes",
 "label.max.cpus":"Max. CPU cores",
 "label.max.guest.limit":"Max guest limit",
@@ -1222,6 +1223,7 @@ var dictionary = {
 "label.number.of.clusters":"Number of Clusters",
 "label.number.of.cpu.sockets":"The Number of CPU Sockets",
 "label.number.of.hosts":"Number of Hosts",
+"label.number.of.management.servers":"Number of Management Servers",
 "label.number.of.pods":"Number of Pods",
 "label.number.of.system.vms":"Number of System VMs",
 "label.number.of.virtual.routers":"Number of Virtual Routers",
diff --git a/ui/l10n/fr_FR.js b/ui/l10n/fr_FR.js
index 8ecf80df9103..88b6cad21b74 100644
--- a/ui/l10n/fr_FR.js
+++ b/ui/l10n/fr_FR.js
@@ -984,6 +984,7 @@ var dictionary = {
     "label.management": "Administration",
     "label.management.ips": "Adresses IP de gestion",
     "label.management.server": "Serveur de gestion",
+    "label.management.servers": "Serveurs de gestion",
     "label.max.cpus": "Nombre coeurs CPU max.",
     "label.max.guest.limit": "Nombre maximum d'invités",
     "label.max.instances": "Instance Max.",
@@ -1184,6 +1185,7 @@ var dictionary = {
     "label.number.of.clusters": "Nombre de clusters",
     "label.number.of.cpu.sockets": "Le nombre de sockets CPU",
     "label.number.of.hosts": "Nombre d'Hôtes",
+    "label.number.of.management.servers":"Nombre de serveurs de gestion",
     "label.number.of.pods": "Nombre de Pods",
     "label.number.of.system.vms": "Nombre de VM Système",
     "label.number.of.virtual.routers": "Nombre de routeurs virtuels",
diff --git a/ui/scripts/system.js b/ui/scripts/system.js
index 28fe5db13b95..be31fa4b2442 100755
--- a/ui/scripts/system.js
+++ b/ui/scripts/system.js
@@ -276,6 +276,7 @@
                         data.systemVmCount = response.systemvms;
                         data.virtualRouterCount = response.routers;
                         data.socketCount = response.cpusockets;
+                        data.managementServerCount = response.managementservers;
                         args.response.success({
                             data: data
                         });
@@ -9900,6 +9901,40 @@
                             };
 
                             return listView;
+                        },
+
+                        managementServers: function () {
+                            var listView = {
+                                id: 'managementservers',
+                                fields: {
+                                    name: {
+                                        label: 'label.name'
+                                    },
+                                    id: {
+                                        label: 'label.uuid'
+                                    },
+                                    state: {
+                                        label: 'label.state',
+                                        indicator: {
+                                            'Up': 'on',
+                                            'Down': 'off'
+                                        }
+                                    },
+                                    version: {
+                                        label: 'label.version'
+                                    }
+                                },
+                                dataProvider: function (args) {
+                                        $.ajax({
+                                            url: createURL('listManagementServers'),
+                                            async: false,
+                                            success: function (json) {
+                                                args.response.success({ data: json.listmanagementserversresponse.managementserver });
+                                            }
+                                        });
+                                    }
+                                };
+                            return listView;
                         }
                     }
                 }
@@ -17798,6 +17833,9 @@
                                     },
                                     cpusockets: {
                                         label: 'label.number.of.cpu.sockets'
+                                    },
+                                    managementServers: {
+                                        label: 'label.number.of.management.servers'
                                     }
                                 }, {
 
diff --git a/utils/src/main/java/com/cloud/utils/net/NetUtils.java b/utils/src/main/java/com/cloud/utils/net/NetUtils.java
index b9762fdae63c..069e44bbc87e 100644
--- a/utils/src/main/java/com/cloud/utils/net/NetUtils.java
+++ b/utils/src/main/java/com/cloud/utils/net/NetUtils.java
@@ -113,6 +113,18 @@ public static String getHostName() {
         return "localhost";
     }
 
+    public static String getCanonicalHostName() {
+        try {
+            InetAddress localAddr = InetAddress.getLocalHost();
+            if (localAddr != null) {
+                return localAddr.getCanonicalHostName();
+            }
+        } catch (UnknownHostException e) {
+            s_logger.warn("UnknownHostException when trying to get canonical host name. ", e);
+        }
+        return "localhost";
+    }
+
     public static InetAddress getLocalInetAddress() {
         try {
             return InetAddress.getLocalHost();
