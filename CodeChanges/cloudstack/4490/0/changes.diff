diff --git a/api/src/main/java/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java b/api/src/main/java/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java
index 53273fe1d1c8..9611d797bf09 100644
--- a/api/src/main/java/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java
+++ b/api/src/main/java/org/apache/cloudstack/api/command/user/loadbalancer/CreateLoadBalancerRuleCmd.java
@@ -47,7 +47,6 @@
 import com.cloud.network.Network;
 import com.cloud.network.rules.LoadBalancer;
 import com.cloud.user.Account;
-import com.cloud.utils.net.NetUtils;
 
 @APICommand(name = "createLoadBalancerRule", description = "Creates a load balancer rule", responseObject = LoadBalancerResponse.class,
         requestHasSensitiveInfo = false, responseHasSensitiveInfo = false)
@@ -255,7 +254,7 @@ public List<String> getSourceCidrList() {
     }
 
     public String getLbProtocol() {
-        return lbProtocol;
+        return lbProtocol.trim().toLowerCase();
     }
 
     /////////////////////////////////////////////////////
@@ -337,7 +336,7 @@ public Integer getSourcePortEnd() {
     }
 
     public String getProtocol() {
-        return NetUtils.TCP_PROTO;
+        return getLbProtocol();
     }
 
     public long getAccountId() {
diff --git a/engine/schema/src/main/java/com/cloud/network/dao/LoadBalancerVO.java b/engine/schema/src/main/java/com/cloud/network/dao/LoadBalancerVO.java
index 865e7d2c365e..e04e8e708325 100644
--- a/engine/schema/src/main/java/com/cloud/network/dao/LoadBalancerVO.java
+++ b/engine/schema/src/main/java/com/cloud/network/dao/LoadBalancerVO.java
@@ -26,7 +26,6 @@
 
 import com.cloud.network.rules.FirewallRuleVO;
 import com.cloud.network.rules.LoadBalancer;
-import com.cloud.utils.net.NetUtils;
 
 /**
  * This VO represent Public Load Balancer
@@ -67,7 +66,7 @@ public LoadBalancerVO() {
 
     public LoadBalancerVO(String xId, String name, String description, long srcIpId, int srcPort, int dstPort, String algorithm, long networkId, long accountId,
             long domainId, String lbProtocol) {
-        super(xId, srcIpId, srcPort, NetUtils.TCP_PROTO, networkId, accountId, domainId, Purpose.LoadBalancing, null, null, null, null);
+        super(xId, srcIpId, srcPort, lbProtocol, networkId, accountId, domainId, Purpose.LoadBalancing, null, null, null, null);
         this.name = name;
         this.description = description;
         this.algorithm = algorithm;
diff --git a/server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java b/server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java
index 56814daeef25..9af1aebf0694 100644
--- a/server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java
+++ b/server/src/main/java/com/cloud/network/firewall/FirewallManagerImpl.java
@@ -446,6 +446,10 @@ public void detectRulesConflict(FirewallRule newRule) throws NetworkRuleConflict
                     (rule.getPurpose() == Purpose.PortForwarding && newRule.getPurpose() == Purpose.PortForwarding && !newRule.getProtocol().equalsIgnoreCase(
                         rule.getProtocol())) || (rule.getPurpose() == Purpose.Vpn && newRule.getPurpose() == Purpose.PortForwarding && !newRule.getProtocol().equalsIgnoreCase(
                             rule.getProtocol()));
+                 // we allow load balancing rules with the same parameters but different protocols
+                boolean allowLb =
+                    (rule.getPurpose() == Purpose.LoadBalancing && newRule.getPurpose() == Purpose.LoadBalancing && !newRule.getProtocol().equalsIgnoreCase(
+                        rule.getProtocol()));
                 boolean allowStaticNat =
                     (rule.getPurpose() == Purpose.StaticNat && newRule.getPurpose() == Purpose.StaticNat && !newRule.getProtocol().equalsIgnoreCase(rule.getProtocol()));
 
@@ -455,7 +459,7 @@ public void detectRulesConflict(FirewallRule newRule) throws NetworkRuleConflict
                 boolean allowVpnLb =
                         (rule.getPurpose() == Purpose.LoadBalancing && newRule.getPurpose() == Purpose.Vpn && !newRule.getProtocol().equalsIgnoreCase(rule.getProtocol()));
 
-                if (!(allowPf || allowStaticNat || oneOfRulesIsFirewall || allowVpnPf || allowVpnLb)) {
+                if (!(allowPf || allowLb || allowStaticNat || oneOfRulesIsFirewall || allowVpnPf || allowVpnLb)) {
                     throw new NetworkRuleConflictException("The range specified, " + newRule.getSourcePortStart() + "-" + newRule.getSourcePortEnd() +
                         ", conflicts with rule " + rule.getId() + " which has " + rule.getSourcePortStart() + "-" + rule.getSourcePortEnd());
                 }
