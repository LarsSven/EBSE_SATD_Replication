diff --git a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
index d52c989027bc..e0fbef915102 100644
--- a/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
+++ b/common/src/java/org/apache/hadoop/hive/conf/HiveConf.java
@@ -1772,7 +1772,8 @@ public static enum ConfVars {
     HIVE_STRICT_CHECKS_TYPE_SAFETY("hive.strict.checks.type.safety", true,
         "Enabling strict type safety checks disallows the following:\n" +
         "  Comparing bigints and strings/(var)chars.\n" +
-        "  Comparing bigints and doubles."),
+        "  Comparing bigints and doubles.\n" +
+        "  Comparing decimals and strings/(var)chars."),
     HIVE_STRICT_CHECKS_CARTESIAN("hive.strict.checks.cartesian.product", false,
         "Enabling strict Cartesian join checks disallows the following:\n" +
         "  Cartesian product (cross join)."),
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java b/ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java
index 10dc5bd5cc41..29c61b928968 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/parse/type/TypeCheckProcFactory.java
@@ -28,10 +28,8 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Stack;
 
-import com.google.common.collect.Sets;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hive.conf.HiveConf;
@@ -39,7 +37,6 @@
 import org.apache.hadoop.hive.ql.ErrorMsg;
 import org.apache.hadoop.hive.ql.exec.ColumnInfo;
 import org.apache.hadoop.hive.ql.exec.FunctionInfo;
-import org.apache.hadoop.hive.ql.exec.FunctionRegistry;
 import org.apache.hadoop.hive.ql.exec.UDFArgumentException;
 import org.apache.hadoop.hive.ql.exec.UDFArgumentLengthException;
 import org.apache.hadoop.hive.ql.exec.UDFArgumentTypeException;
@@ -64,14 +61,11 @@
 import org.apache.hadoop.hive.ql.plan.SubqueryType;
 import org.apache.hadoop.hive.ql.session.SessionState;
 import org.apache.hadoop.hive.ql.session.SessionState.LogHelper;
-import org.apache.hadoop.hive.ql.udf.SettableUDF;
 import org.apache.hadoop.hive.serde.serdeConstants;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector.Category;
 import org.apache.hadoop.hive.serde2.objectinspector.PrimitiveObjectInspector;
 import org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.CharTypeInfo;
-import org.apache.hadoop.hive.serde2.typeinfo.DecimalTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.ListTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.MapTypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.PrimitiveTypeInfo;
@@ -80,7 +74,6 @@
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfo;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
 import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoUtils;
-import org.apache.hadoop.hive.serde2.typeinfo.VarcharTypeInfo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -105,7 +98,7 @@
   static final HashMap<Integer, String> SPECIAL_UNARY_OPERATOR_TEXT_MAP;
   static final HashMap<Integer, String> CONVERSION_FUNCTION_TEXT_MAP;
   static final HashSet<Integer> WINDOWING_TOKENS;
-
+  
   static {
     SPECIAL_UNARY_OPERATOR_TEXT_MAP = new HashMap<>();
     SPECIAL_UNARY_OPERATOR_TEXT_MAP.put(HiveParser.PLUS, "positive");
@@ -788,20 +781,6 @@ public T createConversionCast(T column, PrimitiveTypeInfo tableFieldTypeInfo)
       return getDefaultExprProcessor().getFuncExprNodeDescWithUdfData(baseType, tableFieldTypeInfo, column);
     }
 
-    private boolean unSafeCompareWithBigInt(TypeInfo otherTypeInfo, TypeInfo bigintCandidate) {
-      Set<PrimitiveObjectInspector.PrimitiveCategory> unsafeConventionTyps = Sets.newHashSet(
-          PrimitiveObjectInspector.PrimitiveCategory.STRING,
-          PrimitiveObjectInspector.PrimitiveCategory.VARCHAR,
-          PrimitiveObjectInspector.PrimitiveCategory.CHAR);
-
-      if (bigintCandidate.equals(TypeInfoFactory.longTypeInfo) && otherTypeInfo instanceof PrimitiveTypeInfo) {
-        PrimitiveObjectInspector.PrimitiveCategory pCategory =
-            ((PrimitiveTypeInfo)otherTypeInfo).getPrimitiveCategory();
-        return unsafeConventionTyps.contains(pCategory);
-      }
-      return false;
-    }
-
     protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, FunctionInfo fi,
         List<T> children) throws SemanticException {
       // Check if a bigint is implicitely cast to a double as part of a comparison
@@ -815,21 +794,14 @@ protected void validateUDF(ASTNode expr, boolean isFunction, TypeCheckCtx ctx, F
 
         LogHelper console = new LogHelper(LOG);
 
-        // For now, if a bigint is going to be cast to a double throw an error or warning
-        if (unSafeCompareWithBigInt(oiTypeInfo0, oiTypeInfo1) || unSafeCompareWithBigInt(oiTypeInfo1, oiTypeInfo0)) {
+        if (TypeInfoUtils.isConversionLossy(oiTypeInfo0, oiTypeInfo1)) {
           String error = StrictChecks.checkTypeSafety(conf);
           if (error != null) {
             throw new UDFArgumentException(error);
           }
-          // To  make the error output be consistency, get the other side type name that comparing with biginit.
-          String type = oiTypeInfo0.getTypeName();
-          if (!oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) {
-            type = oiTypeInfo1.getTypeName();
-          }
-          console.printError("WARNING: Comparing a bigint and a " + type + " may result in a loss of precision.");
-        } else if ((oiTypeInfo0.equals(TypeInfoFactory.doubleTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.longTypeInfo)) ||
-            (oiTypeInfo0.equals(TypeInfoFactory.longTypeInfo) && oiTypeInfo1.equals(TypeInfoFactory.doubleTypeInfo))) {
-          console.printError("WARNING: Comparing a bigint and a double may result in a loss of precision.");
+          String tName0 = oiTypeInfo0.getTypeName();
+          String tName1 = oiTypeInfo1.getTypeName();
+          console.printError("WARNING: Comparing " + tName0 + " and " + tName1 + " may result in loss of information.");
         }
       }
 
diff --git a/ql/src/test/org/apache/hadoop/hive/ql/parse/type/TestDecimalStringValidation.java b/ql/src/test/org/apache/hadoop/hive/ql/parse/type/TestDecimalStringValidation.java
new file mode 100644
index 000000000000..0d295ad64be1
--- /dev/null
+++ b/ql/src/test/org/apache/hadoop/hive/ql/parse/type/TestDecimalStringValidation.java
@@ -0,0 +1,127 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.hive.ql.parse.type;
+
+import org.apache.hadoop.hive.conf.HiveConf;
+import org.apache.hadoop.hive.ql.exec.FunctionInfo;
+import org.apache.hadoop.hive.ql.exec.FunctionRegistry;
+import org.apache.hadoop.hive.ql.parse.SemanticException;
+import org.apache.hadoop.hive.ql.plan.ExprNodeColumnDesc;
+import org.apache.hadoop.hive.ql.plan.ExprNodeConstantDesc;
+import org.apache.hadoop.hive.ql.plan.ExprNodeDesc;
+import org.apache.hadoop.hive.ql.session.SessionState;
+import org.apache.hadoop.hive.serde2.typeinfo.TypeInfoFactory;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+
+/**
+ * Test strict type checks for comparison operations between decimal and strings. 
+ *
+ * {@link org.apache.hadoop.hive.conf.HiveConf.ConfVars#HIVE_STRICT_CHECKS_TYPE_SAFETY}
+ */
+@RunWith(Parameterized.class)
+public class TestDecimalStringValidation {
+
+  private static class FunctionCall {
+    private final ExprNodeDesc expL;
+    private final ExprNodeDesc expR;
+    private final FunctionInfo function;
+
+    public FunctionCall(ExprNodeDesc expL, ExprNodeDesc expR, FunctionInfo function) {
+      this.expL = expL;
+      this.expR = expR;
+      this.function = function;
+    }
+
+    @Override
+    public String toString() {
+      return function.getDisplayName() + "(" + expL + "," + expR + ")";
+    }
+  }
+
+  private final FunctionCall call;
+
+  public TestDecimalStringValidation(FunctionCall call) {
+    this.call = call;
+  }
+
+  @Parameterized.Parameters(name = "{index}: {0}")
+  public static Collection<FunctionCall> params() throws Exception {
+    ExprNodeDesc[] characterExps = new ExprNodeDesc[] { 
+            new ExprNodeColumnDesc(TypeInfoFactory.varcharTypeInfo, "varchar_col", null, false),
+            new ExprNodeColumnDesc(TypeInfoFactory.charTypeInfo, "char_col", null, false),
+            new ExprNodeColumnDesc(TypeInfoFactory.stringTypeInfo, "string_col", null, false),
+            new ExprNodeConstantDesc(TypeInfoFactory.varcharTypeInfo, "123.3"),
+            new ExprNodeConstantDesc(TypeInfoFactory.charTypeInfo, "123.3"),
+            new ExprNodeConstantDesc(TypeInfoFactory.stringTypeInfo, "123.3"), };
+    ExprNodeDesc[] numericExps = new ExprNodeDesc[] { 
+            new ExprNodeColumnDesc(TypeInfoFactory.decimalTypeInfo, "decimal_col", null, false),
+            new ExprNodeConstantDesc(TypeInfoFactory.decimalTypeInfo, 123.3), };
+    FunctionInfo[] functions = new FunctionInfo[] { 
+            FunctionRegistry.getFunctionInfo("="),
+            FunctionRegistry.getFunctionInfo("<"),
+            FunctionRegistry.getFunctionInfo(">"),
+            FunctionRegistry.getFunctionInfo("<>"),
+            FunctionRegistry.getFunctionInfo("<="),
+            FunctionRegistry.getFunctionInfo(">="),
+            FunctionRegistry.getFunctionInfo("<=>") };
+    Collection<FunctionCall> input = new ArrayList<>();
+    for (ExprNodeDesc chrExp : characterExps) {
+      for (ExprNodeDesc numExp : numericExps) {
+        for (FunctionInfo function : functions) {
+          input.add(new FunctionCall(chrExp, numExp, function));
+          input.add(new FunctionCall(numExp, chrExp, function));
+        }
+      }
+    }
+    return input;
+  }
+
+  @Test
+  public void testValidationDecimalWithCharacterFailsWhenStrictChecksEnabled() {
+    HiveConf conf = new HiveConf();
+    conf.setBoolVar(HiveConf.ConfVars.HIVE_STRICT_CHECKS_TYPE_SAFETY, true);
+    try {
+      validateCall(conf);
+      Assert.fail("Validation of " + call + " should fail");
+    } catch (Exception e) {
+      Assert.assertEquals(HiveConf.StrictChecks.checkTypeSafety(conf), e.getMessage());
+    }
+  }
+
+  @Test
+  public void testValidationDecimalWithCharacterSucceedsWhenStrictChecksDisabled() throws SemanticException {
+    HiveConf conf = new HiveConf();
+    conf.setBoolVar(HiveConf.ConfVars.HIVE_STRICT_CHECKS_TYPE_SAFETY, false);
+    validateCall(conf);
+  }
+
+  private void validateCall(HiveConf conf) throws SemanticException {
+    SessionState.start(conf);
+    TypeCheckCtx ctx = new TypeCheckCtx(null);
+    ExprNodeTypeCheck.getExprNodeDefaultExprProcessor()
+        .validateUDF(null, false, ctx, call.function, Arrays.asList(call.expL, call.expR));
+  }
+
+}
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_char_00.q b/ql/src/test/queries/clientnegative/strict_type_decimal_char_00.q
new file mode 100644
index 000000000000..aeeffdb3fda6
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_char_00.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table chrtbl (charcol char(5));
+select * from chrtbl where charcol = 123.2;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_char_01.q b/ql/src/test/queries/clientnegative/strict_type_decimal_char_01.q
new file mode 100644
index 000000000000..17c5f03ec3d3
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_char_01.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (chrcol char(5), deccol decimal(4,1));
+select * from tbl where deccol = chrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_string_00.q b/ql/src/test/queries/clientnegative/strict_type_decimal_string_00.q
new file mode 100644
index 000000000000..32a6f707ab80
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_string_00.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table strtbl (strcol string);
+select * from strtbl where strcol = 123.3;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_string_01.q b/ql/src/test/queries/clientnegative/strict_type_decimal_string_01.q
new file mode 100644
index 000000000000..ae89d1fea6f8
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_string_01.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table dectbl (deccol decimal(4,1));
+select * from dectbl where deccol = '123.3';
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_string_02.q b/ql/src/test/queries/clientnegative/strict_type_decimal_string_02.q
new file mode 100644
index 000000000000..f9153886c6f9
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_string_02.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (strcol string, deccol decimal(4,1));
+select * from tbl where deccol = strcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_00.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_00.q
new file mode 100644
index 000000000000..c7952c4394ff
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_00.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table chrtbl (varcharcol varchar(5));
+select * from chrtbl where varcharcol = 123.2;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_01.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_01.q
new file mode 100644
index 000000000000..50d61fc82ae0
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_01.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol = varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_02.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_02.q
new file mode 100644
index 000000000000..63feae64874d
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_02.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol < varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_03.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_03.q
new file mode 100644
index 000000000000..e25cc568795b
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_03.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol > varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_04.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_04.q
new file mode 100644
index 000000000000..8ae993154ad8
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_04.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol >= varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_05.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_05.q
new file mode 100644
index 000000000000..b90f0a935b52
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_05.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol <= varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_06.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_06.q
new file mode 100644
index 000000000000..5ef1846715c7
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_06.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol <> varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_07.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_07.q
new file mode 100644
index 000000000000..f37c27a38597
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_07.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol is distinct from varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_08.q b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_08.q
new file mode 100644
index 000000000000..a9c8d35a3d03
--- /dev/null
+++ b/ql/src/test/queries/clientnegative/strict_type_decimal_varchar_08.q
@@ -0,0 +1,3 @@
+set hive.strict.checks.type.safety=true;
+create table tbl (varchrcol varchar(5), deccol decimal(4,1));
+select * from tbl where deccol is not distinct from varchrcol;
\ No newline at end of file
diff --git a/ql/src/test/queries/clientpositive/compare_double_bigint_2.q b/ql/src/test/queries/clientpositive/compare_double_bigint_2.q
index eb4db30e2274..e960ec7affb1 100644
--- a/ql/src/test/queries/clientpositive/compare_double_bigint_2.q
+++ b/ql/src/test/queries/clientpositive/compare_double_bigint_2.q
@@ -2,7 +2,7 @@
 set hive.strict.checks.bucketing=false;
 
 reset hive.mapred.mode;
-set hive.strict.checks.type.safety=true;
+set hive.strict.checks.type.safety=false;
 
 -- This should fail until we fix the issue with precision when casting a bigint to a double
 
diff --git a/ql/src/test/queries/clientpositive/dec_str.q b/ql/src/test/queries/clientpositive/dec_str.q
index 6862553efad2..b5e82e121490 100644
--- a/ql/src/test/queries/clientpositive/dec_str.q
+++ b/ql/src/test/queries/clientpositive/dec_str.q
@@ -1,3 +1,4 @@
+set hive.strict.checks.type.safety=false;
 create table t1 (a decimal (3,1));
 explain select * from t1 where a = '22.3';
 explain select * from t1 where a = '2.3';
diff --git a/ql/src/test/queries/clientpositive/ops_comparison.q b/ql/src/test/queries/clientpositive/ops_comparison.q
index 76b7ee0b275e..c41ea780134f 100644
--- a/ql/src/test/queries/clientpositive/ops_comparison.q
+++ b/ql/src/test/queries/clientpositive/ops_comparison.q
@@ -1,5 +1,6 @@
 --! qt:dataset:src
 set hive.fetch.task.conversion=more;
+set hive.strict.checks.type.safety=false;
 
 select 1.0 < 2.0 from src limit 1;
 select 2.0 < 2.0 from src limit 1;
diff --git a/ql/src/test/queries/clientpositive/orc_ppd_decimal.q b/ql/src/test/queries/clientpositive/orc_ppd_decimal.q
index d4affbb77962..d9b82c99f9da 100644
--- a/ql/src/test/queries/clientpositive/orc_ppd_decimal.q
+++ b/ql/src/test/queries/clientpositive/orc_ppd_decimal.q
@@ -4,6 +4,7 @@ SET hive.vectorized.execution.enabled=false;
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
+SET hive.strict.checks.type.safety=false;
 
 create table newtypesorc_n5(c char(10), v varchar(10), d decimal(5,3), da date) stored as orc tblproperties("orc.stripe.size"="16777216"); 
 
diff --git a/ql/src/test/queries/clientpositive/parquet_ppd_decimal.q b/ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
index 9593297ccdff..f2bb84799e73 100644
--- a/ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
+++ b/ql/src/test/queries/clientpositive/parquet_ppd_decimal.q
@@ -7,6 +7,7 @@ SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
 SET mapred.max.split.size=5000;
 set hive.llap.cache.allow.synthetic.fileid=true;
+set hive.strict.checks.type.safety=false;
 
 create table newtypestbl_n5(c char(10), v varchar(10), d decimal(5,3), da date) stored as parquet;
 
diff --git a/ql/src/test/queries/clientpositive/sketches_materialized_view_ntile.q b/ql/src/test/queries/clientpositive/sketches_materialized_view_ntile.q
index aaecce6da0fe..66d3780c47d6 100644
--- a/ql/src/test/queries/clientpositive/sketches_materialized_view_ntile.q
+++ b/ql/src/test/queries/clientpositive/sketches_materialized_view_ntile.q
@@ -1,5 +1,6 @@
 --! qt:transactional
 set hive.fetch.task.conversion=none;
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/sketches_materialized_view_rank.q b/ql/src/test/queries/clientpositive/sketches_materialized_view_rank.q
index 1f7543086d4d..876d83e487fd 100644
--- a/ql/src/test/queries/clientpositive/sketches_materialized_view_rank.q
+++ b/ql/src/test/queries/clientpositive/sketches_materialized_view_rank.q
@@ -1,5 +1,6 @@
 --! qt:transactional
 set hive.fetch.task.conversion=none;
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/sketches_rewrite_ntile.q b/ql/src/test/queries/clientpositive/sketches_rewrite_ntile.q
index 4ac9a7ebc1c1..1711b873e346 100644
--- a/ql/src/test/queries/clientpositive/sketches_rewrite_ntile.q
+++ b/ql/src/test/queries/clientpositive/sketches_rewrite_ntile.q
@@ -1,4 +1,5 @@
 --! qt:transactional
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/sketches_rewrite_ntile_partition_by.q b/ql/src/test/queries/clientpositive/sketches_rewrite_ntile_partition_by.q
index d9a5811320db..2714b16df8dc 100644
--- a/ql/src/test/queries/clientpositive/sketches_rewrite_ntile_partition_by.q
+++ b/ql/src/test/queries/clientpositive/sketches_rewrite_ntile_partition_by.q
@@ -1,4 +1,5 @@
 --! qt:transactional
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/sketches_rewrite_rank.q b/ql/src/test/queries/clientpositive/sketches_rewrite_rank.q
index cc5a068a7b89..65bb8579dc5a 100644
--- a/ql/src/test/queries/clientpositive/sketches_rewrite_rank.q
+++ b/ql/src/test/queries/clientpositive/sketches_rewrite_rank.q
@@ -1,5 +1,5 @@
 --! qt:transactional
-
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/sketches_rewrite_rank_partition_by.q b/ql/src/test/queries/clientpositive/sketches_rewrite_rank_partition_by.q
index e4dcd42d3e54..a6f5ccf64774 100644
--- a/ql/src/test/queries/clientpositive/sketches_rewrite_rank_partition_by.q
+++ b/ql/src/test/queries/clientpositive/sketches_rewrite_rank_partition_by.q
@@ -1,4 +1,5 @@
 --! qt:transactional
+set hive.strict.checks.type.safety=false;
 
 create table sketch_input (id int, category char(1))
 STORED AS ORC
diff --git a/ql/src/test/queries/clientpositive/vectorization_parquet_ppd_decimal.q b/ql/src/test/queries/clientpositive/vectorization_parquet_ppd_decimal.q
index 4e1fcf034741..efd2a6a64667 100644
--- a/ql/src/test/queries/clientpositive/vectorization_parquet_ppd_decimal.q
+++ b/ql/src/test/queries/clientpositive/vectorization_parquet_ppd_decimal.q
@@ -2,6 +2,7 @@
 --! qt:dataset:src
 set hive.vectorized.execution.enabled=true;
 set hive.test.vectorized.execution.enabled.override=enable;
+set hive.strict.checks.type.safety=false;
 
 SET hive.input.format=org.apache.hadoop.hive.ql.io.HiveInputFormat;
 SET mapred.min.split.size=1000;
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_char_00.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_char_00.q.out
new file mode 100644
index 000000000000..30feba28b656
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_char_00.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table chrtbl (charcol char(5))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@chrtbl
+POSTHOOK: query: create table chrtbl (charcol char(5))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@chrtbl
+FAILED: SemanticException [Error 10014]: Line 2:27 Wrong arguments '123.2': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_char_01.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_char_01.q.out
new file mode 100644
index 000000000000..52c800c14ba1
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_char_01.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (chrcol char(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (chrcol char(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'chrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_string_00.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_string_00.q.out
new file mode 100644
index 000000000000..cd5e81196c89
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_string_00.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table strtbl (strcol string)
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@strtbl
+POSTHOOK: query: create table strtbl (strcol string)
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@strtbl
+FAILED: SemanticException [Error 10014]: Line 2:27 Wrong arguments '123.3': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_string_01.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_string_01.q.out
new file mode 100644
index 000000000000..053ac9b4c606
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_string_01.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table dectbl (deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@dectbl
+POSTHOOK: query: create table dectbl (deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@dectbl
+FAILED: SemanticException [Error 10014]: Line 2:27 Wrong arguments ''123.3'': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_string_02.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_string_02.q.out
new file mode 100644
index 000000000000..205c965d3401
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_string_02.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (strcol string, deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (strcol string, deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'strcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_00.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_00.q.out
new file mode 100644
index 000000000000..7e38d1ceee02
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_00.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table chrtbl (varcharcol varchar(5))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@chrtbl
+POSTHOOK: query: create table chrtbl (varcharcol varchar(5))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@chrtbl
+FAILED: SemanticException [Error 10014]: Line 2:27 Wrong arguments '123.2': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_01.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_01.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_01.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_02.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_02.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_02.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_03.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_03.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_03.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_04.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_04.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_04.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_05.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_05.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_05.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_06.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_06.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_06.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_07.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_07.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_07.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientnegative/strict_type_decimal_varchar_08.q.out b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_08.q.out
new file mode 100644
index 000000000000..817b3de6e946
--- /dev/null
+++ b/ql/src/test/results/clientnegative/strict_type_decimal_varchar_08.q.out
@@ -0,0 +1,9 @@
+PREHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@tbl
+POSTHOOK: query: create table tbl (varchrcol varchar(5), deccol decimal(4,1))
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@tbl
+FAILED: SemanticException [Error 10014]: Line 2:24 Wrong arguments 'varchrcol': Unsafe compares between different types are disabled for safety reasons. If you know what you are doing, please set hive.strict.checks.type.safety to false and make sure that hive.mapred.mode is not set to 'strict' to proceed. Note that you may get errors or incorrect results if you make a mistake while using some of the unsafe features.
diff --git a/ql/src/test/results/clientpositive/llap/avrotblsjoin.q.out b/ql/src/test/results/clientpositive/llap/avrotblsjoin.q.out
index 7b681d413523..549571a84771 100644
--- a/ql/src/test/results/clientpositive/llap/avrotblsjoin.q.out
+++ b/ql/src/test/results/clientpositive/llap/avrotblsjoin.q.out
@@ -71,9 +71,9 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@table1_1
 POSTHOOK: Lineage: table1_1.col1 SCRIPT []
 POSTHOOK: Lineage: table1_1.col2 SCRIPT []
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing string and bigint may result in loss of information.
+WARNING: Comparing string and bigint may result in loss of information.
+WARNING: Comparing bigint and string may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[13][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select table1_n1.col1, table1_1.* from table1_n1 join table1_1 on table1_n1.col1=table1_1.col1 where table1_1.col1="1"
 PREHOOK: type: QUERY
diff --git a/ql/src/test/results/clientpositive/llap/compare_double_bigint_2.q.out b/ql/src/test/results/clientpositive/llap/compare_double_bigint_2.q.out
index 16a8079cf387..346dba451901 100644
--- a/ql/src/test/results/clientpositive/llap/compare_double_bigint_2.q.out
+++ b/ql/src/test/results/clientpositive/llap/compare_double_bigint_2.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: select * from src where cast(1 as bigint) = cast(1.0 as double) limit 10
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
diff --git a/ql/src/test/results/clientpositive/llap/correlationoptimizer8.q.out b/ql/src/test/results/clientpositive/llap/correlationoptimizer8.q.out
index 00be554163ff..19d1940ac327 100644
--- a/ql/src/test/results/clientpositive/llap/correlationoptimizer8.q.out
+++ b/ql/src/test/results/clientpositive/llap/correlationoptimizer8.q.out
@@ -1031,8 +1031,8 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing string and bigint may result in loss of information.
+WARNING: Comparing string and bigint may result in loss of information.
 PREHOOK: query: EXPLAIN
 SELECT subq1.key, subq1.value, x.key, x.value
 FROM 
diff --git a/ql/src/test/results/clientpositive/llap/dec_str.q.out b/ql/src/test/results/clientpositive/llap/dec_str.q.out
index b0b441e45df4..875aa3c48c3c 100644
--- a/ql/src/test/results/clientpositive/llap/dec_str.q.out
+++ b/ql/src/test/results/clientpositive/llap/dec_str.q.out
@@ -6,6 +6,7 @@ POSTHOOK: query: create table t1 (a decimal (3,1))
 POSTHOOK: type: CREATETABLE
 POSTHOOK: Output: database:default
 POSTHOOK: Output: default@t1
+WARNING: Comparing decimal(3,1) and string may result in loss of information.
 PREHOOK: query: explain select * from t1 where a = '22.3'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
@@ -32,6 +33,7 @@ STAGE PLANS:
               outputColumnNames: _col0
               ListSink
 
+WARNING: Comparing decimal(3,1) and string may result in loss of information.
 PREHOOK: query: explain select * from t1 where a = '2.3'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
@@ -58,6 +60,7 @@ STAGE PLANS:
               outputColumnNames: _col0
               ListSink
 
+WARNING: Comparing decimal(3,1) and string may result in loss of information.
 PREHOOK: query: explain select * from t1 where a = '213.223'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
@@ -84,6 +87,7 @@ STAGE PLANS:
               outputColumnNames: _col0
               ListSink
 
+WARNING: Comparing decimal(3,1) and string may result in loss of information.
 PREHOOK: query: explain select * from t1 where a = ''
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
@@ -102,6 +106,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
+WARNING: Comparing decimal(3,1) and string may result in loss of information.
 PREHOOK: query: explain select * from t1 where a = 'ab'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@t1
diff --git a/ql/src/test/results/clientpositive/llap/filter_join_breaktask2.q.out b/ql/src/test/results/clientpositive/llap/filter_join_breaktask2.q.out
index e3ff348f0c3a..4515df963162 100644
--- a/ql/src/test/results/clientpositive/llap/filter_join_breaktask2.q.out
+++ b/ql/src/test/results/clientpositive/llap/filter_join_breaktask2.q.out
@@ -230,8 +230,8 @@ POSTHOOK: Input: default@t4_n8
 POSTHOOK: Input: default@t4_n8@ds=2010-04-17
 #### A masked pattern was here ####
 4	1	1	8	4	5	1	0	9	U	2	2	0	2	1	1	J	C	A	U	2	s	2	NULL	NULL	NULL	NULL	NULL	NULL	1	j	S	6	NULL	1	2	J	g	1	e	2	1	2	U	P	p	3	0	0	0	1	1	1	0	0	0	6	2	j	NULL	NULL	NULL	NULL	NULL	NULL	5	NULL	NULL	j	2	2	1	2	2	1	1	1	1	1	1	1	1	32	NULL	2010-04-17
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing string and bigint may result in loss of information.
+WARNING: Comparing string and bigint may result in loss of information.
 PREHOOK: query: SELECT a.c1 as a_c1, b.c1 b_c1, d.c0 as d_c0
 FROM T1_n85 a JOIN T2_n53 b 
        ON (a.c1 = b.c1 AND a.ds='2010-04-17' AND b.ds='2010-04-17')
diff --git a/ql/src/test/results/clientpositive/llap/infer_bucket_sort_map_operators.q.out b/ql/src/test/results/clientpositive/llap/infer_bucket_sort_map_operators.q.out
index 80ea6c31edd5..1685fc9331a1 100644
--- a/ql/src/test/results/clientpositive/llap/infer_bucket_sort_map_operators.q.out
+++ b/ql/src/test/results/clientpositive/llap/infer_bucket_sort_map_operators.q.out
@@ -210,8 +210,8 @@ Bucket Columns:     	[]
 Sort Columns:       	[]                  	 
 Storage Desc Params:	 	 
 	serialization.format	1                   
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: EXPLAIN INSERT OVERWRITE TABLE test_table_out_n0 PARTITION (part = '1') 
 SELECT a.key, a.value FROM (
 	SELECT key, count(*) AS value FROM test_table1_n14 GROUP BY key
diff --git a/ql/src/test/results/clientpositive/llap/infer_const_type.q.out b/ql/src/test/results/clientpositive/llap/infer_const_type.q.out
index 4eeeb7d1b98c..80a86975b418 100644
--- a/ql/src/test/results/clientpositive/llap/infer_const_type.q.out
+++ b/ql/src/test/results/clientpositive/llap/infer_const_type.q.out
@@ -29,7 +29,7 @@ POSTHOOK: Input: default@infertypes
 127	32767	12345	-12345	906.0	-307.0	1234
 126	32767	12345	-12345	906.0	-307.0	1234
 126	32767	12345	-12345	906.0	-307.0	1.57
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: EXPLAIN SELECT * FROM infertypes WHERE
   ti  = '127' AND
   si  = 32767 AND
@@ -70,7 +70,7 @@ STAGE PLANS:
               outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
               ListSink
 
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: SELECT * FROM infertypes WHERE
   ti  = '127' AND
   si  = 32767 AND
@@ -94,7 +94,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@infertypes
 #### A masked pattern was here ####
 127	32767	12345	-12345	906.0	-307.0	1234
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: EXPLAIN SELECT * FROM infertypes WHERE
   ti  = '128' OR
   si  = 32768 OR
@@ -125,7 +125,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: SELECT * FROM infertypes WHERE
   ti  = '128' OR
   si  = 32768 OR
@@ -193,6 +193,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@infertypes
 #### A masked pattern was here ####
 127	32767	12345	-12345	906.0	-307.0	1234
+WARNING: Comparing string and decimal(3,2) may result in loss of information.
 PREHOOK: query: EXPLAIN SELECT * FROM infertypes WHERE
   ti < '127.0' AND
   i > '100.0' AND
@@ -225,6 +226,7 @@ STAGE PLANS:
               outputColumnNames: _col0, _col1, _col2, _col3, _col4, _col5, _col6
               ListSink
 
+WARNING: Comparing string and decimal(3,2) may result in loss of information.
 PREHOOK: query: SELECT * FROM infertypes WHERE
   ti < '127.0' AND
   i > '100.0' AND
diff --git a/ql/src/test/results/clientpositive/llap/join_literals.q.out b/ql/src/test/results/clientpositive/llap/join_literals.q.out
index e8f535bcc7d9..734e44190a6d 100644
--- a/ql/src/test/results/clientpositive/llap/join_literals.q.out
+++ b/ql/src/test/results/clientpositive/llap/join_literals.q.out
@@ -1,5 +1,5 @@
-WARNING: Comparing a bigint and a string may result in a loss of precision.
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing string and bigint may result in loss of information.
+WARNING: Comparing string and bigint may result in loss of information.
 PREHOOK: query: SELECT COUNT(*) FROM src a JOIN src b ON a.key = b.key AND a.key = 0L
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -27,6 +27,8 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 9
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: SELECT COUNT(*) FROM src a JOIN src b ON a.key = b.key AND a.key = 0BD
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
diff --git a/ql/src/test/results/clientpositive/llap/ops_comparison.q.out b/ql/src/test/results/clientpositive/llap/ops_comparison.q.out
index 2a03e737c7c6..f33b5fcb9c1f 100644
--- a/ql/src/test/results/clientpositive/llap/ops_comparison.q.out
+++ b/ql/src/test/results/clientpositive/llap/ops_comparison.q.out
@@ -34,6 +34,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' < 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -43,6 +44,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing decimal(1,0) and string may result in loss of information.
 PREHOOK: query: select 1.0 < 'NaN' from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -52,6 +54,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 true
+WARNING: Comparing decimal(1,0) and string may result in loss of information.
 PREHOOK: query: select 1.0 > 'NaN' from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -61,6 +64,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' > 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -88,6 +92,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' = 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -97,6 +102,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing decimal(1,0) and string may result in loss of information.
 PREHOOK: query: select 1.0 = 'NaN' from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -106,6 +112,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 false
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' = 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -124,6 +131,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 true
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' <> 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -133,6 +141,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 true
+WARNING: Comparing decimal(1,0) and string may result in loss of information.
 PREHOOK: query: select 1.0 <> 'NaN' from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
@@ -142,6 +151,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@src
 #### A masked pattern was here ####
 true
+WARNING: Comparing string and decimal(1,0) may result in loss of information.
 PREHOOK: query: select 'NaN' <> 2.0 from src limit 1
 PREHOOK: type: QUERY
 PREHOOK: Input: default@src
diff --git a/ql/src/test/results/clientpositive/llap/orc_ppd_decimal.q.out b/ql/src/test/results/clientpositive/llap/orc_ppd_decimal.q.out
index 95733c1c1435..2dfcc7b2d00d 100644
--- a/ql/src/test/results/clientpositive/llap/orc_ppd_decimal.q.out
+++ b/ql/src/test/results/clientpositive/llap/orc_ppd_decimal.q.out
@@ -36,6 +36,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 -252951929000
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -45,6 +46,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 -252951929000
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -90,6 +92,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 334427804500
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -99,6 +102,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 334427804500
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -144,6 +148,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 -252951929000
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -153,6 +158,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 -252951929000
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -216,6 +222,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 81475875500
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d<='11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
@@ -225,6 +232,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypesorc_n5
 #### A masked pattern was here ####
 81475875500
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select sum(hash(*)) from newtypesorc_n5 where d<='11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypesorc_n5
diff --git a/ql/src/test/results/clientpositive/llap/parquet_ppd_decimal.q.out b/ql/src/test/results/clientpositive/llap/parquet_ppd_decimal.q.out
index 132d22ed99b3..a91c0678e064 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_ppd_decimal.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_ppd_decimal.q.out
@@ -54,6 +54,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -72,6 +73,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -142,6 +144,7 @@ POSTHOOK: query: select * from newtypestbl_n5 where d!=0.22
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypestbl_n5
 #### A masked pattern was here ####
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -150,6 +153,7 @@ POSTHOOK: query: select * from newtypestbl_n5 where d!='0.22'
 POSTHOOK: type: QUERY
 POSTHOOK: Input: default@newtypestbl_n5
 #### A masked pattern was here ####
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -210,6 +214,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -228,6 +233,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -354,6 +360,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d<='11.22' sort by c
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
@@ -372,6 +379,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n5 where d<='11.22' sort by c
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n5
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_0.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_0.q.out
index cdaeec0e0474..191902193c1b 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_0.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_0.q.out
@@ -958,7 +958,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@alltypesparquet
 #### A masked pattern was here ####
 -4.303895780321011	1163.8972588605056	1163.8972588605056	1164.0241556397098	34.11593848717203	34.11593848717203	34.11593848717203	34.11779822379677
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
 SELECT AVG(cbigint),
        (-(AVG(cbigint))),
@@ -1137,7 +1137,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint),
        (-(AVG(cbigint))),
        (-6432 + AVG(cbigint)),
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_3.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_3.q.out
index f81172c0121d..df3f130fa795 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_3.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_3.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
 SELECT STDDEV_SAMP(csmallint),
        (STDDEV_SAMP(csmallint) - 10.175),
@@ -173,7 +173,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT STDDEV_SAMP(csmallint),
        (STDDEV_SAMP(csmallint) - 10.175),
        STDDEV_POP(ctinyint),
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_limit.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_limit.q.out
index ba6d81e2419a..f57f047be39a 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_limit.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_limit.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization SELECT cbigint, cdouble FROM alltypesparquet WHERE cbigint < cdouble AND cint > 0 ORDER BY cbigint, cdouble LIMIT 7
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
@@ -88,7 +88,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT cbigint, cdouble FROM alltypesparquet WHERE cbigint < cdouble AND cint > 0 ORDER BY cbigint, cdouble LIMIT 7
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_not.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_not.q.out
index e8fa9dd9b746..e7b889fd307b 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_not.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_not.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint),
        (-(AVG(cbigint))),
        (-6432 + AVG(cbigint)),
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_offset_limit.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_offset_limit.q.out
index 12417af42e8d..f81fd1775790 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_offset_limit.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_offset_limit.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization SELECT cbigint, cdouble FROM alltypesparquet WHERE cbigint < cdouble and cint > 0 limit 3,2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
@@ -62,7 +62,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT cbigint, cdouble FROM alltypesparquet WHERE cbigint < cdouble and cint > 0 limit 3,2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
diff --git a/ql/src/test/results/clientpositive/llap/parquet_vectorization_pushdown.q.out b/ql/src/test/results/clientpositive/llap/parquet_vectorization_pushdown.q.out
index 509d1386e0ec..0a8da45139c6 100644
--- a/ql/src/test/results/clientpositive/llap/parquet_vectorization_pushdown.q.out
+++ b/ql/src/test/results/clientpositive/llap/parquet_vectorization_pushdown.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization SELECT AVG(cbigint) FROM alltypesparquet WHERE cbigint < cdouble
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
@@ -90,7 +90,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint) FROM alltypesparquet WHERE cbigint < cdouble
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesparquet
diff --git a/ql/src/test/results/clientpositive/llap/partition_coltype_literals.q.out b/ql/src/test/results/clientpositive/llap/partition_coltype_literals.q.out
index 5023927b2ebf..bb8f1056df55 100644
--- a/ql/src/test/results/clientpositive/llap/partition_coltype_literals.q.out
+++ b/ql/src/test/results/clientpositive/llap/partition_coltype_literals.q.out
@@ -235,7 +235,7 @@ POSTHOOK: Input: default@partcoltypenum
 POSTHOOK: Input: default@partcoltypenum@tint=110/sint=22000/bint=330000000000
 #### A masked pattern was here ####
 30
-WARNING: Comparing a bigint and a string may result in a loss of precision.
+WARNING: Comparing bigint and string may result in loss of information.
 PREHOOK: query: select count(1) from partcoltypenum where tint=110Y and sint=22000 and bint='330000000000'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@partcoltypenum
diff --git a/ql/src/test/results/clientpositive/llap/partition_wise_fileformat2.q.out b/ql/src/test/results/clientpositive/llap/partition_wise_fileformat2.q.out
index 30331d21d3f5..39b5ad471698 100644
--- a/ql/src/test/results/clientpositive/llap/partition_wise_fileformat2.q.out
+++ b/ql/src/test/results/clientpositive/llap/partition_wise_fileformat2.q.out
@@ -123,31 +123,6 @@ POSTHOOK: Input: default@partition_test_partitioned@dt=102
 		100
 		100
 		100
-238	val_238	102
-		102
-311	val_311	102
-	val_27	102
-	val_165	102
-	val_409	102
-255	val_255	102
-278	val_278	102
-98	val_98	102
-	val_484	102
-	val_265	102
-	val_193	102
-401	val_401	102
-150	val_150	102
-273	val_273	102
-224		102
-369		102
-66	val_66	102
-128		102
-213	val_213	102
-146	val_146	102
-406	val_406	102
-		102
-		102
-		102
 238	val_238	101
 		101
 311	val_311	101
@@ -173,6 +148,31 @@ POSTHOOK: Input: default@partition_test_partitioned@dt=102
 		101
 		101
 		101
+238	val_238	102
+		102
+311	val_311	102
+	val_27	102
+	val_165	102
+	val_409	102
+255	val_255	102
+278	val_278	102
+98	val_98	102
+	val_484	102
+	val_265	102
+	val_193	102
+401	val_401	102
+150	val_150	102
+273	val_273	102
+224		102
+369		102
+66	val_66	102
+128		102
+213	val_213	102
+146	val_146	102
+406	val_406	102
+		102
+		102
+		102
 PREHOOK: query: explain select *, BLOCK__OFFSET__INSIDE__FILE from partition_test_partitioned where dt >=100 and dt <= 102
 PREHOOK: type: QUERY
 PREHOOK: Input: default@partition_test_partitioned
@@ -244,31 +244,6 @@ POSTHOOK: Input: default@partition_test_partitioned@dt=102
 		100
 		100
 		100
-238	val_238	102
-		102
-311	val_311	102
-	val_27	102
-	val_165	102
-	val_409	102
-255	val_255	102
-278	val_278	102
-98	val_98	102
-	val_484	102
-	val_265	102
-	val_193	102
-401	val_401	102
-150	val_150	102
-273	val_273	102
-224		102
-369		102
-66	val_66	102
-128		102
-213	val_213	102
-146	val_146	102
-406	val_406	102
-		102
-		102
-		102
 238	val_238	101
 		101
 311	val_311	101
@@ -294,3 +269,28 @@ POSTHOOK: Input: default@partition_test_partitioned@dt=102
 		101
 		101
 		101
+238	val_238	102
+		102
+311	val_311	102
+	val_27	102
+	val_165	102
+	val_409	102
+255	val_255	102
+278	val_278	102
+98	val_98	102
+	val_484	102
+	val_265	102
+	val_193	102
+401	val_401	102
+150	val_150	102
+273	val_273	102
+224		102
+369		102
+66	val_66	102
+128		102
+213	val_213	102
+146	val_146	102
+406	val_406	102
+		102
+		102
+		102
diff --git a/ql/src/test/results/clientpositive/llap/sketches_materialized_view_ntile.q.out b/ql/src/test/results/clientpositive/llap/sketches_materialized_view_ntile.q.out
index 75337486a174..f57e6d2bff03 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_materialized_view_ntile.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_materialized_view_ntile.q.out
@@ -36,7 +36,7 @@ POSTHOOK: type: CREATE_MATERIALIZED_VIEW
 POSTHOOK: Input: default@sketch_input
 POSTHOOK: Output: database:default
 POSTHOOK: Output: default@mv_1
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; mv matching', id, ntile(4) over (order by id) from sketch_input order by id
@@ -165,7 +165,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; mv matching', id, ntile(4) over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -338,7 +338,7 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@sketch_input
 POSTHOOK: Lineage: sketch_input.category SCRIPT []
 POSTHOOK: Lineage: sketch_input.id SCRIPT []
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; no mv matching', id, ntile(4) over (order by id) from sketch_input order by id
@@ -458,7 +458,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; no mv matching', id, ntile(4) over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -711,7 +711,7 @@ POSTHOOK: Input: default@sketch_input
 POSTHOOK: Output: default@mv_1
 POSTHOOK: Lineage: mv_1._c1 EXPRESSION [(sketch_input)sketch_input.FieldSchema(name:id, type:int, comment:null), (mv_1)default.mv_1.FieldSchema(name:_c1, type:binary, comment:null), ]
 POSTHOOK: Lineage: mv_1.category EXPRESSION [(sketch_input)sketch_input.FieldSchema(name:category, type:char(1), comment:null), (mv_1)default.mv_1.FieldSchema(name:category, type:char(1), comment:null), ]
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; mv matching', id, ntile(4) over (order by id) from sketch_input order by id
@@ -840,7 +840,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; mv matching', id, ntile(4) over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -896,7 +896,7 @@ rewrite; mv matching	14	4
 rewrite; mv matching	14	4
 rewrite; mv matching	15	4
 rewrite; mv matching	15	4
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain
 select 'rewrite; mv matching', category, id, ntile(4) over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
@@ -997,7 +997,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: select 'rewrite; mv matching', category, id, ntile(4) over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
 PREHOOK: Input: default@mv_1
diff --git a/ql/src/test/results/clientpositive/llap/sketches_materialized_view_rank.q.out b/ql/src/test/results/clientpositive/llap/sketches_materialized_view_rank.q.out
index 8080f3d39fdc..09f2e86c6ba6 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_materialized_view_rank.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_materialized_view_rank.q.out
@@ -36,7 +36,7 @@ POSTHOOK: type: CREATE_MATERIALIZED_VIEW
 POSTHOOK: Input: default@sketch_input
 POSTHOOK: Output: database:default
 POSTHOOK: Output: default@mv_1
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; mv matching', id, rank() over (order by id) from sketch_input order by id
@@ -165,7 +165,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; mv matching', id, rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -338,7 +338,7 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@sketch_input
 POSTHOOK: Lineage: sketch_input.category SCRIPT []
 POSTHOOK: Lineage: sketch_input.id SCRIPT []
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; no mv matching', id, rank() over (order by id) from sketch_input order by id
@@ -458,7 +458,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; no mv matching', id, rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -711,7 +711,7 @@ POSTHOOK: Input: default@sketch_input
 POSTHOOK: Output: default@mv_1
 POSTHOOK: Lineage: mv_1._c1 EXPRESSION [(sketch_input)sketch_input.FieldSchema(name:id, type:int, comment:null), (mv_1)default.mv_1.FieldSchema(name:_c1, type:binary, comment:null), ]
 POSTHOOK: Lineage: mv_1.category EXPRESSION [(sketch_input)sketch_input.FieldSchema(name:category, type:char(1), comment:null), (mv_1)default.mv_1.FieldSchema(name:category, type:char(1), comment:null), ]
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select 'rewrite; mv matching', id, rank() over (order by id) from sketch_input order by id
@@ -840,7 +840,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select 'rewrite; mv matching', id, rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -896,7 +896,7 @@ rewrite; mv matching	14	41
 rewrite; mv matching	14	41
 rewrite; mv matching	15	43
 rewrite; mv matching	15	43
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain
 select 'rewrite; mv matching', category, id, rank() over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
@@ -1001,7 +1001,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: select 'rewrite; mv matching', category, id, rank() over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
 PREHOOK: Input: default@mv_1
diff --git a/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile.q.out b/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile.q.out
index deee4fc3d3de..370423dd0f3a 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile.q.out
@@ -65,7 +65,7 @@ POSTHOOK: Input: default@sketch_input
 13	4	4
 14	4	4
 15	4	4
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
@@ -185,7 +185,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',ntile(4) over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -227,7 +227,7 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@sketch_input
 POSTHOOK: Lineage: sketch_input.category SCRIPT []
 POSTHOOK: Lineage: sketch_input.id EXPRESSION []
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
@@ -347,7 +347,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls first) from sketch_input order by id nulls first
 PREHOOK: type: QUERY
@@ -381,7 +381,7 @@ NULL	rewrite	1
 13	rewrite	4
 14	rewrite	4
 15	rewrite	4
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
@@ -501,7 +501,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',ntile(4) over (order by id nulls last) from sketch_input order by id nulls last
 PREHOOK: type: QUERY
@@ -535,7 +535,7 @@ POSTHOOK: Input: default@sketch_input
 15	rewrite	4
 NULL	rewrite	4
 NULL	rewrite	4
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[16][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,ntile(4) over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
diff --git a/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile_partition_by.q.out b/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile_partition_by.q.out
index bea93d59055d..6780741f997a 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile_partition_by.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_rewrite_ntile_partition_by.q.out
@@ -100,7 +100,7 @@ POSTHOOK: Input: default@sketch_input
 13	b	3	3
 14	b	4	4
 15	b	4	4
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain
 select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
@@ -220,7 +220,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: select id,'rewrite',ntile(4) over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
 PREHOOK: Input: default@sketch_input
diff --git a/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank.q.out b/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank.q.out
index d332f6a2449c..ca38cfb02a7e 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank.q.out
@@ -65,7 +65,7 @@ POSTHOOK: Input: default@sketch_input
 13	20	20
 14	21	21
 15	22	22
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',rank() over (order by id) from sketch_input order by id
@@ -185,7 +185,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -217,7 +217,7 @@ POSTHOOK: Input: default@sketch_input
 13	rewrite	20
 14	rewrite	21
 15	rewrite	22
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[21][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',count(id) over ()*rank() over (order by id) from sketch_input order by id
@@ -372,7 +372,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[21][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',count(id) over ()*rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
@@ -414,7 +414,7 @@ POSTHOOK: Input: _dummy_database@_dummy_table
 POSTHOOK: Output: default@sketch_input
 POSTHOOK: Lineage: sketch_input.category SCRIPT []
 POSTHOOK: Lineage: sketch_input.id EXPRESSION []
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',rank() over (order by id nulls first) from sketch_input order by id nulls first
@@ -534,7 +534,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',rank() over (order by id nulls first) from sketch_input order by id nulls first
 PREHOOK: type: QUERY
@@ -568,7 +568,7 @@ NULL	rewrite	1
 13	rewrite	20
 14	rewrite	21
 15	rewrite	22
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: explain
 select id,'rewrite',rank() over (order by id nulls last) from sketch_input order by id nulls last
@@ -688,7 +688,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[17][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,'rewrite',rank() over (order by id nulls last) from sketch_input order by id nulls last
 PREHOOK: type: QUERY
@@ -722,7 +722,7 @@ POSTHOOK: Input: default@sketch_input
 15	rewrite	22
 NULL	rewrite	22
 NULL	rewrite	22
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 Warning: Shuffle Join MERGEJOIN[16][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
 PREHOOK: query: select id,rank() over (order by id) from sketch_input order by id
 PREHOOK: type: QUERY
diff --git a/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank_partition_by.q.out b/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank_partition_by.q.out
index 21260a15deb8..9e2b4a0ec1fd 100644
--- a/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank_partition_by.q.out
+++ b/ql/src/test/results/clientpositive/llap/sketches_rewrite_rank_partition_by.q.out
@@ -66,7 +66,7 @@ POSTHOOK: Input: default@sketch_input
 13	b	9	9
 14	b	10	10
 15	b	11	11
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain
 select id,'rewrite',rank() over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
@@ -190,7 +190,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: select id,'rewrite',rank() over (partition by category order by id) from sketch_input order by category,id
 PREHOOK: type: QUERY
 PREHOOK: Input: default@sketch_input
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_0.q.out b/ql/src/test/results/clientpositive/llap/vectorization_0.q.out
index 8b2af15ab2dd..93891933ed8f 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_0.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_0.q.out
@@ -1003,7 +1003,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@alltypesorc
 #### A masked pattern was here ####
 -4.303895780321011	1163.8972588605056	1163.8972588605056	1164.0241556397098	34.11593848717203	34.11593848717203	34.11593848717203	34.11779822379677
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
 SELECT AVG(cbigint),
        (-(AVG(cbigint))),
@@ -1197,7 +1197,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint),
        (-(AVG(cbigint))),
        (-6432 + AVG(cbigint)),
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_3.q.out b/ql/src/test/results/clientpositive/llap/vectorization_3.q.out
index a5d3e0929198..e82246ca4679 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_3.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_3.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION DETAIL
 SELECT STDDEV_SAMP(csmallint),
        (STDDEV_SAMP(csmallint) - 10.175),
@@ -188,7 +188,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT STDDEV_SAMP(csmallint),
        (STDDEV_SAMP(csmallint) - 10.175),
        STDDEV_POP(ctinyint),
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_limit.q.out b/ql/src/test/results/clientpositive/llap/vectorization_limit.q.out
index 8070172b1137..714e85aeb67e 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_limit.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_limit.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization
 SELECT cbigint, cdouble FROM alltypesorc WHERE cbigint < cdouble and cint > 0 order by cbigint, cdouble limit 7
 PREHOOK: type: QUERY
@@ -90,7 +90,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT cbigint, cdouble FROM alltypesorc WHERE cbigint < cdouble and cint > 0 order by cbigint, cdouble limit 7
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesorc
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_not.q.out b/ql/src/test/results/clientpositive/llap/vectorization_not.q.out
index 6dec19ce78b2..54970ddc7009 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_not.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_not.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint),
        (-(AVG(cbigint))),
        (-6432 + AVG(cbigint)),
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_offset_limit.q.out b/ql/src/test/results/clientpositive/llap/vectorization_offset_limit.q.out
index e71b99ddf89f..b0fa0acf3e25 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_offset_limit.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_offset_limit.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization SELECT cbigint, cdouble FROM alltypesorc WHERE cbigint < cdouble and cint > 0 limit 3,2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesorc
@@ -62,7 +62,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT cbigint, cdouble FROM alltypesorc WHERE cbigint < cdouble and cint > 0 limit 3,2
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesorc
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_parquet_ppd_decimal.q.out b/ql/src/test/results/clientpositive/llap/vectorization_parquet_ppd_decimal.q.out
index 2de0a0e7a750..37b12afa5fbd 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_parquet_ppd_decimal.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_parquet_ppd_decimal.q.out
@@ -54,6 +54,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -67,6 +68,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -132,6 +134,7 @@ hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -145,6 +148,7 @@ hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d!='0.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -210,6 +214,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -223,6 +228,7 @@ apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
 apple     	bee	0.220	1970-02-20
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d<'11.22'
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -324,6 +330,7 @@ hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d<='11.22' sort by c
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
@@ -342,6 +349,7 @@ hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
 hello     	world	11.220	1970-02-27
+WARNING: Comparing decimal(5,3) and string may result in loss of information.
 PREHOOK: query: select * from newtypestbl_n1 where d<='11.22' sort by c
 PREHOOK: type: QUERY
 PREHOOK: Input: default@newtypestbl_n1
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_pushdown.q.out b/ql/src/test/results/clientpositive/llap/vectorization_pushdown.q.out
index 0c1429b9df3a..13938191274e 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_pushdown.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_pushdown.q.out
@@ -1,4 +1,4 @@
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: explain vectorization SELECT AVG(cbigint) FROM alltypesorc WHERE cbigint < cdouble
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesorc
@@ -90,7 +90,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(cbigint) FROM alltypesorc WHERE cbigint < cdouble
 PREHOOK: type: QUERY
 PREHOOK: Input: default@alltypesorc
diff --git a/ql/src/test/results/clientpositive/llap/vectorization_short_regress.q.out b/ql/src/test/results/clientpositive/llap/vectorization_short_regress.q.out
index 3d32be9a363d..26af15e55a34 100644
--- a/ql/src/test/results/clientpositive/llap/vectorization_short_regress.q.out
+++ b/ql/src/test/results/clientpositive/llap/vectorization_short_regress.q.out
@@ -795,7 +795,7 @@ POSTHOOK: type: QUERY
 POSTHOOK: Input: default@alltypesorc
 #### A masked pattern was here ####
 2.5109214708344376E18	-2.5109214708344376E18	5.0218429416688753E18	2780	75.198	62	2.5109214708344402E18	2.5109214708344376E18	-1.0	2780	-2780	9460.675803068356	-2.5109214708344376E18	-2118360	1072872630	-2118298	-2.5109214697615652E18	185935.34910862715	0	758	-1.733509234828496	-3728
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
 SELECT AVG(ctinyint),
        (AVG(ctinyint) + 6981),
@@ -966,7 +966,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing bigint and double may result in loss of information.
 PREHOOK: query: SELECT AVG(ctinyint),
        (AVG(ctinyint) + 6981),
        ((AVG(ctinyint) + 6981) + AVG(ctinyint)),
@@ -1592,7 +1592,7 @@ POSTHOOK: Input: default@alltypesorc
 #### A masked pattern was here ####
 -462839731	988888	ss	false	-51.0	NULL	NULL	NULL	Lml5J2QBU77	false	-468.04059812638036	44.210	468.04059812638036	10.175	51.0	-102.0	-102.0	NULL	NULL	-988888	417.04059812638036	NULL	3569	NULL	NULL
 -635141101	-89010	ss	false	-51.0	NULL	NULL	NULL	rVWAj4N1MCg8Scyp7wj2C	true	7135.6151106617235	-69.746	-7135.6151106617235	10.175	51.0	-102.0	-102.0	NULL	NULL	89010	-7186.6151106617235	NULL	3569	NULL	NULL
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing double and bigint may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
 SELECT   cint,
          cstring1,
@@ -1778,7 +1778,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing double and bigint may result in loss of information.
 PREHOOK: query: SELECT   cint,
          cstring1,
          cboolean2,
@@ -2489,7 +2489,7 @@ POSTHOOK: Input: default@alltypesorc
 -84	-9	NULL	0.016535714	NULL	NULL	9	0.0	-9	1	89011
 -89	-14	NULL	0.015606742	NULL	NULL	14	0.0	-14	1	89011
 -95	-20	NULL	0.014621053	NULL	NULL	20	0.0	-20	1	89011
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing double and bigint may result in loss of information.
 PREHOOK: query: EXPLAIN VECTORIZATION EXPRESSION
 SELECT   cdouble,
          VAR_SAMP(cdouble),
@@ -2704,7 +2704,7 @@ STAGE PLANS:
       Processor Tree:
         ListSink
 
-WARNING: Comparing a bigint and a double may result in a loss of precision.
+WARNING: Comparing double and bigint may result in loss of information.
 PREHOOK: query: SELECT   cdouble,
          VAR_SAMP(cdouble),
          (2563.58 * VAR_SAMP(cdouble)),
diff --git a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
index f3b19f079173..24cd5d00b05d 100644
--- a/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
+++ b/serde/src/java/org/apache/hadoop/hive/serde2/typeinfo/TypeInfoUtils.java
@@ -24,12 +24,15 @@
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.EnumMap;
+import java.util.EnumSet;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
+import com.google.common.collect.ImmutableSet;
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.common.type.HiveVarchar;
 import org.apache.hadoop.hive.serde.serdeConstants;
@@ -885,6 +888,33 @@ public static boolean isConversionRequiredForComparison(TypeInfo typeA, TypeInfo
     return true;
   }
 
+  private static final Set<Set<PrimitiveCategory>> LOSSY_TYPE_CONVERSIONS =
+      ImmutableSet.<Set<PrimitiveCategory>>builder()
+          .add(EnumSet.of(PrimitiveCategory.DECIMAL, PrimitiveCategory.CHAR))
+          .add(EnumSet.of(PrimitiveCategory.DECIMAL, PrimitiveCategory.VARCHAR))
+          .add(EnumSet.of(PrimitiveCategory.DECIMAL, PrimitiveCategory.STRING))
+          .add(EnumSet.of(PrimitiveCategory.DOUBLE, PrimitiveCategory.LONG))
+          .add(EnumSet.of(PrimitiveCategory.LONG, PrimitiveCategory.CHAR))
+          .add(EnumSet.of(PrimitiveCategory.LONG, PrimitiveCategory.VARCHAR))
+          .add(EnumSet.of(PrimitiveCategory.LONG, PrimitiveCategory.STRING))
+          .build();
+
+  /**
+   * Returns true if the conversion between the types is lossy (i.e., it can lead to loss of information), and false
+   * otherwise.
+   * TODO Not all cases are covered 
+   * Note that the method does not imply anything about the coercibility of types; use 
+   * {@link #isConversionRequiredForComparison(TypeInfo, TypeInfo)} to determine if a conversion is possible.
+   */
+  public static boolean isConversionLossy(TypeInfo t1, TypeInfo t2) {
+    if (t1 instanceof PrimitiveTypeInfo && t2 instanceof PrimitiveTypeInfo) {
+      PrimitiveTypeInfo pt1 = (PrimitiveTypeInfo) t1;
+      PrimitiveTypeInfo pt2 = (PrimitiveTypeInfo) t2;
+      return LOSSY_TYPE_CONVERSIONS.contains(EnumSet.of(pt1.getPrimitiveCategory(), pt2.getPrimitiveCategory()));
+    }
+    return false;
+  }
+
   /**
    * Return the character length of the type
    * @param typeInfo
