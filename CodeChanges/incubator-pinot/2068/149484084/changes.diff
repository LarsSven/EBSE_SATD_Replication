diff --git a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-chart/component.js b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-chart/component.js
index 9eebc678b37..0e08fd9aab0 100644
--- a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-chart/component.js
+++ b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-chart/component.js
@@ -136,6 +136,11 @@ export default Ember.Component.extend({
       const ends = selectedEvents.map(e => [e.end + 1, e.urn]); // no overlap
       const sorted = starts.concat(ends).sort();
 
+      //
+      // automated layouting for event time ranges based on 'swimlanes'.
+      // events are assigned to different lanes such that their time ranges do not overlap visually
+      // the swimlanes are then converted to y values between [0.0, 1.0]
+      //
       const lanes = {};
       const urn2lane = {};
       let max = 10; // default value
@@ -168,8 +173,7 @@ export default Ember.Component.extend({
     const { entities, timeseries } = this.getProperties('entities', 'timeseries');
 
     return [...urns]
-      .filter(urn => entities[urn])
-      .filter(urn => ['metric', 'event', 'frontend:baseline:metric'].includes(entities[urn].type))
+      .filter(urn => entities[urn] && ['metric', 'event', 'frontend:baseline:metric'].includes(entities[urn].type))
       .filter(urn => (entities[urn].type != 'metric' && entities[urn].type != 'frontend:baseline:metric') || timeseries[urn]);
   },
 
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/component.js b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/component.js
index 564093f7105..d92685754d6 100644
--- a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/component.js
+++ b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/component.js
@@ -67,15 +67,15 @@ export default Ember.Component.extend({
   ),
 
   _makeTransformation(mode) {
-    if (mode == 'change') {
-      return (curr, base, currTotal, baseTotal) => curr / base - 1;
-    } else if (mode == 'contributionDiff') {
-      return (curr, base, currTotal, baseTotal) => curr / currTotal - base / baseTotal;
-    } else if (mode == 'contributionToDiff') {
-      return (curr, base, currTotal, baseTotal) => (curr - base) / (currTotal - baseTotal);
-    } else {
-      return (curr, base, currTotal, baseTotal) => 0;
+    switch (mode) {
+      case 'change':
+        return (curr, base, currTotal, baseTotal) => curr / base - 1;
+      case 'contributionDiff':
+        return (curr, base, currTotal, baseTotal) => curr / currTotal - base / baseTotal;
+      case 'contributionToDiff':
+        return (curr, base, currTotal, baseTotal) => (curr - base) / (currTotal - baseTotal);
     }
+    return (curr, base, currTotal, baseTotal) => 0;
   },
 
   _makeSum(dimNameObj) {
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/template.hbs b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/template.hbs
index 485aea44262..a2dd43b8a69 100644
--- a/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/template.hbs
+++ b/thirdeye/thirdeye-frontend/app/pods/components/rootcause-heatmap/template.hbs
@@ -14,4 +14,4 @@
   {{else}}
     <li>No dimensions</li>
   {{/each-in}}
-</ol>
\ No newline at end of file
+</ol>
diff --git a/thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js b/thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js
index bcd2af762cb..bf3e335b876 100644
--- a/thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js
+++ b/thirdeye/thirdeye-frontend/app/pods/rootcause/controller.js
@@ -1,5 +1,5 @@
 import Ember from 'ember';
-import { makeIterable, filterObject } from 'thirdeye-frontend/helpers/utils';
+import { checkStatus, makeIterable, filterObject } from 'thirdeye-frontend/helpers/utils';
 import EVENT_TABLE_COLUMNS from 'thirdeye-frontend/mocks/eventTableColumns';
 import fetch from 'fetch';
 
@@ -164,7 +164,7 @@ export default Ember.Controller.extend({
     frameworks.forEach(framework => {
       const url = this._makeFrameworkUrl(framework, context);
       fetch(url)
-        .then(res => res.json())
+        .then(checkStatus)
         .then(res => this._resultToEntities(res))
         .then(json => this._completeRequestEntities(this, json, framework));
     });
@@ -284,7 +284,7 @@ export default Ember.Controller.extend({
     const metricUrl = `/timeseries/query?metricIds=${metricIdString}&ranges=${context.analysisRange[0]}:${context.analysisRange[1]}&granularity=15_MINUTES&transformations=timestamp`;
 
     fetch(metricUrl)
-      .then(res => res.json())
+      .then(checkStatus)
       .then(this._extractTimeseries)
       .then(timeseries => this._completeRequestMissingTimeseries(this, timeseries));
 
@@ -298,7 +298,7 @@ export default Ember.Controller.extend({
     const baselineUrl = `/timeseries/query?metricIds=${baselineIdString}&ranges=${baselineDisplayStart}:${baselineDisplayEnd}&granularity=15_MINUTES&transformations=timestamp`;
 
     fetch(baselineUrl)
-      .then(res => res.json())
+      .then(checkStatus)
       .then(res => this._extractTimeseries(res))
       .then(timeseries => this._convertMetricToBaseline(timeseries, baselineOffset))
       .then(timeseries => this._completeRequestMissingTimeseries(this, timeseries));
diff --git a/thirdeye/thirdeye-frontend/app/pods/rootcause/template.hbs b/thirdeye/thirdeye-frontend/app/pods/rootcause/template.hbs
index 255ff664613..feeec85efe1 100644
--- a/thirdeye/thirdeye-frontend/app/pods/rootcause/template.hbs
+++ b/thirdeye/thirdeye-frontend/app/pods/rootcause/template.hbs
@@ -63,5 +63,5 @@ urns
 
 <h3>This is the heatmap.</h3>
 {{rootcause-heatmap
-  mode='change'
+  mode="change"
 }}
\ No newline at end of file
