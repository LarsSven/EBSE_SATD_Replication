diff --git a/thirdeye/thirdeye-frontend/app/helpers/utils.js b/thirdeye/thirdeye-frontend/app/helpers/utils.js
index 46d17bae425..8566532e4f4 100644
--- a/thirdeye/thirdeye-frontend/app/helpers/utils.js
+++ b/thirdeye/thirdeye-frontend/app/helpers/utils.js
@@ -88,10 +88,10 @@ export function pluralizeTime(time, unit) {
  * Formatter for the human-readable floating point numbers numbers
  */
 export function humanizeFloat(f) {
-  if (f == null || Number.isNaN(f)) { return '-'; }
+  if (Number.isNaN(f)) { return '-'; }
   const fixed = Math.max(3 - Math.max(Math.floor(Math.log10(f)) + 1, 0), 0);
   return f.toFixed(fixed);
-};
+}
 
 export function isIterable(obj) {
   if (obj == null || _.isString(obj)) {
@@ -274,6 +274,44 @@ export function findLabelMapping(label, config) {
   return labelMapping;
 }
 
+/**
+ * Helps with shorthand for repetitive date generation
+ */
+export function buildDateEod(unit, type) {
+  return moment().subtract(unit, type).endOf('day').utc();
+}
+
+/**
+ * Parses stringified object from payload
+ * @param {String} filters
+ * @returns {Object}
+ */
+export function parseProps(filters) {
+  filters = filters || '';
+
+  return filters.split(';')
+    .filter(prop => prop)
+    .map(prop => prop.split('='))
+    .reduce(function (aggr, prop) {
+      const [ propName, value ] = prop;
+      aggr[propName] = value;
+      return aggr;
+    }, {});
+}
+
+/**
+ * Preps post object and stringifies post data
+ * @param {Object} data to post
+ * @returns {Object}
+ */
+export function postProps(postData) {
+  return {
+    method: 'post',
+    body: JSON.stringify(postData),
+    headers: { 'content-type': 'Application/Json' }
+  };
+}
+
 export default Ember.Helper.helper({
   checkStatus,
   pluralizeTime,
@@ -299,5 +337,8 @@ export default Ember.Helper.helper({
   appendFilters,
   metricColors,
   colorMapping,
-  eventColorMapping
+  eventColorMapping,
+  buildDateEod,
+  parseProps,
+  postProps
 });
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/component.js b/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/component.js
new file mode 100644
index 00000000000..63dff37190d
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/component.js
@@ -0,0 +1,105 @@
+/**
+ * Component for "report missing anomaly" modal
+ * @module components/alert-report-modal
+ * @property {String} metricName - text for read-only metric field
+ * @property {String} alertName  - text for read-only alert field
+ * @property {Array} dimensionOptions - options for dimension select field
+ * @property {Number} timePickerIncrement - config for time-range-picker
+ * @property {String} maxTime - timestamp for loading anomaly graph
+ * @property {String} viewRegionStart - range start timestamp
+ * @property {String} viewRegionEnd - range end timestamp
+ * @property {Object} predefinedRanges - needed for time-range-picker
+ * @property {String} uiDateFormat - date format desired for time-range-picker
+ * @property {String} graphMessageText - text for graph in loading state
+ * @example
+  {{alert-report-modal
+    metricName="mobile_notification_errors"
+    alertName="notification_sessions_mobile"
+    dimensionOptions=['dimension 1', 'dimension 2']
+    timePickerIncrement=200
+    maxTime="1513137100914"
+    viewRegionStart="2017-10-12 23:59"
+    viewRegionEnd="2017-12-11 23:59"
+    predefinedRanges=predefinedRanges
+    uiDateFormat="MMM D, YYYY hh:mm a"
+    graphMessageText="Loading graph"
+    inputAction=(action "onInputMissingAnomaly")
+  }}
+ * @exports alert-report-modal
+ * @author smcclung
+ */
+
+import Ember from 'ember';
+import _ from 'lodash';
+
+export default Ember.Component.extend({
+  containerClassNames: 'alert-report-modal',
+  isNewTrend: false,
+
+  /**
+   * Collects all input data for the post request
+   * @method reportAnomalyPayload
+   * @return {Object} Post data
+   */
+  reportAnomalyPayload: Ember.computed(
+    'isNewTrend',
+    'anomalyComments',
+    'selectedDimension',
+    'viewAnomalyStart',
+    'viewAnomalyEnd',
+    'anomalyLinks',
+    function() {
+      const postObj = {
+        startTime: this.get('viewAnomalyStart'),
+        endTime: this.get('viewAnomalyEnd'),
+        feedbackType: this.get('isNewTrend') ? 'ANOMALY_NEW_TREND' : 'ANOMALY',
+        dimension: this.get('selectedDimension') || null,
+        comment: this.get('anomalyComments') || null,
+        externalURL: this.get('anomalyLinks') || null
+      };
+
+      return postObj;
+    }
+  ),
+
+  /**
+   * Sends post object as is to parent
+   * @method bubbleModalInput
+   */
+  bubbleModalInput() {
+    this.sendAction('inputAction', this.get('reportAnomalyPayload'));
+  },
+
+  actions: {
+
+    /**
+     * Handle selected dimension filter
+     * @method onSelectDimension
+     * @param {Object} selectedObj - the user-selected dimension to filter by
+     */
+    onSelectDimension(selectedObj) {
+      this.set('selectedDimension' , selectedObj);
+      this.bubbleModalInput();
+    },
+
+    /**
+     * Handle selected dimension filter
+     * @method onSelectDimension
+     * @param {Object} selectedObj - the user-selected dimension to filter by
+     */
+    onFeedbackTypeSelection(trendSelection) {
+      this.set('isNewTrend' , trendSelection);
+      this.bubbleModalInput();
+    },
+
+    /**
+     * Handle selected dimension filter
+     * @method onFeedbackComments
+     * @param {String} comment field value
+     */
+    onAnomalyInput(value) {
+      this.bubbleModalInput();
+    }
+
+  }
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/template.hbs b/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/template.hbs
new file mode 100644
index 00000000000..3d8e71b350e
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/components/alert-report-modal/template.hbs
@@ -0,0 +1,158 @@
+<main class="alert-create card-container--padded te-form alert-report-modal__body">
+
+  <fieldset class="te-form__section te-form__section--first row" id="select-target1">
+    <div class="col-xs-12">
+      <legend class="te-form__section-title te-report-title">Specify Metric, Alert, and Dimensions</legend>
+    </div>
+
+    <div class="form-group col-xs-4">
+      <label for="select-metric" class="control-label te-label required">Metric</label>
+      {{input
+        type="text"
+        id="select-metric"
+        class="form-control te-input"
+        value=metricName
+        disabled=true
+      }}
+    </div>
+
+    <div class="form-group col-xs-4">
+      <label for="select-alert" class="control-label te-label required">Alert</label>
+      {{input
+        type="text"
+        id="select-alert"
+        class="form-control te-input"
+        value=alertName
+        disabled=true
+      }}
+    </div>
+
+    <div class="form-group col-xs-4" id="select-target2">
+      <label for="report-select-dimension" class="control-label te-label">Dimensions</label>
+      {{#power-select
+        triggerId="report-select-dimension"
+        triggerClass="te-form__select"
+        verticalPosition="below"
+        placeholder="Select a dimension"
+        renderInPlace=true
+        options=dimensionOptions
+        searchEnabled=false
+        selected=selectedDimension
+        onchange=(action "onSelectDimension")
+        as |dimension|
+      }}
+        {{dimension}}
+      {{/power-select}}
+    </div>
+  </fieldset>
+
+  <fieldset class="te-form__section row">
+    <div class="form-group col-xs-6">
+      <legend class="te-form__section-title te-report-title">Mark the Anomaly Region</legend>
+      <label for="date-picker" class="control-label te-label">Start/End Dates</label>
+     {{date-range-picker
+        class="te-range-picker"
+        id="date-picker"
+        parentEl=".te-modal"
+        timePicker=showTimePicker
+        timePicker24Hour=true
+        timePickerIncrement=timePickerIncrement
+        maxDate=maxTime
+        start=viewAnomalyStart
+        end=viewAnomalyEnd
+        ranges=predefinedRanges
+        showCustomRangeLabel=false
+        format=uiDateFormat
+        serverFormat="YYYY-MM-DD HH:mm"
+        applyAction=(action "onAnomalyInput")
+      }}
+    </div>
+  </fieldset>
+
+  <fieldset class="te-form__section row">
+    {{#if isSelectMetricError}}
+      {{#bs-alert type="danger"}}
+        <strong>{{selectMetricErrMsg}}</strong> Unable to fetch data for this metric.
+      {{/bs-alert}}
+    {{/if}}
+
+    <div class="col-xs-12">
+      <div class="te-graph-alert {{if (not isMetricSelected) 'te-graph-alert--pending'}}">
+        {{#if isMetricDataLoading}}
+          <div class="spinner-wrapper--self-serve">{{ember-spinner}}</div>
+        {{/if}}
+        {{#if isMetricSelected}}
+          {{anomaly-graph
+            primaryMetric=selectedMetric
+            selectedDimensions=selectedDimensions
+            dimensions=topDimensions
+            showDimensions=true
+            isLoading=loading
+            showSubchart=true
+            showLegend=true
+            enableZoom=true
+            componentId='create-alert'
+            showGraphLegend=showGraphLegend
+            showGraphLegend=false
+            onSelection=(action "onSelection")
+            onPrimaryMetricToggle=(action "onPrimaryMetricToggle")
+            height=400
+          }}
+        {{else}}
+          <div class="te-graph-alert__content">
+            <div class="glyphicon glyphicon-{{if isMetricDataInvalid 'alert' 'equalizer'}} te-graph-alert__icon{{if isMetricDataInvalid '--warning'}}"></div>
+            <p class="te-graph-alert__pre-text">{{graphMessageText}}</p>
+          </div>
+        {{/if}}
+      </div>
+    </div>
+  </fieldset>
+
+  <fieldset class="te-form__section row">
+    <div class="col-xs-6">
+      <legend class="te-form__section-title te-report-title">Report as new trend?</legend>
+      <label for="label-toggle" class="control-label te-label">ThirdEye will consider anomaly as new trend and not consider this as anomaly in the future</label>
+    </div>
+    {{#x-toggle
+      value=isNewTrend
+      classNames="te-toggle te-toggle--form te-toggle--left report-toggle"
+      theme="ios"
+      id="label-toggle"
+      showLabels=true
+      name="activeToggle"
+      onToggle=(action "onFeedbackTypeSelection")
+      as |toggle|}}
+        {{#toggle.label value=isNewTrend}}
+          <span class="te-label te-label--flush">{{if isNewTrend 'Yes' 'No'}}</span>
+        {{/toggle.label}}
+        {{toggle.switch theme='ios' onLabel='diff on' offLabel='diff off'}}
+    {{/x-toggle}}
+  </fieldset>
+
+  <fieldset class="te-form__section row">
+    <div class="form-group col-xs-8">
+      <legend class="te-form__section-title te-report-title">Additional info</legend>
+      <label for="anomaly-form-links" class="control-label te-label">Related Links</label>
+      {{input
+        type="text"
+        id="anomaly-form-links"
+        class="form-control te-input"
+        placeholder="Links to JIRAs, InGraph Dashboards, etc"
+        value=anomalyLinks
+        focus-out="onAnomalyInput"
+      }}
+
+      <label for="anomaly-form-comments" class="control-label te-label">Comments</label>
+      {{textarea
+        cols="40"
+        rows="4"
+        type="textarea"
+        id="anomaly-form-comments"
+        class="form-control te-input"
+        placeholder="Explain how it was discovered and the root cause"
+        value=anomalyComments
+        focus-out="onAnomalyInput"
+      }}
+    </div>
+  </fieldset>
+</main>
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/te-modal/component.js b/thirdeye/thirdeye-frontend/app/pods/components/te-modal/component.js
index 7c043568db6..ebe152b8c2d 100644
--- a/thirdeye/thirdeye-frontend/app/pods/components/te-modal/component.js
+++ b/thirdeye/thirdeye-frontend/app/pods/components/te-modal/component.js
@@ -49,6 +49,7 @@ export default Component.extend({
       if (action) {
         return action();
       }
+      //this.sendAction('submitAction');
     },
     /**
      * Invokes the passed cancel closure action
@@ -64,16 +65,16 @@ export default Component.extend({
      * Performs the cancel action and closes the modal
      */
     async onCancel() {
-      await this.send('cancelAction');
-      set(this, 'isShowingModal', false);
+      await this.sendAction('cancelAction');
+      //set(this, 'isShowingModal', false);
     },
 
     /**
      * Performs the submit action and closes the modal
      */
     async onSubmit() {
-      await this.send('submitAction');
-      set(this, 'isShowingModal', false);
+      await this.sendAction('submitAction');
+      //set(this, 'isShowingModal', false);
     }
   }
 });
diff --git a/thirdeye/thirdeye-frontend/app/pods/components/te-modal/template.hbs b/thirdeye/thirdeye-frontend/app/pods/components/te-modal/template.hbs
index 38e382d064a..a34b4430ac5 100644
--- a/thirdeye/thirdeye-frontend/app/pods/components/te-modal/template.hbs
+++ b/thirdeye/thirdeye-frontend/app/pods/components/te-modal/template.hbs
@@ -29,10 +29,10 @@
       {{#if hasFooter}}
         <div class="row te-modal__footer">
           <button {{action "onCancel"}} type="Cancel" class="te-button te-button--small te-button--muted btn">
-            {{cancelText}}
+            {{cancelButtonText}}
           </button>
           <button {{action "onSubmit"}} type="submit" class="te-button te-button--small te-button--submit btn">
-            {{submitText}}
+            {{submitButtonText}}
           </button>
         </div>
       {{/if}}
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/controller.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/controller.js
index cef3324b3fa..90291af08f4 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alert/controller.js
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/controller.js
@@ -3,11 +3,7 @@
  * @module manage/alert
  * @exports manage/alert
  */
-import fetch from 'fetch';
 import Ember from 'ember';
-import moment from 'moment';
-import _ from 'lodash';
-import { checkStatus } from 'thirdeye-frontend/helpers/utils';
 
 export default Ember.Controller.extend({
   /**
@@ -15,695 +11,22 @@ export default Ember.Controller.extend({
    * When replay is received as true, it indicates that this is a
    * newly created alert and replay is needed in order to display anomaly data.
    */
-  queryParams: ['replay', 'replayId', 'duration', 'startDate'],
+  queryParams: ['replay', 'replayId'],
   replay: false,
   replayId: null,
-  duration: null,
-  startDate: null,
-
-  /**
-   * Standard legend settings for graph
-   */
-  legendText: {
-    dotted: {
-      text: 'WoW'
-    },
-    solid: {
-      text: 'Observed'
-    }
-  },
-
-  /**
-   * Mapping table column names to corresponding prop keys
-   */
-  sortMap: {
-    start: 'anomalyStart',
-    score: 'severityScore',
-    change: 'changeRate',
-    resolution: 'anomalyFeedback'
-  },
-
-  /**
-   * Date format for date range picker
-   */
-  serverDateFormat: 'YYYY-MM-DD HH:mm',
-
-  /**
-   * Set initial view values
-   * @method initialize
-   * @param {Boolean} isReplayNeeded
-   * @return {undefined}
-   */
-  initialize(isReplayNeeded) {
-    this.setProperties({
-      filters: {},
-      metricData: {},
-      graphConfig: {},
-      loadedWowData: [],
-      predefinedRanges: {},
-      selectedSortMode: '',
-      selectedTimeRange: '',
-      selectedFilters: JSON.stringify({}),
-      isAlertReady: false,
-      isReplayStarted: true,
-      isReplayPending: false,
-      isReplayDone: false,
-      isMetricDataLoading: true,
-      isReplayStatusError: false,
-      isReplayModeWrapper: true,
-      isAnomalyArrayChanged: false,
-      requestCanContinue: true,
-      sortColumnStartUp: false,
-      sortColumnScoreUp: false,
-      sortColumnChangeUp: false,
-      sortColumnResolutionUp: false,
-      baselineOptions: [{ name: 'Predicted', isActive: true }],
-      selectedDimension: 'All Dimensions',
-      selectedResolution: 'All Resolutions',
-      dateRangeToRender: [30, 10, 5],
-      currentPage: 1,
-      pageSize: 10
-    });
-    // Toggle page mode if replay is needed
-    if (isReplayNeeded) {
-      this.set('isReplayPending', true);
-      this.triggerReplay(this.get('alertId'));
-    }
-  },
-
-  /**
-   * Number of pages to display
-   */
-  paginationSize: Ember.computed(
-    'pagesNum',
-    'pageSize',
-    function() {
-      const { pagesNum, pageSize } = this.getProperties('pagesNum', 'pageSize');
-      return Math.min(pagesNum, pageSize/2);
-    }
-  ),
-
-  /**
-   * Total Number of pages to display
-   */
-  pagesNum: Ember.computed(
-    'filteredAnomalies',
-    'pageSize',
-    function() {
-      const { filteredAnomalies, pageSize } = this.getProperties('filteredAnomalies', 'pageSize');
-      const anomalyCount = filteredAnomalies.length || 0;
-      return Math.ceil(anomalyCount/pageSize);
-    }
-  ),
-
-  /**
-   * Creates the page Array for view
-   */
-  viewPages: Ember.computed(
-    'pages',
-    'currentPage',
-    'paginationSize',
-    'pagesNum',
-    function() {
-      const {
-        currentPage,
-        pagesNum: max,
-        paginationSize: size
-      } = this.getProperties('currentPage', 'pagesNum', 'paginationSize');
-      const step = Math.floor(size / 2);
-
-      if (max === 1) { return; }
-
-      const startingNumber = ((max - currentPage) < step)
-        ? Math.max(max - size + 1, 1)
-        : Math.max(currentPage - step, 1);
-
-      return [...new Array(size)].map((page, index) =>  startingNumber + index);
-    }
-  ),
-
-  /**
-   * Pre-filtered and sorted anomalies with pagination
-   */
-  paginatedFilteredAnomalies: Ember.computed(
-    'filteredAnomalies.@each',
-    'pageSize',
-    'currentPage',
-    'loadedWoWData',
-    'selectedSortMode',
-    function() {
-      let anomalies = this.get('filteredAnomalies');
-      const { pageSize, currentPage, selectedSortMode } = this.getProperties('pageSize', 'currentPage', 'selectedSortMode');
-
-      if (selectedSortMode) {
-        let [ sortKey, sortDir ] = selectedSortMode.split(':');
-
-        if (sortDir === 'up') {
-          anomalies = anomalies.sortBy(this.get('sortMap')[sortKey]);
-        } else {
-          anomalies = anomalies.sortBy(this.get('sortMap')[sortKey]).reverse();
-        }
-      }
-
-      return anomalies.slice((currentPage - 1) * pageSize, currentPage * pageSize);
-    }
-  ),
-
-  /**
-   * Indicates the allowed date range picker increment based on granularity
-   * @type {Number}
-   */
-  timePickerIncrement: Ember.computed('alertData.windowUnit', function() {
-    const granularity = this.get('alertData.windowUnit').toLowerCase();
-
-    switch(granularity) {
-      case 'DAYS':
-        return 1440;
-      case 'HOURS':
-        return 60;
-      default:
-        return 5;
-    }
-  }),
-
-  /**
-   * Indicates the allowed date range picker increment based on granularity
-   * @type {Boolean}
-   */
-  showGraph: Ember.computed.bool('isGraphReady'),
-
-  /**
-   * Returns a time object for the date-time-picker from selected range end date
-   * @type {Object}
-   */
-  viewRegionEnd: Ember.computed(
-    'activeRangeEnd',
-    function() {
-      const end = this.get('activeRangeEnd');
-      return moment(end).format(this.get('serverDateFormat'));
-    }
-  ),
-
-  /**
-   * Returns a time object for the date-time-picker from selected range start date
-   * @type {Object}
-   */
-  viewRegionStart: Ember.computed(
-    'activeRangeStart',
-    function() {
-      const start = this.get('activeRangeStart');
-      return moment(start).format(this.get('serverDateFormat'));
-    }
-  ),
-
-  /**
-   * Indicates the date format to be used based on granularity
-   * @type {String}
-   */
-  uiDateFormat: Ember.computed('alertData.windowUnit', function() {
-    const granularity = this.get('alertData.windowUnit').toLowerCase();
-
-    switch(granularity) {
-      case 'DAYS':
-        return 'MMM D, YYYY';
-      case 'HOURS':
-        return 'MMM D, YYYY h a';
-      default:
-        return 'MMM D, YYYY hh:mm a';
-    }
-  }),
-
-  /**
-   * Data needed to render the stats 'cards' above the anomaly graph for this alert
-   * @type {Object}
-   */
-  anomalyStats: Ember.computed(
-    'totalAnomalies',
-    function() {
-      const total = this.get('totalAnomalies') || 0;
-      const anomalyStats = [
-        {
-          title: 'Number of anomalies',
-          text: 'Estimated average number of anomalies per month',
-          value: total,
-          projected: '5'
-        },
-        {
-          title: 'Response rate',
-          text: 'Percentage of anomalies that has a response',
-          value: '87.1%'
-        },
-        {
-          title: 'Precision',
-          text: 'Among all anomalies detected, the percentage of them that are true.',
-          value: '50%',
-          projected: '89.2%'
-        },
-        {
-          title: 'Recall',
-          text: 'Among all anomalies that happened, the percentage of them detected by the system',
-          value: '25%',
-          projected: '89.2%'
-        },
-        {
-          title: 'MTTD for >30% change',
-          text: 'Minimum time to detect for anomalies with > 30% change',
-          value: '4.8 mins',
-          projected: '5 mins'
-        }
-      ];
-      return anomalyStats;
-    }
-  ),
-
-  /**
-   * If user selects a dimension from the dropdown, we filter the anomaly results here.
-   * NOTE: this is currently set up to support single-dimension filters
-   * @type {Object}
-   */
-  filteredAnomalies: Ember.computed(
-    'selectedDimension',
-    'selectedResolution',
-    'anomalyData',
-    function() {
-      const targetDimension = this.get('selectedDimension');
-      const targetResolution = this.get('selectedResolution');
-      let anomalies = this.get('anomalyData');
-
-      // Filter for selected dimension
-      if (targetDimension !== 'All Dimensions') {
-        anomalies = anomalies.filter((data) => {
-          return targetDimension === `${data.dimensionList[0].dimensionKey}:${data.dimensionList[0].dimensionVal}`;
-        });
-      }
-
-      // Filter for selected resolution
-      if (targetResolution !== 'All Resolutions') {
-        anomalies = anomalies.filter((data) => {
-          return targetResolution === data.anomalyFeedback;
-        });
-      }
-
-      return anomalies;
-    }
-  ),
-
-  /**
-   * Placeholder for options for range field. Here we generate arbitrary date ranges from our config.
-   * @type {Array}
-   */
-  rangeOptionsExample: Ember.computed(
-    'dateRangeToRender',
-    function() {
-      return this.get('dateRangeToRender').map(this.renderDate);
-    }
-  ),
-
-  /**
-   * Generate date range selection options if needed
-   * @method renderDate
-   * @param {Number} range - number of days (duration)
-   * @return {String}
-   */
-  renderDate: function(range) {
-    // TODO: enable single day range
-    const newDate = moment().subtract(range, 'days').endOf('day').utc().format("DD MM YYY");
-    return `Last ${range} Days (${newDate} to Today)`;
-  },
-
-  /**
-   * Fetches change rate data for each available anomaly id
-   * @method fetchCombinedAnomalyChangeData
-   * @returns {Ember.RSVP promise}
-   */
-  fetchCombinedAnomalyChangeData() {
-    let promises = {};
-
-    for (var anomaly of this.get('anomalyData')) {
-      let id = anomaly.anomalyId;
-      promises[id] = fetch(`/anomalies/${id}`).then(checkStatus);
-    }
-
-    return Ember.RSVP.hash(promises);
-  },
-
-  /**
-   * Pings the job-info endpoint to check status of an ongoing replay job.
-   * If there is no progress after a set time, we display an error message.
-   * TODO: Set error message on timeout
-   * @method checkReplayStatus
-   * @param {Number} jobId - the id for the newly triggered replay job
-   * @return {fetch promise}
-   */
-  checkReplayStatus(jobId) {
-    const checkStatusUrl = `/thirdeye-admin/job-info/job/${jobId}/status`;
-    const timerStart = moment();
-
-    fetch(checkStatusUrl).then(checkStatus).then((status) => {
-      if (status.toLowerCase() === 'completed') {
-        this.set('isReplayPending', false);
-      } else if (this.get('requestCanContinue')) {
-        Ember.run.later(this, function() {
-          this.checkReplayStatus(jobId);
-        }, 5000);
-      }
-    });
-  },
-
-  /**
-   * Downloads data that is not critical for the initial page load
-   * TODO: Should we move all requests to the route?
-   * @method fetchDeferredAnomalyData
-   * @return {Promise}
-   */
-  fetchDeferredAnomalyData() {
-    const wowOptions = ['Wow', 'Wo2W', 'Wo3W', 'Wo4W'];
-    const { anomalyData, baselineOptions } = this.getProperties('anomalyData', 'baselineOptions');
-    const newWowList = wowOptions.map((item) => {
-      return { name: item, isActive: false };
-    });
-
-    return this.fetchCombinedAnomalyChangeData()
-      .then((wowData) => {
-        anomalyData.forEach((anomaly) => {
-          anomaly.wowData = wowData[anomaly.anomalyId] || {};
-        });
-        // Display rest of options once data is loaded ('2week', 'Last Week')
-        this.set('baselineOptions', [baselineOptions[0], ...newWowList]);
-        return fetch(this.get('metricDataUrl')).then(checkStatus);
-      })
-      .then((metricData) => {
-        // Display graph once data has loaded
-        this.setProperties({
-          isGraphReady: true,
-          isMetricDataLoading: false,
-          metricData
-        });
-      })
-      .catch((errors) => {
-        this.setProperties({
-          loadError: true,
-          loadErrorMsg: errors
-        });
-      });
-  },
-
-  /**
-   * Sends a request to begin advanced replay for a metric. The replay will fetch new
-   * time-series data based on user-selected sensitivity settings.
-   * @method triggerReplay
-   * @param {Number} functionId - the id for the newly created function (alert)
-   * @return {Ember.RSVP.Promise}
-   */
-  triggerReplay(functionId) {
-    const emailData = this.get('emailData')[0];
-    const subject = `Anomaly results processed for ${functionId}`;
-    const startTime = moment().subtract(1, 'month').endOf('day').utc().format("YYYY-MM-DD");
-    const endTime = moment().subtract(1, 'day').endOf('day').utc().format("YYYY-MM-DD");
-    const granularity = this.get('alertData.windowUnit').toLowerCase();
-    const isDailyOrHourly = ['day', 'hour'].includes(granularity);
-    const speedUp = !(granularity.includes('hour') || granularity.includes('day'));
-    const recipients = emailData ? encodeURIComponent(emailData.recipients.replace(/,{2,}/g, '')) : '';
-    const sensitivity = this.get('alertData.alertFilter.sensitivity') || isDailyOrHourly ? 'Sensitive' : 'Medium';
-    const pattern = this.get('alertData.alertFilter.pattern') || null;
-    const replayWrapperUrl = `/detection-job/${functionId}/notifyreplaytuning?start=${startTime}` +
-      `&end=${endTime}&speedup=${speedUp}&userDefinedPattern=${pattern}&sensitivity=${sensitivity}` +
-      `&removeAnomaliesInWindow=true&to=${recipients}`;
-    const replayStartUrl = `/detection-job/${functionId}/replay?start=${startTime}&end=${endTime}&speedup=${speedUp}`;
-    const postProps = {
-      method: 'POST',
-      headers: {
-        'Accept': 'application/json',
-        'Content-Type': 'application/json'
-      }
-    };
-
-    // Two ways to trigger replay
-    if (this.get('isReplayModeWrapper')) {
-      fetch(replayWrapperUrl, postProps).then((res) => checkStatus(res, 'post')).then(() => {
-        this.set('isReplayPending', false);
-      }).catch(() => {
-        this.set('isReplayStatusError', true);
-      });
-    } else {
-      fetch(replayStartUrl, postProps).then((res) => checkStatus(res, 'post')).then((response) => {
-        response.json().then((jobId) => {
-          this.checkReplayStatus(Object.values(jobId)[0]);
-        });
-      }).catch(() => {
-        this.set('isReplayStatusError', true);
-      });
-    }
-  },
-
-  /**
-   * Update feedback status on any anomaly
-   * @method updateAnomalyFeedback
-   * @param {Number} anomalyId - the id of the anomaly to update
-   * @param {String} feedbackType - key for feedback type
-   * @return {Ember.RSVP.Promise}
-   */
-  updateAnomalyFeedback(anomalyId, feedbackType) {
-    const url = `/anomalies/updateFeedback/${anomalyId}`;
-    const postProps = {
-      method: 'post',
-      body: JSON.stringify({ feedbackType, comment: '' }),
-      headers: { 'content-type': 'Application/Json' }
-    };
-    return fetch(url, postProps).then((res) => checkStatus(res, 'post'));
-  },
-
-  /**
-   * Fetch a single anomaly record for verification
-   * @method verifyAnomalyFeedback
-   * @param {Number} anomalyId
-   * @return {undefined}
-   */
-  verifyAnomalyFeedback(anomalyId) {
-    const anomalyUrl = this.get('anomalyDataUrl') + anomalyId;
-    return fetch(anomalyUrl).then(checkStatus);
-  },
-
-  /**
-   * Reset all time range options and activate the selected one
-   * @method newTimeRangeOptions
-   * @param {String} activeKey - label for currently active time range
-   * @return {undefined}
-   */
-  newTimeRangeOptions(activeKey) {
-    const timeRangeOptions = this.get('timeRangeOptions');
-    const newOptions = timeRangeOptions.map((range) => {
-      return {
-        name: range.name,
-        value: range.value,
-        isActive: false
-      };
-    });
-    const foundRangeOption = newOptions.find((range) => range.value === activeKey);
-
-    if (foundRangeOption) {
-      foundRangeOption.isActive = true;
-    }
-
-    return newOptions;
-  },
-
-  /**
-   * When exiting route, lets kill the replay status check calls
-   * @method clearAll
-   * @return {undefined}
-   */
-  clearAll() {
-    this.setProperties({
-      requestCanContinue: false
-    });
-  },
 
   /**
    * Actions for alert page
    */
   actions: {
 
-    /**
-     * Handle selected dimension filter
-     * @method onSelectDimension
-     * @param {Object} selectedObj - the user-selected dimension to filter by
-     * @return {undefined}
-     */
-    onSelectDimension(selectedObj) {
-      this.set('selectedDimension' , selectedObj);
-    },
-
-    /**
-     * Handle selected resolution filter
-     * @method onSelectResolution
-     * @param {Object} selectedObj - the user-selected resolution to filter by
-     * @return {undefined}
-     */
-    onSelectResolution(selectedObj) {
-      this.set('selectedResolution', selectedObj);
-    },
-
-    /**
-     * Handle dynamically saving anomaly feedback responses
-     * @method onChangeAnomalyResponse
-     * @param {Object} anomalyRecord - the anomaly being responded to
-     * @param {String} selectedResponse - user-selected anomaly feedback option
-     * @param {Object} inputObj - the selection object
-     * @return {undefined}
-     */
-    onChangeAnomalyResponse(anomalyRecord, selectedResponse, inputObj) {
-      const responseObj = _.find(this.get('anomalyResponseObj'), { 'name': selectedResponse });
-      Ember.set(inputObj, 'selected', selectedResponse);
-
-      // Save anomaly feedback
-      this.updateAnomalyFeedback(anomalyRecord.anomalyId, responseObj.value)
-        .then((res) => {
-          // We make a call to ensure our new response got saved
-          this.verifyAnomalyFeedback(anomalyRecord.anomalyId, responseObj.status)
-            .then((res) => {
-              const filterMap = res.searchFilters ? res.searchFilters.statusFilterMap : null;
-              if (filterMap && filterMap.hasOwnProperty(responseObj.status)) {
-                Ember.set(anomalyRecord, 'anomalyFeedback', selectedResponse);
-                Ember.set(anomalyRecord, 'showResponseSaved', true);
-              } else {
-                throw new Error('Response not saved');
-              }
-            }) // verifyAnomalyFeedback
-        }) // updateAnomalyFeedback
-        .catch((err) => {
-          Ember.set(anomalyRecord, 'showResponseFailed', true);
-          Ember.set(anomalyRecord, 'showResponseSaved', false);
-        });
-    },
-
-    /**
-     * Action handler for page clicks
-     * @param {Number|String} page
-     */
-    onPaginationClick(page) {
-      let newPage = page;
-      let currentPage = this.get('currentPage');
-
-      switch (page) {
-        case 'previous':
-          newPage = --currentPage;
-          break;
-        case 'next':
-          newPage = ++currentPage;
-          break;
-      }
-
-      this.set('currentPage', newPage);
-    },
-
-    /**
-     * Handle display of selected baseline options
-     * @method onBaselineOptionClick
-     * @param {Object} wowObj - the baseline selection
-     * @return {undefined}
-     */
-    onBaselineOptionClick(wowObj) {
-      const { anomalyData, baselineOptions } = this.getProperties('anomalyData', 'baselineOptions');
-      const isValidSelection = !wowObj.isActive;
-      let newOptions = baselineOptions.map((val) => {
-        return { name: val.name, isActive: false };
-      });
-
-      // Set active option
-      newOptions.find((val) => val.name === wowObj.name).isActive = true;
-      this.set('baselineOptions', newOptions);
-
-      // Set new values for each anomaly
-      if (isValidSelection) {
-        for (var anomaly of anomalyData) {
-          const wow = anomaly.wowData;
-          const wowDetails = _.find(wow.compareResults, { 'compareMode': wowObj.name });
-          let curr = anomaly.current;
-          let base = anomaly.baseline;
-          let change = anomaly.changeRate;
-
-          if (wowDetails) {
-            curr = wow.currentVal.toFixed(2);
-            base = wowDetails.baselineValue.toFixed(2);
-            change = wowDetails.change.toFixed(2);
-          }
-
-          Ember.set(anomaly, 'shownCurrent', curr);
-          Ember.set(anomaly, 'shownBaseline', base);
-          Ember.set(anomaly, 'shownChangeRate', change);
-        }
-      }
-    },
-
-    /**
-     * Handle display of selected anomaly time ranges (reload the model with new query params)
-     * @method onRangeOptionClick
-     * @param {Object} rangeOption - the selected range object
-     * @return {undefined}
-     */
-    onRangeOptionClick(rangeOption) {
-      const rangeFormat = 'YYYY-MM-DD';
-      const defaultEndDate = moment().subtract(1, 'day').endOf('day').valueOf();
-
-      // Trigger reload in model with new time range. Transition for 'custom' dates is handled by 'onRangeSelection'
-      if (rangeOption.value !== 'custom') {
-        this.setProperties({
-          timeRangeOptions: this.newTimeRangeOptions(rangeOption.value),
-          activeRangeStart: moment(rangeOption.start).format(rangeFormat),
-          activeRangeEnd: moment(defaultEndDate).format(rangeFormat)
-        });
-        this.transitionToRoute({ queryParams: {
-          duration: rangeOption.value,
-          startDate: rangeOption.start,
-          endDate: defaultEndDate
-        }});
-      }
-    },
-
-    /**
-     * Sets the new custom date range for anomaly coverage
-     * @method onRangeSelection
-     * @param {String} start  - stringified start date
-     * @param {String} end    - stringified end date
-     * @return {undefined}
-     */
-    onRangeSelection(start, end) {
-      this.set('timeRangeOptions', this.newTimeRangeOptions('custom'));
-      this.transitionToRoute({ queryParams: {
-        duration: 'custom',
-        startDate: moment(start).valueOf(),
-        endDate: moment(end).valueOf()
-      }});
-    },
-
     /**
      * Placeholder for subscribe button click action
      * @method onClickAlertSubscribe
      * @return {undefined}
      */
     onClickAlertSubscribe() {
-      // TODO: Set user as watcher for this alert
-    },
-
-    /**
-     * Handle sorting for each sortable table column
-     * @method toggleSortDirection
-     * @param {String} sortKey  - stringified start date
-     * @return {undefined}
-     */
-    toggleSortDirection(sortKey) {
-      const propName = 'sortColumn' + sortKey.capitalize() + 'Up' || '';
-
-      this.toggleProperty(propName);
-      if (this.get(propName)) {
-        this.set('selectedSortMode', sortKey + ':up');
-      } else {
-        this.set('selectedSortMode', sortKey + ':down');
-      }
-
-      //On sort, set table to first pagination page
-      this.set('currentPage', 1);
+      // TODO: Set user as watcher for this alert when API ready
     }
 
   }
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/controller.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/controller.js
new file mode 100644
index 00000000000..f725ca2f17d
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/controller.js
@@ -0,0 +1,9 @@
+/**
+ * Controller for Alert Details Page: Edit Tab
+ * @module manage/alert/edit
+ * @exports manage/alert/edit
+ */
+import Controller from '@ember/controller';
+
+export default Controller.extend({
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/route.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/route.js
new file mode 100644
index 00000000000..d86eac3b69e
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/route.js
@@ -0,0 +1,9 @@
+/**
+ * Handles the 'edit' route for manage alert
+ * @module manage/alert/edit/route
+ * @exports manage/alert/edit/route
+ */
+import Route from '@ember/routing/route';
+
+export default Route.extend({
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/template.hbs b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/template.hbs
new file mode 100644
index 00000000000..ae6300c46d5
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/edit/template.hbs
@@ -0,0 +1,3 @@
+<div class="manage-alert-explore">
+  This is the edit route
+</div>
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/controller.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/controller.js
new file mode 100644
index 00000000000..366d3ede3e7
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/controller.js
@@ -0,0 +1,776 @@
+/**
+ * Controller for Alert Details Page: Overview Tab
+ * @module manage/alert/explore
+ * @exports manage/alert/explore
+ */
+import fetch from 'fetch';
+import Ember from 'ember';
+import moment from 'moment';
+import _ from 'lodash';
+import { checkStatus, buildDateEod, postProps } from 'thirdeye-frontend/helpers/utils';
+
+export default Ember.Controller.extend({
+  /**
+   * Be ready to receive time span for anomalies via query params
+   */
+  queryParams: ['duration', 'startDate', 'endDate'],
+  duration: null,
+  startDate: null,
+  endDate: null,
+
+  /**
+   * Standard legend settings for graph
+   */
+  legendText: {
+    dotted: {
+      text: 'WoW'
+    },
+    solid: {
+      text: 'Observed'
+    }
+  },
+
+  /**
+   * Mapping anomaly table column names to corresponding prop keys
+   */
+  sortMap: {
+    start: 'anomalyStart',
+    score: 'severityScore',
+    change: 'changeRate',
+    resolution: 'anomalyFeedback'
+  },
+
+  /**
+   * Date format for date range picker
+   */
+  serverDateFormat: 'YYYY-MM-DD HH:mm',
+
+  /**
+   * Set initial view values
+   * @method initialize
+   * @param {Boolean} isReplayNeeded
+   * @return {undefined}
+   */
+  initialize(isReplayNeeded) {
+    this.setProperties({
+      filters: {},
+      metricData: {},
+      graphConfig: {},
+      loadedWowData: [],
+      predefinedRanges: {},
+      missingAnomalyProps: {},
+      selectedSortMode: '',
+      selectedTimeRange: '',
+      selectedFilters: JSON.stringify({}),
+      isAlertReady: false,
+      openReportModal: false,
+      isReplayStarted: true,
+      isReplayPending: false,
+      isReplayDone: false,
+      isReportSuccess: false,
+      isReportFailure: false,
+      isMetricDataLoading: true,
+      isReplayStatusError: false,
+      isReplayModeWrapper: true,
+      isAnomalyArrayChanged: false,
+      requestCanContinue: true,
+      sortColumnStartUp: false,
+      sortColumnScoreUp: false,
+      sortColumnChangeUp: false,
+      sortColumnResolutionUp: false,
+      baselineOptions: [{ name: 'Predicted', isActive: true }],
+      selectedDimension: 'All Dimensions',
+      selectedResolution: 'All Resolutions',
+      dateRangeToRender: [30, 10, 5],
+      currentPage: 1,
+      pageSize: 10
+    });
+    // Toggle page mode if replay is needed
+    if (isReplayNeeded) {
+      this.set('isReplayPending', true);
+      this.triggerReplay(this.get('alertId'));
+    }
+  },
+
+  /**
+   * Table pagination: number of pages to display
+   * @type {Number}
+   */
+  paginationSize: Ember.computed(
+    'pagesNum',
+    'pageSize',
+    function() {
+      const { pagesNum, pageSize } = this.getProperties('pagesNum', 'pageSize');
+      return Math.min(pagesNum, pageSize/2);
+    }
+  ),
+
+  /**
+   * Table pagination: total Number of pages to display
+   * @type {Number}
+   */
+  pagesNum: Ember.computed(
+    'filteredAnomalies',
+    'pageSize',
+    function() {
+      const { filteredAnomalies, pageSize } = this.getProperties('filteredAnomalies', 'pageSize');
+      const anomalyCount = filteredAnomalies.length || 0;
+      return Math.ceil(anomalyCount/pageSize);
+    }
+  ),
+
+  /**
+   * Table pagination: creates the page Array for view
+   * @type {Array}
+   */
+  viewPages: Ember.computed(
+    'pages',
+    'currentPage',
+    'paginationSize',
+    'pagesNum',
+    function() {
+      const {
+        currentPage,
+        pagesNum: max,
+        paginationSize: size
+      } = this.getProperties('currentPage', 'pagesNum', 'paginationSize');
+      const step = Math.floor(size / 2);
+
+      if (max === 1) { return; }
+
+      const startingNumber = ((max - currentPage) < step)
+        ? Math.max(max - size + 1, 1)
+        : Math.max(currentPage - step, 1);
+
+      return [...new Array(size)].map((page, index) =>  startingNumber + index);
+    }
+  ),
+
+  /**
+   * Table pagination: pre-filtered and sorted anomalies with pagination
+   * @type {Array}
+   */
+  paginatedFilteredAnomalies: Ember.computed(
+    'filteredAnomalies.@each',
+    'pageSize',
+    'currentPage',
+    'loadedWoWData',
+    'selectedSortMode',
+    function() {
+      let anomalies = this.get('filteredAnomalies');
+      const { pageSize, currentPage, selectedSortMode } = this.getProperties('pageSize', 'currentPage', 'selectedSortMode');
+
+      if (selectedSortMode) {
+        let [ sortKey, sortDir ] = selectedSortMode.split(':');
+
+        if (sortDir === 'up') {
+          anomalies = anomalies.sortBy(this.get('sortMap')[sortKey]);
+        } else {
+          anomalies = anomalies.sortBy(this.get('sortMap')[sortKey]).reverse();
+        }
+      }
+
+      return anomalies.slice((currentPage - 1) * pageSize, currentPage * pageSize);
+    }
+  ),
+
+  /**
+   * Indicates the allowed date range picker increment based on granularity
+   * @type {Number}
+   */
+  timePickerIncrement: Ember.computed('alertData.windowUnit', function() {
+    const granularity = this.get('alertData.windowUnit').toLowerCase();
+
+    switch(granularity) {
+      case 'DAYS':
+        return 1440;
+      case 'HOURS':
+        return 60;
+      default:
+        return 5;
+    }
+  }),
+
+  /**
+   * Indicates the allowed date range picker increment based on granularity
+   * @type {Boolean}
+   */
+  showGraph: Ember.computed.bool('isGraphReady'),
+
+  /**
+   * date-time-picker: returns a time object from selected range end date
+   * @type {Object}
+   */
+  viewRegionEnd: Ember.computed(
+    'activeRangeEnd',
+    function() {
+      const end = this.get('activeRangeEnd');
+      return moment(end).format(this.get('serverDateFormat'));
+    }
+  ),
+
+  /**
+   * date-time-picker: returns a time object from selected range start date
+   * @type {Object}
+   */
+  viewRegionStart: Ember.computed(
+    'activeRangeStart',
+    function() {
+      const start = this.get('activeRangeStart');
+      return moment(start).format(this.get('serverDateFormat'));
+    }
+  ),
+
+  /**
+   * date-time-picker: indicates the date format to be used based on granularity
+   * @type {String}
+   */
+  uiDateFormat: Ember.computed('alertData.windowUnit', function() {
+    const granularity = this.get('alertData.windowUnit').toLowerCase();
+
+    switch(granularity) {
+      case 'DAYS':
+        return 'MMM D, YYYY';
+      case 'HOURS':
+        return 'MMM D, YYYY h a';
+      default:
+        return 'MMM D, YYYY hh:mm a';
+    }
+  }),
+
+  /**
+   * Data needed to render the stats 'cards' above the anomaly graph for this alert
+   * @type {Object}
+   */
+  anomalyStats: Ember.computed(
+    'totalAnomalies',
+    'alertEvalMetrics',
+    function() {
+      const total = this.get('totalAnomalies') || 0;
+      const evalObj = this.get('alertEvalMetrics.eval');
+      const mttd = this.get('alertEvalMetrics.mttd') || '0';
+      const projected = this.get('alertEvalMetrics.projected') || '0';
+      const responseRate = evalObj && evalObj.responseRate ? evalObj.responseRate : '0';
+      const precision = evalObj && evalObj.precision ? evalObj.precision : '0';
+      const recall = evalObj && evalObj.recall ? evalObj.recall : '0';
+
+      const anomalyStats = [
+        {
+          title: 'Number of anomalies',
+          text: 'Estimated average number of anomalies per month',
+          value: total,
+          projected
+        },
+        {
+          title: 'Response rate',
+          text: 'Percentage of anomalies that has a response',
+          value: responseRate
+        },
+        {
+          title: 'Precision',
+          text: 'Among all anomalies detected, the percentage of them that are true.',
+          value: precision,
+          projected
+        },
+        {
+          title: 'Recall',
+          text: 'Among all anomalies that happened, the percentage of them detected by the system',
+          value: recall,
+          projected
+        },
+        {
+          title: 'MTTD for >30% change',
+          text: 'Minimum time to detect for anomalies with > 30% change',
+          value: mttd,
+          projected
+        }
+      ];
+      return anomalyStats;
+    }
+  ),
+
+  /**
+   * If user selects a dimension from the dropdown, we filter the anomaly results here.
+   * NOTE: this is currently set up to support single-dimension filters
+   * @type {Object}
+   */
+  filteredAnomalies: Ember.computed(
+    'selectedDimension',
+    'selectedResolution',
+    'anomalyData',
+    function() {
+      const targetDimension = this.get('selectedDimension');
+      const targetResolution = this.get('selectedResolution');
+      let anomalies = this.get('anomalyData');
+
+      // Filter for selected dimension
+      if (targetDimension !== 'All Dimensions') {
+        anomalies = anomalies.filter((data) => {
+          return targetDimension === `${data.dimensionList[0].dimensionKey}:${data.dimensionList[0].dimensionVal}`;
+        });
+      }
+
+      // Filter for selected resolution
+      if (targetResolution !== 'All Resolutions') {
+        anomalies = anomalies.filter((data) => {
+          return targetResolution === data.anomalyFeedback;
+        });
+      }
+
+      return anomalies;
+    }
+  ),
+
+  /**
+   * Placeholder for options for range field. Here we generate arbitrary date ranges from our config.
+   * @type {Array}
+   */
+  rangeOptionsExample: Ember.computed(
+    'dateRangeToRender',
+    function() {
+      return this.get('dateRangeToRender').map(this.renderDate);
+    }
+  ),
+
+  /**
+   * Generate date range selection options if needed
+   * @method renderDate
+   * @param {Number} range - number of days (duration)
+   * @return {String}
+   */
+  renderDate: function(range) {
+    // TODO: enable single day range
+    const newDate = buildDateEod(range, 'days').format("DD MM YYY");
+    return `Last ${range} Days (${newDate} to Today)`;
+  },
+
+  /**
+   * Fetches change rate data for each available anomaly id
+   * @method fetchCombinedAnomalyChangeData
+   * @returns {Ember.RSVP promise}
+   */
+  fetchCombinedAnomalyChangeData() {
+    let promises = {};
+
+    for (var anomaly of this.get('anomalyData')) {
+      let id = anomaly.anomalyId;
+      promises[id] = fetch(`/anomalies/${id}`).then(checkStatus);
+    }
+
+    return Ember.RSVP.hash(promises);
+  },
+
+  /**
+   * Pings the job-info endpoint to check status of an ongoing replay job.
+   * If there is no progress after a set time, we display an error message.
+   * TODO: Set error message on timeout
+   * @method checkReplayStatus
+   * @param {Number} jobId - the id for the newly triggered replay job
+   * @return {fetch promise}
+   */
+  checkReplayStatus(jobId) {
+    const checkStatusUrl = `/thirdeye-admin/job-info/job/${jobId}/status`;
+
+    fetch(checkStatusUrl).then(checkStatus).then((status) => {
+      if (status.toLowerCase() === 'completed') {
+        this.set('isReplayPending', false);
+      } else if (this.get('requestCanContinue')) {
+        Ember.run.later(this, function() {
+          this.checkReplayStatus(jobId);
+        }, 5000);
+      }
+    });
+  },
+
+  /**
+   * Downloads data that is not critical for the initial page load
+   * TODO: Should we move all requests to the route?
+   * @method fetchDeferredAnomalyData
+   * @return {Promise}
+   */
+  fetchDeferredAnomalyData() {
+    const wowOptions = ['Wow', 'Wo2W', 'Wo3W', 'Wo4W'];
+    const { anomalyData, baselineOptions } = this.getProperties('anomalyData', 'baselineOptions');
+    const newWowList = wowOptions.map((item) => {
+      return { name: item, isActive: false };
+    });
+
+    return this.fetchCombinedAnomalyChangeData()
+      .then((wowData) => {
+        anomalyData.forEach((anomaly) => {
+          anomaly.wowData = wowData[anomaly.anomalyId] || {};
+        });
+        // Display rest of options once data is loaded ('2week', 'Last Week')
+        this.set('baselineOptions', [baselineOptions[0], ...newWowList]);
+        return fetch(this.get('metricDataUrl')).then(checkStatus);
+      })
+      .then((metricData) => {
+        // Display graph once data has loaded
+        this.setProperties({
+          isGraphReady: true,
+          isMetricDataLoading: false,
+          metricData
+        });
+      })
+      .catch((errors) => {
+        this.setProperties({
+          loadError: true,
+          loadErrorMsg: errors
+        });
+      });
+  },
+
+  /**
+   * Sends a request to begin advanced replay for a metric. The replay will fetch new
+   * time-series data based on user-selected sensitivity settings.
+   * @method triggerReplay
+   * @param {Number} functionId - the id for the newly created function (alert)
+   * @return {Ember.RSVP.Promise}
+   */
+  triggerReplay(functionId) {
+    const emailData = this.get('emailData')[0];
+    const startTime = buildDateEod(1, 'month').format("YYYY-MM-DD");
+    const endTime = buildDateEod(1, 'day').format("YYYY-MM-DD");
+    const granularity = this.get('alertData.windowUnit').toLowerCase();
+    const isDailyOrHourly = ['day', 'hour'].includes(granularity);
+    const speedUp = !(granularity.includes('hour') || granularity.includes('day'));
+    const recipients = emailData ? encodeURIComponent(emailData.recipients.replace(/,{2,}/g, '')) : '';
+    const sensitivity = this.get('alertData.alertFilter.sensitivity') || isDailyOrHourly ? 'Sensitive' : 'Medium';
+    const pattern = this.get('alertData.alertFilter.pattern') || null;
+    const replayWrapperUrl = `/detection-job/${functionId}/notifyreplaytuning?start=${startTime}` +
+      `&end=${endTime}&speedup=${speedUp}&userDefinedPattern=${pattern}&sensitivity=${sensitivity}` +
+      `&removeAnomaliesInWindow=true&to=${recipients}`;
+    const replayStartUrl = `/detection-job/${functionId}/replay?start=${startTime}&end=${endTime}&speedup=${speedUp}`;
+
+    // Two ways to trigger replay
+    if (this.get('isReplayModeWrapper')) {
+      fetch(replayWrapperUrl, postProps('')).then((res) => checkStatus(res, 'post')).then(() => {
+        this.set('isReplayPending', false);
+      }).catch(() => {
+        this.set('isReplayStatusError', true);
+      });
+    } else {
+      fetch(replayStartUrl, postProps('')).then((res) => checkStatus(res, 'post')).then((response) => {
+        response.json().then((jobId) => {
+          this.checkReplayStatus(Object.values(jobId)[0]);
+        });
+      }).catch(() => {
+        this.set('isReplayStatusError', true);
+      });
+    }
+  },
+
+  /**
+   * Update feedback status on any anomaly
+   * @method updateAnomalyFeedback
+   * @param {Number} anomalyId - the id of the anomaly to update
+   * @param {String} feedbackType - key for feedback type
+   * @return {Ember.RSVP.Promise}
+   */
+  updateAnomalyFeedback(anomalyId, feedbackType) {
+    const url = `/anomalies/updateFeedback/${anomalyId}`;
+    const data = { feedbackType, comment: '' };
+    return fetch(url, postProps(data)).then((res) => checkStatus(res, 'post'));
+  },
+
+  /**
+   * Fetch a single anomaly record for verification
+   * @method verifyAnomalyFeedback
+   * @param {Number} anomalyId
+   * @return {undefined}
+   */
+  verifyAnomalyFeedback(anomalyId) {
+    const anomalyUrl = this.get('anomalyDataUrl') + anomalyId;
+    return fetch(anomalyUrl).then(checkStatus);
+  },
+
+  /**
+   * Reset all time range options and activate the selected one
+   * @method newTimeRangeOptions
+   * @param {String} activeKey - label for currently active time range
+   * @return {undefined}
+   */
+  newTimeRangeOptions(activeKey) {
+    const timeRangeOptions = this.get('timeRangeOptions');
+    const newOptions = timeRangeOptions.map((range) => {
+      return {
+        name: range.name,
+        value: range.value,
+        isActive: false
+      };
+    });
+    const foundRangeOption = newOptions.find((range) => range.value === activeKey);
+
+    if (foundRangeOption) {
+      foundRangeOption.isActive = true;
+    }
+
+    return newOptions;
+  },
+
+  /**
+   * Send a POST request to the report anomaly API (2-step process)
+   * http://go/te-ss-alert-flow-api
+   * @method reportAnomaly
+   * @param {String} id - The anomaly id
+   * @param {Object} data - The input values from 'report new anomaly' modal
+   * @return {Promise}
+   */
+  reportAnomaly(id, data) {
+    const reportUrl = `/anomalies/reportAnomaly/${id}`;
+    const requiredProps = [data.startTime, data.endTime, data.feedbackType];
+    const missingData = !requiredProps.every(prop => Ember.isPresent(prop));
+
+    if (missingData) {
+      return Promise.reject(new Error('missing data'));
+    } else {
+      data.startTime = moment(data.startTime).utc().valueOf();
+      data.endTime = moment(data.endTime).utc().valueOf();
+      return fetch(reportUrl, postProps(data)).then((res) => checkStatus(res, 'post'))
+        .then((saveResult) => {
+          const updateUrl = `/anomalies/updateFeedbackRange/${data.startTime}/${data.endTime}/${id}`;
+          return fetch(updateUrl, postProps(data)).then((res) => checkStatus(res, 'post'));
+        });
+    }
+  },
+
+  /**
+   * When exiting route, lets kill the replay status check calls
+   * @method clearAll
+   * @return {undefined}
+   */
+  clearAll() {
+    this.setProperties({
+      requestCanContinue: false
+    });
+  },
+
+  /**
+   * Actions for alert page
+   */
+  actions: {
+
+    /**
+     * Handle selected dimension filter
+     * @method onSelectDimension
+     * @param {Object} selectedObj - the user-selected dimension to filter by
+     */
+    onSelectDimension(selectedObj) {
+      this.set('selectedDimension', selectedObj);
+    },
+
+    /**
+     * Handle selected resolution filter
+     * @method onSelectResolution
+     * @param {Object} selectedObj - the user-selected resolution to filter by
+     */
+    onSelectResolution(selectedObj) {
+      this.set('selectedResolution', selectedObj);
+    },
+
+    /**
+     * Handle dynamically saving anomaly feedback responses
+     * @method onChangeAnomalyResponse
+     * @param {Object} anomalyRecord - the anomaly being responded to
+     * @param {String} selectedResponse - user-selected anomaly feedback option
+     * @param {Object} inputObj - the selection object
+     */
+    onChangeAnomalyResponse(anomalyRecord, selectedResponse, inputObj) {
+      const responseObj = _.find(this.get('anomalyResponseObj'), { 'name': selectedResponse });
+      Ember.set(inputObj, 'selected', selectedResponse);
+
+      // Save anomaly feedback
+      this.updateAnomalyFeedback(anomalyRecord.anomalyId, responseObj.value)
+        .then((res) => {
+          // We make a call to ensure our new response got saved
+          this.verifyAnomalyFeedback(anomalyRecord.anomalyId, responseObj.status)
+            .then((res) => {
+              const filterMap = res.searchFilters ? res.searchFilters.statusFilterMap : null;
+              if (filterMap && filterMap.hasOwnProperty(responseObj.status)) {
+                Ember.set(anomalyRecord, 'anomalyFeedback', selectedResponse);
+                Ember.set(anomalyRecord, 'showResponseSaved', true);
+              } else {
+                return Promise.reject(new Error('Response not saved'));
+              }
+            }); // verifyAnomalyFeedback
+        }) // updateAnomalyFeedback
+        .catch((err) => {
+          Ember.set(anomalyRecord, 'showResponseFailed', true);
+          Ember.set(anomalyRecord, 'showResponseSaved', false);
+        });
+    },
+
+    /**
+     * Action handler for page clicks
+     * @param {Number|String} page
+     */
+    onPaginationClick(page) {
+      let newPage = page;
+      let currentPage = this.get('currentPage');
+
+      switch (page) {
+        case 'previous':
+          newPage = --currentPage;
+          break;
+        case 'next':
+          newPage = ++currentPage;
+          break;
+      }
+
+      this.set('currentPage', newPage);
+    },
+
+    /**
+     * Handle submission of missing anomaly form from alert-report-modal
+     */
+    onSubmitMissingAnomaly() {
+      const { alertId, missingAnomalyProps } = this.getProperties('alertId', 'missingAnomalyProps');
+      this.reportAnomaly(alertId, missingAnomalyProps)
+        .then((result) => {
+          this.setProperties({
+            openReportModal: false,
+            isReportSuccess: true
+          });
+        })
+        // If failure, leave modal open and report
+        .catch((err) => {
+          this.setProperties({
+            missingAnomalyProps: {},
+            isReportFailure: true
+          });
+        });
+    },
+
+    /**
+     * Handle missing anomaly modal cancel
+     */
+    onCancelMissingAnomaly() {
+      this.setProperties({
+        openReportModal: false,
+        isReportSuccess: false,
+        isReportFailure: false
+      });
+    },
+
+    /**
+     * Open modal for missing anomalies
+     */
+    onClickReportAnomaly() {
+      this.set('openReportModal', true);
+    },
+
+    /**
+     * Received bubbled-up action from modal
+     * @param {Object} all input field values
+     */
+    onInputMissingAnomaly(inputObj) {
+      this.set('missingAnomalyProps', inputObj);
+    },
+
+    /**
+     * Handle display of selected baseline options
+     * @param {Object} wowObj - the baseline selection
+     */
+    onBaselineOptionClick(wowObj) {
+      const { anomalyData, baselineOptions } = this.getProperties('anomalyData', 'baselineOptions');
+      const isValidSelection = !wowObj.isActive;
+      let newOptions = baselineOptions.map((val) => {
+        return { name: val.name, isActive: false };
+      });
+
+      // Set active option
+      newOptions.find((val) => val.name === wowObj.name).isActive = true;
+      this.set('baselineOptions', newOptions);
+
+      // Set new values for each anomaly
+      if (isValidSelection) {
+        for (var anomaly of anomalyData) {
+          const wow = anomaly.wowData;
+          const wowDetails = _.find(wow.compareResults, { 'compareMode': wowObj.name });
+          let curr = anomaly.current;
+          let base = anomaly.baseline;
+          let change = anomaly.changeRate;
+
+          if (wowDetails) {
+            curr = wow.currentVal.toFixed(2);
+            base = wowDetails.baselineValue.toFixed(2);
+            change = wowDetails.change.toFixed(2);
+          }
+
+          Ember.setProperties( anomaly, {
+            shownCurrent: curr,
+            shownBaseline: base,
+            shownChangeRate: change
+          });
+        }
+      }
+    },
+
+    /**
+     * Handle display of selected anomaly time ranges (reload the model with new query params)
+     * @method onRangeOptionClick
+     * @param {Object} rangeOption - the selected range object
+     */
+    onRangeOptionClick(rangeOption) {
+      const rangeFormat = 'YYYY-MM-DD';
+      const defaultEndDate = buildDateEod(1, 'day').valueOf();
+
+      // Trigger reload in model with new time range. Transition for 'custom' dates is handled by 'onRangeSelection'
+      if (rangeOption.value !== 'custom') {
+        this.setProperties({
+          timeRangeOptions: this.newTimeRangeOptions(rangeOption.value),
+          activeRangeStart: moment(rangeOption.start).format(rangeFormat),
+          activeRangeEnd: moment(defaultEndDate).format(rangeFormat)
+        });
+        this.transitionToRoute({ queryParams: {
+          mode: 'explore',
+          duration: rangeOption.value,
+          startDate: rangeOption.start,
+          endDate: defaultEndDate
+        }});
+      }
+    },
+
+    /**
+     * Sets the new custom date range for anomaly coverage
+     * @method onRangeSelection
+     * @param {String} start  - stringified start date
+     * @param {String} end    - stringified end date
+     */
+    onRangeSelection(start, end) {
+      this.set('timeRangeOptions', this.newTimeRangeOptions('custom'));
+      this.transitionToRoute({ queryParams: {
+        mode: 'explore',
+        duration: 'custom',
+        startDate: moment(start).valueOf(),
+        endDate: moment(end).valueOf()
+      }});
+    },
+
+    /**
+     * Load tuning sub-route
+     */
+    onClickTuneSensitivity() {
+      this.transitionToRoute('manage.alert.tune', this.get('alertId'));
+    },
+
+    /**
+     * Handle sorting for each sortable table column
+     * @param {String} sortKey  - stringified start date
+     */
+    toggleSortDirection(sortKey) {
+      const propName = 'sortColumn' + sortKey.capitalize() + 'Up' || '';
+
+      this.toggleProperty(propName);
+      if (this.get(propName)) {
+        this.set('selectedSortMode', sortKey + ':up');
+      } else {
+        this.set('selectedSortMode', sortKey + ':down');
+      }
+
+      //On sort, set table to first pagination page
+      this.set('currentPage', 1);
+    }
+
+  }
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/route.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/route.js
new file mode 100644
index 00000000000..5179342b156
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/route.js
@@ -0,0 +1,428 @@
+/**
+ * Handles the 'explore' route for manage alert
+ * @module manage/alert/edit/explore
+ * @exports manage/alert/edit/explore
+ */
+import Ember from 'ember';
+import fetch from 'fetch';
+import moment from 'moment';
+import _ from 'lodash';
+import { checkStatus, pluralizeTime, buildDateEod, parseProps } from 'thirdeye-frontend/helpers/utils';
+
+/**
+ * Shorthand for setting date defaults
+ */
+const dateFormat = 'YYYY-MM-DD';
+
+/**
+ * Basic alert page defaults
+ */
+const paginationDefault = 10;
+const durationDefault = '1m';
+const durationMap = { 'm':'month', 'd':'day', 'w':'week' };
+const startDateDefault = buildDateEod(1, 'month').valueOf();
+const endDateDefault = buildDateEod(1, 'day');
+
+/**
+ * Fetches all anomaly data for found anomalies - downloads all 'pages' of data from server
+ * in order to handle sorting/filtering on the entire set locally. Start/end date are not used here.
+ * @param {Array} anomalyIds - list of all found anomaly ids
+ * @returns {Ember.RSVP promise}
+ */
+const fetchCombinedAnomalies = (anomalyIds) => {
+  const anomalyPromises = [];
+
+  // Split array of all ids into buckets of 10 (paginationDefault)
+  const idGroups = anomalyIds.map((item, index) => {
+    return (index % paginationDefault === 0) ? anomalyIds.slice(index, index + paginationDefault) : null;
+  }).filter(item => item);
+
+  // Loop on number of pages (paginationDefault) of anomaly data to fetch
+  for (let i = 0; i < idGroups.length; i++) {
+    let idString = encodeURIComponent(idGroups[i].toString());
+    let getAnomalies = fetch(`/anomalies/search/anomalyIds/0/0/${i + 1}?anomalyIds=${idString}`).then(checkStatus);
+    anomalyPromises.push(Ember.RSVP.resolve(getAnomalies));
+  }
+
+  return Ember.RSVP.all(anomalyPromises);
+};
+
+/**
+ * Derives start/end timestamps based on queryparams and user-selected time range with certain fall-backs/defaults
+ * @param {String} bucketUnit - is requested range from an hourly or minutely metric?
+ * @param {String} duration - the model's processed query parameter for duration ('1m', '2w', etc)
+ * @param {String} start - the model's processed query parameter for startDate
+ * @param {String} end - the model's processed query parameter for endDate
+ * @returns {Object}
+ */
+const processRangeParams = (bucketUnit, duration, start, end) => {
+  // To avoid loading too much data, override our time span defaults based on whether the metric is 'minutely'
+  const isMetricMinutely = bucketUnit.toLowerCase().includes('minute');
+  const defaultQueryUnit = isMetricMinutely ? 'week' : 'month';
+  const defaultQuerySize = isMetricMinutely ? 2 : 1;
+
+  // We also allow a 'duration' query param to set the time range. For example, duration=15d (last 15 days)
+  const qsRegexMatch = duration.match(new RegExp(/^(\d)+([d|m|w])$/i));
+  const durationMatch = duration && qsRegexMatch ? qsRegexMatch : [];
+
+  // If the duration string is recognized, we use it. Otherwise, we fall back on the defaults above
+  const querySize = durationMatch && durationMatch.length ? durationMatch[1] : defaultQuerySize;
+  const queryUnit = durationMatch && durationMatch.length ? durationMap[durationMatch[2].toLowerCase()] : defaultQueryUnit;
+
+  // If duration = 'custom', we know the user is requesting specific start/end times.
+  // In this case, we will use those instead of our parsed duration & defaults
+  const isCustomDate = duration === 'custom';
+  const baseStart = isCustomDate ? moment(parseInt(start, 10)) : buildDateEod(querySize, queryUnit);
+  const baseEnd = isCustomDate ? moment(parseInt(end, 10)) : endDateDefault;
+
+  // These resulting timestamps are used for our graph and anomaly queries
+  const startStamp = baseStart.valueOf();
+  const endStamp = baseEnd.valueOf();
+
+  return { startStamp, endStamp, baseStart, baseEnd };
+};
+
+/**
+ * Setup for query param behavior
+ */
+const queryParamsConfig = {
+  refreshModel: true,
+  replace: true
+};
+
+const replaceConfig = {
+  replace: true
+};
+
+export default Ember.Route.extend({
+  queryParams: {
+    duration: queryParamsConfig,
+    startDate: queryParamsConfig,
+    endDate: queryParamsConfig
+  },
+
+  beforeModel(transition) {
+    const { duration, startDate } = transition.queryParams;
+
+    // Default to 1 month of anomalies to show if no dates present in query params
+    if (!duration || !startDate) {
+      this.transitionTo({ queryParams: {
+        duration: durationDefault,
+        startDate: startDateDefault,
+        endDate: endDateDefault
+      }});
+    }
+  },
+
+  model(params, transition) {
+    const { id, alertData } = this.modelFor('manage.alert');
+    if (!id) { return; }
+
+    const {
+      duration = durationDefault,
+      startDate = startDateDefault,
+      endDate = endDateDefault
+    } = transition.queryParams;
+
+    // Prepare endpoints for eval, mttd, projected metrics calls
+    const isoStart = moment(Number(startDate)).toISOString();
+    const isoEnd = moment(Number(endDate)).toISOString();
+    const tuneParams = `start=${isoStart}&end=${isoEnd}&autotunetype=AUTOTUNE`;
+    const autoTuneUrl = `/detection-job/autotune/filter/${id}?${tuneParams}`;
+    const evalUrl = `/detection-job/eval/projected/${id}`;
+    const mttdUrl = `/detection-job/eval/mttd/${id}`;
+
+    // TODO: apply calls for alertEvalMetrics from go/te-ss-alert-flow-api wiki
+    const promiseHash = {
+      eval: null,
+      projected: null,
+      mttd: fetch(mttdUrl).then(checkStatus)
+    };
+
+    return Ember.RSVP.hash(promiseHash)
+      .then((alertEvalMetrics) => {
+        return {
+          id,
+          alertData,
+          duration,
+          startDate,
+          endDate,
+          alertEvalMetrics
+        };
+      });
+  },
+
+  afterModel(model) {
+    this._super(model);
+
+    const {
+      id,
+      alertData,
+      duration,
+      startDate,
+      endDate,
+      autoTune,
+      alertEvalMetrics
+    } = model;
+
+    // Pull alert properties into context
+    const {
+      metric: metricName,
+      collection: dataset,
+      exploreDimensions,
+      filters,
+      bucketSize,
+      bucketUnit
+    } = alertData;
+
+    // Derive start/end time ranges based on querystring input with fallback on default '1 month'
+    const {
+      startStamp,
+      endStamp,
+      baseStart,
+      baseEnd
+    } = processRangeParams( bucketUnit, duration, startDate, endDate );
+
+    // Set initial value for metricId for early transition cases
+    let metricId = '';
+
+    Object.assign(model, { startStamp, endStamp, alertEvalMetrics });
+    return fetch(`/data/autocomplete/metric?name=${dataset}::${metricName}`).then(checkStatus)
+      // Fetch the metric Id for the current alert
+      .then((metricsByName) => {
+        metricId = metricsByName.length ? metricsByName.pop().id : '';
+        return fetch(`/data/maxDataTime/metricId/${metricId}`).then(checkStatus);
+      })
+
+      // Fetch max data time for this metric (prep call for graph data) - how much data can be displayed?
+      // Note: In the event of custom date selection, the end date might be less than maxTime
+      .then((maxTime) => {
+        const dimension = exploreDimensions || 'All';
+        const startDate = baseStart.utc().format(dateFormat);
+        const endDate = baseEnd.utc().format(dateFormat);
+        const currentEnd = moment(maxTime).isValid()
+          ? moment(maxTime).valueOf()
+          : buildDateEod(1, 'day').valueOf();
+        const formattedFilters = JSON.stringify(parseProps(filters));
+        const baselineStart = moment(startStamp).subtract(1, 'week').valueOf();
+        const graphEnd = (endStamp < currentEnd) ? endStamp : currentEnd;
+        const baselineEnd = moment(graphEnd).subtract(1, 'week');
+        const metricDataUrl =  `/timeseries/compare/${metricId}/${startStamp}/${graphEnd}/` +
+          `${baselineStart}/${baselineEnd}?dimension=${dimension}&granularity=` +
+          `${bucketSize + '_' + bucketUnit}&filters=${encodeURIComponent(formattedFilters)}&minDate=${baseEnd}&maxDate=${baseStart}`;
+
+        Object.assign(model, { maxTime, metricDataUrl });
+        return fetch(`/dashboard/anomaly-function/${id}/anomalies?start=${startDate}&end=${endDate}`).then(checkStatus);
+      })
+
+      // Fetching first page of anomaly Ids for current alert
+      .then((anomalyIds) => {
+        const totalAnomalies = anomalyIds.length;
+        const anomalyDataUrl = `/anomalies/search/anomalyIds/${startStamp}/${endStamp}/1?anomalyIds=`;
+        if (Ember.isEmpty(anomalyIds)) { return []; }
+        else {
+          Object.assign(model, { anomalyIds, totalAnomalies, anomalyDataUrl });
+          return fetchCombinedAnomalies(anomalyIds, true);
+        }
+      })
+
+      // Fetch all anomaly data for returned Ids to paginate all from one array
+      // TODO: load only first page, and defer loading the rest
+      .then((rawAnomalyData) => {
+        //rawAnomalyData.forEach(data => anomalies.push(...data.anomalyDetailsList));
+        const anomalies = [].concat(...rawAnomalyData.map(data => data.anomalyDetailsList));
+        // These props are the same for each record, so take it from the first one
+        const filterMaps = rawAnomalyData[0] ? rawAnomalyData[0].searchFilters || [] : [];
+        const anomalyCount = rawAnomalyData[0] ? rawAnomalyData[0].totalAnomalies : 0;
+        Object.assign(model, { anomalies, filterMaps, anomalyCount });
+      })
+
+      // Got errors?
+      .catch((errors) => {
+        Object.assign(model, { loadError: true, loadErrorMsg: errors });
+      });
+  },
+
+  setupController(controller, model) {
+    this._super(controller, model);
+
+    const {
+      id,
+      alertData,
+      email,
+      filters,
+      duration,
+      startStamp,
+      endStamp,
+      loadError,
+      metricDataUrl,
+      totalAnomalies,
+      anomalyDataUrl,
+      alertEvalMetrics,
+      allConfigGroups,
+      allAppNames,
+      anomalies
+    } = model;
+
+    const resolutionOptions = ['All Resolutions'];
+    const dimensionOptions = ['All Dimensions'];
+
+    // Set up the response type options for anomalies
+    const anomalyResponseObj = [
+      { name: 'Not reviewed yet',
+        value: 'NO_FEEDBACK',
+        status: 'Not Resolved'
+      },
+      { name: 'True anomaly',
+        value: 'ANOMALY',
+        status: 'Confirmed Anomaly'
+      },
+      { name: 'False alarm',
+        value: 'NOT_ANOMALY',
+        status: 'False Alarm'
+      },
+      { name: 'I don\'t know',
+        value: 'NO_FEEDBACK',
+        status: 'Not Resolved'
+      },
+      { name: 'Confirmed - New Trend',
+        value: 'ANOMALY_NEW_TREND',
+        status: 'New Trend'
+      }
+    ];
+
+    // Clean array for response options power-select
+    const responseOptions = anomalyResponseObj.map(response => response.name);
+
+    // Set up time range options for entire page
+    const timeRangeOptions = [
+      {
+        name: 'Last 30 Days',
+        value: '1m',
+        start: startDateDefault,
+        isActive: false
+      },
+      {
+        name: 'Last 2 Weeks',
+        value: '2w',
+        start: buildDateEod(2, 'week').valueOf(),
+        isActive: false
+      },
+      {
+        name: 'Last Week',
+        value: '1w',
+        start: buildDateEod(1, 'week').valueOf(),
+        isActive: false
+      },
+      {
+        name: 'Custom',
+        value: 'custom',
+        start: null,
+        isActive: false
+      }
+    ];
+
+    // Does the duration query param match one of our range options? (for highlighting)
+    const matchingDuration = timeRangeOptions.find((range) => range.value === duration);
+    if (matchingDuration) {
+      matchingDuration.isActive = true;
+    } else {
+      timeRangeOptions.find((range) => range.name === 'Custom').isActive = true;
+    }
+
+    // Loop over all anomalies to configure display settings
+    for (var anomaly of anomalies) {
+      let dimensionList = [];
+      const startMoment = moment(anomaly.anomalyStart);
+      const endMoment = moment(anomaly.anomalyEnd);
+      const anomalyDuration = moment.duration(endMoment.diff(startMoment));
+      const days = anomalyDuration.get("days");
+      const hours = anomalyDuration.get("hours");
+      const minutes = anomalyDuration.get("minutes");
+      const durationArr = [pluralizeTime(days, 'day'), pluralizeTime(hours, 'hour'), pluralizeTime(minutes, 'minute')];
+
+      // Placeholder: ChangeRate will not be calculated on front-end
+      const changeRate = (anomaly.current && anomaly.baseline)
+        ? ((anomaly.current - anomaly.baseline) / anomaly.baseline * 100).toFixed(2) : 0;
+
+      // We want to display only non-zero duration values in our table
+      const noZeroDurationArr = _.remove(durationArr, function(item) {
+        return Ember.isPresent(item);
+      });
+
+      // Set 'not reviewed' label
+      if (!anomaly.anomalyFeedback) {
+        anomaly.anomalyFeedback = 'Not reviewed yet';
+      }
+
+      // Add missing properties
+      Object.assign(anomaly, {
+        changeRate,
+        shownChangeRate: changeRate,
+        startDateStr: moment(anomaly.anomalyStart).format('MMM D, hh:mm A'),
+        durationStr: noZeroDurationArr.join(', '),
+        severityScore: (anomaly.current/anomaly.baseline - 1).toFixed(2),
+        shownCurrent: anomaly.current,
+        shownBaseline: anomaly.baseline,
+        showResponseSaved: false,
+        shorResponseFailed: false
+      });
+
+      // Create a list of all available dimensions for toggling. Also massage dimension property.
+      if (anomaly.anomalyFunctionDimension) {
+        let dimensionObj = JSON.parse(anomaly.anomalyFunctionDimension);
+        for (let dimension of Object.keys(dimensionObj)) {
+          let dimensionKey = dimension.dasherize();
+          let dimensionVal = dimensionObj[dimension].join(',');
+          dimensionList.push({ dimensionKey, dimensionVal });
+          dimensionOptions.push(`${dimensionKey}:${dimensionVal}`);
+        }
+        Object.assign(anomaly, { dimensionList });
+      }
+    }
+
+    // Set up options for resolution filter dropdown based on existing values
+    resolutionOptions.push(...new Set(anomalies.map(record => record.anomalyFeedback)));
+
+    // Prime the controller
+    controller.setProperties({
+      loadError,
+      alertId: id,
+      allConfigGroups,
+      allAppNames,
+      metricDataUrl,
+      totalAnomalies,
+      anomalyDataUrl,
+      responseOptions,
+      timeRangeOptions,
+      resolutionOptions,
+      alertData,
+      emailData: email,
+      anomalyResponseObj,
+      filterData: filters,
+      anomalyData: anomalies,
+      alertEvalMetrics,
+      activeRangeStart: startStamp,
+      activeRangeEnd: endStamp,
+      isGraphReady: false,
+      dimensionOptions: Array.from(new Set(dimensionOptions))
+    });
+
+    controller.initialize(false);
+  },
+
+  resetController(controller, isExiting) {
+    this._super(...arguments);
+
+    if (isExiting) {
+      controller.clearAll();
+    }
+  },
+
+  actions: {
+    // Fetch supplemental data after template has rendered (like graph)
+    didTransition() {
+      this.controller.fetchDeferredAnomalyData();
+    }
+  }
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/template.hbs b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/template.hbs
new file mode 100644
index 00000000000..f4a63ce2fbb
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/explore/template.hbs
@@ -0,0 +1,306 @@
+<div class="manage-alert-explore">
+  {{#if (not isReplayPending)}}
+    {{!-- {{#if filteredAnomalies}} --}}
+      <div class="te-pill-selectors">
+        {{!-- Date range selector --}}
+        <div class="te-pill-selectors__label">Showing</div>
+        <ul class="te-alert-page-hzlist">
+          {{#each timeRangeOptions as |range|}}
+            <li class="te-alert-page-hzlist__item {{if range.isActive "te-alert-page-hzlist__item--active"}}" {{action "onRangeOptionClick" range}}>
+              {{range.name}}
+              {{#if (eq range.name "Custom")}}
+                : {{date-range-picker
+                  class="te-pill-selectors__range-picker"
+                  timePicker=false
+                  timePicker24Hour=true
+                  timePickerIncrement=timePickerIncrement
+                  maxDate=maxTime
+                  start=viewRegionStart
+                  end=viewRegionEnd
+                  ranges=predefinedRanges
+                  showCustomRangeLabel=false
+                  format=uiDateFormat
+                  serverFormat="YYYY-MM-DD HH:mm"
+                  applyAction=(action "onRangeSelection")
+                }}
+              {{/if}}
+            </li>
+          {{/each}}
+        </ul>
+      </div>
+
+      <div class="te-horizontal-cards te-content-block">
+        <h4 class="te-alert-page__subtitle">Alert Performance</h4>
+        <a class="te-pill-selectors__side-link" {{action "onClickTuneSensitivity" this}}>Customize sensitivity</a>
+        <div class="te-horizontal-cards__container">
+          {{!-- Alert anomaly stats cards --}}
+          {{#each anomalyStats as |card|}}
+            <ul class="te-horizontal-cards__card">
+              <li class="te-horizontal-cards__card-title">{{card.title}}</li>
+              <li class="te-horizontal-cards__card-value">{{card.value}}
+                <div class="te-horizontal-cards__card-tooltip">
+                  <span>
+                    <i class="glyphicon glyphicon-question-sign"></i>
+                    {{#tooltip-on-element}}{{card.text}}{{/tooltip-on-element}}
+                  </span>
+                </div>
+              </li>
+              <li class="te-horizontal-cards__card-text">
+                {{#if card.projected}}
+                  Projected: <strong>{{card.projected}}</strong>
+                {{/if}}
+              </li>
+            </ul>
+          {{/each}}
+        </div>
+      </div>
+
+      <div class="te-content-block">
+        <h4>Anomalies over time ({{filteredAnomalies.length}})</h4>
+        <a class="te-pill-selectors__side-link te-pill-selectors__side-link--high" {{action "onClickReportAnomaly" this}}>Report missing anomaly</a>
+
+        <div class="te-pill-selectors">
+          {{!-- Dimension selector --}}
+          <div class="te-pill-selectors__range-picker col-md-3">
+            {{#power-select
+              triggerId="select-dimension"
+              triggerClass="te-form__select"
+              options=dimensionOptions
+              searchEnabled=false
+              selected=selectedDimension
+              onchange=(action "onSelectDimension")
+              as |dimension|
+            }}
+              {{dimension}}
+            {{/power-select}}
+          </div>
+          {{!-- Resolution selector --}}
+          <div class="te-pill-selectors__range-picker col-md-3">
+            {{#power-select
+              triggerId="select-resolution"
+              triggerClass="te-form__select"
+              options=resolutionOptions
+              searchEnabled=false
+              selected=selectedResolution
+              onchange=(action "onSelectResolution")
+              as |resolution|
+            }}
+              {{resolution}}
+            {{/power-select}}
+          </div>
+        </div>
+
+        {{#if openReportModal}}
+          {{#te-modal
+            headerText="Report Undetected Anomaly"
+            cancelButtonText="Cancel"
+            submitButtonText="Report"
+            submitAction=(action "onSubmitMissingAnomaly")
+            cancelAction=(action "onCancelMissingAnomaly")
+          }}
+            {{alert-report-modal
+              metricName=alertData.metric
+              alertName=alertData.functionName
+              dimensionOptions=dimensionOptions
+              timePickerIncrement=timePickerIncrement
+              maxTime=maxTime
+              viewRegionStart=viewRegionStart
+              viewRegionEnd=viewRegionEnd
+              predefinedRanges=predefinedRanges
+              uiDateFormat=uiDateFormat
+              graphMessageText=""
+              inputAction=(action "onInputMissingAnomaly")
+            }}
+          {{/te-modal}}
+        {{/if}}
+
+        {{!-- Alert anomaly graph --}}
+        <div class="te-graph-container col-xs-12">
+          <div class="te-graph-alert {{if (not isGraphReady) 'te-graph-alert--pending'}}">
+            {{#if isMetricDataLoading}}
+              <div class="spinner-wrapper--self-serve">{{ember-spinner}}</div>
+            {{/if}}
+            {{#if isGraphReady}}
+              {{anomaly-graph
+                primaryMetric=metricData
+                isLoading=loading
+                showSubchart=true
+                showLegend=false
+                legendText=legendText
+                enableZoom=true
+                componentId='create-alert'
+                showGraphLegend=false
+                height=400
+              }}
+            {{else}}
+               <div class="te-graph-alert__content">
+                <div class="glyphicon glyphicon-equalizer}} te-graph-alert__icon"></div>
+                <p class="te-graph-alert__pre-text">Loading graph...</p>
+              </div>
+            {{/if}}
+          </div>
+        </div>
+
+        {{#if filteredAnomalies}}
+          {{!-- Baseline type selector --}}
+          <div class="te-pill-selectors">
+            <div class="te-pill-selectors__label">Baseline</div>
+            <ul class="te-alert-page-hzlist">
+              {{#each baselineOptions as |baseline|}}
+                <li class="te-alert-page-hzlist__item {{if baseline.isActive "te-alert-page-hzlist__item--active"}}" {{action "onBaselineOptionClick" baseline}}>
+                  {{baseline.name}}
+                </li>
+              {{/each}}
+            </ul>
+          </div>
+
+        {{else}}
+          No anomalies to show.
+        {{/if}}
+
+          {{!-- Alert anomaly table --}}
+          <table class="te-anomaly-table">
+            {{#if filteredAnomalies}}
+            <thead>
+              <tr class="te-anomaly-table__row te-anomaly-table__head">
+                 <th class="te-anomaly-table__cell-head">
+                  <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "start"}}>
+                    Start/Duration (PDT)
+                    <i class="te-anomaly-table__glyph glyphicon {{if sortColumnStartUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
+                  </a>
+                 </th>
+                 <th class="te-anomaly-table__cell-head">Dimensions</th>
+                 <th class="te-anomaly-table__cell-head">
+                  <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "score"}}>
+                    Severity Score
+                    <i class="te-anomaly-table__glyph glyphicon {{if sortColumnScoreUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
+                  </a>
+                 </th>
+                 <th class="te-anomaly-table__cell-head">
+                  <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "change"}}>
+                    Current/WoW
+                    <i class="te-anomaly-table__glyph glyphicon {{if sortColumnChangeUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
+                  </a>
+                 </th>
+                 <th class="te-anomaly-table__cell-head">
+                  <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "resolution"}}>
+                    Resolution
+                    <i class="te-anomaly-table__glyph glyphicon {{if sortColumnResolutionUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
+                  </a>
+               </th>
+              </tr>
+            </thead>
+            {{else}}
+              No anomalies to show.
+            {{/if}}
+            <tbody>
+              {{#each paginatedFilteredAnomalies as |anomaly|}}
+                <tr class="te-anomaly-table__row">
+                   <td class="te-anomaly-table__cell">
+                    <ul class="te-anomaly-table__list">
+                      <li class="te-anomaly-table__list--stronger">{{anomaly.startDateStr}}</li>
+                      <li class="te-anomaly-table__list--lighter">{{anomaly.durationStr}}</li>
+                    </ul>
+                   </td>
+                   <td class="te-anomaly-table__cell">
+                    <ul class="te-anomaly-table__list">
+                     {{#each anomaly.dimensionList as |dimension|}}
+                        <li class="te-anomaly-table__list--smaller">
+                          {{dimension.dimensionKey}}: {{dimension.dimensionVal}}
+                        </li>
+                     {{else}}
+                        -
+                     {{/each}}
+                    </ul>
+                   </td>
+                   <td class="te-anomaly-table__cell">{{anomaly.severityScore}}</td>
+                   <td class="te-anomaly-table__cell">
+                    <ul class="te-anomaly-table__list">
+                      <li>{{anomaly.shownCurrent}} / {{anomaly.shownBaseline}}</li>
+                      <li class="te-anomaly-table__list--warning">({{anomaly.shownChangeRate}}%)</li>
+                    </ul>
+                   </td>
+                   <td class="te-anomaly-table__cell">
+                      {{#if anomaly.showResponseSaved}}
+                        <i class="te-anomaly-table__glyph--status glyphicon glyphicon-ok-circle"></i>
+                      {{/if}}
+
+                      {{#if anomaly.showResponseFailed}}
+                        <i class="te-anomaly-table__glyph--status glyphicon glyphicon-remove-circle"></i>
+                      {{/if}}
+
+                      {{#power-select
+                        triggerId=anomaly.anomalyId
+                        triggerClass="te-anomaly-table__select"
+                        options=responseOptions
+                        searchEnabled=false
+                        selected=anomaly.anomalyFeedback
+                        onchange=(action "onChangeAnomalyResponse" anomaly)
+                        as |response|
+                      }}
+                        {{response}}
+                      {{/power-select}}
+
+                      <a target="_blank" class="te-anomaly-table__link" href="/thirdeye#anomalies?anomaliesSearchMode=id&pageNumber=1&anomalyIds={{anomaly.anomalyId}}">investigate</a>
+                   </td>
+                </tr>
+              {{/each}}
+            </tbody>
+          </table>
+
+          {{!--pagination--}}
+          {{#if (gt pagesNum 1)}}
+            <nav class="text-center" aria-label="Page navigation">
+              <ul class="pagination">
+                <li class={{if (eq currentPage 1) 'active disabled'}} >
+                  <a href="#" {{action "onPaginationClick" 1}} aria-label="First">
+                    <span aria-hidden="true">First</span>
+                  </a>
+                </li>
+                <li class={{if (eq currentPage 1) 'active disabled'}}>
+                  <a href="#" {{action "onPaginationClick" "previous"}} aria-label="Previous">
+                    <span aria-hidden="true">Previous</span>
+                  </a>
+                </li>
+                {{#each viewPages as |page|}}
+                  <li class={{if (eq page currentPage) 'active'}}><a href="#" {{action "onPaginationClick" page}}>{{page}}</a></li>
+                {{/each}}
+                <li class={{if (eq currentPage pagesNum) 'disabled'}} >
+                  <a href="#" {{action "onPaginationClick" "next"}} aria-label="Next">
+                    <span aria-hidden="true">Next</span>
+                  </a>
+                </li>
+                <li class={{if (eq currentPage pagesNum) 'disabled'}} >
+                  <a href="#" {{action "onPaginationClick" pagesNum}} aria-label="Last">
+                    <span aria-hidden="true">Last</span>
+                  </a>
+                </li>
+              </ul>
+            </nav>
+          {{/if}}
+      </div>
+
+  {{else}}
+    <div class="te-alert-page-pending">
+      <img src="assets/images/te-alert-pending.png" class="te-alert-page-pending__image" alt="alertData.Setup is Processing">
+      <h2 class="te-alert-page-pending__title">Setting up your alert</h2>
+      <div class="te-alert-page-pending__loader"></div>
+      <p class="te-alert-page-pending__text">
+        This may take up to a few minutes <br/>
+        We will send you an email when it's done!
+      </p>
+    </div>
+  {{/if}}
+
+  {{#if isReportSuccess}}
+    {{#bs-alert type="success" class="te-form__banner te-form__banner--success"}}
+      <strong>Success:</strong> We have saved the reported anomaly for alert id <strong>{{alertId}}</strong>
+    {{/bs-alert}}
+  {{/if}}
+
+  {{#if isReportFailure}}
+    {{#bs-alert type="danger" class="te-form__banner te-form__banner--failure"}}
+      <strong>Error:</strong> Failed to save reported anomaly.
+    {{/bs-alert}}
+  {{/if}}
+</div>
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/route.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/route.js
index bff46c14bad..0b1cbd2a0ce 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alert/route.js
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/route.js
@@ -4,117 +4,11 @@
  * @exports manage alert model
  */
 import Ember from 'ember';
+import RSVP from 'rsvp';
 import fetch from 'fetch';
-import moment from 'moment';
-import _ from 'lodash';
-import { checkStatus, pluralizeTime } from 'thirdeye-frontend/helpers/utils';
+import { checkStatus, buildDateEod } from 'thirdeye-frontend/helpers/utils';
 
-/**
- * Shorthand for setting date defaults
- */
-const buildDate = (unit, type) => moment().subtract(unit, type).endOf('day').utc();
-const dateFormat = 'YYYY-MM-DD';
-
-/**
- * Basic alert page defaults
- */
-const paginationDefault = 10;
-const durationDefault = '1m';
-const durationMap = { 'm':'month', 'd':'day', 'w':'week' };
-const startDateDefault = buildDate(1, 'month').valueOf();
-const endDateDefault = buildDate(1, 'day');
-
-/**
- * Basic headers for any post request needed
- */
-const postProps = {
-  method: 'POST',
-  headers: {
-    'Accept': 'application/json',
-    'Content-Type': 'application/json'
-  }
-};
-
-/**
- * Parses stringified object from payload
- * @param {String} filters
- * @returns {Object}
- */
-const parseProps = (filters) => {
-  filters = filters || '';
-
-  return filters.split(';')
-    .filter(prop => prop)
-    .map(prop => prop.split('='))
-    .reduce(function (aggr, prop) {
-      const [ propName, value ] = prop;
-      aggr[propName] = value;
-      return aggr;
-    }, {});
-};
-
-/**
- * Fetches all anomaly data for found anomalies - downloads all 'pages' of data from server
- * in order to handle sorting/filtering on the entire set locally. Start/end date are not used here.
- * @param {Array} anomalyIds - list of all found anomaly ids
- * @returns {Ember.RSVP promise}
- */
-const fetchCombinedAnomalies = (anomalyIds) => {
-  const anomalyPromises = [];
-
-  // Split array of all ids into buckets of 10 (paginationDefault)
-  const idGroups = anomalyIds.map((item, index) => {
-    return (index % paginationDefault === 0) ? anomalyIds.slice(index, index + paginationDefault) : null;
-  }).filter(item => item);
-
-  // Loop on number of pages (paginationDefault) of anomaly data to fetch
-  for (let i = 0; i < idGroups.length; i++) {
-    let idString = encodeURIComponent(idGroups[i].toString());
-    let getAnomalies = fetch(`/anomalies/search/anomalyIds/0/0/${i + 1}?anomalyIds=${idString}`).then(checkStatus);
-    anomalyPromises.push(Ember.RSVP.resolve(getAnomalies));
-  }
-
-  return Ember.RSVP.all(anomalyPromises);
-};
-
-/**
- * Derives start/end timestamps based on queryparams and user-selected time range with certain fall-backs/defaults
- * @param {String} bucketUnit - is requested range from an hourly or minutely metric?
- * @param {String} duration - the model's processed query parameter for duration ('1m', '2w', etc)
- * @param {String} start - the model's processed query parameter for startDate
- * @param {String} end - the model's processed query parameter for endDate
- * @returns {Object}
- */
-const processRangeParams = (bucketUnit, duration, start, end) => {
-  // To avoid loading too much data, override our time span defaults based on whether the metric is 'minutely'
-  const isMetricMinutely = bucketUnit.toLowerCase().includes('minute');
-  const defaultQueryUnit = isMetricMinutely ? 'week' : 'month';
-  const defaultQuerySize = isMetricMinutely ? 2 : 1;
-
-  // We also allow a 'duration' query param to set the time range. For example, duration=15d (last 15 days)
-  const qsRegexMatch = duration.match(new RegExp(/^(\d)+([d|m|w])$/i));
-  const durationMatch = duration && qsRegexMatch ? qsRegexMatch : [];
-
-  // If the duration string is recognized, we use it. Otherwise, we fall back on the defaults above
-  const querySize = durationMatch && durationMatch.length ? durationMatch[1] : defaultQuerySize;
-  const queryUnit = durationMatch && durationMatch.length ? durationMap[durationMatch[2].toLowerCase()] : defaultQueryUnit;
-
-  // If duration = 'custom', we know the user is requesting specific start/end times.
-  // In this case, we will use those instead of our parsed duration & defaults
-  const isCustomDate = duration === 'custom';
-  const baseStart = isCustomDate ? moment(parseInt(start, 10)) : buildDate(querySize, queryUnit);
-  const baseEnd = isCustomDate ? moment(parseInt(end, 10)) : endDateDefault;
-
-  // These resulting timestamps are used for our graph and anomaly queries
-  const startStamp = baseStart.valueOf();
-  const endStamp = baseEnd.valueOf();
-
-  return { startStamp, endStamp, baseStart, baseEnd };
-};
-
-/**
- * Setup for query param behavior
- */
+// Setup for query param behavior
 const queryParamsConfig = {
   refreshModel: true,
   replace: true
@@ -127,20 +21,18 @@ const replaceConfig = {
 export default Ember.Route.extend({
   queryParams: {
     replay: replaceConfig,
-    replayId: replaceConfig,
-    duration: queryParamsConfig,
-    startDate: queryParamsConfig,
-    endDate: queryParamsConfig
+    replayId: replaceConfig
   },
 
   beforeModel(transition) {
-    const target = transition.targetName;
-    const { duration, startDate } = transition.queryParams;
-    const id = transition.params[target].alertId;
-
-    // Default to 1 month of anomalies to show if no dates present in query params
-    if (!duration || !startDate) {
-      this.transitionTo(target, id, { queryParams: {
+    const durationDefault = '1m';
+    const startDateDefault = buildDateEod(1, 'month').valueOf();
+    const endDateDefault = buildDateEod(1, 'day');
+    const id = transition.params['manage.alert'].alertId;
+
+    // Enter default 'explore' route with defaults loaded in URI
+    if (transition.targetName === 'manage.alert.index') {
+      this.transitionTo('manage.alert.explore', id, { queryParams: {
         duration: durationDefault,
         startDate: startDateDefault,
         endDate: endDateDefault
@@ -149,305 +41,39 @@ export default Ember.Route.extend({
   },
 
   model(params) {
-    const {
-      replay,
-      replayId,
-      duration,
-      startDate,
-      endDate,
-      alertId: id
-    } = params;
+    const { alertId: id } = params;
     if (!id) { return; }
 
+    // Fetch all the basic alert data needed in manage.alert subroutes
+    // TODO: apply calls from go/te-ss-alert-flow-api (see below)
     return Ember.RSVP.hash({
       id,
-      replay,
-      replayId,
-      duration,
-      startDate,
-      endDate,
-      alert: fetch(`/onboard/function/${id}`).then(checkStatus),
-      email: fetch(`/thirdeye/email/function/${id}`).then(checkStatus)
-      // TODO: enable the requests below when ready
-      // alertEval: fetch(`/api/detection-job/eval/filter/${id}?start=${startDate}&end=${endDate}`).then(checkStatus),
-      // projected: fetch(`/eval/projected/${id}`).then(checkStatus),
-      // mttd: fetch(`/eval/mttd/${id}`).then(checkStatus)
+      alertData: fetch(`/onboard/function/${id}`).then(checkStatus),
+      email: fetch(`/thirdeye/email/function/${id}`).then(checkStatus),
+      allConfigGroups: fetch('/thirdeye/entity/ALERT_CONFIG').then(res => res.json()),
+      allAppNames: fetch('/thirdeye/entity/APPLICATION').then(res => res.json())
     });
   },
 
-  afterModel(model) {
-    this._super(model);
-
-    // Pull alert properties into context
-    const {
-      metric: metricName,
-      collection: dataset,
-      exploreDimensions,
-      filters,
-      bucketSize,
-      bucketUnit,
-      id
-    } = model.alert;
-
-    // Derive start/end time ranges based on querystring input with fallback on default '1 month'
-    const { startStamp, endStamp, baseStart, baseEnd } = processRangeParams(
-      bucketUnit,
-      model.duration,
-      model.startDate,
-      model.endDate
-    );
-
-    // Placeholder for incoming alert metrics
-    const alertEvalMetrics = {
-      eval: {},
-      mttd: {},
-      projected: {}
+  resetController(controller, isExiting) {
+    this._super(...arguments);
+    if (isExiting) {
+      controller.set('alertData', {});
     }
-
-    // Set initial value for metricId for early transition cases
-    let metricId = '';
-
-    // TODO: remove placeholders for alertEval/mttd/projected
-    Object.assign(model, { startStamp, endStamp, alertEvalMetrics });
-    return fetch(`/data/autocomplete/metric?name=${dataset}::${metricName}`).then(checkStatus)
-      // Fetch the metric Id for the current alert
-      .then((metricsByName) => {
-        metricId = metricsByName.length ? metricsByName.pop().id : '';
-        return fetch(`/data/maxDataTime/metricId/${metricId}`).then(checkStatus);
-      })
-
-      // Fetch max data time for this metric (prep call for graph data) - how much data can be displayed?
-      // Note: In the event of custom date selection, the end date might be less than maxTime
-      .then((maxTime) => {
-        const dimension = exploreDimensions || 'All';
-        const startDate = baseStart.utc().format(dateFormat);
-        const endDate = baseEnd.utc().format(dateFormat);
-        const currentEnd = moment(maxTime).isValid() ? moment(maxTime).valueOf() : buildDate(1, 'day').valueOf();
-        const formattedFilters = JSON.stringify(parseProps(filters));
-        const baselineStart = moment(startStamp).subtract(1, 'week').valueOf();
-        const graphEnd = (endStamp < currentEnd) ? endStamp : currentEnd;
-        const baselineEnd = moment(graphEnd).subtract(1, 'week');
-        const metricDataUrl =  `/timeseries/compare/${metricId}/${startStamp}/${graphEnd}/` +
-          `${baselineStart}/${baselineEnd}?dimension=${dimension}&granularity=` +
-          `${bucketSize + '_' + bucketUnit}&filters=${encodeURIComponent(formattedFilters)}&minDate=${baseEnd}&maxDate=${baseStart}`;
-
-        Object.assign(model, { maxTime, metricDataUrl });
-        return fetch(`/dashboard/anomaly-function/${id}/anomalies?start=${startDate}&end=${endDate}`).then(checkStatus);
-      })
-
-      // Fetching first page of anomaly Ids for current alert
-      .then((anomalyIds) => {
-        const totalAnomalies = anomalyIds.length;
-        const anomalyDataUrl = `/anomalies/search/anomalyIds/${startStamp}/${endStamp}/1?anomalyIds=`;
-        if (Ember.isEmpty(anomalyIds)) { return []; }
-        else {
-          Object.assign(model, { anomalyIds, totalAnomalies, anomalyDataUrl });
-          return fetchCombinedAnomalies(anomalyIds, true);
-        }
-      })
-
-      // Fetch all anomaly data for returned Ids to paginate all from one array
-      // TODO: load only first page, and defer loading the rest
-      .then((rawAnomalyData) => {
-        //rawAnomalyData.forEach(data => anomalies.push(...data.anomalyDetailsList));
-        const anomalies = [].concat(...rawAnomalyData.map(data => data.anomalyDetailsList));
-        // These props are the same for each record, so take it from the first one
-        const filterMaps = rawAnomalyData[0] ? rawAnomalyData[0].searchFilters || [] : [];
-        const anomalyCount = rawAnomalyData[0] ? rawAnomalyData[0].totalAnomalies : 0;
-        Object.assign(model, { anomalies, filterMaps, anomalyCount });
-      })
-
-      // Got errors?
-      .catch((errors) => {
-        Object.assign(model, { loadError: true, loadErrorMsg: errors });
-      });
   },
 
   setupController(controller, model) {
     this._super(controller, model);
-
-    const {
-      id,
-      alert,
-      email,
-      filters,
-      replay,
-      replayId,
-      duration,
-      startStamp,
-      endStamp,
-      loadError,
-      metricDataUrl,
-      totalAnomalies,
-      anomalyDataUrl,
-      anomalyMetrics,
-      alertEvalMetrics,
-      anomalies
-    } = model;
-
-    const resolutionOptions = ['All Resolutions'];
-    const dimensionOptions = ['All Dimensions'];
-
-    const anomalyResponseObj = [
-      { name: 'Not reviewed yet',
-        value: 'NO_FEEDBACK',
-        status: 'Not Resolved'
-      },
-      { name: 'True anomaly',
-        value: 'ANOMALY',
-        status: 'Confirmed Anomaly'
-      },
-      { name: 'False alarm',
-        value: 'NOT_ANOMALY',
-        status: 'False Alarm'
-      },
-      { name: 'I don\'t know',
-        value: 'NO_FEEDBACK',
-        status: 'Not Resolved'
-      },
-      { name: 'Confirmed - New Trend',
-        value: 'ANOMALY_NEW_TREND',
-        status: 'New Trend'
-      }
-    ];
-
-    const timeRangeOptions = [
-      {
-        name: 'Last 30 Days',
-        value: '1m',
-        start: startDateDefault,
-        isActive: false
-      },
-      {
-        name: 'Last 2 Weeks',
-        value: '2w',
-        start: buildDate(2, 'week').valueOf(),
-        isActive: false
-      },
-      {
-        name: 'Last Week',
-        value: '1w',
-        start: buildDate(1, 'week').valueOf(),
-        isActive: false
-      },
-      {
-        name: 'Custom',
-        value: 'custom',
-        start: null,
-        isActive: false
-      }
-    ];
-
-    // Do we have a matching querystring param for our range options?
-    const responseOptions = anomalyResponseObj.map(response => response.name);
-    const matchingDuration = timeRangeOptions.find((range) => range.value === duration);
-
-    // NOTE: these will be loaded from a new endpoint
-    const alertStats = anomalyMetrics ? {
-      response: Ember.getWithDefault(anomalyMetrics, 'totalResponses', 0) * 100 / totalAnomalies,
-      presicion: anomalyMetrics.precision * 100 || 0,
-      recall: anomalyMetrics.recall * 100 || 0,
-      mttd: '4.8 mins'
-    } : {};
-
-    // Select which duration bucket we are in
-    if (matchingDuration) {
-      matchingDuration.isActive = true;
-    } else {
-      timeRangeOptions.find((range) => range.name === 'Custom').isActive = true;
-    }
-
-    // Loop over all anomalies to configure display settings
-    for (var anomaly of anomalies) {
-      const anomalyDuration = moment.duration(moment(anomaly.anomalyEnd).diff(moment(anomaly.anomalyStart)));
-      const dimensionList = [];
-      const curr = anomaly.current;
-      const base = anomaly.baseline;
-      const days = anomalyDuration.get("days");
-      const hours = anomalyDuration.get("hours");
-      const minutes = anomalyDuration.get("minutes");
-      const durationArr = [pluralizeTime(days, 'day'), pluralizeTime(hours, 'hour'), pluralizeTime(minutes, 'minute')];
-
-      // Placeholder: ChangeRate will not be calculated on front-end
-      const changeRate = (curr && base) ? ((curr - base) / base * 100).toFixed(2) : 0;
-
-      // We want to display only non-zero duration values
-      const noZeroDurationArr = _.remove(durationArr, function(item) {
-        return Ember.isPresent(item);
-      });
-
-      // Set 'not reviewed' label
-      if (!anomaly.anomalyFeedback) {
-        anomaly.anomalyFeedback = 'Not reviewed yet';
-      }
-
-      // Add missing properties
-      Object.assign(anomaly, {
-        changeRate,
-        shownChangeRate: changeRate,
-        startDateStr: moment(anomaly.anomalyStart).format('MMM D, hh:mm A'),
-        durationStr: noZeroDurationArr.join(', '),
-        severityScore: (anomaly.current/anomaly.baseline - 1).toFixed(2),
-        shownCurrent: anomaly.current,
-        shownBaseline: anomaly.baseline,
-        showResponseSaved: false,
-        shorResponseFailed: false
-      });
-
-      // Create a list of all available dimensions for toggling. Also massage dimension property.
-      if (anomaly.anomalyFunctionDimension) {
-        let dimensionObj = JSON.parse(anomaly.anomalyFunctionDimension);
-        for (let dimension of Object.keys(dimensionObj)) {
-          let dimensionKey = dimension.dasherize();
-          let dimensionVal = Object.values(dimensionObj).join(',').toUpperCase();
-          dimensionList.push({ dimensionKey, dimensionVal });
-          dimensionOptions.push(`${dimensionKey}:${dimensionVal}`);
-        }
-        Object.assign(anomaly, { dimensionList });
-      }
-    }
-
-    // Set up options for resolution filter dropdown based on existing values
-    resolutionOptions.push(...new Set(anomalies.map(record => record.anomalyFeedback)));
-
-    // Prime the controller
-    controller.setProperties({
-      loadError,
-      alertId: id,
-      alertStats,
-      metricDataUrl,
-      totalAnomalies,
-      anomalyDataUrl,
-      responseOptions,
-      timeRangeOptions,
-      resolutionOptions,
-      dimensionOptions,
-      alertData: alert,
-      emailData: email,
-      anomalyResponseObj,
-      filterData: filters,
-      anomalyData: anomalies,
-      evalData: alertEvalMetrics,
-      activeRangeStart: startStamp,
-      activeRangeEnd: endStamp,
-      isGraphReady: false
-    });
-
-    controller.initialize(replay);
-  },
-
-  resetController(controller, isExiting) {
-    this._super(...arguments);
-
-    if (isExiting) {
-      controller.clearAll();
-    }
+    const { id, alertData, pathInfo } = model;
+    controller.setProperties({ id, alertData, pathInfo });
   },
 
   actions: {
-    // Fetch supplemental data after template has rendered (like graph)
-    didTransition() {
-      this.controller.fetchDeferredAnomalyData();
+    willTransition(transition) {
+      if (transition.targetName === 'manage.alert.index') {
+        this.refresh();
+      }
     }
   }
+
 });
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/template.hbs b/thirdeye/thirdeye-frontend/app/pods/manage/alert/template.hbs
index c6bfdc56aa9..86a31c9d0d5 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alert/template.hbs
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/template.hbs
@@ -1,4 +1,4 @@
-<section class="te-page__top te-search-results">
+<section class="te-page__top te-search-results te-search-results--slim">
   <div class="container">
     <div class="te-search-results__header">
       <div class="te-search-results__title-group">
@@ -12,8 +12,8 @@
         </div>
       </div>
         <div class="te-search-results__cta">
-          {{#link-to "manage.alerts.edit" alertData.id tagName="button" type="button" class="te-button te-button--sub"}}Edit{{/link-to}}
-          <button {{action "onClickAlertSubscribe"}} class="te-button te-button--main">Subscribe</button>
+          {{#link-to "manage.alert.edit" alertData.id tagName="button" type="button" class="te-button te-button--link"}}Edit{{/link-to}}
+          <button {{action "onClickAlertSubscribe"}} class="te-button te-button--outline">Subscribe</button>
         </div>
     </div>
     <ul class="te-search-results__list te-search-results__list--details-block row">
@@ -79,280 +79,30 @@
         </li>
       </div>
     </ul>
+
+    <div class="te-topcard-subnav">
+      <div class="te-topcard-subnav__item">
+        {{#link-to "manage.alert.explore" alertData.id class="thirdeye-link thirdeye-link--smaller thirdeye-link--nav" activeClass="thirdeye-link--active"}}
+          Alert overview
+        {{/link-to}}
+      </div>
+      <div class="te-topcard-subnav__item">
+        {{#link-to "manage.alert.edit" alertData.id class="thirdeye-link thirdeye-link--smaller thirdeye-link--nav" activeClass="thirdeye-link--active"}}
+          Edit alert settings
+        {{/link-to}}
+      </div>
+      <div class="te-topcard-subnav__item">
+        {{#link-to "manage.alert.tune" alertData.id class="thirdeye-link thirdeye-link--smaller thirdeye-link--nav" activeClass="thirdeye-link--active"}}
+          Tune alert sensitivity
+        {{/link-to}}
+      </div>
+    </div>
+
   </div>
 </section>
 
 <section class="te-page__bottom">
   <div class="container">
-    {{#if (not isReplayPending)}}
-      {{!-- {{#if filteredAnomalies}} --}}
-        <div class="te-pill-selectors">
-          {{!-- Date range selector --}}
-          <div class="te-pill-selectors__label">Showing</div>
-          <ul class="te-alert-page-hzlist">
-            {{#each timeRangeOptions as |range|}}
-              <li class="te-alert-page-hzlist__item {{if range.isActive "te-alert-page-hzlist__item--active"}}" {{action "onRangeOptionClick" range}}>
-                {{range.name}}
-                {{#if (eq range.name "Custom")}}
-                  : {{date-range-picker
-                    class="te-pill-selectors__range-picker"
-                    timePicker=false
-                    timePicker24Hour=true
-                    timePickerIncrement=timePickerIncrement
-                    maxDate=maxTime
-                    start=viewRegionStart
-                    end=viewRegionEnd
-                    ranges=predefinedRanges
-                    showCustomRangeLabel=false
-                    format=uiDateFormat
-                    serverFormat="YYYY-MM-DD HH:mm"
-                    applyAction=(action "onRangeSelection")
-                  }}
-                {{/if}}
-
-              </li>
-            {{/each}}
-          </ul>
-        </div>
-
-        <div class="te-horizontal-cards te-content-block">
-          <h4 class="te-alert-page__subtitle">Alert Performance</h4>
-          <a class="te-pill-selectors__side-link" href="#">Customize sensitivity</a>
-          <div class="te-horizontal-cards__container">
-            {{!-- Alert anomaly stats cards --}}
-            {{#each anomalyStats as |card|}}
-              <ul class="te-horizontal-cards__card">
-                <li class="te-horizontal-cards__card-title">{{card.title}}</li>
-                <li class="te-horizontal-cards__card-value">{{card.value}}
-                  <div class="te-horizontal-cards__card-tooltip">
-                    <span>
-                      <i class="glyphicon glyphicon-question-sign"></i>
-                      {{#tooltip-on-element class="te-tooltip"}}{{card.text}}{{/tooltip-on-element}}
-                    </span>
-                  </div>
-                </li>
-                <li class="te-horizontal-cards__card-text">
-                  {{#if card.projected}}
-                    Projected: <strong>{{card.projected}}</strong>
-                  {{/if}}
-                </li>
-              </ul>
-            {{/each}}
-          </div>
-        </div>
-
-        <div class="te-content-block">
-          <h4>Anomalies over time ({{filteredAnomalies.length}})</h4>
-          <a class="te-pill-selectors__side-link te-pill-selectors__side-link--high" href="#">Report missing anomaly</a>
-
-          <div class="te-pill-selectors">
-            {{!-- Dimension selector --}}
-            <div class="te-pill-selectors__range-picker col-md-3">
-              {{#power-select
-                triggerId="select-dimension"
-                triggerClass="te-form__select"
-                options=dimensionOptions
-                searchEnabled=false
-                selected=selectedDimension
-                onchange=(action "onSelectDimension")
-                as |dimension|
-              }}
-                {{dimension}}
-              {{/power-select}}
-            </div>
-            {{!-- Resolution selector --}}
-            <div class="te-pill-selectors__range-picker col-md-3">
-              {{#power-select
-                triggerId="select-resolution"
-                triggerClass="te-form__select"
-                options=resolutionOptions
-                searchEnabled=false
-                selected=selectedResolution
-                onchange=(action "onSelectResolution")
-                as |resolution|
-              }}
-                {{resolution}}
-              {{/power-select}}
-            </div>
-          </div>
-
-          {{!-- Alert anomaly graph --}}
-          <div class="te-graph-container col-xs-12">
-            <div class="te-graph-alert {{if (not isGraphReady) 'te-graph-alert--pending'}}">
-              {{#if isMetricDataLoading}}
-                <div class="spinner-wrapper--self-serve">{{ember-spinner}}</div>
-              {{/if}}
-              {{#if isGraphReady}}
-                {{anomaly-graph
-                  primaryMetric=metricData
-                  isLoading=loading
-                  showSubchart=true
-                  showLegend=false
-                  legendText=legendText
-                  enableZoom=true
-                  componentId='create-alert'
-                  showGraphLegend=false
-                  height=400
-                }}
-              {{else}}
-                 <div class="te-graph-alert__content">
-                  <div class="glyphicon glyphicon-equalizer}} te-graph-alert__icon"></div>
-                  <p class="te-graph-alert__pre-text">Loading graph...</p>
-                </div>
-              {{/if}}
-            </div>
-          </div>
-
-          {{#if filteredAnomalies}}
-            {{!-- Baseline type selector --}}
-            <div class="te-pill-selectors">
-              <div class="te-pill-selectors__label">Baseline</div>
-              <ul class="te-alert-page-hzlist">
-                {{#each baselineOptions as |baseline|}}
-                  <li class="te-alert-page-hzlist__item {{if baseline.isActive "te-alert-page-hzlist__item--active"}}" {{action "onBaselineOptionClick" baseline}}>
-                    {{baseline.name}}
-                  </li>
-                {{/each}}
-              </ul>
-            </div>
-
-          {{else}}
-            No anomalies to show.
-          {{/if}}
-
-            {{!-- Alert anomaly table --}}
-            <table class="te-anomaly-table">
-              {{#if filteredAnomalies}}
-              <thead>
-                <tr class="te-anomaly-table__row te-anomaly-table__head">
-                   <th class="te-anomaly-table__cell-head">
-                    <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "start"}}>
-                      Start/Duration (PDT)
-                      <i class="te-anomaly-table__glyph glyphicon {{if sortColumnStartUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
-                    </a>
-                   </th>
-                   <th class="te-anomaly-table__cell-head">Dimensions</th>
-                   <th class="te-anomaly-table__cell-head">
-                    <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "score"}}>
-                      Severity Score
-                      <i class="te-anomaly-table__glyph glyphicon {{if sortColumnScoreUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
-                    </a>
-                   </th>
-                   <th class="te-anomaly-table__cell-head">
-                    <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "change"}}>
-                      Current/WoW
-                      <i class="te-anomaly-table__glyph glyphicon {{if sortColumnChangeUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
-                    </a>
-                   </th>
-                   <th class="te-anomaly-table__cell-head">
-                    <a class="te-anomaly-table__cell-link" {{action "toggleSortDirection" "resolution"}}>
-                      Resolution
-                      <i class="te-anomaly-table__glyph glyphicon {{if sortColumnResolutionUp "glyphicon-menu-up" "glyphicon-menu-down"}}"></i>
-                    </a>
-                 </th>
-                </tr>
-              </thead>
-              {{else}}
-                No anomalies to show.
-              {{/if}}
-              <tbody>
-                {{#each paginatedFilteredAnomalies as |anomaly|}}
-                  <tr class="te-anomaly-table__row">
-                     <td class="te-anomaly-table__cell">
-                      <ul class="te-anomaly-table__list">
-                        <li class="te-anomaly-table__list--stronger">{{anomaly.startDateStr}}</li>
-                        <li class="te-anomaly-table__list--lighter">{{anomaly.durationStr}}</li>
-                      </ul>
-                     </td>
-                     <td class="te-anomaly-table__cell">
-                      <ul class="te-anomaly-table__list">
-                       {{#each anomaly.dimensionList as |dimension|}}
-                          <li class="te-anomaly-table__list--smaller">
-                            {{dimension.dimensionKey}}: {{dimension.dimensionVal}}
-                          </li>
-                       {{else}}
-                          -
-                       {{/each}}
-                      </ul>
-                     </td>
-                     <td class="te-anomaly-table__cell">{{anomaly.severityScore}}</td>
-                     <td class="te-anomaly-table__cell">
-                      <ul class="te-anomaly-table__list">
-                        <li>{{anomaly.shownCurrent}} / {{anomaly.shownBaseline}}</li>
-                        <li class="te-anomaly-table__list--warning">({{anomaly.shownChangeRate}}%)</li>
-                      </ul>
-                     </td>
-                     <td class="te-anomaly-table__cell">
-                        {{#if anomaly.showResponseSaved}}
-                          <i class="te-anomaly-table__glyph--status glyphicon glyphicon-ok-circle"></i>
-                        {{/if}}
-
-                        {{#if anomaly.showResponseFailed}}
-                          <i class="te-anomaly-table__glyph--status glyphicon glyphicon-remove-circle"></i>
-                        {{/if}}
-
-                        {{#power-select
-                          triggerId=anomaly.anomalyId
-                          triggerClass="te-anomaly-table__select"
-                          options=responseOptions
-                          searchEnabled=false
-                          selected=anomaly.anomalyFeedback
-                          onchange=(action "onChangeAnomalyResponse" anomaly)
-                          as |response|
-                        }}
-                          {{response}}
-                        {{/power-select}}
-
-                        <a target="_blank" class="te-anomaly-table__link" href="/thirdeye#anomalies?anomaliesSearchMode=id&pageNumber=1&anomalyIds={{anomaly.anomalyId}}">investigate</a>
-                     </td>
-                  </tr>
-                {{/each}}
-              </tbody>
-            </table>
-
-            {{!--pagination--}}
-            {{#if (gt pagesNum 1)}}
-              <nav class="text-center" aria-label="Page navigation">
-                <ul class="pagination">
-                  <li class={{if (eq currentPage 1) 'active disabled'}} >
-                    <a href="#" {{action "onPaginationClick" 1}} aria-label="First">
-                      <span aria-hidden="true">First</span>
-                    </a>
-                  </li>
-                  <li class={{if (eq currentPage 1) 'active disabled'}}>
-                    <a href="#" {{action "onPaginationClick" "previous"}} aria-label="Previous">
-                      <span aria-hidden="true">Previous</span>
-                    </a>
-                  </li>
-                  {{#each viewPages as |page|}}
-                    <li class={{if (eq page currentPage) 'active'}}><a href="#" {{action "onPaginationClick" page}}>{{page}}</a></li>
-                  {{/each}}
-                  <li class={{if (eq currentPage pagesNum) 'disabled'}} >
-                    <a href="#" {{action "onPaginationClick" "next"}} aria-label="Next">
-                      <span aria-hidden="true">Next</span>
-                    </a>
-                  </li>
-                  <li class={{if (eq currentPage pagesNum) 'disabled'}} >
-                    <a href="#" {{action "onPaginationClick" pagesNum}} aria-label="Last">
-                      <span aria-hidden="true">Last</span>
-                    </a>
-                  </li>
-                </ul>
-              </nav>
-            {{/if}}
-
-        </div>
-
-    {{else}}
-      <div class="te-alert-page-pending">
-        <img src="assets/images/te-alert-pending.png" class="te-alert-page-pending__image" alt="alertData.Setup is Processing">
-        <h2 class="te-alert-page-pending__title">Setting up your alert</h2>
-        <div class="te-alert-page-pending__loader"></div>
-        <p class="te-alert-page-pending__text">
-          This may take up to a few minutes <br/>
-          We will send you an email when it's done!
-        </p>
-      </div>
-    {{/if}}
+    {{outlet}}
   </div>
 </section>
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/controller.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/controller.js
new file mode 100644
index 00000000000..240c7dd9d7e
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/controller.js
@@ -0,0 +1,56 @@
+/**
+ * Controller for Alert Details Page: Tune Sensitivity Tab
+ * @module manage/alert/tune
+ * @exports manage/alert/tune
+ */
+import fetch from 'fetch';
+import Ember from 'ember';
+import Controller from '@ember/controller';
+
+export default Controller.extend({
+
+  /**
+   * Data needed to render the stats 'cards' above the anomaly graph for this alert
+   * TODO: this will become a component
+   * @type {Object}
+   */
+  anomalyStats: Ember.computed(
+    'totalAnomalies',
+    function() {
+      const total = this.get('totalAnomalies') || 0;
+      const anomalyStats = [
+        {
+          title: 'Number of anomalies',
+          text: 'Estimated average number of anomalies per month',
+          value: total,
+          projected: '5'
+        },
+        {
+          title: 'Response rate',
+          text: 'Percentage of anomalies that has a response',
+          value: '87.1%'
+        },
+        {
+          title: 'Precision',
+          text: 'Among all anomalies detected, the percentage of them that are true.',
+          value: '50%',
+          projected: '89.2%'
+        },
+        {
+          title: 'Recall',
+          text: 'Among all anomalies that happened, the percentage of them detected by the system',
+          value: '25%',
+          projected: '89.2%'
+        },
+        {
+          title: 'MTTD for >30% change',
+          text: 'Minimum time to detect for anomalies with > 30% change',
+          value: '4.8 mins',
+          projected: '5 mins'
+        }
+      ];
+      return anomalyStats;
+    }
+  )
+
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/route.js b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/route.js
new file mode 100644
index 00000000000..6981f201f6d
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/route.js
@@ -0,0 +1,9 @@
+/**
+ * Handles the 'tune' route for manage alert
+ * @module manage/alert/edit/tune
+ * @exports manage/alert/edit/tune
+ */
+import Route from '@ember/routing/route';
+
+export default Route.extend({
+});
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/template.hbs b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/template.hbs
new file mode 100644
index 00000000000..75d279da81d
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alert/tune/template.hbs
@@ -0,0 +1,55 @@
+<div class="manage-alert-tune">
+
+  <div class="te-content-block">
+    <fieldset class="te-form__section te-form__section--first row">
+      <div class="col-xs-12">
+        <legend class="te-form__section-title">Tune alert sensitivity</legend>
+      </div>
+      <ul class="te-form__list col-xs-12 col-sm-8">
+        <li class="te-form__list-item">
+          {{#radio-button
+            value="current"
+            groupValue=current
+            changed="flavorToggled"}}
+            <div class="te-form__list-label">Tune automatically with current settings</div>
+          {{/radio-button}}
+        </li>
+        <li class="te-form__list-item">
+          {{#radio-button
+            value="custom"
+            groupValue=custom
+            changed="flavorToggled"}}
+            <div class="te-form__list-label">Tune with customized settings</div>
+           {{/radio-button}}
+         </li>
+      </ul>
+    </fieldset>
+  </div>
+
+  <div class="te-horizontal-cards te-content-block">
+    <h4 class="te-alert-page__subtitle">Alert Performance</h4>
+    <a class="te-pill-selectors__side-link" {{action "onClickTuneSensitivity" this}}>Customize sensitivity</a>
+    <div class="te-horizontal-cards__container">
+      {{!-- Alert anomaly stats cards --}}
+      {{#each anomalyStats as |card|}}
+        <ul class="te-horizontal-cards__card">
+          <li class="te-horizontal-cards__card-title">{{card.title}}</li>
+          <li class="te-horizontal-cards__card-value">{{card.value}}
+            <div class="te-horizontal-cards__card-tooltip">
+              <span>
+                <i class="glyphicon glyphicon-question-sign"></i>
+                {{#tooltip-on-element}}{{card.text}}{{/tooltip-on-element}}
+              </span>
+            </div>
+          </li>
+          <li class="te-horizontal-cards__card-text">
+            {{#if card.projected}}
+              Projected: <strong>{{card.projected}}</strong>
+            {{/if}}
+          </li>
+        </ul>
+      {{/each}}
+    </div>
+  </div>
+
+</div>
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/edit/route.js b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/edit/route.js
index de7e6ab76e6..76102723701 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/edit/route.js
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/edit/route.js
@@ -3,26 +3,7 @@ import fetch from 'fetch';
 import moment from 'moment';
 import RSVP from 'rsvp';
 import _ from 'lodash';
-import { checkStatus } from 'thirdeye-frontend/helpers/utils';
-
-/**
- * Parses stringified object from payload
- * @param {String} filters
- * @returns {Object}
- */
-const parseProps = (filters) => {
-  filters = filters || '';
-
-  return filters.split(';')
-    .filter(prop => prop)
-    .map(prop => prop.split('='))
-    .reduce(function (aggr, prop) {
-      const [ propName, value ] = prop;
-      aggr[propName] = value;
-
-      return aggr;
-    }, {});
-};
+import { checkStatus, buildDateEod, parseProps } from 'thirdeye-frontend/helpers/utils';
 
 export default Ember.Route.extend({
   model(params) {
@@ -45,7 +26,7 @@ export default Ember.Route.extend({
       bucketSize,
       bucketUnit,
       properties: alertProps
-     } = model.function;
+    } = model.function;
 
     let metricId = '';
     let metricDataUrl = '';
@@ -69,7 +50,7 @@ export default Ember.Route.extend({
         const dimension = exploreDimensions || 'All';
         const currentEnd = moment(maxTime).isValid()
           ? moment(maxTime).valueOf()
-          : moment().subtract(1, 'day').endOf('day').valueOf();
+          : buildDateEod(1, 'day').valueOf();
         const formattedFilters = JSON.stringify(parseProps(filters));
         // Load less data if granularity is 'minutes'
         const isMinutely = bucketUnit.toLowerCase().includes('minute');
@@ -104,7 +85,7 @@ export default Ember.Route.extend({
         return fetch(`/thirdeye/email/function/${id}`).then(checkStatus);
       })
       .then((groupByAlertId) => {
-        const originalConfigGroup = groupByAlertId ? groupByAlertId.pop() : null;
+        const originalConfigGroup = groupByAlertId.length ? groupByAlertId.pop() : null;
         selectedAppName = originalConfigGroup ? originalConfigGroup.application : null;
         Object.assign(model, { originalConfigGroup, selectedAppName });
         return fetch('/thirdeye/entity/APPLICATION').then(checkStatus);
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/controller.js b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/controller.js
index ac18a272f40..53f1bf404a5 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/controller.js
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/controller.js
@@ -149,19 +149,19 @@ export default Ember.Controller.extend({
         }
       }
 
-    // Itereate through config groups to enhance all alerts with extra properties (group name, application)
-    for (let config of allGroups) {
-      groupFunctionIds = config.emailConfig && config.emailConfig.functionIds ? config.emailConfig.functionIds : [];
-      for (let id of groupFunctionIds) {
-        foundAlert = _.find(alerts, function(alert) {
-          return alert.id === id;
-        });
-        if (foundAlert) {
-          Ember.set(foundAlert, 'application', config.application);
-          Ember.set(foundAlert, 'group', config.name);
+      // Itereate through config groups to enhance all alerts with extra properties (group name, application)
+      for (let config of allGroups) {
+        groupFunctionIds = config.emailConfig && config.emailConfig.functionIds ? config.emailConfig.functionIds : [];
+        for (let id of groupFunctionIds) {
+          foundAlert = _.find(alerts, function(alert) {
+            return alert.id === id;
+          });
+          if (foundAlert) {
+            Ember.set(foundAlert, 'application', config.application);
+            Ember.set(foundAlert, 'group', config.name);
+          }
         }
       }
-    }
 
       return alerts.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
     }
diff --git a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/template.hbs b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/template.hbs
index b4eff2b8cd8..2cdcb9651c1 100644
--- a/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/template.hbs
+++ b/thirdeye/thirdeye-frontend/app/pods/manage/alerts/index/template.hbs
@@ -122,7 +122,9 @@
                 <span class="te-search-results__tag te-search-results__tag--list {{if alert.isActive "te-search-results__tag--active"}}">
                   {{if alert.isActive "Active" "Inactive"}}
                 </span>
-                <span title={{alert.functionName}}>{{alert.functionName}}</span>
+                {{#link-to "manage.alert.explore" alert.id}}
+                  <span title={{alert.functionName}}>{{alert.functionName}}</span>
+                {{/link-to}}
               </div>
             </div>
             <div class="te-search-results__edit-button">
diff --git a/thirdeye/thirdeye-frontend/app/pods/self-serve/create-alert/controller.js b/thirdeye/thirdeye-frontend/app/pods/self-serve/create-alert/controller.js
index e9a852de9b4..387c9355e61 100644
--- a/thirdeye/thirdeye-frontend/app/pods/self-serve/create-alert/controller.js
+++ b/thirdeye/thirdeye-frontend/app/pods/self-serve/create-alert/controller.js
@@ -7,7 +7,7 @@ import fetch from 'fetch';
 import Ember from 'ember';
 import moment from 'moment';
 import _ from 'lodash';
-import { checkStatus } from 'thirdeye-frontend/helpers/utils';
+import { checkStatus, buildDateEod } from 'thirdeye-frontend/helpers/utils';
 import { task, timeout } from 'ember-concurrency';
 
 export default Ember.Controller.extend({
@@ -349,7 +349,7 @@ export default Ember.Controller.extend({
     const dimension = selectedDimension || 'All';
     const currentEnd = moment(maxTime).isValid()
       ? moment(maxTime).valueOf()
-      : moment().subtract(1, 'day').endOf('day').valueOf();
+      : buildDateEod(1, 'day').valueOf();
     const currentStart = moment(currentEnd).subtract(1, 'months').valueOf();
     const baselineStart = moment(currentStart).subtract(1, 'week').valueOf();
     const baselineEnd = moment(currentEnd).subtract(1, 'week');
@@ -519,8 +519,9 @@ export default Ember.Controller.extend({
    * @return {Ember.RSVP.Promise}
    */
   triggerReplay(newFuncId) {
-    const startTime = moment().subtract(1, 'month').endOf('day').utc().format("YYYY-MM-DDTHH:mm:ss.SSS[Z]");
-    const endTime = moment().subtract(1, 'day').endOf('day').utc().format("YYYY-MM-DDTHH:mm:ss.SSS[Z]");
+    const replayDateFormat = "YYYY-MM-DDTHH:mm:ss.SSS[Z]";
+    const startTime = buildDateEod(1, 'month').format(replayDateFormat);
+    const endTime = buildDateEod(1, 'day').format(replayDateFormat);
     const that = this;
 
     // Set banner to 'pending' state
diff --git a/thirdeye/thirdeye-frontend/app/router.js b/thirdeye/thirdeye-frontend/app/router.js
index ad5ba244051..6b80e991645 100644
--- a/thirdeye/thirdeye-frontend/app/router.js
+++ b/thirdeye/thirdeye-frontend/app/router.js
@@ -11,15 +11,19 @@ Router.map(function() {
   this.route('login');
   this.route('logout');
 
-  this.route('manage', function() {
-    this.route('alert', { path: 'alert/:alertId' });
+  this.route('manage', { path: '/manage' }, function() {
+    this.route('alert', { path: 'alert/:alertId' }, function() {
+      this.route('explore');
+      this.route('tune');
+      this.route('edit');
+    });
     this.route('alerts', function() {
       this.route('edit', { path: '/:alertId' });
     });
   });
 
   this.route('rca', { path: '/rca' }, function() {
-    this.route('details', { path: '/:metricId' }, function() {
+    this.route('details', { path: 'details/:metricId' }, function() {
       this.route('metrics');
       this.route('events');
       this.route('dimensions', function() {
diff --git a/thirdeye/thirdeye-frontend/app/styles/app.scss b/thirdeye/thirdeye-frontend/app/styles/app.scss
index 171d57e930e..35cc959b45f 100644
--- a/thirdeye/thirdeye-frontend/app/styles/app.scss
+++ b/thirdeye/thirdeye-frontend/app/styles/app.scss
@@ -50,6 +50,7 @@ body {
 @import 'components/rootcause-legend';
 @import 'components/rootcause-metric';
 @import 'components/rootcause-chart';
+@import 'components/alert-report-modal';
 @import 'components/te-radio';
 
 // Pod Pages
diff --git a/thirdeye/thirdeye-frontend/app/styles/components/alert-report-modal.scss b/thirdeye/thirdeye-frontend/app/styles/components/alert-report-modal.scss
new file mode 100644
index 00000000000..cd69542900d
--- /dev/null
+++ b/thirdeye/thirdeye-frontend/app/styles/components/alert-report-modal.scss
@@ -0,0 +1,19 @@
+.alert-report-modal {
+  &__body {
+    height: 60vh;
+    margin-top: 0;
+  }
+}
+
+.report-toggle {
+  font-size: 18px;
+  margin-top: 10px
+}
+
+.te-label {
+  margin-top: 5px;
+}
+
+.te-report-title {
+  margin: 0;
+}
diff --git a/thirdeye/thirdeye-frontend/app/styles/components/button.scss b/thirdeye/thirdeye-frontend/app/styles/components/button.scss
index 51c2bde76f5..b888e189a7f 100644
--- a/thirdeye/thirdeye-frontend/app/styles/components/button.scss
+++ b/thirdeye/thirdeye-frontend/app/styles/components/button.scss
@@ -60,4 +60,13 @@
       background-color: $te-blue-8;
     }
   }
+
+  &--link {
+    border-color: white;
+    color: $te-blue;
+  }
+
+  &--outline {
+    color: $te-blue;
+  }
 }
diff --git a/thirdeye/thirdeye-frontend/app/styles/components/links.scss b/thirdeye/thirdeye-frontend/app/styles/components/links.scss
index 4e2627336de..e583c90194a 100644
--- a/thirdeye/thirdeye-frontend/app/styles/components/links.scss
+++ b/thirdeye/thirdeye-frontend/app/styles/components/links.scss
@@ -31,6 +31,10 @@
     line-height: 24px;
   }
 
+  &--smaller {
+    font-size: 15px;
+  }
+
   &--vertical-centered {
     display: flex;
     align-items: center;
diff --git a/thirdeye/thirdeye-frontend/app/styles/components/te-modal.scss b/thirdeye/thirdeye-frontend/app/styles/components/te-modal.scss
index 7187627c826..4a8a6344e8a 100644
--- a/thirdeye/thirdeye-frontend/app/styles/components/te-modal.scss
+++ b/thirdeye/thirdeye-frontend/app/styles/components/te-modal.scss
@@ -11,6 +11,10 @@
   box-shadow: 0 12px 18px 0 rgba(0,0,0,0.2), 0 0 0 1px rgba(0,0,0,0.05);
   color: rgba(0,0,0,0.85);
 
+  &__body {
+    overflow-y: scroll;
+  }
+
   &__header {
     padding: 8px 24px;
     border-bottom: 1px solid rgba(0,0,0,0.15);
@@ -18,6 +22,7 @@
     justify-content: space-between;
     align-items: center;
   }
+
   &__title {
     color: app-shade(black,0.9);
     font-size: 21px;
@@ -32,6 +37,7 @@
       line-height: 24px;
     }
   }
+
   &__footer {
     border-top: 1px solid rgba(0,0,0,0.15);
     padding: 16px 24px;
diff --git a/thirdeye/thirdeye-frontend/app/styles/shared/_styles.scss b/thirdeye/thirdeye-frontend/app/styles/shared/_styles.scss
index af87baf168b..1f2e428629f 100644
--- a/thirdeye/thirdeye-frontend/app/styles/shared/_styles.scss
+++ b/thirdeye/thirdeye-frontend/app/styles/shared/_styles.scss
@@ -61,6 +61,21 @@ body {
       width: 49%;
     }
   }
+
+  &__list {
+    list-style: none;
+  }
+
+  &__list-label {
+    display: inline-block;
+    padding-left: 10px;
+    font-weight: normal;
+    font-size: 15px;
+  }
+
+  &__radio {
+    padding-left: 10px;
+  }
 }
 
 
@@ -379,6 +394,10 @@ body {
   color: app-shade(black, 0.7);
   padding: 24px 0;
 
+  &--slim {
+    padding: 24px 0 0 0;
+  }
+
   &__list {
     list-style: none;
     font-weight: normal;
@@ -522,41 +541,17 @@ body {
   display: none;
 }
 
-.te-button {
-  border-radius: 2px;
-  border: 1px solid $te-link-blue;
-  margin: 0 1px;
-  font-size: 16px;
-  font-weight: 600;
-  cursor: pointer;
-  background: none;
-  padding: 2px 15px;
-  letter-spacing: 0.3px;
-  color: $te-link-blue;
-
-  &--cancel {
-    background-color: white;
-    a {
-      color: $te-link-blue;
-    }
-    &:hover,
-    a:hover {
-      color: $te-link-blue;
-      text-decoration: none;
-    }
-  }
+.te-topcard-subnav {
+  display: flex;
+  border-top: 1px solid app-shade(black, 1);
+  padding-top: 12px;
+  margin: 25px 0 13px 0;
 
-  &--submit {
-    background-color: $te-button-blue;
-    color: white;
-    &:hover,
-    a:hover {
-      color: white;
-      text-decoration: none;
-    }
-  }
+  &__item {
+    margin: 0 14px;
 
-  &--sub {
-    border: none;
+    &:first-child {
+      margin-left: 0;
+    }
   }
 }
