diff --git a/pinot-api/src/main/java/org/apache/pinot/client/Connection.java b/pinot-api/src/main/java/org/apache/pinot/client/Connection.java
index 44ee072cd01..9e478030b7b 100644
--- a/pinot-api/src/main/java/org/apache/pinot/client/Connection.java
+++ b/pinot-api/src/main/java/org/apache/pinot/client/Connection.java
@@ -66,7 +66,18 @@ public PreparedStatement prepareStatement(String statement) {
    */
   public ResultSetGroup execute(String statement)
       throws PinotClientException {
-    return execute(null, statement);
+    return execute(null, new Request("pql", statement));
+  }
+
+  /**
+   * Executes a Pinot Request.
+   * @param request The statement to execute
+   * @return The result of the query
+   * @throws PinotClientException If an exception occurs while processing the query
+   */
+  public ResultSetGroup execute(Request request)
+      throws PinotClientException {
+    return execute(null, request);
   }
 
   /**
@@ -78,12 +89,24 @@ public ResultSetGroup execute(String statement)
    */
   public ResultSetGroup execute(String tableName, String statement)
       throws PinotClientException {
+    return execute(tableName, new Request("pql", statement));
+  }
+
+  /**
+   * Executes a Pinot Request.
+   *
+   * @param request The statement to execute
+   * @return The result of the query
+   * @throws PinotClientException If an exception occurs while processing the query
+   */
+  public ResultSetGroup execute(String tableName, Request request)
+      throws PinotClientException {
     String brokerHostPort = _brokerSelector.selectBroker(tableName);
     if (brokerHostPort == null) {
       throw new PinotClientException(
           "Could not find broker to query for table: " + (tableName == null ? "null" : tableName));
     }
-    BrokerResponse response = _transport.executeQuery(brokerHostPort, statement);
+    BrokerResponse response = _transport.executeQuery(brokerHostPort, request);
     if (response.hasExceptions()) {
       throw new PinotClientException("Query had processing exceptions: \n" + response.getExceptions());
     }
@@ -99,12 +122,25 @@ public ResultSetGroup execute(String tableName, String statement)
    */
   public Future<ResultSetGroup> executeAsync(String statement)
       throws PinotClientException {
+    return executeAsync(new Request("pql", statement));
+  }
+
+  /**
+   * Executes a Pinot Request asynchronously.
+   *
+   * @param request The statement to execute
+   * @return A future containing the result of the query
+   * @throws PinotClientException If an exception occurs while processing the query
+   */
+  public Future<ResultSetGroup> executeAsync(Request request)
+      throws PinotClientException {
     String brokerHostPort = _brokerSelector.selectBroker(null);
     if (brokerHostPort == null) {
       throw new PinotClientException(
-          "Could not find broker to query for statement: " + (statement == null ? "null" : statement));
+          "Could not find broker to query for statement: " + (request.getQuery() == null ? "null"
+              : request.getQuery()));
     }
-    final Future<BrokerResponse> responseFuture = _transport.executeQueryAsync(brokerHostPort, statement);
+    final Future<BrokerResponse> responseFuture = _transport.executeQueryAsync(brokerHostPort, request.getQuery());
     return new ResultSetGroupFuture(responseFuture);
   }
 
diff --git a/pinot-api/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java b/pinot-api/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java
index e6d4472d7ec..4da1351b4ca 100644
--- a/pinot-api/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java
+++ b/pinot-api/src/main/java/org/apache/pinot/client/JsonAsyncHttpPinotClientTransport.java
@@ -61,28 +61,48 @@ public BrokerResponse executeQuery(String brokerAddress, String query)
 
   @Override
   public Future<BrokerResponse> executeQueryAsync(String brokerAddress, final String query) {
+    return executeQueryAsync(brokerAddress, new Request("pql", query));
+  }
+
+  public Future<BrokerResponse> executePinotQueryAsync(String brokerAddress, final Request request) {
     try {
       ObjectNode json = JsonNodeFactory.instance.objectNode();
-      json.put("pql", query);
+      json.put(request.getQueryFormat(), request.getQuery());
 
       final String url = "http://" + brokerAddress + "/query";
 
-      AsyncHttpClient.BoundRequestBuilder request = _httpClient.preparePost(url);
+      AsyncHttpClient.BoundRequestBuilder requestBuilder = _httpClient.preparePost(url);
 
       if(_headers != null) {
-        _headers.forEach((k, v) -> request.addHeader(k, v));
+        _headers.forEach((k, v) -> requestBuilder.addHeader(k, v));
       }
 
-      final Future<Response> response = request
+      final Future<Response> response = requestBuilder
           .addHeader("Content-Type", "application/json; charset=utf-8")
           .setBody(json.toString()).execute();
 
-      return new BrokerResponseFuture(response, query, url);
+      return new BrokerResponseFuture(response, request.getQuery(), url);
+    } catch (Exception e) {
+      throw new PinotClientException(e);
+    }
+  }
+
+  @Override
+  public BrokerResponse executeQuery(String brokerAddress, Request request)
+      throws PinotClientException {
+    try {
+      return executeQueryAsync(brokerAddress, request).get();
     } catch (Exception e) {
       throw new PinotClientException(e);
     }
   }
 
+  @Override
+  public Future<BrokerResponse> executeQueryAsync(String brokerAddress, Request request)
+      throws PinotClientException {
+    return executePinotQueryAsync(brokerAddress, request);
+  }
+
   private static class BrokerResponseFuture implements Future<BrokerResponse> {
     private final Future<Response> _response;
     private final String _query;
diff --git a/pinot-api/src/main/java/org/apache/pinot/client/PinotClientTransport.java b/pinot-api/src/main/java/org/apache/pinot/client/PinotClientTransport.java
index f4168e1e6b1..6935db2f5b4 100644
--- a/pinot-api/src/main/java/org/apache/pinot/client/PinotClientTransport.java
+++ b/pinot-api/src/main/java/org/apache/pinot/client/PinotClientTransport.java
@@ -30,4 +30,10 @@ BrokerResponse executeQuery(String brokerAddress, String query)
 
   Future<BrokerResponse> executeQueryAsync(String brokerAddress, String query)
       throws PinotClientException;
+
+  BrokerResponse executeQuery(String brokerAddress, Request request)
+      throws PinotClientException;
+
+  Future<BrokerResponse> executeQueryAsync(String brokerAddress, Request request)
+      throws PinotClientException;
 }
diff --git a/pinot-api/src/main/java/org/apache/pinot/client/Request.java b/pinot-api/src/main/java/org/apache/pinot/client/Request.java
new file mode 100644
index 00000000000..12309cd32ef
--- /dev/null
+++ b/pinot-api/src/main/java/org/apache/pinot/client/Request.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.client;
+
+/**
+ * Request is used in server request to host multiple pinot query types, like PQL, SQL.
+ */
+public class Request {
+
+  private String _queryFormat;
+  private String _query;
+
+  public Request(String queryFormat, String query) {
+    _queryFormat = queryFormat;
+    _query = query;
+  }
+
+  public String getQueryFormat() {
+    return _queryFormat;
+  }
+
+  public void setQueryFormat(String queryType) {
+    _queryFormat = queryType;
+  }
+
+  public String getQuery() {
+    return _query;
+  }
+
+  public void setQuery(String query) {
+    _query = query;
+  }
+}
diff --git a/pinot-api/src/test/java/org/apache/pinot/client/PreparedStatementTest.java b/pinot-api/src/test/java/org/apache/pinot/client/PreparedStatementTest.java
index 672c357a406..6b01c292b8f 100644
--- a/pinot-api/src/test/java/org/apache/pinot/client/PreparedStatementTest.java
+++ b/pinot-api/src/test/java/org/apache/pinot/client/PreparedStatementTest.java
@@ -30,6 +30,9 @@
  *
  */
 public class PreparedStatementTest {
+  private DummyPinotClientTransport _dummyPinotClientTransport = new DummyPinotClientTransport();
+  private PinotClientTransportFactory _previousTransportFactory = null;
+
   @Test
   public void testPreparedStatementEscaping() {
     // Create a prepared statement that has to quote a string appropriately
@@ -42,8 +45,16 @@ public void testPreparedStatementEscaping() {
     Assert.assertEquals("SELECT foo FROM bar WHERE baz = '''hello'''", _dummyPinotClientTransport.getLastQuery());
   }
 
-  private DummyPinotClientTransport _dummyPinotClientTransport = new DummyPinotClientTransport();
-  private PinotClientTransportFactory _previousTransportFactory = null;
+  @BeforeClass
+  public void overridePinotClientTransport() {
+    _previousTransportFactory = ConnectionFactory._transportFactory;
+    ConnectionFactory._transportFactory = new DummyPinotClientTransportFactory();
+  }
+
+  @AfterClass
+  public void resetPinotClientTransport() {
+    ConnectionFactory._transportFactory = _previousTransportFactory;
+  }
 
   class DummyPinotClientTransport implements PinotClientTransport {
     private String _lastQuery;
@@ -62,6 +73,20 @@ public Future<BrokerResponse> executeQueryAsync(String brokerAddress, String que
       return null;
     }
 
+    @Override
+    public BrokerResponse executeQuery(String brokerAddress, Request request)
+        throws PinotClientException {
+      _lastQuery = request.getQuery();
+      return BrokerResponse.empty();
+    }
+
+    @Override
+    public Future<BrokerResponse> executeQueryAsync(String brokerAddress, Request request)
+        throws PinotClientException {
+      _lastQuery = request.getQuery();
+      return null;
+    }
+
     public String getLastQuery() {
       return _lastQuery;
     }
@@ -73,15 +98,4 @@ public PinotClientTransport buildTransport() {
       return _dummyPinotClientTransport;
     }
   }
-
-  @BeforeClass
-  public void overridePinotClientTransport() {
-    _previousTransportFactory = ConnectionFactory._transportFactory;
-    ConnectionFactory._transportFactory = new DummyPinotClientTransportFactory();
-  }
-
-  @AfterClass
-  public void resetPinotClientTransport() {
-    ConnectionFactory._transportFactory = _previousTransportFactory;
-  }
 }
diff --git a/pinot-api/src/test/java/org/apache/pinot/client/ResultSetGroupTest.java b/pinot-api/src/test/java/org/apache/pinot/client/ResultSetGroupTest.java
index 737588db9aa..f1404c5eb3a 100644
--- a/pinot-api/src/test/java/org/apache/pinot/client/ResultSetGroupTest.java
+++ b/pinot-api/src/test/java/org/apache/pinot/client/ResultSetGroupTest.java
@@ -32,6 +32,9 @@
  *
  */
 public class ResultSetGroupTest {
+  private DummyJsonTransport _dummyJsonTransport = new DummyJsonTransport();
+  private PinotClientTransportFactory _previousTransportFactory = null;
+
   @Test
   public void testDeserializeSelectionResultSet() {
     // Deserialize selection result
@@ -117,8 +120,16 @@ private ResultSetGroup getResultSet(String resourceName) {
     return connection.execute("dummy");
   }
 
-  private DummyJsonTransport _dummyJsonTransport = new DummyJsonTransport();
-  private PinotClientTransportFactory _previousTransportFactory = null;
+  @BeforeClass
+  public void overridePinotClientTransport() {
+    _previousTransportFactory = ConnectionFactory._transportFactory;
+    ConnectionFactory._transportFactory = new DummyJsonTransportFactory();
+  }
+
+  @AfterClass
+  public void resetPinotClientTransport() {
+    ConnectionFactory._transportFactory = _previousTransportFactory;
+  }
 
   class DummyJsonTransport implements PinotClientTransport {
     public String _resource;
@@ -147,6 +158,18 @@ public Future<BrokerResponse> executeQueryAsync(String brokerAddress, String que
         throws PinotClientException {
       return null;
     }
+
+    @Override
+    public BrokerResponse executeQuery(String brokerAddress, Request request)
+        throws PinotClientException {
+      return executeQuery(brokerAddress, request.getQuery());
+    }
+
+    @Override
+    public Future<BrokerResponse> executeQueryAsync(String brokerAddress, Request request)
+        throws PinotClientException {
+      return null;
+    }
   }
 
   class DummyJsonTransportFactory implements PinotClientTransportFactory {
@@ -155,15 +178,4 @@ public PinotClientTransport buildTransport() {
       return _dummyJsonTransport;
     }
   }
-
-  @BeforeClass
-  public void overridePinotClientTransport() {
-    _previousTransportFactory = ConnectionFactory._transportFactory;
-    ConnectionFactory._transportFactory = new DummyJsonTransportFactory();
-  }
-
-  @AfterClass
-  public void resetPinotClientTransport() {
-    ConnectionFactory._transportFactory = _previousTransportFactory;
-  }
 }
diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java
index 89d3470919c..a17dfc60ec0 100644
--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java
+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/BaseBrokerRequestHandler.java
@@ -53,20 +53,19 @@
 import org.apache.pinot.common.response.broker.BrokerResponseNative;
 import org.apache.pinot.common.utils.CommonConstants;
 import org.apache.pinot.core.query.reduce.BrokerReduceService;
-import org.apache.pinot.pql.parsers.Pql2Compiler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import static org.apache.pinot.common.utils.CommonConstants.Broker.*;
 import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.DEBUG_OPTIONS;
 import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.PQL;
+import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.SQL;
 import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.TRACE;
 
 
 @ThreadSafe
 public abstract class BaseBrokerRequestHandler implements BrokerRequestHandler {
   private static final Logger LOGGER = LoggerFactory.getLogger(BaseBrokerRequestHandler.class);
-  private static final Pql2Compiler REQUEST_COMPILER = new Pql2Compiler();
 
   protected final Configuration _config;
   protected final RoutingTable _routingTable;
@@ -132,15 +131,16 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit
     requestStatistics.setRequestId(requestId);
     requestStatistics.setRequestArrivalTimeMillis(System.currentTimeMillis());
 
-    String query = request.get(PQL).asText();
-    LOGGER.debug("Query string for request {}: {}", requestId, query);
+    PinotQueryRequest pinotQueryRequest = getPinotQueryRequest(request);
+    String query = pinotQueryRequest.getQuery();
+    LOGGER.debug("Query string for request {}: {}", requestId, pinotQueryRequest.getQuery());
     requestStatistics.setPql(query);
 
     // Compile the request
     long compilationStartTimeNs = System.nanoTime();
     BrokerRequest brokerRequest;
     try {
-      brokerRequest = REQUEST_COMPILER.compileToBrokerRequest(query);
+      brokerRequest = PinotQueryParserFactory.get(pinotQueryRequest.getQueryFormat()).compileToBrokerRequest(query);
     } catch (Exception e) {
       LOGGER.info("Caught exception while compiling request {}: {}, {}", requestId, query, e.getMessage());
       _brokerMetrics.addMeteredGlobalValue(BrokerMeter.REQUEST_COMPILATION_EXCEPTIONS, 1);
@@ -307,8 +307,7 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit
 
     if (_queryLogRateLimiter.tryAcquire() || forceLog(brokerResponse, totalTimeMs)) {
       // Table name might have been changed (with suffix _OFFLINE/_REALTIME appended)
-      LOGGER.info(
-          "RequestId:{}, table:{}, timeMs:{}, docs:{}/{}, entries:{}/{},"
+      LOGGER.info("RequestId:{}, table:{}, timeMs:{}, docs:{}/{}, entries:{}/{},"
               + " segments(queried/processed/matched/consuming):{}/{}/{}/{}, consumingFreshnessTimeMs:{},"
               + " servers:{}/{}, groupLimitReached:{}, exceptions:{}, serverStats:{}, query:{}", requestId,
           brokerRequest.getQuerySource().getTableName(), totalTimeMs, brokerResponse.getNumDocsScanned(),
@@ -338,6 +337,13 @@ public BrokerResponse handleRequest(JsonNode request, @Nullable RequesterIdentit
     return brokerResponse;
   }
 
+  private PinotQueryRequest getPinotQueryRequest(JsonNode request) {
+    if (request.has(SQL)) {
+      return new PinotQueryRequest(SQL, request.get(SQL).asText());
+    }
+    return new PinotQueryRequest(PQL, request.get(PQL).asText());
+  }
+
   /**
    * Helper function to decide whether to force the log
    *
@@ -486,12 +492,12 @@ protected abstract BrokerResponse processBrokerRequest(long requestId, BrokerReq
   protected static class ServerStats {
     private String _serverStats;
 
-    public void setServerStats(String serverStats) {
-      _serverStats = serverStats;
-    }
-
     public String getServerStats() {
       return _serverStats;
     }
+
+    public void setServerStats(String serverStats) {
+      _serverStats = serverStats;
+    }
   }
 }
diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/FlattenNestedPredicatesFilterQueryTreeOptimizer.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/FlattenNestedPredicatesFilterQueryTreeOptimizer.java
index e5a268e8896..427766e624d 100644
--- a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/FlattenNestedPredicatesFilterQueryTreeOptimizer.java
+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/FlattenNestedPredicatesFilterQueryTreeOptimizer.java
@@ -75,8 +75,9 @@ private void flatten(FilterQueryTree node, FilterQueryTree parent, int maxDepth)
       // Move all of 'node's children one level up. If 'node' has no children left, remove it from parent's list.
       List<FilterQueryTree> children = node.getChildren();
       Iterator<FilterQueryTree> it = children.iterator();
+      int insertIdx = parent.getChildren().indexOf(node);
       while (it.hasNext()) {
-        parent.getChildren().add(it.next());
+        parent.getChildren().add(insertIdx++, it.next());
         it.remove();
       }
       // 'node' is now childless
diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryParserFactory.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryParserFactory.java
new file mode 100644
index 00000000000..19d4f4d012e
--- /dev/null
+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryParserFactory.java
@@ -0,0 +1,49 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.broker.requesthandler;
+
+import org.apache.pinot.common.request.BrokerRequest;
+import org.apache.pinot.parsers.AbstractCompiler;
+import org.apache.pinot.pql.parsers.Pql2Compiler;
+import org.apache.pinot.sql.parsers.CalciteSqlCompiler;
+
+import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.PQL;
+import static org.apache.pinot.common.utils.CommonConstants.Broker.Request.SQL;
+
+
+public class PinotQueryParserFactory {
+
+  private static final Pql2Compiler PQL_2_COMPILER = new Pql2Compiler();
+  private static final CalciteSqlCompiler CALCITE_SQL_COMPILER = new CalciteSqlCompiler();
+
+  public static AbstractCompiler get(String queryFormat) {
+    switch (queryFormat) {
+      case PQL:
+        return PQL_2_COMPILER;
+      case SQL:
+        return CALCITE_SQL_COMPILER;
+      default:
+        throw new UnsupportedOperationException("Unknown query format - " + queryFormat);
+    }
+  }
+
+  public static BrokerRequest parsePinotQueryRequest(PinotQueryRequest pinotQueryRequest) {
+    return get(pinotQueryRequest.getQueryFormat()).compileToBrokerRequest(pinotQueryRequest.getQuery());
+  }
+}
diff --git a/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryRequest.java b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryRequest.java
new file mode 100644
index 00000000000..3275191e630
--- /dev/null
+++ b/pinot-broker/src/main/java/org/apache/pinot/broker/requesthandler/PinotQueryRequest.java
@@ -0,0 +1,45 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.broker.requesthandler;
+
+public class PinotQueryRequest {
+  private String queryFormat;
+  private String query;
+
+  public PinotQueryRequest(String queryFormat, String query) {
+    this.queryFormat = queryFormat;
+    this.query = query;
+  }
+
+  public String getQueryFormat() {
+    return queryFormat;
+  }
+
+  public void setQueryFormat(String queryFormat) {
+    this.queryFormat = queryFormat;
+  }
+
+  public String getQuery() {
+    return query;
+  }
+
+  public void setQuery(String query) {
+    this.query = query;
+  }
+}
diff --git a/pinot-broker/src/test/java/org/apache/pinot/broker/request/PqlAndCalciteSqlCompatibilityTest.java b/pinot-broker/src/test/java/org/apache/pinot/broker/request/PqlAndCalciteSqlCompatibilityTest.java
new file mode 100644
index 00000000000..e8028f03b45
--- /dev/null
+++ b/pinot-broker/src/test/java/org/apache/pinot/broker/request/PqlAndCalciteSqlCompatibilityTest.java
@@ -0,0 +1,123 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.broker.request;
+
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.util.List;
+import org.apache.pinot.broker.requesthandler.BrokerRequestOptimizer;
+import org.apache.pinot.common.request.AggregationInfo;
+import org.apache.pinot.common.request.BrokerRequest;
+import org.apache.pinot.common.request.FilterQuery;
+import org.apache.pinot.common.request.FilterQueryMap;
+import org.apache.pinot.common.request.GroupBy;
+import org.apache.pinot.common.request.PinotQuery;
+import org.apache.pinot.common.request.Selection;
+import org.apache.pinot.parsers.utils.BrokerRequestComparisonUtils;
+import org.apache.pinot.pql.parsers.PinotQuery2BrokerRequestConverter;
+import org.apache.pinot.pql.parsers.Pql2Compiler;
+import org.apache.pinot.sql.parsers.CalciteSqlParser;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+
+/**
+ * Some tests for the SQL compiler.
+ * Please note that this test will load test resources: `pql_queries.list` and `pql_queries.list` under `pinot-common` module.
+ */
+public class PqlAndCalciteSqlCompatibilityTest {
+
+  private static final Pql2Compiler COMPILER = new Pql2Compiler();
+
+  // OPTIMIZER is used to flatten certain queries with filtering optimization.
+  // The reason is that SQL parser will parse the structure into a binary tree mode.
+  // PQL parser will flat the case of multiple children under AND/OR.
+  // After optimization, both BrokerRequests from PQL and SQL should look the same and be easier to compare.
+  private static final BrokerRequestOptimizer OPTIMIZER = new BrokerRequestOptimizer();
+  private static final Logger LOGGER = LoggerFactory.getLogger(PqlAndCalciteSqlCompatibilityTest.class);
+
+  @Test
+  public void testSinglePqlAndSqlCompatible() {
+    final String sql =
+        "SELECT CarrierDelay, Origin, DayOfWeek FROM mytable WHERE ActualElapsedTime BETWEEN 163 AND 322 OR CarrierDelay IN (17, 266) OR AirlineID IN (19690, 20366) ORDER BY TaxiIn, TailNum LIMIT 1";
+    final String pql =
+        "SELECT CarrierDelay, Origin, DayOfWeek FROM mytable WHERE ActualElapsedTime BETWEEN 163 AND 322 OR CarrierDelay IN (17, 266) OR AirlineID IN (19690, 20366) ORDER BY TaxiIn, TailNum LIMIT 1";
+
+    // PQL
+    LOGGER.info("Trying to compile PQL: {}", pql);
+    // NOTE: SQL is always using upper cases, so we need to make the string to upper case in order to match the parsed identifier name.
+    final BrokerRequest unOptimizedBrokerRequestFromPQL = COMPILER.compileToBrokerRequest(pql);
+    final BrokerRequest brokerRequestFromPQL = OPTIMIZER.optimize(unOptimizedBrokerRequestFromPQL, null);
+    LOGGER.debug("Compiled PQL: PQL: {}, BrokerRequest: {}", pql, brokerRequestFromPQL);
+    brokerRequestFromPQL.unsetPinotQuery();
+
+    //SQL
+    LOGGER.info("Trying to compile SQL: {}", sql);
+    final PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(sql);
+    final BrokerRequest brokerRequestFromSQL =
+        OPTIMIZER.optimize(new PinotQuery2BrokerRequestConverter().convert(pinotQuery), null);
+    LOGGER.debug("Compiled SQL: SQL: {}, PinotQuery: {}, BrokerRequest: {}", sql, pinotQuery, brokerRequestFromSQL);
+
+    // Compare
+    LOGGER.info("Trying to compare BrokerRequest -\nFrom PQL: {}\nFrom SQL: {}", brokerRequestFromPQL,
+        brokerRequestFromSQL);
+    Assert.assertTrue(BrokerRequestComparisonUtils.validate(brokerRequestFromPQL, brokerRequestFromSQL));
+  }
+
+  @Test
+  public void testPqlAndSqlCompatible()
+      throws Exception {
+    final BufferedReader brPql = new BufferedReader(new InputStreamReader(
+        PqlAndCalciteSqlCompatibilityTest.class.getClassLoader().getResourceAsStream("pql_queries.list")));
+    final BufferedReader brSql = new BufferedReader(new InputStreamReader(
+        PqlAndCalciteSqlCompatibilityTest.class.getClassLoader().getResourceAsStream("sql_queries.list")));
+    String sql;
+    int seqId = 0;
+    while ((sql = brSql.readLine()) != null) {
+      final String pql = brPql.readLine();
+      try {
+
+        // PQL
+        LOGGER.info("Trying to compile PQL Id - {}, PQL: {}", seqId, pql);
+        final BrokerRequest brokerRequestFromPQL = OPTIMIZER.optimize(COMPILER.compileToBrokerRequest(pql), null);
+        LOGGER.debug("Compiled PQL: Id - {}, PQL: {}, BrokerRequest: {}", seqId, pql, brokerRequestFromPQL);
+        brokerRequestFromPQL.unsetPinotQuery();
+
+        //SQL
+        LOGGER.info("Trying to compile SQL Id - {}, SQL: {}", seqId, sql);
+        final PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(sql);
+        final BrokerRequest brokerRequestFromSQL =
+            OPTIMIZER.optimize(new PinotQuery2BrokerRequestConverter().convert(pinotQuery), null);
+        LOGGER.debug("Compiled SQL: Id - {}, SQL: {}, PinotQuery: {}, BrokerRequest: {}", seqId, sql, pinotQuery,
+            brokerRequestFromSQL);
+
+        // Compare
+        LOGGER.info("Trying to compare BrokerRequest - Id: {}\nFrom PQL: {}\nFrom SQL: {}", seqId, brokerRequestFromPQL,
+            brokerRequestFromSQL);
+        Assert.assertTrue(BrokerRequestComparisonUtils.validate(brokerRequestFromPQL, brokerRequestFromSQL));
+        seqId++;
+      } catch (Exception e) {
+        LOGGER.error("Failed to compare results from \n\tPQL: {}\nand\n\tSQL: {}", pql, sql, e);
+        throw e;
+      }
+    }
+  }
+}
diff --git a/pinot-common/pom.xml b/pinot-common/pom.xml
index 410e06e5777..2e27ac8392e 100644
--- a/pinot-common/pom.xml
+++ b/pinot-common/pom.xml
@@ -96,6 +96,10 @@
       <groupId>org.antlr</groupId>
       <artifactId>antlr4-runtime</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.calcite</groupId>
+      <artifactId>calcite-core</artifactId>
+    </dependency>
     <dependency>
       <groupId>org.testng</groupId>
       <artifactId>testng</artifactId>
diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java
index ff684509763..40434c9f699 100644
--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java
+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/CommonConstants.java
@@ -159,6 +159,7 @@ public static class Broker {
 
     public static class Request {
       public static final String PQL = "pql";
+      public static final String SQL = "sql";
       public static final String TRACE = "trace";
       public static final String DEBUG_OPTIONS = "debugOptions";
 
diff --git a/pinot-common/src/main/java/org/apache/pinot/common/utils/request/RequestUtils.java b/pinot-common/src/main/java/org/apache/pinot/common/utils/request/RequestUtils.java
index 7e7ed26b3aa..96cc7c1345d 100644
--- a/pinot-common/src/main/java/org/apache/pinot/common/utils/request/RequestUtils.java
+++ b/pinot-common/src/main/java/org/apache/pinot/common/utils/request/RequestUtils.java
@@ -26,6 +26,8 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.Stack;
+import org.apache.calcite.sql.SqlLiteral;
+import org.apache.calcite.sql.SqlNumericLiteral;
 import org.apache.commons.lang.mutable.MutableInt;
 import org.apache.pinot.common.request.BrokerRequest;
 import org.apache.pinot.common.request.Expression;
@@ -91,27 +93,52 @@ public static Expression createIdentifierExpression(String identifier) {
   public static Expression createLiteralExpression(LiteralAstNode value) {
     Expression expression = new Expression(ExpressionType.LITERAL);
     Literal literal = new Literal();
-    if(value instanceof StringLiteralAstNode) {
-      literal.setStringValue(((StringLiteralAstNode)value).getText());
+    if (value instanceof StringLiteralAstNode) {
+      literal.setStringValue(((StringLiteralAstNode) value).getText());
     }
-    if(value instanceof IntegerLiteralAstNode) {
-      literal.setLongValue(((IntegerLiteralAstNode)value).getValue());
+    if (value instanceof IntegerLiteralAstNode) {
+      literal.setLongValue(((IntegerLiteralAstNode) value).getValue());
     }
-    if(value instanceof FloatingPointLiteralAstNode) {
-      literal.setDoubleValue(((FloatingPointLiteralAstNode)value).getValue());
+    if (value instanceof FloatingPointLiteralAstNode) {
+      literal.setDoubleValue(((FloatingPointLiteralAstNode) value).getValue());
     }
     expression.setLiteral(literal);
     return expression;
   }
 
-  /**
-   * Create Function Expression given a functionName
-   * @param functionName
-   * @return
-   */
-  public static Expression createFunctionExpression(String functionName) {
+  public static Expression getIdentifierExpression(String identifier) {
+    Expression expression = new Expression(ExpressionType.IDENTIFIER);
+    expression.setIdentifier(new Identifier(identifier));
+    return expression;
+  }
+
+  public static Expression getLiteralExpression(SqlLiteral node) {
+    Expression expression = new Expression(ExpressionType.LITERAL);
+    Literal literal = new Literal();
+    if (node instanceof SqlNumericLiteral) {
+      if (((SqlNumericLiteral) node).isInteger()) {
+        literal.setLongValue(node.bigDecimalValue().longValue());
+      } else {
+        literal.setDoubleValue(node.bigDecimalValue().doubleValue());
+      }
+    } else {
+      literal.setStringValue(node.toString().replaceAll("^\'|\'$", ""));
+    }
+    expression.setLiteral(literal);
+    return expression;
+  }
+
+  public static Expression getLiteralExpression(String value) {
+    Expression expression = new Expression(ExpressionType.LITERAL);
+    Literal literal = new Literal();
+    literal.setStringValue(value);
+    expression.setLiteral(literal);
+    return expression;
+  }
+
+  public static Expression getFunctionExpression(String operator) {
     Expression expression = new Expression(ExpressionType.FUNCTION);
-    Function function = new Function(functionName);
+    Function function = new Function(operator);
     expression.setFunctionCall(function);
     return expression;
   }
@@ -279,7 +306,7 @@ public static Expression getExpression(AstNode astNode) {
       return createIdentifierExpression(((IdentifierAstNode) astNode).getName());
     } else if (astNode instanceof FunctionCallAstNode) {
       // Function expression
-      Expression expression = createFunctionExpression(((FunctionCallAstNode) astNode).getName());
+      Expression expression = getFunctionExpression(((FunctionCallAstNode) astNode).getName());
       Function func = expression.getFunctionCall();
       final List<? extends AstNode> operandsAstNodes = astNode.getChildren();
       if (operandsAstNodes != null) {
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/AbstractCompiler.java b/pinot-common/src/main/java/org/apache/pinot/parsers/AbstractCompiler.java
similarity index 81%
rename from pinot-common/src/main/java/org/apache/pinot/pql/parsers/AbstractCompiler.java
rename to pinot-common/src/main/java/org/apache/pinot/parsers/AbstractCompiler.java
index 1bfe53edef0..2edbeecdc3c 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/AbstractCompiler.java
+++ b/pinot-common/src/main/java/org/apache/pinot/parsers/AbstractCompiler.java
@@ -16,17 +16,14 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.pinot.pql.parsers;
+package org.apache.pinot.parsers;
 
 import org.apache.pinot.common.request.BrokerRequest;
-import org.apache.pinot.common.request.transform.TransformExpressionTree;
 
 
 /**
- * Interface for PQL compilers.
+ * Interface for Pinot Query compilers.
  */
 public interface AbstractCompiler {
   BrokerRequest compileToBrokerRequest(String expression);
-
-  TransformExpressionTree compileToExpressionTree(String expression);
 }
diff --git a/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java b/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java
new file mode 100644
index 00000000000..e0ecc13501c
--- /dev/null
+++ b/pinot-common/src/main/java/org/apache/pinot/parsers/utils/BrokerRequestComparisonUtils.java
@@ -0,0 +1,235 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.parsers.utils;
+
+import java.util.List;
+import org.apache.pinot.common.request.AggregationInfo;
+import org.apache.pinot.common.request.BrokerRequest;
+import org.apache.pinot.common.request.FilterQuery;
+import org.apache.pinot.common.request.FilterQueryMap;
+import org.apache.pinot.common.request.GroupBy;
+import org.apache.pinot.common.request.Selection;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+public class BrokerRequestComparisonUtils {
+
+  private static final Logger LOGGER = LoggerFactory.getLogger(BrokerRequestComparisonUtils.class);
+
+  public static boolean validate(BrokerRequest br1, BrokerRequest br2) {
+    boolean result = br1.equals(br2);
+    if (!result) {
+      StringBuilder sb = new StringBuilder();
+
+      if (!br1.getQuerySource().getTableName().equals(br2.getQuerySource().getTableName())) {
+        sb.append("br1.getQuerySource().getTableName() = ").append(br1.getQuerySource().getTableName()).append("\n")
+            .append("br2.getQuerySource().getTableName() = ").append(br2.getQuerySource().getTableName());
+        LOGGER.error("QuerySource did not match after conversion.{}", sb);
+        return false;
+      }
+
+      if (br1.getFilterQuery() != null) {
+        if (!validateFilterQuery(br1.getFilterQuery(), br2.getFilterQuery())) {
+          sb.append("br1.getFilterQuery() = ").append(br1.getFilterQuery()).append("\n")
+              .append("br2.getFilterQuery() = ").append(br2.getFilterQuery());
+          LOGGER.error("Filter did not match after conversion.{}", sb);
+          return false;
+        }
+
+        if (!validateFilterSubQueryMap(br1.getFilterSubQueryMap(), br2.getFilterSubQueryMap())) {
+          sb.append("br1.getFilterSubQueryMap() = ").append(br1.getFilterSubQueryMap()).append("\n")
+              .append("br2.getFilterSubQueryMap() = ").append(br2.getFilterSubQueryMap());
+          LOGGER.error("FilterSubQueryMap did not match after conversion. {}", sb);
+          return false;
+        }
+      }
+      if (br1.getSelections() != null) {
+        if (!validateSelections(br1.getSelections(), br2.getSelections())) {
+          sb.append("br1.getSelections() = ").append(br1.getSelections()).append("\n").append("br2.getSelections() = ")
+              .append(br2.getSelections());
+          LOGGER.error("Selection did not match after conversion:{}", sb);
+          return false;
+        }
+      }
+      if (br1.getGroupBy() != null) {
+        if (!validateGroupBy(br1.getGroupBy(), br2.getGroupBy())) {
+          sb.append("br1.getGroupBy() = ").append(br1.getGroupBy()).append("\n").append("br2.getGroupBy() = ")
+              .append(br2.getGroupBy());
+          LOGGER.error("Group By did not match conversion:{}", sb);
+          return false;
+        }
+      }
+      if (br1.getAggregationsInfo() != null) {
+        if (!validateAggregations(br1.getAggregationsInfo(), br2.getAggregationsInfo())) {
+          sb.append("br1.getGroupBy() = ").append(br1.getGroupBy()).append("\n").append("br2.getGroupBy() = ")
+              .append(br2.getGroupBy());
+          LOGGER.error("Group By did not match conversion:{}", sb);
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateAggregations(List<AggregationInfo> agg1, List<AggregationInfo> agg2) {
+    if (agg1.size() != agg2.size()) {
+      LOGGER.error("Failed to validate AggregationInfos: size doesn't match.\n\t{}\n\t{}", agg1, agg2);
+      return false;
+    }
+    for (int i = 0; i < agg1.size(); i++) {
+      if (!validateAggregation(agg1.get(i), agg2.get(i))) {
+        LOGGER.error("Failed to validate AggregationInfo at idx {} doesn't match.\n\t{}\n\t{}", i, agg1, agg2);
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateAggregation(AggregationInfo agg1, AggregationInfo agg2) {
+    if (!agg1.getAggregationType().equals(agg2.getAggregationType())) {
+      LOGGER.error("Failed to validate AggregationInfo: AggregationType doesn't match.\n\t{}\n\t{}", agg1, agg2);
+      return false;
+    }
+    if (agg1.getAggregationParamsSize() != agg2.getAggregationParamsSize()) {
+      LOGGER.error("Failed to validate AggregationInfo: AggregationParamsSize doesn't match.\n\t{}\n\t{}", agg1, agg2);
+      return false;
+    }
+    for (int i = 0; i < agg1.getAggregationParamsSize(); i++) {
+      for (String key : agg1.getAggregationParams().keySet()) {
+        if (!agg1.getAggregationParams().get(key).equals(agg2.getAggregationParams().get(key))) {
+          LOGGER
+              .error("Failed to validate AggregationInfo: AggregationParams at key {} doesn't match.\n\t{}\n\t{}", key,
+                  agg1.getAggregationParams().get(key), agg2.getAggregationParams().get(key));
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateGroupBy(GroupBy groupBy1, GroupBy groupBy2) {
+    if (groupBy1.getTopN() != groupBy2.getTopN()) {
+      LOGGER.error("Failed to validate GroupBy: getTopN doesn't match.\n\t{}\n\t{}", groupBy1, groupBy2);
+      return false;
+    }
+    for (int i = 0; i < groupBy1.getExpressions().size(); i++) {
+      final String s1 = groupBy1.getExpressions().get(i);
+      final String s2 = groupBy2.getExpressions().get(i);
+      if (!s1.equals(s2)) {
+        LOGGER.error("Failed to validate GroupBy: Expressions at idx {} doesn't match.\n\t{}\n\t{}", i, s1, s2);
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateSelections(Selection s1, Selection s2) {
+    if (s1.getSelectionColumnsSize() != s2.getSelectionColumnsSize()) {
+      LOGGER.error("Failed to validate Selections: selectionColumnsSize doesn't match.\n\t{}\n\t{}", s1, s2);
+      return false;
+    }
+    for (int i = 0; i < s1.getSelectionColumns().size(); i++) {
+      if (!s1.getSelectionColumns().get(i).equals(s2.getSelectionColumns().get(i))) {
+        LOGGER.error("Failed to validate Selections: SelectionColumn at idx {} doesn't match.\n\t{}\n\t{}", i, s1, s2);
+        return false;
+      }
+    }
+    if (s1.getSelectionSortSequenceSize() != s2.getSelectionSortSequenceSize()) {
+      LOGGER.error("Failed to validate Selections: SelectionSortSequenceSize doesn't match.\n\t{}\n\t{}", s1, s2);
+      return false;
+    }
+    if (s1.getSelectionSortSequence() != null) {
+      for (int i = 0; i < s1.getSelectionSortSequence().size(); i++) {
+        if (!s1.getSelectionSortSequence().get(i).getColumn()
+            .equals(s2.getSelectionSortSequence().get(i).getColumn())) {
+          LOGGER
+              .error("Failed to validate Selections: SelectionSortSequence Column at idx {} doesn't match.\n\t{}\n\t{}",
+                  i, s1, s2);
+          return false;
+        }
+        if (s1.getSelectionSortSequence().get(i).isIsAsc() != s2.getSelectionSortSequence().get(i).isIsAsc()) {
+          LOGGER
+              .error("Failed to validate Selections: SelectionSortSequence isAsc at idx {} doesn't match.\n\t{}\n\t{}",
+                  i, s1, s2);
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateFilterSubQueryMap(FilterQueryMap map1, FilterQueryMap map2) {
+    for (int idx : map1.getFilterQueryMap().keySet()) {
+      final FilterQuery q1 = map1.getFilterQueryMap().get(idx);
+      final FilterQuery q2 = map2.getFilterQueryMap().get(idx);
+      if (!validateFilterQuery(q1, q2)) {
+        LOGGER.error("Failed to validate FilterSubQueryMap:\n\t{}\n\t{}", q1, q2);
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private static boolean validateFilterQuery(FilterQuery fq1, FilterQuery fq2) {
+    if (fq1.getId() != fq2.getId()) {
+      LOGGER.error("Failed to validate FilterQuery: Id doesn't match.\n\t{}\n\t{}", fq1, fq2);
+      return false;
+    }
+    if (fq1.getColumn() != null) {
+      if (!fq1.getColumn().equals(fq2.getColumn())) {
+        LOGGER.error("Failed to validate FilterQuery: Column doesn't match.\n\t{}\n\t{}", fq1, fq2);
+        return false;
+      }
+    }
+    if (fq1.getOperator() != fq2.getOperator()) {
+      LOGGER.error("Failed to validate FilterQuery: Operator doesn't match.\n\t{}\n\t{}", fq1, fq2);
+      return false;
+    }
+    if (fq1.getValue() != null) {
+      if (fq1.getValue().size() != fq2.getValue().size()) {
+        LOGGER.error("Failed to validate FilterQuery: value size doesn't match.\n\t{}\n\t{}", fq1, fq2);
+        return false;
+      }
+      for (int i = 0; i < fq1.getValue().size(); i++) {
+        final String s1 = fq1.getValue().get(i);
+        final String s2 = fq2.getValue().get(i);
+        if (!s1.equals(s2)) {
+          LOGGER.error("Failed to validate FilterQuery: value at idx {} doesn't match.\n\t{}\n\t{}\n\t{}\n\t{}", i, fq1,
+              fq2, s1, s2);
+          return false;
+        }
+      }
+    }
+    if (fq1.getNestedFilterQueryIds() != null) {
+      if (fq1.getNestedFilterQueryIds().size() != fq2.getNestedFilterQueryIds().size()) {
+        LOGGER.error("Failed to validate FilterQuery: nestedFilterQueryIds size doesn't match.\n\t{}\n\t{}", fq1, fq2);
+        return false;
+      }
+      for (int i = 0; i < fq1.getNestedFilterQueryIds().size(); i++) {
+        if (fq1.getNestedFilterQueryIds().get(i) != fq2.getNestedFilterQueryIds().get(i)) {
+          LOGGER.error("Failed to validate FilterQuery: nestedFilterQueryIds at idx {} doesn't match.\n\t{}\n\t{}", i,
+              fq1, fq2);
+          return false;
+        }
+      }
+    }
+    return true;
+  }
+}
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java
index a157d8eac1d..a849826f421 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import org.apache.calcite.sql.SqlKind;
 import org.apache.pinot.common.function.FunctionDefinitionRegistry;
 import org.apache.pinot.common.request.AggregationInfo;
 import org.apache.pinot.common.request.BrokerRequest;
@@ -128,7 +129,9 @@ private void convertSelectList(PinotQuery pinotQuery, BrokerRequest brokerReques
           selection.addToSelectionColumns(expression.getIdentifier().getName());
           break;
         case FUNCTION:
-
+          if (expression.getFunctionCall().getOperator().equalsIgnoreCase(SqlKind.AS.toString())) {
+            expression = expression.getFunctionCall().getOperands().get(0);
+          }
           Function functionCall = expression.getFunctionCall();
           String functionName = functionCall.getOperator();
           if (FunctionDefinitionRegistry.isAggFunc(functionName)) {
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/Pql2Compiler.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/Pql2Compiler.java
index 6f63a6337fa..e3353cd105f 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/Pql2Compiler.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/Pql2Compiler.java
@@ -18,7 +18,6 @@
  */
 package org.apache.pinot.pql.parsers;
 
-import com.google.common.annotations.VisibleForTesting;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Stack;
@@ -43,6 +42,8 @@
 import org.apache.pinot.common.request.BrokerRequest;
 import org.apache.pinot.common.request.PinotQuery;
 import org.apache.pinot.common.request.transform.TransformExpressionTree;
+import org.apache.pinot.parsers.AbstractCompiler;
+import org.apache.pinot.parsers.utils.BrokerRequestComparisonUtils;
 import org.apache.pinot.pql.parsers.pql2.ast.AstNode;
 import org.apache.pinot.pql.parsers.pql2.ast.BaseAstNode;
 import org.apache.pinot.pql.parsers.pql2.ast.BetweenPredicateAstNode;
@@ -124,7 +125,7 @@ public BrokerRequest compileToBrokerRequest(String expression)
           if (VALIDATE_CONVERTER) {
             PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();
             BrokerRequest tempBrokerRequest = converter.convert(pinotQuery);
-            boolean result = compare(brokerRequest, tempBrokerRequest);
+            boolean result = BrokerRequestComparisonUtils.validate(brokerRequest, tempBrokerRequest);
             if (!result) {
               LOGGER.error("Pinot query to broker request conversion failed. PQL:{}", expression);
               if (FAIL_ON_CONVERSION_ERROR) {
@@ -150,64 +151,6 @@ public BrokerRequest compileToBrokerRequest(String expression)
     }
   }
 
-  private boolean compare(BrokerRequest br1, BrokerRequest br2)
-      throws Exception {
-    //Having not yet supported
-    if (br1.getHavingFilterQuery() != null) {
-      return true;
-    }
-    boolean result = br1.equals(br2);
-    if (!result) {
-      StringBuilder sb = new StringBuilder();
-
-      if (br1.getFilterQuery() != null) {
-        if (!br1.getFilterQuery().equals(br2.getFilterQuery())) {
-          sb.append("br1.getFilterQuery() = ").append(br1.getFilterQuery()).append("\n")
-              .append("br2.getFilterQuery() = ").append(br2.getFilterQuery());
-          LOGGER.error("Filter did not match after conversion.{}", sb);
-          return false;
-        }
-
-        if (!br1.getFilterSubQueryMap().equals(br2.getFilterSubQueryMap())) {
-          sb.append("br1.getFilterSubQueryMap() = ").append(br1.getFilterSubQueryMap()).append("\n")
-              .append("br2.getFilterSubQueryMap() = ").append(br2.getFilterSubQueryMap());
-          LOGGER.error("FilterSubQueryMap did not match after conversion. {}", sb);
-          return false;
-        }
-      }
-      if (br1.getSelections() != null) {
-        if (!br1.getSelections().equals(br2.getSelections())) {
-          sb.append("br1.getSelections() = ").append(br1.getSelections()).append("\n").append("br2.getSelections() = ")
-              .append(br2.getSelections());
-          LOGGER.error("Selection did not match after conversion:{}", sb);
-          return false;
-        }
-      }
-      if (br1.getGroupBy() != null) {
-        if (!br1.getGroupBy().equals(br2.getGroupBy())) {
-          sb.append("br1.getGroupBy() = ").append(br1.getGroupBy()).append("\n").append("br2.getGroupBy() = ")
-              .append(br2.getGroupBy());
-          LOGGER.error("Group By did not match conversion:{}", sb);
-          return false;
-        }
-      }
-      if (br1.getAggregationsInfo() != null) {
-        List<AggregationInfo> aggregationsInfo = br1.getAggregationsInfo();
-        for (int i = 0; i < aggregationsInfo.size(); i++) {
-          AggregationInfo agg1 = br1.getAggregationsInfo().get(i);
-          AggregationInfo agg2 = br2.getAggregationsInfo().get(i);
-          if (!agg1.equals(agg2)) {
-            sb.append("br1.agg1 = ").append(agg1).append("\n").append("br2.agg2() = ").append(agg2);
-            LOGGER.error("AggregationInfo did not match after conversion: {}", sb);
-            return false;
-          }
-        }
-      }
-    }
-    return result;
-  }
-
-  @Override
   public TransformExpressionTree compileToExpressionTree(String expression) {
     CharStream charStream = new ANTLRInputStream(expression);
     PQL2Lexer lexer = new PQL2Lexer(charStream);
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/BetweenPredicateAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/BetweenPredicateAstNode.java
index 3d989e9b5bb..4f11372c748 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/BetweenPredicateAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/BetweenPredicateAstNode.java
@@ -95,7 +95,7 @@ public Expression buildFilterExpression() {
         LiteralAstNode left = (LiteralAstNode) getChildren().get(0);
         LiteralAstNode right = (LiteralAstNode) getChildren().get(1);
 
-        final Expression betweenExpr = RequestUtils.createFunctionExpression(FilterKind.BETWEEN.name());
+        final Expression betweenExpr = RequestUtils.getFunctionExpression(FilterKind.BETWEEN.name());
         final Function rangeFuncCall = betweenExpr.getFunctionCall();
         rangeFuncCall.addToOperands(RequestUtils.createIdentifierExpression(_identifier));
         rangeFuncCall.addToOperands(RequestUtils.createLiteralExpression(left));
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java
index 2570c586306..976a809f724 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/ComparisonPredicateAstNode.java
@@ -167,7 +167,7 @@ public Expression buildFilterExpression() {
 
     if ("=".equals(_operand)) {
       if (_identifier != null && _literal != null) {
-        Expression expr = RequestUtils.createFunctionExpression(FilterKind.EQUALS.name());
+        Expression expr = RequestUtils.getFunctionExpression(FilterKind.EQUALS.name());
         expr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression(_identifier));
         expr.getFunctionCall().addToOperands(RequestUtils.createLiteralExpression(_literal));
         return expr;
@@ -176,7 +176,7 @@ public Expression buildFilterExpression() {
       }
     } else if ("<>".equals(_operand) || "!=".equals(_operand)) {
       if (_identifier != null && _literal != null) {
-        Expression expr = RequestUtils.createFunctionExpression(FilterKind.NOT_EQUALS.name());
+        Expression expr = RequestUtils.getFunctionExpression(FilterKind.NOT_EQUALS.name());
         expr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression(_identifier));
         expr.getFunctionCall().addToOperands(RequestUtils.createLiteralExpression(_literal));
         return expr;
@@ -192,27 +192,27 @@ public Expression buildFilterExpression() {
         Expression expr = null;
         if ("<".equals(_operand)) {
           if (identifierIsOnLeft) {
-            expr = RequestUtils.createFunctionExpression(FilterKind.LESS_THAN.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.LESS_THAN.name());
           } else {
-            expr = RequestUtils.createFunctionExpression(FilterKind.GREATER_THAN.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.GREATER_THAN.name());
           }
         } else if ("<=".equals(_operand)) {
           if (identifierIsOnLeft) {
-            expr = RequestUtils.createFunctionExpression(FilterKind.LESS_THAN_OR_EQUAL.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.LESS_THAN_OR_EQUAL.name());
           } else {
-            expr = RequestUtils.createFunctionExpression(FilterKind.GREATER_THAN_OR_EQUAL.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.GREATER_THAN_OR_EQUAL.name());
           }
         } else if (">".equals(_operand)) {
           if (identifierIsOnLeft) {
-            expr = RequestUtils.createFunctionExpression(FilterKind.GREATER_THAN.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.GREATER_THAN.name());
           } else {
-            expr = RequestUtils.createFunctionExpression(FilterKind.LESS_THAN.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.LESS_THAN.name());
           }
         } else if (">=".equals(_operand)) {
           if (identifierIsOnLeft) {
-            expr = RequestUtils.createFunctionExpression(FilterKind.GREATER_THAN_OR_EQUAL.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.GREATER_THAN_OR_EQUAL.name());
           } else {
-            expr = RequestUtils.createFunctionExpression(FilterKind.LESS_THAN_OR_EQUAL.name());
+            expr = RequestUtils.getFunctionExpression(FilterKind.LESS_THAN_OR_EQUAL.name());
           }
         }
         if (expr == null) {
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java
index cbdf0dbde72..51550f4b6a4 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/InPredicateAstNode.java
@@ -124,7 +124,7 @@ public Expression buildFilterExpression() {
     } else {
       filterOperator = FilterKind.IN;
     }
-    Expression expr = RequestUtils.createFunctionExpression(filterOperator.name());
+    Expression expr = RequestUtils.getFunctionExpression(filterOperator.name());
     expr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression(_identifier));
 
     Set<String> values = new LinkedHashSet<>();
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OrderByAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OrderByAstNode.java
index e776c242203..2a4ce71faa7 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OrderByAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OrderByAstNode.java
@@ -61,7 +61,7 @@ public void updatePinotQuery(PinotQuery pinotQuery) {
         if ("asc".equalsIgnoreCase(node.getOrdering())) {
           ordering = "asc";
         }
-        Expression orderByExpression = RequestUtils.createFunctionExpression(ordering);
+        Expression orderByExpression = RequestUtils.getFunctionExpression(ordering);
         Function orderByFunc = orderByExpression.getFunctionCall();
         Expression colExpr = RequestUtils.createIdentifierExpression(node.getColumn());
         orderByFunc.addToOperands(colExpr);
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OutputColumnAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OutputColumnAstNode.java
index d53e201d30e..fca965c88e4 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OutputColumnAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/OutputColumnAstNode.java
@@ -75,7 +75,7 @@ public void updatePinotQuery(PinotQuery pinotQuery) {
         Expression functionExpr;
         if (node.getName().equalsIgnoreCase("count")) {
           // COUNT aggregation function always works on '*'
-          functionExpr = RequestUtils.createFunctionExpression(node.getName());
+          functionExpr = RequestUtils.getFunctionExpression(node.getName());
           functionExpr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression("*"));
         } else {
           functionExpr = RequestUtils.getExpression(astNode);
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/PredicateListAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/PredicateListAstNode.java
index 951ec743f37..09eca92da55 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/PredicateListAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/PredicateListAstNode.java
@@ -177,7 +177,7 @@ public Expression buildFilterExpression() {
   }
 
   public Expression buildFilterExpression(FilterKind operator, List<Expression> children) {
-    final Expression expression = RequestUtils.createFunctionExpression(operator.name());
+    final Expression expression = RequestUtils.getFunctionExpression(operator.name());
     for (Expression child : children) {
       expression.getFunctionCall().addToOperands(child);
     }
diff --git a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/RegexpLikePredicateAstNode.java b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/RegexpLikePredicateAstNode.java
index 3375312420e..251b5b12fb5 100644
--- a/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/RegexpLikePredicateAstNode.java
+++ b/pinot-common/src/main/java/org/apache/pinot/pql/parsers/pql2/ast/RegexpLikePredicateAstNode.java
@@ -81,7 +81,7 @@ public Expression buildFilterExpression() {
     if (_identifier == null) {
       throw new Pql2CompilationException("REGEXP_LIKE predicate has no identifier");
     }
-    Expression expression = RequestUtils.createFunctionExpression(FilterKind.REGEXP_LIKE.name());
+    Expression expression = RequestUtils.getFunctionExpression(FilterKind.REGEXP_LIKE.name());
     expression.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression(_identifier));
     if (getChildren().size() > 1) {
       throw new Pql2CompilationException("Matching more than one regex is NOT supported currently");
diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlCompiler.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlCompiler.java
new file mode 100644
index 00000000000..1ab325834d9
--- /dev/null
+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlCompiler.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.sql.parsers;
+
+import org.apache.pinot.common.request.BrokerRequest;
+import org.apache.pinot.common.request.PinotQuery;
+import org.apache.pinot.parsers.AbstractCompiler;
+import org.apache.pinot.pql.parsers.PinotQuery2BrokerRequestConverter;
+
+
+/**
+ * CalciteSqlCompiler is a Calcite SQL compiler.
+ */
+public class CalciteSqlCompiler implements AbstractCompiler {
+  @Override
+  public BrokerRequest compileToBrokerRequest(String query) {
+    final PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);
+    return new PinotQuery2BrokerRequestConverter().convert(pinotQuery);
+  }
+}
diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java
new file mode 100644
index 00000000000..497056351cf
--- /dev/null
+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java
@@ -0,0 +1,273 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.sql.parsers;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import org.apache.calcite.config.Lex;
+import org.apache.calcite.sql.SqlBasicCall;
+import org.apache.calcite.sql.SqlIdentifier;
+import org.apache.calcite.sql.SqlKind;
+import org.apache.calcite.sql.SqlLiteral;
+import org.apache.calcite.sql.SqlNode;
+import org.apache.calcite.sql.SqlNodeList;
+import org.apache.calcite.sql.SqlNumericLiteral;
+import org.apache.calcite.sql.SqlOrderBy;
+import org.apache.calcite.sql.SqlSelect;
+import org.apache.calcite.sql.parser.SqlParseException;
+import org.apache.calcite.sql.parser.SqlParser;
+import org.apache.pinot.common.request.DataSource;
+import org.apache.pinot.common.request.Expression;
+import org.apache.pinot.common.request.PinotQuery;
+import org.apache.pinot.common.utils.request.RequestUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+public class CalciteSqlParser {
+
+  private static final Logger LOGGER = LoggerFactory.getLogger(CalciteSqlParser.class);
+
+  /** Lexical policy similar to MySQL with ANSI_QUOTES option enabled. (To be
+   * precise: MySQL on Windows; MySQL on Linux uses case-sensitive matching,
+   * like the Linux file system.) The case of identifiers is preserved whether
+   * or not they quoted; after which, identifiers are matched
+   * case-insensitively. Double quotes allow identifiers to contain
+   * non-alphanumeric characters. */
+  private static Lex PINOT_LEX = Lex.MYSQL_ANSI;
+
+  // To Keep the backward compatibility with 'OPTION' Functionality in PQL, which is used to
+  // provide more hints for query processing.
+  //
+  // PQL syntax is: `OPTION (<key> = <value>)`
+  //
+  // Multiple OPTIONs is also supported by:
+  // either
+  //   `OPTION (<k1> = <v1>, <k2> = <v2>, <k3> = <v3>)`
+  // or
+  //   `OPTION (<k1> = <v1>) OPTION (<k2> = <v2>) OPTION (<k3> = <v3>)`
+  private static final Pattern OPTIONS_REGEX_PATTEN =
+      Pattern.compile("option\\s*\\(([^\\)]+)\\)", Pattern.CASE_INSENSITIVE);
+
+  public static PinotQuery compileToPinotQuery(String sql)
+      throws SqlCompilationException {
+    // Extract OPTION statements from sql as Calcite Parser doesn't parse it.
+    List<String> options = extractOptionsFromSql(sql);
+    if (!options.isEmpty()) {
+      sql = removeOptionsFromSql(sql);
+    }
+    // Compile Sql without OPTION statements.
+    PinotQuery pinotQuery = compileCalciteSqlToPinotQuery(sql);
+
+    // Set Option statements to PinotQuery.
+    setOptions(pinotQuery, options);
+    return pinotQuery;
+  }
+
+  private static void setOptions(PinotQuery pinotQuery, List<String> optionsStatements) {
+    if (optionsStatements.isEmpty()) {
+      return;
+    }
+    Map<String, String> options = new HashMap<>();
+    for (String optionsStatement : optionsStatements) {
+      for (String option : optionsStatement.split(",")) {
+        final String[] splits = option.split("=");
+        if (splits.length != 2) {
+          throw new SqlCompilationException("OPTION statement requires two parts separated by '='");
+        }
+        options.put(splits[0].trim(), splits[1].trim());
+      }
+    }
+    pinotQuery.setQueryOptions(options);
+  }
+
+  private static PinotQuery compileCalciteSqlToPinotQuery(String sql) {
+    SqlParser.ConfigBuilder parserBuilder = SqlParser.configBuilder();
+    parserBuilder.setLex(PINOT_LEX);
+    SqlParser sqlParser = SqlParser.create(sql, parserBuilder.build());
+    final SqlNode sqlNode;
+    try {
+      sqlNode = sqlParser.parseQuery();
+    } catch (SqlParseException e) {
+      throw new SqlCompilationException(e);
+    }
+
+    PinotQuery pinotQuery = new PinotQuery();
+
+    SqlSelect selectSqlNode;
+    SqlOrderBy selectOrderBySqlNode = null;
+    switch (sqlNode.getKind()) {
+      case ORDER_BY:
+        selectOrderBySqlNode = (SqlOrderBy) sqlNode;
+        if (selectOrderBySqlNode.orderList != null) {
+          pinotQuery.setOrderByList(convertOrderByList(selectOrderBySqlNode.orderList));
+        }
+        if (selectOrderBySqlNode.fetch != null) {
+          pinotQuery.setLimit(Integer.valueOf(((SqlNumericLiteral) selectOrderBySqlNode.fetch).toValue()));
+        }
+        if (selectOrderBySqlNode.offset != null) {
+          pinotQuery.setOffset(Integer.valueOf(((SqlNumericLiteral) selectOrderBySqlNode.offset).toValue()));
+        }
+      case SELECT:
+        if (sqlNode instanceof SqlOrderBy) {
+          selectSqlNode = (SqlSelect) selectOrderBySqlNode.query;
+        } else {
+          selectSqlNode = (SqlSelect) sqlNode;
+        }
+
+        if (selectSqlNode.getFetch() != null) {
+          pinotQuery.setLimit(Integer.valueOf(((SqlNumericLiteral) selectSqlNode.getFetch()).toValue()));
+        }
+        if (selectSqlNode.getOffset() != null) {
+          pinotQuery.setOffset(Integer.valueOf(((SqlNumericLiteral) selectSqlNode.getOffset()).toValue()));
+        }
+        DataSource dataSource = new DataSource();
+        dataSource.setTableName(selectSqlNode.getFrom().toString());
+        pinotQuery.setDataSource(dataSource);
+        pinotQuery.setSelectList(convertSelectList(selectSqlNode.getSelectList()));
+        if (selectSqlNode.getWhere() != null) {
+          pinotQuery.setFilterExpression(toExpression(selectSqlNode.getWhere()));
+        }
+        if (selectSqlNode.getGroup() != null) {
+          pinotQuery.setGroupByList(convertSelectList(selectSqlNode.getGroup()));
+        }
+        break;
+      default:
+        throw new RuntimeException(
+            "Unable to convert SqlNode: " + sqlNode + " to PinotQuery. Unknown node type: " + sqlNode.getKind());
+    }
+    return pinotQuery;
+  }
+
+  private static List<String> extractOptionsFromSql(String sql) {
+    List<String> results = new ArrayList<>();
+    Matcher matcher = OPTIONS_REGEX_PATTEN.matcher(sql);
+    while (matcher.find()) {
+      results.add(matcher.group(1));
+    }
+    return results;
+  }
+
+  private static String removeOptionsFromSql(String sql) {
+    Matcher matcher = OPTIONS_REGEX_PATTEN.matcher(sql);
+    return matcher.replaceAll("");
+  }
+
+  private static List<Expression> convertSelectList(SqlNodeList selectList) {
+    List<Expression> selectExpr = new ArrayList<>();
+    final Iterator<SqlNode> iterator = selectList.iterator();
+    while (iterator.hasNext()) {
+      final SqlNode next = iterator.next();
+      selectExpr.add(toExpression(next));
+    }
+    return selectExpr;
+  }
+
+  private static List<Expression> convertOrderByList(SqlNodeList orderList) {
+    List<Expression> orderByExpr = new ArrayList<>();
+    final Iterator<SqlNode> iterator = orderList.iterator();
+    while (iterator.hasNext()) {
+      final SqlNode next = iterator.next();
+      orderByExpr.add(convertOrderBy(next));
+    }
+    return orderByExpr;
+  }
+
+  private static Expression convertOrderBy(SqlNode node) {
+    final SqlKind kind = node.getKind();
+    Expression expression;
+    switch (kind) {
+      case IDENTIFIER:
+        expression = RequestUtils.getFunctionExpression("ASC");
+        expression.getFunctionCall().addToOperands(toExpression(node));
+        break;
+      case DESCENDING:
+        SqlBasicCall basicCall = (SqlBasicCall) node;
+        expression = RequestUtils.getFunctionExpression("DESC");
+        expression.getFunctionCall().addToOperands(toExpression(basicCall.getOperands()[0]));
+        break;
+      default:
+        throw new RuntimeException("Unknown node type: " + node.getKind());
+    }
+    return expression;
+  }
+
+  private static Expression toExpression(SqlNode node) {
+    LOGGER.debug("Current processing SqlNode: {}, node.getKind(): {}", node, node.getKind());
+    switch (node.getKind()) {
+      case IDENTIFIER:
+        if (((SqlIdentifier) node).isStar()) {
+          return RequestUtils.getIdentifierExpression("*");
+        }
+        if (((SqlIdentifier) node).isSimple()) {
+          return RequestUtils.getIdentifierExpression(((SqlIdentifier) node).getSimple());
+        }
+        return RequestUtils.getIdentifierExpression(node.toString());
+      case LITERAL:
+        return RequestUtils.getLiteralExpression((SqlLiteral) node);
+      case AS:
+        // Aggregation
+      case COUNT:
+      case SUM:
+      case AVG:
+      case MAX:
+      case MIN:
+      case HOP:
+      case OTHER_FUNCTION:
+        // Filtering
+      case OR:
+      case AND:
+      case EQUALS:
+      case NOT_EQUALS:
+      case BETWEEN:
+      case GREATER_THAN:
+      case GREATER_THAN_OR_EQUAL:
+      case LESS_THAN:
+      case LESS_THAN_OR_EQUAL:
+      case IN:
+      case NOT_IN:
+      case LIKE:
+        SqlBasicCall funcSqlNode = (SqlBasicCall) node;
+        String funcName = funcSqlNode.getOperator().getKind().name();
+        if (funcSqlNode.getOperator().getKind() == SqlKind.OTHER_FUNCTION) {
+          funcName = funcSqlNode.getOperator().getName();
+        }
+        final Expression funcExpr = RequestUtils.getFunctionExpression(funcName);
+        for (SqlNode child : funcSqlNode.getOperands()) {
+          if (child instanceof SqlNodeList) {
+            final Iterator<SqlNode> iterator = ((SqlNodeList) child).iterator();
+            while (iterator.hasNext()) {
+              final SqlNode next = iterator.next();
+              funcExpr.getFunctionCall().addToOperands(toExpression(next));
+            }
+          } else {
+            funcExpr.getFunctionCall().addToOperands(toExpression(child));
+          }
+        }
+        return funcExpr;
+      default:
+        throw new RuntimeException("Unknown node type: " + node.getKind());
+    }
+  }
+}
diff --git a/pinot-common/src/main/java/org/apache/pinot/sql/parsers/SqlCompilationException.java b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/SqlCompilationException.java
new file mode 100644
index 00000000000..eb1a4f695fa
--- /dev/null
+++ b/pinot-common/src/main/java/org/apache/pinot/sql/parsers/SqlCompilationException.java
@@ -0,0 +1,33 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.sql.parsers;
+
+/**
+ * Exceptions that occur while compiling SQL.
+ */
+public class SqlCompilationException extends RuntimeException {
+
+  public SqlCompilationException(String msg) {
+    super(msg);
+  }
+
+  public SqlCompilationException(Throwable throwable) {
+    super(throwable);
+  }
+}
diff --git a/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java b/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java
index 6afbcd22806..a31940dcc0a 100644
--- a/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java
+++ b/pinot-common/src/test/java/org/apache/pinot/request/BrokerRequestSerializationTest.java
@@ -158,19 +158,19 @@ public static void testSerializationWithPinotQuery()
     pinotQuery.addToSelectList(RequestUtils.createIdentifierExpression("dummy1"));
 
     //Populate OrderBy
-    Expression ascExpr = RequestUtils.createFunctionExpression("asc");
+    Expression ascExpr = RequestUtils.getFunctionExpression("asc");
     ascExpr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression("dummy1"));
     pinotQuery.addToOrderByList(ascExpr);
 
     //Populate FilterQuery
-    Expression filter = RequestUtils.createFunctionExpression(FilterOperator.AND.name());
+    Expression filter = RequestUtils.getFunctionExpression(FilterOperator.AND.name());
 
-    Expression filterExpr1 = RequestUtils.createFunctionExpression(FilterOperator.EQUALITY.name());
+    Expression filterExpr1 = RequestUtils.getFunctionExpression(FilterOperator.EQUALITY.name());
     filterExpr1.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression("dummy1"));
     filterExpr1.getFunctionCall().addToOperands(RequestUtils.createLiteralExpression(new StringLiteralAstNode("dummy1")));
     filter.getFunctionCall().addToOperands(filterExpr1);
 
-    Expression filterExpr2 = RequestUtils.createFunctionExpression(FilterOperator.EQUALITY.name());
+    Expression filterExpr2 = RequestUtils.getFunctionExpression(FilterOperator.EQUALITY.name());
     filterExpr2.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression("dummy2"));
     filterExpr2.getFunctionCall().addToOperands(RequestUtils.createLiteralExpression(new StringLiteralAstNode("dummy2")));
     filter.getFunctionCall().addToOperands(filterExpr2);
@@ -178,7 +178,7 @@ public static void testSerializationWithPinotQuery()
     pinotQuery.setFilterExpression(filter);
 
     //Populate Aggregations
-    Expression aggExpr = RequestUtils.createFunctionExpression("dummy1");
+    Expression aggExpr = RequestUtils.getFunctionExpression("dummy1");
     aggExpr.getFunctionCall().addToOperands(RequestUtils.createIdentifierExpression("dummy"));
     pinotQuery.addToSelectList(aggExpr);
 
diff --git a/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java b/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java
new file mode 100644
index 00000000000..0e9007149bd
--- /dev/null
+++ b/pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java
@@ -0,0 +1,465 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pinot.sql.parsers;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.util.List;
+import org.apache.calcite.sql.SqlKind;
+import org.apache.pinot.common.request.BrokerRequest;
+import org.apache.pinot.common.request.Expression;
+import org.apache.pinot.common.request.FilterOperator;
+import org.apache.pinot.common.request.Function;
+import org.apache.pinot.common.request.PinotQuery;
+import org.apache.pinot.pql.parsers.PinotQuery2BrokerRequestConverter;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.testng.Assert;
+import org.testng.annotations.Test;
+
+
+/**
+ * Some tests for the SQL compiler.
+ */
+public class CalciteSqlCompilerTest {
+
+  private static final Logger LOGGER = LoggerFactory.getLogger(CalciteSqlCompilerTest.class);
+  @Test
+  public void testQuotedStrings() {
+
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select * from vegetables where origin = 'Martha''s Vineyard'");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getLiteral().getStringValue(),
+        "Martha''s Vineyard");
+
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where origin = 'Martha\"\"s Vineyard'");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getLiteral().getStringValue(),
+        "Martha\"\"s Vineyard");
+
+    pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select * from vegetables where origin = \"Martha\"\"s Vineyard\"");
+    Assert
+        .assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getIdentifier().getName(),
+            "Martha\"s Vineyard");
+
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where origin = \"Martha''s Vineyard\"");
+    Assert
+        .assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getIdentifier().getName(),
+            "Martha''s Vineyard");
+  }
+
+  @Test
+  public void testFilterCaluses() {
+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where a > 1.5");
+    Function func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "a");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getDoubleValue(), 1.5);
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where b < 100");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.LESS_THAN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "b");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 100L);
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where c >= 10");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.GREATER_THAN_OR_EQUAL.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "c");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 10L);
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where d <= 50");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.LESS_THAN_OR_EQUAL.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "d");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 50L);
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where e BETWEEN 70 AND 80");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.BETWEEN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "e");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 70L);
+    Assert.assertEquals(func.getOperands().get(2).getLiteral().getLongValue(), 80L);
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where regexp_like(E, '^U.*')");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), "regexp_like");
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "E");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getStringValue(), "^U.*");
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where f LIKE '%potato%'");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.LIKE.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "f");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getStringValue(), "%potato%");
+    pinotQuery = CalciteSqlParser.compileToPinotQuery("select * from vegetables where g IN (12, 13, 15.2, 17)");
+    func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.IN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "g");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 12L);
+    Assert.assertEquals(func.getOperands().get(2).getLiteral().getLongValue(), 13L);
+    Assert.assertEquals(func.getOperands().get(3).getLiteral().getDoubleValue(), 15.2);
+    Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);
+  }
+
+  @Test
+  public void testBrokerConverter() {
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select * from vegetables where g IN (12, 13, 15.2, 17)");
+    Function func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.IN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "g");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 12L);
+    Assert.assertEquals(func.getOperands().get(2).getLiteral().getLongValue(), 13L);
+    Assert.assertEquals(func.getOperands().get(3).getLiteral().getDoubleValue(), 15.2);
+    Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);
+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();
+    BrokerRequest tempBrokerRequest = converter.convert(pinotQuery);
+    Assert.assertEquals(tempBrokerRequest.getQuerySource().getTableName(), "vegetables");
+    Assert.assertEquals(tempBrokerRequest.getSelections().getSelectionColumns().get(0), "*");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getOperator(), FilterOperator.IN);
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getColumn(), "g");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().size(), 4);
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(0), "12");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(1), "13");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(2), "15.2");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(3), "17");
+  }
+
+  @Test
+  public void testSelectAs() {
+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(
+        "select sum(A) as sum_A, count(B) as count_B  from vegetables where g IN (12, 13, 15.2, 17)");
+    Function func = pinotQuery.getFilterExpression().getFunctionCall();
+    Assert.assertEquals(func.getOperator(), SqlKind.IN.name());
+    Assert.assertEquals(func.getOperands().get(0).getIdentifier().getName(), "g");
+    Assert.assertEquals(func.getOperands().get(1).getLiteral().getLongValue(), 12L);
+    Assert.assertEquals(func.getOperands().get(2).getLiteral().getLongValue(), 13L);
+    Assert.assertEquals(func.getOperands().get(3).getLiteral().getDoubleValue(), 15.2);
+    Assert.assertEquals(func.getOperands().get(4).getLiteral().getLongValue(), 17L);
+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();
+    BrokerRequest tempBrokerRequest = converter.convert(pinotQuery);
+    Assert.assertEquals(tempBrokerRequest.getQuerySource().getTableName(), "vegetables");
+    Assert.assertNull(tempBrokerRequest.getSelections());
+    Assert.assertEquals(tempBrokerRequest.getAggregationsInfo().get(0).getAggregationType(), "SUM");
+    Assert.assertEquals(tempBrokerRequest.getAggregationsInfo().get(1).getAggregationType(), "COUNT");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getColumn(), "g");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().size(), 4);
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(0), "12");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(1), "13");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(2), "15.2");
+    Assert.assertEquals(tempBrokerRequest.getFilterQuery().getValue().get(3), "17");
+  }
+
+  @Test
+  public void testDuplicateClauses() {
+    assertCompilationFails("select top 5 count(*) from a top 8");
+    assertCompilationFails("select count(*) from a where a = 1 limit 5 where b = 2");
+    assertCompilationFails("select count(*) from a group by b limit 5 group by b");
+    assertCompilationFails("select count(*) from a having sum(a) = 8 limit 5 having sum(a) = 9");
+    assertCompilationFails("select count(*) from a order by b limit 5 order by c");
+    assertCompilationFails("select count(*) from a limit 5 limit 5");
+  }
+
+  @Test
+  public void testTopZero() {
+    testTopZeroFor("select count(*) from someTable where c = 5 group by X ORDER BY $1 LIMIT 100", 100, false);
+    testTopZeroFor("select count(*) from someTable where c = 5 group by X ORDER BY $1 LIMIT 0", 0, false);
+    testTopZeroFor("select count(*) from someTable where c = 5 group by X ORDER BY $1 LIMIT 1", 1, false);
+    testTopZeroFor("select count(*) from someTable where c = 5 group by X ORDER BY $1 LIMIT -1", -1, true);
+  }
+
+  private void assertCompilationFails(String query) {
+    try {
+      CalciteSqlParser.compileToPinotQuery(query);
+    } catch (SqlCompilationException e) {
+      // Expected
+      return;
+    }
+
+    Assert.fail("Query " + query + " compiled successfully but was expected to fail compilation");
+  }
+
+  private void testTopZeroFor(String s, final int expectedTopN, boolean parseException) {
+    PinotQuery pinotQuery;
+    try {
+      pinotQuery = CalciteSqlParser.compileToPinotQuery(s);
+    } catch (SqlCompilationException e) {
+      if (parseException) {
+        return;
+      }
+      throw e;
+    }
+
+    // Test PinotQuery
+    Assert.assertTrue(pinotQuery.isSetGroupByList());
+    Assert.assertTrue(pinotQuery.isSetLimit());
+    Assert.assertEquals(expectedTopN, pinotQuery.getLimit());
+  }
+
+  @Test
+  public void testRejectInvalidLexerToken() {
+    assertCompilationFails("select foo from bar where baz ?= 2");
+    assertCompilationFails("select foo from bar where baz =! 2");
+  }
+
+  @Test
+  public void testRejectInvalidParses() {
+    assertCompilationFails("select foo from bar where baz < > 2");
+    assertCompilationFails("select foo from bar where baz ! = 2");
+  }
+
+  @Test
+  public void testParseExceptionHasCharacterPosition() {
+    final String query = "select foo from bar where baz ? 2";
+
+    try {
+      CalciteSqlParser.compileToPinotQuery(query);
+    } catch (SqlCompilationException e) {
+      // Expected
+      Assert.assertTrue(e.getMessage().contains("at line 1, column 31."),
+          "Compilation exception should contain line and character for error message. Error message is " + e
+              .getMessage());
+      return;
+    }
+
+    Assert.fail("Query " + query + " compiled successfully but was expected to fail compilation");
+  }
+
+  @Test
+  public void testCStyleInequalityOperator() {
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select * from vegetables where name <> 'Brussels sprouts'");
+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), "NOT_EQUALS");
+
+    // Bang equal '!=' is not allowed under the current SQL conformance level
+    assertCompilationFails("select * from vegetables where name != 'Brussels sprouts'");
+  }
+
+  @Test
+  public void testQueryOptions() {
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select * from vegetables where name <> 'Brussels sprouts'");
+    Assert.assertEquals(pinotQuery.getQueryOptionsSize(), 0);
+    Assert.assertNull(pinotQuery.getQueryOptions());
+
+    pinotQuery = CalciteSqlParser
+        .compileToPinotQuery("select * from vegetables where name <> 'Brussels sprouts' OPTION (delicious=yes)");
+    Assert.assertEquals(pinotQuery.getQueryOptionsSize(), 1);
+    Assert.assertTrue(pinotQuery.getQueryOptions().containsKey("delicious"));
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("delicious"), "yes");
+
+    pinotQuery = CalciteSqlParser.compileToPinotQuery(
+        "select * from vegetables where name <> 'Brussels sprouts' OPTION (delicious=yes, foo=1234, bar='potato')");
+    Assert.assertEquals(pinotQuery.getQueryOptionsSize(), 3);
+    Assert.assertTrue(pinotQuery.getQueryOptions().containsKey("delicious"));
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("delicious"), "yes");
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("foo"), "1234");
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("bar"), "'potato'");
+
+    pinotQuery = CalciteSqlParser.compileToPinotQuery(
+        "select * from vegetables where name <> 'Brussels sprouts' OPTION (delicious=yes) option(foo=1234) option(bar='potato')");
+    Assert.assertEquals(pinotQuery.getQueryOptionsSize(), 3);
+    Assert.assertTrue(pinotQuery.getQueryOptions().containsKey("delicious"));
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("delicious"), "yes");
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("foo"), "1234");
+    Assert.assertEquals(pinotQuery.getQueryOptions().get("bar"), "'potato'");
+  }
+
+  @Test
+  public void testIdentifierQuoteCharacter() {
+    PinotQuery pinotQuery = CalciteSqlParser
+        .compileToPinotQuery("select avg(attributes.age) as avg_age from person group by attributes.address_city");
+    Assert.assertEquals(
+        pinotQuery.getSelectList().get(0).getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(0)
+            .getIdentifier().getName(), "attributes.age");
+    Assert.assertEquals(pinotQuery.getGroupByList().get(0).getIdentifier().getName(), "attributes.address_city");
+  }
+
+  @Test
+  public void testStringLiteral() {
+    // Do not allow string literal column in selection query
+    assertCompilationFails("SELECT 'foo' FROM table");
+
+    // Allow string literal column in aggregation and group-by query
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("SELECT SUM('foo'), MAX(bar) FROM myTable GROUP BY 'foo', bar");
+    List<Expression> selectFunctionList = pinotQuery.getSelectList();
+    Assert.assertEquals(selectFunctionList.size(), 2);
+    Assert.assertEquals(selectFunctionList.get(0).getFunctionCall().getOperands().get(0).getLiteral().getStringValue(),
+        "foo");
+    Assert.assertEquals(selectFunctionList.get(1).getFunctionCall().getOperands().get(0).getIdentifier().getName(),
+        "bar");
+    List<Expression> groupbyList = pinotQuery.getGroupByList();
+    Assert.assertEquals(groupbyList.size(), 2);
+    Assert.assertEquals(groupbyList.get(0).getLiteral().getStringValue(), "foo");
+    Assert.assertEquals(groupbyList.get(1).getIdentifier().getName(), "bar");
+
+    // For UDF, string literal won't be treated as column but as LITERAL
+    pinotQuery = CalciteSqlParser
+        .compileToPinotQuery("SELECT SUM(ADD(foo, 'bar')) FROM myTable GROUP BY sub(foo, bar), SUB(BAR, FOO)");
+    selectFunctionList = pinotQuery.getSelectList();
+    Assert.assertEquals(selectFunctionList.size(), 1);
+    Assert.assertEquals(selectFunctionList.get(0).getFunctionCall().getOperator(), "SUM");
+    Assert.assertEquals(selectFunctionList.get(0).getFunctionCall().getOperands().size(), 1);
+    Assert
+        .assertEquals(selectFunctionList.get(0).getFunctionCall().getOperands().get(0).getFunctionCall().getOperator(),
+            "ADD");
+    Assert.assertEquals(
+        selectFunctionList.get(0).getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().size(), 2);
+    Assert.assertEquals(
+        selectFunctionList.get(0).getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(0)
+            .getIdentifier().getName(), "foo");
+    Assert.assertEquals(
+        selectFunctionList.get(0).getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(1)
+            .getLiteral().getStringValue(), "bar");
+    groupbyList = pinotQuery.getGroupByList();
+    Assert.assertEquals(groupbyList.size(), 2);
+    Assert.assertEquals(groupbyList.get(0).getFunctionCall().getOperator(), "sub");
+    Assert.assertEquals(groupbyList.get(0).getFunctionCall().getOperands().size(), 2);
+    Assert.assertEquals(groupbyList.get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), "foo");
+    Assert.assertEquals(groupbyList.get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), "bar");
+
+    Assert.assertEquals(groupbyList.get(1).getFunctionCall().getOperator(), "SUB");
+    Assert.assertEquals(groupbyList.get(1).getFunctionCall().getOperands().size(), 2);
+    Assert.assertEquals(groupbyList.get(1).getFunctionCall().getOperands().get(0).getIdentifier().getName(), "BAR");
+    Assert.assertEquals(groupbyList.get(1).getFunctionCall().getOperands().get(1).getIdentifier().getName(), "FOO");
+  }
+
+  @Test
+  public void testConverter()
+      throws IOException {
+    CalciteSqlParser.compileToPinotQuery("SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable");
+    CalciteSqlParser.compileToPinotQuery(
+        "SELECT SUM(DepDelayMinutes), SUM(ArrDel15), SUM(DepDelay), SUM(DepDel15) FROM myStarTable WHERE Carrier IN ('UA', 'WN', 'FL', 'F9') AND Carrier NOT IN ('EV', 'AS', 'FL') AND DayofMonth > 5 AND DayofMonth <= 17 AND Diverted > 0 AND OriginCityName > 'Detroit, MI' GROUP BY CRSDepTime");
+    CalciteSqlParser.compileToPinotQuery("Select * from T where a > 1 and a < 10");
+    CalciteSqlParser.compileToPinotQuery("Select * from T where a between 1 and 10");
+
+    final BufferedReader br = new BufferedReader(
+        new InputStreamReader(CalciteSqlCompilerTest.class.getClassLoader().getResourceAsStream("sql_queries.list")));
+    String sql;
+    int seqId = 0;
+    while ((sql = br.readLine()) != null) {
+      BrokerRequest brokerRequest;
+      PinotQuery pinotQuery;
+      try {
+        LOGGER.info("Trying to compile SQL Id - {}, SQL: {}", seqId, sql);
+        System.out.println(String.format("Trying to compile SQL Id - %d, SQL: %s", seqId, sql));
+        pinotQuery = CalciteSqlParser.compileToPinotQuery(sql);
+        brokerRequest = new PinotQuery2BrokerRequestConverter().convert(pinotQuery);
+        LOGGER.debug("Compiled SQL: Id - {}, PinotQuery: {}, BrokerRequest: {}", seqId, pinotQuery, brokerRequest);
+        seqId++;
+      } catch (Exception e) {
+        LOGGER.error("Failed to compile SQL {} to BrokerRequest.", sql, e);
+        throw e;
+      }
+    }
+  }
+
+
+  @Test
+  public void testPqlAndSqlCompatible()
+      throws IOException {
+    final BufferedReader brSql = new BufferedReader(
+        new InputStreamReader(CalciteSqlCompilerTest.class.getClassLoader().getResourceAsStream("sql_queries.list")));
+    final BufferedReader brPql = new BufferedReader(
+        new InputStreamReader(CalciteSqlCompilerTest.class.getClassLoader().getResourceAsStream("pql_queries.list")));
+    String sql;
+    int seqId = 0;
+    while ((sql = brSql.readLine()) != null) {
+      final String pql = brPql.readLine();
+      BrokerRequest brokerRequest;
+      PinotQuery pinotQuery;
+      try {
+        LOGGER.info("Trying to compile SQL Id - {}, SQL: {}", seqId, sql);
+        System.out.println(String.format("Trying to compile SQL Id - %d, SQL: %s", seqId, sql));
+        pinotQuery = CalciteSqlParser.compileToPinotQuery(sql);
+        brokerRequest = new PinotQuery2BrokerRequestConverter().convert(pinotQuery);
+        LOGGER.debug("Compiled SQL: Id - {}, PinotQuery: {}, BrokerRequest: {}", seqId, pinotQuery, brokerRequest);
+        seqId++;
+      } catch (Exception e) {
+        LOGGER.error("Failed to compile SQL {} to BrokerRequest.", sql, e);
+        throw e;
+      }
+    }
+  }
+
+  @Test
+  public void testFilterUdf() {
+    PinotQuery pinotQuery =
+        CalciteSqlParser.compileToPinotQuery("select count(*) from baseballStats where DIV(numberOfGames,10) = 100");
+    Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator(), "COUNT");
+    Assert.assertEquals(
+        pinotQuery.getSelectList().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), "*");
+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), "EQUALS");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperator(), "DIV");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(0)
+            .getIdentifier().getName(), "numberOfGames");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(1)
+            .getLiteral().getLongValue(), 10);
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getLiteral().getLongValue(), 100);
+
+    pinotQuery = CalciteSqlParser.compileToPinotQuery(
+        "SELECT count(*) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = 1394323200");
+    Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator(), "COUNT");
+    Assert.assertEquals(
+        pinotQuery.getSelectList().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), "*");
+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), "EQUALS");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperator(),
+        "timeConvert");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(0)
+            .getIdentifier().getName(), "DaysSinceEpoch");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(1)
+            .getLiteral().getStringValue(), "DAYS");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(2)
+            .getLiteral().getStringValue(), "SECONDS");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getLiteral().getLongValue(),
+        1394323200);
+  }
+
+  @Test
+  public void testSelectionTransformFunction() {
+    PinotQuery pinotQuery = CalciteSqlParser
+        .compileToPinotQuery("  select mapKey(mapField,k1) from baseballStats where mapKey(mapField,k1) = 'v1'");
+    Assert.assertEquals(pinotQuery.getSelectList().get(0).getFunctionCall().getOperator(), "mapKey");
+    Assert.assertEquals(
+        pinotQuery.getSelectList().get(0).getFunctionCall().getOperands().get(0).getIdentifier().getName(), "mapField");
+    Assert.assertEquals(
+        pinotQuery.getSelectList().get(0).getFunctionCall().getOperands().get(1).getIdentifier().getName(), "k1");
+
+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), "EQUALS");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperator(),
+        "mapKey");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(0)
+            .getIdentifier().getName(), "mapField");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getFunctionCall().getOperands().get(1)
+            .getIdentifier().getName(), "k1");
+    Assert.assertEquals(
+        pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(1).getLiteral().getStringValue(), "v1");
+  }
+}
diff --git a/pinot-common/src/test/resources/pql_queries.list b/pinot-common/src/test/resources/pql_queries.list
index 9d3b0d99caa..15a7bb79f02 100644
--- a/pinot-common/src/test/resources/pql_queries.list
+++ b/pinot-common/src/test/resources/pql_queries.list
@@ -812,3 +812,8 @@ SELECT column1, column5, column6 FROM testTable ORDER BY column5, column9 WHERE
 select $docId, $segmentName, $hostName from mytable where $docId < 5 limit 50
 select $docId, $segmentName, $hostName from mytable where $docId = 5 limit 50
 select $docId, $segmentName, $hostName from mytable where $docId > 19998 limit 50
+SELECT SUM(met) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = 1394323200
+select COUNT(*) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKeys(mapField) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKey(mapField,k1) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKey(mapField,k1) from baseballStats where mapKey(mapField,k1) = 'v1'
diff --git a/pinot-common/src/test/resources/sql_queries.list b/pinot-common/src/test/resources/sql_queries.list
new file mode 100644
index 00000000000..6d2b5622eae
--- /dev/null
+++ b/pinot-common/src/test/resources/sql_queries.list
@@ -0,0 +1,819 @@
+SELECT *  FROM testTable ORDER BY column6, column1
+SELECT *  FROM testTable WHERE column1 > 100000000 AND column3 BETWEEN 20000000 AND 1000000000 AND column5 = 'gFuH' AND (column6 < 500000000 OR column11 NOT IN ('t', 'P')) AND daysSinceEpoch = 126164076 ORDER BY column6, column1
+SELECT * FROM testTable LIMIT 0
+SELECT * FROM testTable WHERE column1 > 100000000 AND column2 BETWEEN 20000000 AND 1000000000 AND column3 <> 'w' AND (column6 < 500000 OR column7 NOT IN (225, 407)) AND daysSinceEpoch = 1756015683 LIMIT 0
+SELECT * FROM testTable WHERE column1 > 100000000 AND column3 BETWEEN 20000000 AND 1000000000 AND column5 = 'gFuH' AND (column6 < 500000000 OR column11 NOT IN ('t', 'P')) AND daysSinceEpoch = 126164076 LIMIT 0
+SELECT ActualElapsedTime FROM mytable WHERE  REGEXP_LIKE(OriginCityName, 'Pon.*e, PR') ORDER BY CancellationCode LIMIT 14
+SELECT ActualElapsedTime FROM mytable WHERE LateAircraftDelay > 98 AND DestWac BETWEEN 15 AND 66 AND TailNum BETWEEN 'N843MQ' AND 'N14916' ORDER BY WeatherDelay LIMIT 22
+SELECT ActualElapsedTime, ArrTime, TailNum FROM mytable LIMIT 16
+SELECT ActualElapsedTime, CancellationCode FROM mytable WHERE OriginCityName <= 'Hibbing, MN' ORDER BY FlightNum LIMIT 24
+SELECT ActualElapsedTime, CancellationCode FROM mytable WHERE "Year" BETWEEN 2014 AND 2014 ORDER BY Flights, DepTimeBlk, DaysSinceEpoch LIMIT 3
+SELECT ActualElapsedTime, DaysSinceEpoch FROM mytable LIMIT 4
+SELECT ActualElapsedTime, Dest, DestState FROM mytable WHERE OriginWac BETWEEN 85 AND 83 ORDER BY CRSDepTime, CancellationCode LIMIT 3
+SELECT ActualElapsedTime, DestStateFips FROM mytable ORDER BY FlightDate LIMIT 7
+SELECT ActualElapsedTime, DivWheelsOffs FROM mytable WHERE DivDistance BETWEEN 328 AND 334 AND DestCityMarketID IN (31641, 31337, 31205, 30107) ORDER BY DivActualElapsedTime LIMIT 8
+SELECT ActualElapsedTime, DivWheelsOffs FROM mytable WHERE OriginCityName < 'Hayden, CO' LIMIT 10
+SELECT ActualElapsedTime, DivWheelsOns FROM mytable WHERE "Month" BETWEEN 5 AND 6 AND DepartureDelayGroups <= 4 LIMIT 28
+SELECT ActualElapsedTime, FlightDate, ArrDel15 FROM mytable WHERE ArrivalDelayGroups NOT IN (0) OR  REGEXP_LIKE(OriginStateName, 'U.S. Pacific Trust Terr.*tories and Possessions') ORDER BY CancellationCode, CRSArrTime LIMIT 12
+SELECT ActualElapsedTime, "Month", DivActualElapsedTime FROM mytable WHERE CarrierDelay IN (80) OR DestStateName <= 'Tennessee' LIMIT 21
+SELECT ActualElapsedTime, NASDelay FROM mytable WHERE "Year" BETWEEN 2014 AND 2014 AND LateAircraftDelay NOT IN (199, 60, 362) AND "Year" BETWEEN 2014 AND 2014 ORDER BY CancellationCode, DestAirportID, OriginAirportID LIMIT 1
+SELECT ActualElapsedTime, OriginAirportSeqID, AirTime FROM mytable WHERE Diverted BETWEEN 0 AND 0 OR DivLongestGTimes IN (172.0, 99.0, 154.0, 48.0) LIMIT 16
+SELECT ActualElapsedTime, OriginCityName, ArrivalDelayGroups FROM mytable WHERE TailNum BETWEEN 'N637MQ' AND 'N564AS' ORDER BY DivReachedDest LIMIT 15
+SELECT AirTime FROM mytable ORDER BY ActualElapsedTime, DepDel15 LIMIT 24
+SELECT AirTime FROM mytable WHERE  REGEXP_LIKE(DepTimeBlk, '09.*0-0959') OR DivTotalGTimes BETWEEN 26 AND 71 AND CRSDepTime = 2 ORDER BY Origin, WheelsOn LIMIT 4
+SELECT AirTime FROM mytable WHERE  REGEXP_LIKE(OriginCityName, 'Bemidji, M.*') AND "Month" BETWEEN 7 AND 10 LIMIT 13
+SELECT AirTime FROM mytable WHERE Diverted <= 0 ORDER BY Origin, DivAirportLandings LIMIT 10
+SELECT AirTime FROM mytable WHERE TaxiIn = 20 AND SecurityDelay <= 14 AND DivAirports IN ('SGF', 'MOB', 'APA', 'BLI') ORDER BY CancellationCode LIMIT 15
+SELECT AirTime, DepTimeBlk, TotalAddGTime FROM mytable WHERE OriginCityName BETWEEN 'Santa Ana, CA' AND 'Klamath Falls, OR' OR TaxiOut <> 21 AND WheelsOn = 1518 ORDER BY Quarter, OriginStateFips LIMIT 8
+SELECT AirTime, DestCityMarketID FROM mytable WHERE DestWac NOT IN (67, 51, 82, 73, 14) ORDER BY SecurityDelay LIMIT 13
+SELECT AirTime, UniqueCarrier, DestStateFips FROM mytable ORDER BY "Month" LIMIT 11
+SELECT AirlineID FROM mytable WHERE CRSElapsedTime = 152 OR DayOfWeek <> 4 AND  REGEXP_LIKE(UniqueCarrier, '.*L') ORDER BY FirstDepTime, ArrTimeBlk, DepTime LIMIT 3
+SELECT AirlineID FROM mytable WHERE DepTime <> 631 OR DaysSinceEpoch = 16148 OR  REGEXP_LIKE(Origin, 'O.*J') ORDER BY ArrDel15, DivReachedDest, WeatherDelay LIMIT 27
+SELECT AirlineID FROM mytable WHERE NASDelay <> 6 ORDER BY "Month", AirTime, DepTimeBlk LIMIT 29
+SELECT AirlineID FROM mytable WHERE Quarter BETWEEN 1 AND 1 AND DestAirportSeqID BETWEEN 1029904 AND 1219702 OR DivTotalGTimes BETWEEN 63 AND 90 LIMIT 24
+SELECT AirlineID, Dest, TaxiOut FROM mytable WHERE SecurityDelay = 5 AND OriginState IN ('KS', 'CT', 'TX') OR DestCityMarketID >= 30285 ORDER BY FirstDepTime LIMIT 0
+SELECT AirlineID, DivLongestGTimes, DepDelayMinutes FROM mytable WHERE DivWheelsOns >= 1816 ORDER BY CancellationCode LIMIT 10
+SELECT AirlineID, OriginStateName FROM mytable ORDER BY "Year" LIMIT 25
+SELECT AirlineID, WheelsOff FROM mytable WHERE DestState = 'MI' AND FlightNum = 3060 ORDER BY OriginStateName, Distance, DestCityName LIMIT 10
+SELECT ArrDel15 FROM mytable ORDER BY AirTime LIMIT 20
+SELECT ArrDel15 FROM mytable ORDER BY OriginCityName, ArrTime, ArrDelayMinutes LIMIT 18
+SELECT ArrDel15 FROM mytable WHERE DestWac < 66 ORDER BY FirstDepTime, FlightNum, Cancelled LIMIT 19
+SELECT ArrDel15 FROM mytable WHERE OriginStateFips BETWEEN 42 AND 19 OR DivReachedDest < 0 OR WheelsOff BETWEEN 1202 AND 1218 ORDER BY DivDistance LIMIT 29
+SELECT ArrDel15, DestStateName FROM mytable WHERE "Month" NOT IN (12) LIMIT 23
+SELECT ArrDel15, TaxiOut FROM mytable WHERE DepTime BETWEEN 1657 AND 233 ORDER BY OriginAirportSeqID, DivReachedDest, TailNum LIMIT 0
+SELECT ArrDel15, UniqueCarrier FROM mytable WHERE OriginWac < 14 OR DivReachedDest = 1 AND Dest BETWEEN 'SAV' AND 'GSO' ORDER BY OriginCityMarketID, DayofMonth LIMIT 8
+SELECT ArrDel15, WeatherDelay FROM mytable ORDER BY DepDel15 LIMIT 24
+SELECT ArrDelay FROM mytable ORDER BY ArrDelay LIMIT 15
+SELECT ArrDelay FROM mytable WHERE  REGEXP_LIKE(DestStateName, 'Ind.*ana') ORDER BY ActualElapsedTime, TailNum LIMIT 0
+SELECT ArrDelay FROM mytable WHERE DestState >= 'VI' AND DivLongestGTimes = 66.0 AND Quarter = 1 ORDER BY AirTime, ArrTimeBlk LIMIT 27
+SELECT ArrDelay FROM mytable WHERE OriginState BETWEEN 'NV' AND 'CO' AND ArrTime NOT IN (1304, 1211, 1724) ORDER BY FlightDate, DivActualElapsedTime LIMIT 21
+SELECT ArrDelay, ArrivalDelayGroups, ArrTimeBlk FROM mytable WHERE DestState IN ('AZ', 'NE', 'WY', 'VI') OR DestCityName < 'Laredo, TX' OR DestCityMarketID <> 33795 ORDER BY DestAirportID LIMIT 28
+SELECT ArrDelay, CancellationCode FROM mytable ORDER BY OriginAirportSeqID LIMIT 7
+SELECT ArrDelay, "Month", OriginStateName FROM mytable ORDER BY DepartureDelayGroups, SecurityDelay LIMIT 26
+SELECT ArrDelayMinutes, DestWac FROM mytable WHERE DaysSinceEpoch > 16238 OR DistanceGroup BETWEEN 4 AND 3 ORDER BY FlightDate, DistanceGroup, UniqueCarrier LIMIT 21
+SELECT ArrDelayMinutes, WheelsOn FROM mytable WHERE DivAirportLandings NOT IN (2, 0, 9) AND DivWheelsOffs IN (842, 1816, 2152, 1907) AND Dest <> 'PIT' ORDER BY OriginAirportSeqID, DepartureDelayGroups, DestAirportID LIMIT 13
+SELECT ArrTime FROM mytable WHERE ArrDel15 NOT IN (1, -9999) AND UniqueCarrier BETWEEN 'HA' AND 'WN' ORDER BY TotalAddGTime LIMIT 9
+SELECT ArrTime FROM mytable WHERE SecurityDelay BETWEEN 17 AND 17 AND TaxiIn = 116 OR TotalAddGTime BETWEEN 4 AND 80 LIMIT 20
+SELECT ArrTime FROM mytable WHERE WheelsOn NOT IN (1511, 627) ORDER BY OriginAirportSeqID, OriginStateFips, Cancelled LIMIT 12
+SELECT ArrTime FROM mytable WHERE "Year" IN (2014) OR ArrTime BETWEEN 244 AND 637 AND UniqueCarrier BETWEEN 'VX' AND 'US' ORDER BY Quarter
+SELECT ArrTime, AirTime FROM mytable WHERE DayOfWeek BETWEEN 1 AND 7 AND FirstDepTime IN (1032, 2145, 1940, -9999) LIMIT 23
+SELECT ArrTime, ArrDelayMinutes, DestCityName FROM mytable WHERE TotalAddGTime <= 26 LIMIT 10
+SELECT ArrTime, DestStateName FROM mytable ORDER BY Flights, CRSElapsedTime LIMIT 9
+SELECT ArrTime, DestStateName, DestCityName FROM mytable WHERE LongestAddGTime NOT IN (48) OR DestCityName IN ('Lake Charles, LA', 'College Station/Bryan, TX', 'Sun Valley/Hailey/Ketchum, ID', 'Tucson, AZ') AND NASDelay <> 87 ORDER BY OriginAirportID LIMIT 25
+SELECT ArrTime, DistanceGroup, DivAirportSeqIDs FROM mytable ORDER BY LongestAddGTime, DestState, Cancelled LIMIT 8
+SELECT ArrTime, DivAirportIDs, CancellationCode FROM mytable ORDER BY OriginCityMarketID, ArrDel15 LIMIT 4
+SELECT ArrTime, OriginState, DestStateName FROM mytable WHERE DivActualElapsedTime = 607 OR  REGEXP_LIKE(Origin, '.*GG') ORDER BY DivAirportLandings, OriginCityName, DestState LIMIT 19
+SELECT ArrTimeBlk FROM mytable ORDER BY CRSDepTime, FirstDepTime LIMIT 21
+SELECT ArrTimeBlk FROM mytable ORDER BY CarrierDelay LIMIT 13
+SELECT ArrTimeBlk FROM mytable WHERE SecurityDelay NOT IN (0, 4, 8, 14, -9999) AND DayofMonth < 28 AND TotalAddGTime = 51 ORDER BY DivDistance, CRSDepTime LIMIT 29
+SELECT ArrivalDelayGroups FROM mytable WHERE DepartureDelayGroups BETWEEN 1 AND -1 ORDER BY TotalAddGTime, TailNum, DivArrDelay LIMIT 18
+SELECT COUNT(*) FROM mytable GROUP BY add(DaysSinceEpoch,DaysSinceEpoch,15)
+SELECT COUNT(*) FROM mytable GROUP BY div(DaysSinceEpoch,2)
+SELECT COUNT(*) FROM mytable GROUP BY mult(DaysSinceEpoch,24,3600)
+SELECT COUNT(*) FROM mytable GROUP BY sub(DaysSinceEpoch,25)
+SELECT CRSArrTime FROM mytable ORDER BY OriginAirportSeqID, ArrTime, OriginAirportID LIMIT 15
+SELECT CRSArrTime FROM mytable WHERE CRSDepTime IN (808, 45, 1850, 1809, 2240) LIMIT 22
+SELECT CRSArrTime FROM mytable WHERE Carrier BETWEEN 'OO' AND 'AS' ORDER BY Distance, ArrTimeBlk LIMIT 4
+SELECT CRSArrTime FROM mytable WHERE DayofMonth > 19 AND DestStateName BETWEEN 'Hawaii' AND 'New York' LIMIT 29
+SELECT CRSArrTime FROM mytable WHERE DestStateFips IN (20, 10, 30, 32) LIMIT 12
+SELECT CRSArrTime FROM mytable WHERE NASDelay <= 63 AND AirTime NOT IN (208) OR DivReachedDest NOT IN (1, -9999) ORDER BY TaxiOut LIMIT 22
+SELECT CRSArrTime, AirTime FROM mytable WHERE DivAirports BETWEEN 'TWF' AND 'RFD' OR ArrDelay BETWEEN 363.0 AND 159.0 OR OriginStateName BETWEEN 'Alabama' AND 'Oregon' ORDER BY "Year", "Month" LIMIT 16
+SELECT CRSArrTime, ArrDelay, DestAirportID FROM mytable WHERE WheelsOff <= 142 OR Distance NOT IN (1092) ORDER BY DivAirportLandings, FirstDepTime, ArrTime LIMIT 28
+SELECT CRSArrTime, ArrDelayMinutes, DivAirportSeqIDs FROM mytable WHERE "Month" IN (1) AND ArrDel15 BETWEEN 0 AND 0 AND DivTailNums BETWEEN 'N636MQ' AND 'N16976' LIMIT 26
+SELECT CRSArrTime, ArrivalDelayGroups FROM mytable WHERE Diverted > 0 ORDER BY DivAirportLandings LIMIT 28
+SELECT CRSArrTime, FlightDate FROM mytable WHERE OriginStateName IN ('Washington') AND OriginAirportID IN (12007, 12888, 12206, 11122, 10693) AND Diverted IN (1, 0) ORDER BY DepDelay, DestAirportSeqID LIMIT 21
+SELECT CRSArrTime, SecurityDelay, ArrTimeBlk FROM mytable WHERE ArrTime IN (2302) AND OriginCityName BETWEEN 'Kona, HI' AND 'New York, NY' ORDER BY FlightNum LIMIT 17
+SELECT CRSArrTime, WheelsOn FROM mytable WHERE DivLongestGTimes BETWEEN 112.0 AND 39.0 LIMIT 8
+SELECT CRSDepTime FROM mytable ORDER BY FlightNum LIMIT 14
+SELECT CRSDepTime FROM mytable WHERE TaxiOut NOT IN (55) OR Distance NOT IN (985) OR OriginCityMarketID >= 31041 ORDER BY DestWac, DestStateName, OriginStateName LIMIT 28
+SELECT CRSDepTime, Carrier, DayofMonth FROM mytable WHERE Distance NOT IN (1679, 1368, 334, 727, 1290) AND DistanceGroup = 5 AND DivWheelsOns >= 2301 ORDER BY Dest LIMIT 18
+SELECT CRSDepTime, DestAirportID FROM mytable WHERE OriginStateFips <= 37 ORDER BY AirTime, DivReachedDest
+SELECT CRSDepTime, DestState, DivAirportSeqIDs FROM mytable WHERE DestStateFips NOT IN (24) AND DepDelayMinutes IN (20.0) ORDER BY FirstDepTime LIMIT 23
+SELECT CRSDepTime, DivAirportLandings FROM mytable ORDER BY OriginWac, AirTime, CRSArrTime LIMIT 9
+SELECT CRSDepTime, DivLongestGTimes FROM mytable ORDER BY OriginWac, DestAirportSeqID LIMIT 1
+SELECT CRSDepTime, DivTotalGTimes, OriginStateName FROM mytable WHERE DepDel15 > 0 AND "Year" <> 2014 OR DaysSinceEpoch BETWEEN 16082 AND 16086 ORDER BY Cancelled, DestAirportID LIMIT 24
+SELECT CRSDepTime, DivWheelsOffs, Diverted FROM mytable WHERE DepDel15 <= 0 OR OriginCityName BETWEEN 'Scranton/Wilkes-Barre, PA' AND 'Abilene, TX' ORDER BY "Month", OriginCityName LIMIT 27
+SELECT CRSDepTime, OriginWac, DestCityName FROM mytable ORDER BY SecurityDelay
+SELECT CRSDepTime, TailNum, OriginAirportID FROM mytable WHERE DepartureDelayGroups NOT IN (12) OR FlightDate > '2014-09-10' ORDER BY DivAirportLandings, CRSElapsedTime, Diverted LIMIT 3
+SELECT CRSDepTime, TaxiIn, ArrTime FROM mytable WHERE DestAirportSeqID = 1379502 ORDER BY CRSArrTime, Carrier LIMIT 13
+SELECT CRSElapsedTime, DestWac FROM mytable WHERE DivLongestGTimes < 189.0 ORDER BY Dest, TotalAddGTime LIMIT 4
+SELECT CRSElapsedTime, OriginAirportID FROM mytable LIMIT 27
+SELECT CRSElapsedTime, OriginAirportID FROM mytable WHERE DepTimeBlk NOT IN ('1800-1859', '1300-1359', '2200-2259') AND DayOfWeek = 7 OR LateAircraftDelay = 78 ORDER BY OriginCityMarketID, LongestAddGTime, DivDistance LIMIT 1
+SELECT CancellationCode FROM mytable LIMIT 29
+SELECT CancellationCode FROM mytable ORDER BY SecurityDelay, AirTime
+SELECT CancellationCode FROM mytable WHERE AirTime > 233 ORDER BY WeatherDelay, DestAirportSeqID, OriginWac LIMIT 8
+SELECT CancellationCode FROM mytable WHERE AirTime NOT IN (204, 96, 277, 252) AND OriginAirportSeqID NOT IN (1148102) ORDER BY DestWac, DestAirportID LIMIT 11
+SELECT CancellationCode FROM mytable WHERE DestCityName NOT IN ('Detroit, MI') ORDER BY FlightNum, WheelsOn, "Month" LIMIT 17
+SELECT CancellationCode, ArrivalDelayGroups, ArrTimeBlk FROM mytable WHERE CRSDepTime = 1050 OR DepDelayMinutes BETWEEN 207.0 AND 88.0 ORDER BY OriginAirportSeqID, DestAirportID LIMIT 24
+SELECT CancellationCode, DepDelay, WeatherDelay FROM mytable WHERE DivArrDelay > 866 ORDER BY FlightNum LIMIT 17
+SELECT CancellationCode, DestState, CRSElapsedTime FROM mytable ORDER BY CancellationCode LIMIT 22
+SELECT CancellationCode, DivActualElapsedTime FROM mytable ORDER BY OriginStateFips, DestAirportSeqID, AirlineID LIMIT 9
+SELECT CancellationCode, DivTailNums, DestCityMarketID FROM mytable WHERE DivReachedDest BETWEEN 0 AND -9999 OR Cancelled BETWEEN 1 AND 0 ORDER BY "Year", OriginState LIMIT 7
+SELECT CancellationCode, Diverted FROM mytable ORDER BY ArrDelayMinutes, TaxiOut, DestAirportID LIMIT 0
+SELECT CancellationCode, OriginAirportSeqID, CRSArrTime FROM mytable WHERE "Month" BETWEEN 5 AND 1 LIMIT 9
+SELECT CancellationCode, WeatherDelay, Cancelled FROM mytable WHERE OriginWac > 61 OR Distance BETWEEN 636 AND 223 AND DivAirportLandings <> 1 ORDER BY DivReachedDest LIMIT 7
+SELECT Cancelled FROM mytable ORDER BY AirlineID, WheelsOn LIMIT 27
+SELECT Cancelled FROM mytable WHERE CRSElapsedTime BETWEEN 365 AND 160 LIMIT 14
+SELECT Cancelled FROM mytable WHERE CarrierDelay BETWEEN 144 AND 12 OR DestWac NOT IN (2, 93) OR DivDistance <> 89 ORDER BY OriginAirportSeqID, Diverted, DepTime LIMIT 9
+SELECT Cancelled FROM mytable WHERE DestWac <= 14 AND ArrTime IN (2329, 1417) OR DivTotalGTimes = 84 ORDER BY OriginCityMarketID, ActualElapsedTime, Origin LIMIT 21
+SELECT Cancelled FROM mytable WHERE TotalAddGTime IN (42) OR ArrDelayMinutes IN (193.0, 52.0, 382.0, 392.0, 147.0) AND DayOfWeek = 3 ORDER BY FlightNum, ArrivalDelayGroups, DepTime LIMIT 25
+SELECT Cancelled, ArrDel15, CRSElapsedTime FROM mytable WHERE DivWheelsOffs >= 851 AND "Month" BETWEEN 1 AND 1 ORDER BY WheelsOff, ArrivalDelayGroups LIMIT 6
+SELECT Cancelled, CancellationCode FROM mytable WHERE DestStateFips BETWEEN 24 AND 34 AND AirTime IN (202, 357, 172, 192) AND DestCityMarketID <> 31308 ORDER BY DepDelay, Carrier LIMIT 23
+SELECT Cancelled, DestAirportID FROM mytable WHERE DivAirports BETWEEN 'DRO' AND 'CDC' AND DestState NOT IN ('CO', 'NY') ORDER BY Distance
+SELECT Cancelled, DivAirportLandings FROM mytable WHERE Origin NOT IN ('OGG', 'EVV', 'SAT') AND DepartureDelayGroups IN (2) AND Origin NOT IN ('IMT', 'MGM', 'ALB', 'ROW') LIMIT 7
+SELECT Carrier FROM mytable ORDER BY DivArrDelay LIMIT 28
+SELECT Carrier FROM mytable ORDER BY DivArrDelay, Dest, OriginAirportSeqID LIMIT 2
+SELECT Carrier FROM mytable WHERE OriginStateName < 'Mississippi' AND CancellationCode BETWEEN 'A' AND 'noodles' OR SecurityDelay BETWEEN 16 AND 17 ORDER BY CancellationCode, "Year", WeatherDelay LIMIT 5
+SELECT Carrier, AirlineID FROM mytable WHERE DayOfWeek BETWEEN 4 AND 6 AND ArrDelayMinutes NOT IN (143.0) OR FlightDate BETWEEN '2014-01-11' AND '2014-01-18' LIMIT 21
+SELECT Carrier, ArrDel15, DayOfWeek FROM mytable WHERE ArrDelayMinutes >= 116.0 AND DivTailNums IN ('N3HHAA') OR ArrivalDelayGroups BETWEEN 1 AND -1 LIMIT 3
+SELECT Carrier, ArrTime, DestCityMarketID FROM mytable WHERE TailNum NOT IN ('N5ELAA', 'N788AS', 'N558AA') OR CRSArrTime NOT IN (1232, 1924) AND DestStateName NOT IN ('Alaska', 'Rhode Island') LIMIT 23
+SELECT Carrier, CRSArrTime, UniqueCarrier FROM mytable WHERE DestStateName BETWEEN 'Nebraska' AND 'Illinois' OR DayOfWeek > 3 ORDER BY DivArrDelay LIMIT 20
+SELECT Carrier, CRSElapsedTime, DayOfWeek FROM mytable WHERE Diverted BETWEEN 0 AND 1 OR "Month" <> 1 AND DivActualElapsedTime <> 469 ORDER BY AirTime LIMIT 25
+SELECT Carrier, Cancelled FROM mytable WHERE DivTailNums <= 'N486WN' ORDER BY TaxiOut LIMIT 19
+SELECT Carrier, DestAirportSeqID FROM mytable ORDER BY FlightDate LIMIT 14
+SELECT Carrier, Distance, DaysSinceEpoch FROM mytable WHERE CancellationCode BETWEEN 'A' AND 'C' OR FirstDepTime BETWEEN 1738 AND 2104 ORDER BY OriginCityMarketID, DivActualElapsedTime LIMIT 2
+SELECT Carrier, OriginAirportID FROM mytable WHERE DivAirportSeqIDs IN (1385103, 1302402) ORDER BY OriginState LIMIT 25
+SELECT Carrier, OriginWac FROM mytable WHERE ActualElapsedTime BETWEEN 396 AND 86 AND FirstDepTime = 857 ORDER BY AirlineID, DivArrDelay LIMIT 24
+SELECT Carrier, WheelsOn FROM mytable ORDER BY TaxiIn, DestCityName, CRSDepTime LIMIT 23
+SELECT CarrierDelay FROM mytable LIMIT 22
+SELECT CarrierDelay FROM mytable ORDER BY CarrierDelay LIMIT 17
+SELECT CarrierDelay, ArrDelayMinutes, TotalAddGTime FROM mytable WHERE AirTime = 404 OR CancellationCode > 'B' OR DestState >= 'AZ' ORDER BY DivDistance, DepDelayMinutes LIMIT 12
+SELECT CarrierDelay, ArrivalDelayGroups FROM mytable WHERE Dest <> 'CVG' AND OriginCityMarketID IN (33344, 34945, 34992) LIMIT 14
+SELECT CarrierDelay, DepTimeBlk, TailNum FROM mytable WHERE CarrierDelay = 163 ORDER BY "Month", OriginCityName, NASDelay LIMIT 8
+SELECT CarrierDelay, DestAirportID FROM mytable WHERE DepTime IN (253, 1831, 1154, 309) AND Origin > 'ISN' LIMIT 3
+SELECT CarrierDelay, DestCityMarketID, DestCityName FROM mytable WHERE DayofMonth BETWEEN 27 AND 19 OR  REGEXP_LIKE(Origin, '.*WM') OR DestAirportSeqID = 1201602 LIMIT 19
+SELECT CarrierDelay, DestStateFips, ActualElapsedTime FROM mytable WHERE "Year" NOT IN (2014) OR OriginAirportSeqID IN (1541202) OR DestWac NOT IN (51) ORDER BY TaxiIn, DaysSinceEpoch LIMIT 6
+SELECT CarrierDelay, DistanceGroup, ArrivalDelayGroups FROM mytable WHERE DepDelayMinutes <> 98.0 AND DivAirportLandings BETWEEN 2 AND 0 ORDER BY OriginStateFips, ArrDel15 LIMIT 16
+SELECT CarrierDelay, DistanceGroup, DaysSinceEpoch FROM mytable WHERE CRSArrTime > 1232 OR NASDelay = 146 OR DivWheelsOffs <= 1413 ORDER BY DivDistance, DestStateName LIMIT 12
+SELECT CarrierDelay, DivTotalGTimes FROM mytable WHERE "Year" BETWEEN 2014 AND 2014 AND Cancelled >= 1 ORDER BY ActualElapsedTime, DepTime LIMIT 21
+SELECT CarrierDelay, DivWheelsOffs FROM mytable WHERE ArrDel15 BETWEEN -9999 AND 1 AND DestAirportSeqID = 1251902 ORDER BY DepartureDelayGroups, TailNum LIMIT 19
+SELECT CarrierDelay, DivWheelsOffs FROM mytable WHERE DayOfWeek BETWEEN 5 AND 2 AND DepDelayMinutes NOT IN (114.0, 89.0, 91.0, 75.0) LIMIT 4
+SELECT CarrierDelay, FirstDepTime FROM mytable LIMIT 25
+SELECT CarrierDelay, Origin, DayOfWeek FROM mytable WHERE ActualElapsedTime BETWEEN 163 AND 322 OR CarrierDelay IN (17, 266) OR AirlineID IN (19690, 20366) ORDER BY TaxiIn, TailNum LIMIT 1
+SELECT CarrierDelay, OriginStateFips FROM mytable WHERE  REGEXP_LIKE(OriginCityName, 'Aberdeen,.*SD') AND CRSArrTime >= 1733 ORDER BY WeatherDelay LIMIT 9
+SELECT DayOfWeek FROM mytable WHERE DepDelayMinutes IN (227.0, 332.0, 174.0, 38.0) AND CRSDepTime BETWEEN 726 AND 1806 ORDER BY DepartureDelayGroups, TailNum, DestCityName LIMIT 29
+SELECT DayOfWeek FROM mytable WHERE FirstDepTime >= 1940 ORDER BY OriginCityMarketID, DaysSinceEpoch LIMIT 12
+SELECT DayOfWeek FROM mytable WHERE WheelsOn < 314 LIMIT 8
+SELECT DayOfWeek, Carrier, TailNum FROM mytable ORDER BY DivActualElapsedTime, WeatherDelay LIMIT 23
+SELECT DayOfWeek, DepDel15, DivTotalGTimes FROM mytable WHERE  REGEXP_LIKE(DestState, '.*D') ORDER BY AirlineID, LongestAddGTime LIMIT 18
+SELECT DayOfWeek, DestStateFips, WheelsOn FROM mytable WHERE FlightDate BETWEEN '2014-01-02' AND '2014-12-22' OR "Month" NOT IN (12, 1, 3, 5, 10) OR CRSArrTime NOT IN (448, 1150) LIMIT 20
+SELECT DayOfWeek, DivActualElapsedTime FROM mytable ORDER BY Distance LIMIT 0
+SELECT DayOfWeek, DivAirports FROM mytable ORDER BY DivArrDelay, WeatherDelay LIMIT 28
+SELECT DayOfWeek, DivTailNums, Distance FROM mytable WHERE OriginAirportID NOT IN (13891, 14842) AND DivWheelsOffs >= 327 OR OriginStateFips = 35 LIMIT 13
+SELECT DayOfWeek, FlightDate, OriginStateFips FROM mytable WHERE DestAirportID BETWEEN 14524 AND 11413 OR LongestAddGTime = 83 AND OriginWac = 83 ORDER BY ActualElapsedTime, CRSDepTime, ArrDelay LIMIT 15
+SELECT DayOfWeek, LongestAddGTime, TaxiOut FROM mytable WHERE DepTime = 710 AND CarrierDelay >= 197 AND DepDelayMinutes NOT IN (294.0, 916.0, 242.0, 38.0) ORDER BY DivActualElapsedTime, DepDelayMinutes, ArrDelay LIMIT 25
+SELECT DayOfWeek, OriginWac, OriginStateFips FROM mytable WHERE FirstDepTime >= 1252 AND FlightDate IN ('2014-02-14', '2014-03-25') OR TotalAddGTime IN (157, 169, 105, 41) ORDER BY WheelsOn LIMIT 8
+SELECT DayOfWeek, TailNum FROM mytable ORDER BY DepDel15, WheelsOn LIMIT 18
+SELECT DayOfWeek, TaxiIn FROM mytable LIMIT 14
+SELECT DayofMonth, OriginWac, DivArrDelay FROM mytable WHERE CRSArrTime BETWEEN 1743 AND 2103 ORDER BY "Year", Quarter, ArrivalDelayGroups LIMIT 17
+SELECT DaysSinceEpoch FROM mytable WHERE DistanceGroup <= 2 AND OriginState IN ('VA', 'ME', 'MN', 'VI') AND AirlineID <> 19690 ORDER BY DestState, DestStateFips LIMIT 13
+SELECT DaysSinceEpoch FROM mytable WHERE DivWheelsOns >= 623 ORDER BY DestAirportSeqID, ArrTimeBlk LIMIT 22
+SELECT DepDel15 FROM mytable WHERE DepDelayMinutes = 205.0 LIMIT 11
+SELECT DepDel15 FROM mytable WHERE Flights IN (1) OR Carrier > 'UA' ORDER BY DestState LIMIT 3
+SELECT DepDel15, DestCityName, UniqueCarrier FROM mytable WHERE ArrDel15 BETWEEN 1 AND -9999 ORDER BY DistanceGroup, AirTime LIMIT 14
+SELECT DepDel15, DivAirportIDs FROM mytable WHERE OriginCityMarketID > 32012 AND ArrDelayMinutes BETWEEN 161.0 AND 205.0 AND FlightDate = '2014-04-05' ORDER BY ActualElapsedTime, DestState, CRSArrTime LIMIT 4
+SELECT DepDel15, DivAirportLandings FROM mytable WHERE ActualElapsedTime BETWEEN 54 AND 263 AND DivAirportIDs = 11278 ORDER BY TotalAddGTime LIMIT 19
+SELECT DepDel15, OriginStateFips, Distance FROM mytable WHERE  REGEXP_LIKE(DestState, 'D.*') OR DivTailNums BETWEEN 'N585AA' AND 'N905MQ' ORDER BY Dest, DestStateFips, DestAirportID LIMIT 25
+SELECT DepDel15, OriginWac, DivReachedDest FROM mytable LIMIT 2
+SELECT DepDelay FROM mytable WHERE  REGEXP_LIKE(Origin, '.*AE') OR TaxiOut = 147 AND TotalAddGTime BETWEEN 84 AND 63 ORDER BY TailNum, DestCityName LIMIT 16
+SELECT DepDelay FROM mytable WHERE DayofMonth NOT IN (14) ORDER BY Dest LIMIT 0
+SELECT DepDelay FROM mytable WHERE TaxiIn = 48 OR DivAirports BETWEEN 'PPG' AND 'MOB' LIMIT 19
+SELECT DepDelay, CRSArrTime FROM mytable WHERE DepTime > 2212 ORDER BY TaxiOut, LateAircraftDelay, CRSArrTime LIMIT 19
+SELECT DepDelay, Cancelled, DayofMonth FROM mytable ORDER BY TotalAddGTime LIMIT 17
+SELECT DepDelay, Cancelled, DivWheelsOffs FROM mytable WHERE DivLongestGTimes BETWEEN 43.0 AND 56.0 ORDER BY DistanceGroup, WeatherDelay LIMIT 26
+SELECT DepDelay, DayofMonth FROM mytable WHERE UniqueCarrier = 'FL' OR "Year" BETWEEN 2014 AND 2014 OR DestState BETWEEN 'GA' AND 'IA' ORDER BY DayOfWeek LIMIT 2
+SELECT DepDelay, DivReachedDest FROM mytable WHERE DivReachedDest BETWEEN 1 AND 1 ORDER BY OriginState LIMIT 9
+SELECT DepDelay, DivTotalGTimes FROM mytable WHERE DivTotalGTimes IN (52) OR DepTime NOT IN (2220, 2344, 1407, 55, 625) LIMIT 9
+SELECT DepDelay, OriginCityName, ArrTimeBlk FROM mytable WHERE DivWheelsOns BETWEEN 1145 AND 915 LIMIT 12
+SELECT DepDelay, Quarter, SecurityDelay FROM mytable WHERE DivTailNums < 'N793SA' OR Carrier IN ('EV', 'WN', 'B6', 'VX') ORDER BY Distance, DepTime, OriginWac LIMIT 24
+SELECT DepDelayMinutes FROM mytable ORDER BY DestStateName, OriginWac, DestCityMarketID LIMIT 17
+SELECT DepDelayMinutes FROM mytable WHERE ArrTime = 1703 ORDER BY DestAirportID LIMIT 0
+SELECT DepDelayMinutes FROM mytable WHERE DivAirportIDs <= 14771 LIMIT 4
+SELECT DepDelayMinutes FROM mytable WHERE TailNum < 'N36272' AND TotalAddGTime NOT IN (42) LIMIT 5
+SELECT DepDelayMinutes, ArrDel15 FROM mytable WHERE DepartureDelayGroups NOT IN (4) AND WheelsOn = 2215 AND OriginState BETWEEN 'IN' AND 'NM' ORDER BY DepDelay, Diverted, DestCityName LIMIT 29
+SELECT DepDelayMinutes, Cancelled, DestStateName FROM mytable WHERE DivTailNums BETWEEN 'N688MQ' AND 'N554JB' AND LateAircraftDelay <= 71 AND ArrDelayMinutes BETWEEN 246.0 AND 171.0 LIMIT 21
+SELECT DepDelayMinutes, DayofMonth, TotalAddGTime FROM mytable WHERE  REGEXP_LIKE(OriginState, '.*A') AND Distance <= 262 AND DivWheelsOffs <= 1918 ORDER BY AirlineID, DepDelayMinutes, TaxiIn LIMIT 17
+SELECT DepDelayMinutes, DepDel15, OriginAirportID FROM mytable ORDER BY DepTime, DivAirportLandings LIMIT 18
+SELECT DepDelayMinutes, DepTime, DayOfWeek FROM mytable WHERE CancellationCode IN ('B') AND Distance NOT IN (842) AND ArrTime BETWEEN 1445 AND 858 ORDER BY DepDelayMinutes, DestCityName, Dest LIMIT 23
+SELECT DepDelayMinutes, "Month" FROM mytable WHERE DepDel15 IN (-9999) AND TaxiIn < 21 ORDER BY DepDelay, ArrTime LIMIT 16
+SELECT DepDelayMinutes, Origin, CRSDepTime FROM mytable ORDER BY DestState, Origin, WheelsOn LIMIT 28
+SELECT DepDelayMinutes, TaxiIn, OriginAirportSeqID FROM mytable WHERE Distance = 1978 OR DivReachedDest > 0 AND OriginStateFips BETWEEN 49 AND 72 ORDER BY Origin, ArrTime LIMIT 4
+SELECT DepTime FROM mytable WHERE DepTime NOT IN (752, 1559) OR SecurityDelay <> 18 ORDER BY OriginCityMarketID LIMIT 9
+SELECT DepTime FROM mytable WHERE FlightNum = 1896 ORDER BY ArrTime LIMIT 18
+SELECT DepTime FROM mytable WHERE OriginCityMarketID NOT IN (33570) LIMIT 9
+SELECT DepTime FROM mytable WHERE TaxiIn BETWEEN 14 AND 162 ORDER BY DivReachedDest, DestStateFips LIMIT 16
+SELECT DepTime, AirlineID FROM mytable WHERE CRSElapsedTime BETWEEN 390 AND 314 AND UniqueCarrier > 'HA' AND DivTailNums IN ('N378SW', 'N957DN', 'N274WN', 'N728SW', 'N16999') ORDER BY DepDel15, AirlineID, DayOfWeek LIMIT 8
+SELECT DepTime, Cancelled FROM mytable LIMIT 19
+SELECT DepTime, DestAirportSeqID, DestAirportID FROM mytable WHERE Diverted IN (1, 0) AND DivAirportIDs IN (12892, 11259, 12478) AND ArrivalDelayGroups > 9 LIMIT 7
+SELECT DepTime, DivAirportSeqIDs FROM mytable WHERE DivAirportSeqIDs <= 1482802 OR DivDistance <> 234 OR SecurityDelay BETWEEN 14 AND 27 ORDER BY OriginCityName, DestAirportSeqID LIMIT 10
+SELECT DepTimeBlk, ArrDelay, DayofMonth FROM mytable WHERE FlightNum <> 4360 LIMIT 23
+SELECT DepTimeBlk, Cancelled FROM mytable WHERE  REGEXP_LIKE(UniqueCarrier, 'U.*') AND DivAirportIDs IN (14771, 11252, 11731) LIMIT 27
+SELECT DepTimeBlk, Cancelled FROM mytable WHERE DaysSinceEpoch BETWEEN 16181 AND 16353 LIMIT 23
+SELECT DepTimeBlk, WeatherDelay FROM mytable WHERE ArrTimeBlk > '1600-1659' OR FirstDepTime > 622 ORDER BY FlightNum, OriginStateFips LIMIT 0
+SELECT DepartureDelayGroups FROM mytable ORDER BY DivArrDelay, ArrDelayMinutes, ArrivalDelayGroups LIMIT 9
+SELECT DepartureDelayGroups FROM mytable WHERE DayofMonth = 5 OR DestWac <= 35 ORDER BY DepTime LIMIT 18
+SELECT DepartureDelayGroups FROM mytable WHERE DivWheelsOns IN (1514, 1347, 2005, 1440) OR ArrDelayMinutes BETWEEN 316.0 AND 69.0 OR Quarter BETWEEN 2 AND 1 ORDER BY Diverted LIMIT 6
+SELECT DepartureDelayGroups FROM mytable WHERE FirstDepTime < 908 OR DestAirportSeqID IN (1059904) AND FlightDate BETWEEN '2014-01-13' AND '2014-01-13' ORDER BY WheelsOff LIMIT 11
+SELECT DepartureDelayGroups FROM mytable WHERE Origin = 'RDD' OR Distance BETWEEN 406 AND 711 ORDER BY DepDelay, ArrDelayMinutes, DayofMonth LIMIT 8
+SELECT DepartureDelayGroups FROM mytable WHERE OriginAirportSeqID < 1302402 AND OriginAirportSeqID IN (1302402, 1419304, 1489302) OR DestAirportID = 14730 LIMIT 7
+SELECT DepartureDelayGroups, ArrDel15 FROM mytable WHERE DestCityName BETWEEN 'Key West, FL' AND 'Twin Falls, ID' ORDER BY OriginStateFips, Distance, CRSElapsedTime LIMIT 4
+SELECT DepartureDelayGroups, Cancelled FROM mytable WHERE DayofMonth <= 29 OR TotalAddGTime NOT IN (78, 42, 4, 55, 34) OR Diverted NOT IN (1, 0) ORDER BY Flights, DestAirportID LIMIT 13
+SELECT DepartureDelayGroups, Carrier FROM mytable WHERE LongestAddGTime BETWEEN 146 AND 46 OR OriginAirportID < 11252 LIMIT 10
+SELECT DepartureDelayGroups, DaysSinceEpoch FROM mytable ORDER BY LongestAddGTime LIMIT 10
+SELECT DepartureDelayGroups, DestState, DepTimeBlk FROM mytable WHERE ArrTimeBlk BETWEEN '1400-1459' AND '0700-0759' AND "Month" IN (11, 12) LIMIT 22
+SELECT DepartureDelayGroups, Flights, UniqueCarrier FROM mytable ORDER BY AirTime, DaysSinceEpoch LIMIT 3
+SELECT DepartureDelayGroups, NASDelay FROM mytable WHERE DivReachedDest <> 0 OR DivAirportLandings IN (1, 0, 9) ORDER BY LateAircraftDelay, WeatherDelay LIMIT 9
+SELECT DepartureDelayGroups, TaxiIn FROM mytable WHERE TotalAddGTime = 55 ORDER BY DestAirportSeqID LIMIT 7
+SELECT DepartureDelayGroups, WheelsOn FROM mytable WHERE TailNum BETWEEN 'N243WN' AND 'N323NB' AND DivActualElapsedTime NOT IN (291) AND ArrDelayMinutes = 278.0 ORDER BY ArrDelayMinutes, Distance LIMIT 14
+SELECT Dest FROM mytable ORDER BY NASDelay, WeatherDelay, ArrDelayMinutes LIMIT 26
+SELECT Dest FROM mytable WHERE DivAirportSeqIDs IN (1091802, 1226603, 1247802) AND Diverted BETWEEN 0 AND 0 OR FlightDate NOT IN ('2014-05-03', '2014-09-22', '2014-07-30', '2014-08-08', '2014-02-20') ORDER BY DivArrDelay, ActualElapsedTime, OriginAirportID LIMIT 2
+SELECT Dest FROM mytable WHERE "Year" BETWEEN 2014 AND 2014 AND DestStateName < 'Missouri' ORDER BY DestCityName, NASDelay LIMIT 25
+SELECT Dest, AirTime FROM mytable WHERE ArrDelayMinutes BETWEEN 420.0 AND 351.0 OR DivDistance IN (24) OR OriginAirportID IN (10279, 11433) ORDER BY DepartureDelayGroups LIMIT 16
+SELECT Dest, ArrDel15 FROM mytable WHERE Cancelled <= 0 AND WeatherDelay >= 166 ORDER BY ArrTime
+SELECT Dest, Carrier FROM mytable WHERE DivReachedDest BETWEEN -9999 AND 1 ORDER BY DivArrDelay, CancellationCode, OriginAirportID LIMIT 29
+SELECT Dest, DayofMonth, ArrTimeBlk FROM mytable WHERE CRSDepTime <= 1607 AND WeatherDelay BETWEEN 33 AND 107 ORDER BY TaxiIn LIMIT 7
+SELECT Dest, DepDelayMinutes FROM mytable WHERE CRSElapsedTime BETWEEN 69 AND 96 OR DestAirportID BETWEEN 11003 AND 13933 OR DivWheelsOffs IN (1854) LIMIT 26
+SELECT Dest, DepDelayMinutes FROM mytable WHERE Quarter NOT IN (1, 2, 3, 4) OR DivTailNums IN ('N3FSAA', 'N796SK', 'N013AA', 'N938AT') AND DayOfWeek = 7 LIMIT 17
+SELECT Dest, DivWheelsOffs, TaxiIn FROM mytable WHERE DivAirportLandings NOT IN (0, 2) ORDER BY "Year", WheelsOff, ArrDelayMinutes LIMIT 22
+SELECT Dest, "Year", OriginAirportSeqID FROM mytable WHERE TaxiOut = 128 AND DivTailNums BETWEEN 'N492AA' AND 'N795AS' LIMIT 19
+SELECT DestAirportID FROM mytable ORDER BY WheelsOff, ArrDelayMinutes, DepTimeBlk LIMIT 8
+SELECT DestAirportID FROM mytable WHERE DepTime BETWEEN 1043 AND 1250 ORDER BY DivReachedDest, OriginState, OriginStateName LIMIT 17
+SELECT DestAirportID, WheelsOn FROM mytable WHERE DivAirportIDs IN (14113, 14794, 14679, 13230) AND ArrTimeBlk IN ('2000-2059', '1700-1759', '1100-1159') OR ArrTimeBlk BETWEEN '1900-1959' AND '1100-1159' ORDER BY DistanceGroup, Diverted LIMIT 22
+SELECT DestAirportSeqID FROM mytable WHERE DivReachedDest BETWEEN 1 AND -9999 OR AirTime IN (132, 259) AND Dest > 'ALB' ORDER BY DivArrDelay, DivActualElapsedTime, DepDelay LIMIT 8
+SELECT DestAirportSeqID FROM mytable WHERE Origin BETWEEN 'LBB' AND 'SGU' AND  REGEXP_LIKE(OriginState, '.*T') AND Quarter = 3 ORDER BY FlightNum, OriginStateName LIMIT 24
+SELECT DestAirportSeqID FROM mytable WHERE OriginStateFips >= 2 ORDER BY ArrTimeBlk, DepTimeBlk, UniqueCarrier LIMIT 23
+SELECT DestAirportSeqID, ArrivalDelayGroups FROM mytable WHERE TotalAddGTime IN (47, 31, 28) ORDER BY DepDel15
+SELECT DestAirportSeqID, DestAirportID FROM mytable ORDER BY OriginStateName, DepDelay LIMIT 25
+SELECT DestAirportSeqID, Distance, DivAirportSeqIDs FROM mytable WHERE Origin BETWEEN 'RST' AND 'RDM' OR Quarter = 1 ORDER BY TaxiIn, Diverted LIMIT 26
+SELECT DestAirportSeqID, DivAirportIDs, UniqueCarrier FROM mytable WHERE DestCityName = 'Albany, GA' AND DepDel15 = 0 OR DivAirportSeqIDs <= 1112202 LIMIT 9
+SELECT DestAirportSeqID, UniqueCarrier, DestCityMarketID FROM mytable WHERE OriginAirportSeqID = 1422204 AND DistanceGroup NOT IN (11, 2, 7) AND OriginCityName IN ('Kalamazoo, MI', 'Oklahoma City, OK', 'San Diego, CA', 'Grand Island, NE') ORDER BY AirlineID LIMIT 26
+SELECT DestCityMarketID FROM mytable ORDER BY DivReachedDest, OriginCityName LIMIT 29
+SELECT DestCityMarketID FROM mytable WHERE DivLongestGTimes BETWEEN 39.0 AND 156.0 ORDER BY DayofMonth LIMIT 27
+SELECT DestCityMarketID FROM mytable WHERE "Year" = 2014 OR  REGEXP_LIKE(OriginCityName, 'Clev.*land, OH') AND Origin = 'LFT' ORDER BY LateAircraftDelay LIMIT 12
+SELECT DestCityMarketID, OriginAirportID FROM mytable WHERE FirstDepTime <= 1119 OR OriginAirportSeqID = 1091802 OR DivAirportLandings = 9 ORDER BY ArrDel15, DestAirportSeqID, DestStateFips LIMIT 22
+SELECT DestCityMarketID, WheelsOn, Distance FROM mytable WHERE WheelsOn BETWEEN 205 AND 1422 OR WheelsOn BETWEEN 1933 AND 1456 LIMIT 8
+SELECT DestCityMarketID, WheelsOn, OriginAirportID FROM mytable WHERE ArrDelay IN (97.0) OR FlightNum > 3329 AND OriginAirportSeqID NOT IN (1087402) ORDER BY SecurityDelay, OriginState LIMIT 7
+SELECT DestCityName FROM mytable LIMIT 7
+SELECT DestCityName FROM mytable ORDER BY CRSArrTime, WheelsOn LIMIT 12
+SELECT DestCityName FROM mytable ORDER BY Dest LIMIT 14
+SELECT DestCityName FROM mytable WHERE DepartureDelayGroups BETWEEN 5 AND 6 OR DivTailNums BETWEEN 'N4WJAA' AND 'N8314L' ORDER BY Dest, DestCityMarketID LIMIT 21
+SELECT DestCityName FROM mytable WHERE DivTailNums IN ('N636JB', 'N1EAMQ', 'N219AG', 'N223AG') OR DestState BETWEEN 'ME' AND 'SC' ORDER BY TaxiOut, CRSArrTime, DestStateName LIMIT 26
+SELECT DestCityName FROM mytable WHERE NASDelay BETWEEN 80 AND 36 AND DistanceGroup = 10 ORDER BY Distance, TailNum, Origin LIMIT 5
+SELECT DestCityName, ArrDel15, DivArrDelay FROM mytable WHERE AirlineID NOT IN (20304, 19790, 19805) AND FlightDate = '2014-01-09' ORDER BY ArrTime, NASDelay, AirlineID LIMIT 0
+SELECT DestCityName, DayOfWeek FROM mytable WHERE OriginAirportID BETWEEN 14696 AND 14633 AND UniqueCarrier = 'VX' ORDER BY DepTime, OriginAirportID LIMIT 6
+SELECT DestCityName, Dest FROM mytable WHERE FlightDate <= '2014-01-10' OR DivTailNums IN ('N630JB', 'N130DL', 'N371SW') AND DivWheelsOffs IN (1715) ORDER BY DestStateFips, ArrDelayMinutes LIMIT 29
+SELECT DestCityName, DivTotalGTimes FROM mytable WHERE Origin = 'EUG' AND UniqueCarrier NOT IN ('HA', 'AS', 'AA') OR DestWac NOT IN (51, 54, 37) ORDER BY FlightNum, DestCityName, DestAirportID LIMIT 24
+SELECT DestCityName, NASDelay FROM mytable LIMIT 12
+SELECT DestCityName, OriginAirportID FROM mytable WHERE WheelsOff = 1619 OR LongestAddGTime BETWEEN -9999 AND 86 ORDER BY FirstDepTime LIMIT 8
+SELECT DestCityName, WheelsOn FROM mytable WHERE SecurityDelay >= 1 OR DepDel15 BETWEEN -9999 AND -9999 ORDER BY CarrierDelay, ArrDel15, DestStateName LIMIT 22
+SELECT DestState FROM mytable LIMIT 23
+SELECT DestState FROM mytable ORDER BY ArrTime LIMIT 17
+SELECT DestState FROM mytable ORDER BY DestAirportSeqID LIMIT 17
+SELECT DestState FROM mytable WHERE DestWac >= 22 OR NASDelay NOT IN (1, 19) ORDER BY DepDelay, DivAirportLandings, OriginStateName LIMIT 10
+SELECT DestState FROM mytable WHERE DivLongestGTimes > 145.0 ORDER BY DepDelay, WeatherDelay LIMIT 6
+SELECT DestState, ArrDel15 FROM mytable WHERE DivDistance BETWEEN 251 AND 0 OR DepTime > 1157 ORDER BY FlightNum, TaxiIn LIMIT 15
+SELECT DestState, ArrDelay, DaysSinceEpoch FROM mytable WHERE OriginState BETWEEN 'NE' AND 'NY' OR ArrDel15 BETWEEN -9999 AND 1 LIMIT 29
+SELECT DestState, ArrTimeBlk FROM mytable WHERE Distance <= 1162 OR DepDelay NOT IN (52.0, 88.0, 77.0, 66.0, -11.0) AND Dest >= 'MCI' ORDER BY DepDelay, OriginState LIMIT 9
+SELECT DestState, CRSArrTime FROM mytable WHERE OriginStateName > 'U.S. Virgin Islands' AND OriginCityMarketID = 30198 OR Distance BETWEEN 840 AND 1609 ORDER BY DivActualElapsedTime, OriginStateFips LIMIT 25
+SELECT DestState, CRSDepTime, DivActualElapsedTime FROM mytable ORDER BY DepDelayMinutes, AirTime LIMIT 26
+SELECT DestState, Cancelled, TailNum FROM mytable WHERE ArrTimeBlk IN ('1000-1059', '2100-2159', '0600-0659', '1200-1259', '1800-1859') OR OriginAirportSeqID BETWEEN 1186502 AND 1131502 ORDER BY ArrTime LIMIT 10
+SELECT DestState, Distance, OriginCityName FROM mytable WHERE "Month" <= 1 ORDER BY DepTime, DestStateName LIMIT 22
+SELECT DestState, OriginAirportID FROM mytable WHERE OriginAirportID NOT IN (15356, 10136) LIMIT 2
+SELECT DestState, OriginAirportSeqID, DaysSinceEpoch FROM mytable ORDER BY LongestAddGTime LIMIT 5
+SELECT DestState, WeatherDelay FROM mytable WHERE Flights BETWEEN 1 AND 1 AND DayOfWeek >= 4 OR Carrier BETWEEN 'F9' AND 'WN' ORDER BY FlightNum, OriginCityName, ArrTime LIMIT 28
+SELECT DestState, WheelsOn FROM mytable WHERE TaxiIn = 69 AND FlightNum BETWEEN 7392 AND 2938 ORDER BY DestCityMarketID LIMIT 28
+SELECT DestStateFips FROM mytable WHERE ArrivalDelayGroups = -2 ORDER BY ArrDel15 LIMIT 18
+SELECT DestStateFips FROM mytable WHERE DepTime BETWEEN 1321 AND 1115 AND OriginStateFips BETWEEN 13 AND 44 OR FlightDate >= '2014-01-06' ORDER BY DistanceGroup LIMIT 5
+SELECT DestStateFips, AirlineID FROM mytable WHERE DivWheelsOffs IN (5, 1403) ORDER BY "Month" LIMIT 9
+SELECT DestStateFips, ArrDel15 FROM mytable ORDER BY DepDelay, TotalAddGTime, DestStateName LIMIT 5
+SELECT DestStateFips, ArrDelayMinutes FROM mytable WHERE AirTime BETWEEN 394 AND 367 AND Quarter BETWEEN 4 AND 1 ORDER BY OriginStateName, CancellationCode, OriginCityName LIMIT 4
+SELECT DestStateFips, ArrTimeBlk, UniqueCarrier FROM mytable ORDER BY OriginCityMarketID, ActualElapsedTime, "Month" LIMIT 3
+SELECT DestStateFips, ArrivalDelayGroups FROM mytable ORDER BY DayOfWeek, DivActualElapsedTime, OriginAirportID LIMIT 21
+SELECT DestStateFips, ArrivalDelayGroups FROM mytable WHERE OriginAirportSeqID BETWEEN 1357702 AND 1153703 ORDER BY "Month" LIMIT 5
+SELECT DestStateFips, DaysSinceEpoch FROM mytable WHERE FirstDepTime = 1902 ORDER BY WheelsOff, DestCityName LIMIT 9
+SELECT DestStateFips, DivTailNums, DayofMonth FROM mytable WHERE CRSArrTime BETWEEN 809 AND 1655 AND LateAircraftDelay <= 154 ORDER BY DestAirportID, DestCityMarketID LIMIT 12
+SELECT DestStateName FROM mytable LIMIT 8
+SELECT DestStateName FROM mytable ORDER BY DepDelayMinutes LIMIT 27
+SELECT DestStateName FROM mytable WHERE  REGEXP_LIKE(OriginState, '.*C') AND DepartureDelayGroups > 1 ORDER BY Dest, TaxiOut LIMIT 16
+SELECT DestStateName FROM mytable WHERE ActualElapsedTime > 163 AND DivAirportLandings <> 2 ORDER BY ArrDelay, DayofMonth, OriginAirportID LIMIT 1
+SELECT DestStateName FROM mytable WHERE DayOfWeek >= 1 LIMIT 15
+SELECT DestStateName FROM mytable WHERE DestCityMarketID > 33195 AND ArrDel15 <> 1 LIMIT 11
+SELECT DestStateName FROM mytable WHERE OriginAirportSeqID BETWEEN 1275803 AND 1129803 OR ArrDel15 BETWEEN -9999 AND 0 OR ArrDel15 >= -9999 ORDER BY Quarter, FlightNum, DestAirportSeqID LIMIT 23
+SELECT DestStateName, AirlineID, DivActualElapsedTime FROM mytable LIMIT 15
+SELECT DestStateName, DivAirportIDs, WheelsOn FROM mytable ORDER BY ArrTimeBlk LIMIT 22
+SELECT DestStateName, NASDelay FROM mytable WHERE OriginCityName BETWEEN 'Roanoke, VA' AND 'Lewiston, ID' AND Quarter NOT IN (1) AND Carrier > 'FL' ORDER BY DivReachedDest, ArrivalDelayGroups LIMIT 23
+SELECT DestStateName, NASDelay, ArrDelay FROM mytable ORDER BY AirTime LIMIT 17
+SELECT DestStateName, NASDelay, CancellationCode FROM mytable WHERE DestCityMarketID NOT IN (30918, 31865, 33964, 34543, 33277) AND DivWheelsOns BETWEEN 1017 AND 1018 OR TailNum IN ('N3733Z', 'N919DE', 'N658CT', 'N12567') ORDER BY DayofMonth LIMIT 7
+SELECT DestWac FROM mytable LIMIT 3
+SELECT DestWac FROM mytable WHERE DestCityMarketID IN (32884, 33024, 33792, 31041) AND DepDelayMinutes > 536.0 LIMIT 14
+SELECT DestWac FROM mytable WHERE DestState BETWEEN 'TX' AND 'PA' LIMIT 21
+SELECT DestWac FROM mytable WHERE DivReachedDest >= 1 OR ArrTime NOT IN (816) OR DepTime NOT IN (853, 1430) ORDER BY DivActualElapsedTime, Cancelled LIMIT 24
+SELECT DestWac FROM mytable WHERE Flights = 1 OR Origin NOT IN ('KTN', 'DTW') AND FirstDepTime = 1046 ORDER BY "Month", OriginAirportSeqID, DaysSinceEpoch LIMIT 9
+SELECT DestWac, ArrDel15, CRSDepTime FROM mytable ORDER BY DepDelay LIMIT 22
+SELECT DestWac, CRSDepTime, DivActualElapsedTime FROM mytable WHERE TaxiIn NOT IN (64, 15) ORDER BY DestWac, OriginState LIMIT 21
+SELECT DestWac, DepDel15, OriginWac FROM mytable WHERE WheelsOn = 1351 AND OriginCityMarketID BETWEEN 34952 AND 30466 LIMIT 27
+SELECT DestWac, DepDelay FROM mytable WHERE OriginAirportID BETWEEN 10372 AND 14730 AND DivAirportSeqIDs BETWEEN 1524903 AND 1348502 OR OriginStateFips BETWEEN 10 AND 45 ORDER BY TaxiOut, Diverted, ArrivalDelayGroups LIMIT 7
+SELECT DestWac, DepDelay, Dest FROM mytable WHERE WheelsOff >= 2011 AND DepTimeBlk IN ('1200-1259', '1400-1459', '1500-1559') LIMIT 24
+SELECT DestWac, DestStateName FROM mytable WHERE AirlineID BETWEEN 19930 AND 20437 AND DepartureDelayGroups < -1 OR "Month" NOT IN (1) ORDER BY Quarter, LateAircraftDelay, OriginCityName LIMIT 0
+SELECT DestWac, DivWheelsOffs, OriginWac FROM mytable WHERE DivLongestGTimes IN (102.0, 21.0, 42.0, 62.0) ORDER BY Flights, DepTimeBlk, AirlineID LIMIT 13
+SELECT DestWac, FirstDepTime FROM mytable WHERE ArrTime BETWEEN 1221 AND 6 AND LongestAddGTime < 39 ORDER BY Diverted LIMIT 0
+SELECT DestWac, OriginStateFips, DivTailNums FROM mytable WHERE AirlineID NOT IN (20436, 20366, 20409) AND DivLongestGTimes IN (3.0, 85.0, 38.0, 75.0) AND "Year" <> 2014 ORDER BY "Month" LIMIT 10
+SELECT DestWac, OriginWac, WheelsOn FROM mytable WHERE DivActualElapsedTime BETWEEN 318 AND 280 ORDER BY OriginState, OriginStateFips LIMIT 5
+SELECT DestWac, TotalAddGTime FROM mytable WHERE DivWheelsOns < 2334 ORDER BY DestState, Quarter, DestAirportSeqID LIMIT 19
+SELECT Distance FROM mytable WHERE DivDistance >= 109 OR DivWheelsOns BETWEEN 1628 AND 1554 LIMIT 23
+SELECT Distance, DivAirportLandings, OriginWac FROM mytable ORDER BY DaysSinceEpoch LIMIT 20
+SELECT Distance, DivWheelsOffs FROM mytable WHERE DestState BETWEEN 'NY' AND 'IA' AND TailNum BETWEEN 'N764SK' AND 'N15985' AND "Month" <> 1 LIMIT 3
+SELECT Distance, "Month" FROM mytable WHERE CRSDepTime = 1037 AND DivAirports IN ('MCN') ORDER BY "Year", Distance, SecurityDelay LIMIT 11
+SELECT Distance, WheelsOn FROM mytable WHERE OriginStateFips BETWEEN 28 AND 33 AND NASDelay NOT IN (2, 106) ORDER BY DestCityMarketID LIMIT 5
+SELECT DistanceGroup FROM mytable ORDER BY FlightNum, ArrTime, DayOfWeek LIMIT 12
+SELECT DistanceGroup FROM mytable WHERE DestAirportSeqID BETWEEN 1463502 AND 1338801 LIMIT 24
+SELECT DistanceGroup FROM mytable WHERE DistanceGroup IN (2) AND ArrDelayMinutes < 341.0 OR Diverted = 0 ORDER BY Flights, TailNum LIMIT 23
+SELECT DistanceGroup FROM mytable WHERE WeatherDelay <= 101 OR "Month" >= 1 AND AirTime BETWEEN 85 AND 442 ORDER BY DepDelayMinutes, ArrTime, Dest LIMIT 13
+SELECT DistanceGroup, AirlineID FROM mytable ORDER BY TaxiOut, "Year", DivAirportLandings LIMIT 11
+SELECT DistanceGroup, ArrTimeBlk, UniqueCarrier FROM mytable ORDER BY CRSArrTime, OriginAirportID LIMIT 21
+SELECT DistanceGroup, CRSElapsedTime, DestCityMarketID FROM mytable ORDER BY AirTime, DepTimeBlk, ArrTimeBlk LIMIT 27
+SELECT DistanceGroup, CarrierDelay, DestCityName FROM mytable WHERE "Month" NOT IN (1) ORDER BY DestWac LIMIT 2
+SELECT DistanceGroup, DestAirportID FROM mytable ORDER BY DepDelayMinutes, DaysSinceEpoch LIMIT 19
+SELECT DistanceGroup, DestCityMarketID FROM mytable WHERE CancellationCode NOT IN ('noodles', 'C', 'B') AND DivArrDelay NOT IN (765) AND DivActualElapsedTime = 327 LIMIT 16
+SELECT DistanceGroup, DestStateFips, OriginAirportID FROM mytable WHERE DivWheelsOffs BETWEEN 202 AND 1314 AND DestState NOT IN ('KY', 'NE') ORDER BY NASDelay, DaysSinceEpoch LIMIT 16
+SELECT DistanceGroup, TotalAddGTime FROM mytable WHERE OriginStateName IN ('Mississippi', 'Georgia') OR DivWheelsOffs <= 1906 LIMIT 15
+SELECT DivActualElapsedTime FROM mytable ORDER BY ArrTimeBlk LIMIT 27
+SELECT DivActualElapsedTime FROM mytable WHERE CRSDepTime BETWEEN 500 AND 646 OR DivTotalGTimes > 180 LIMIT 20
+SELECT DivActualElapsedTime FROM mytable WHERE Cancelled IN (1, 0) ORDER BY Diverted LIMIT 19
+SELECT DivActualElapsedTime FROM mytable WHERE DepDel15 < 0 ORDER BY FlightNum LIMIT 15
+SELECT DivActualElapsedTime FROM mytable WHERE DestCityMarketID BETWEEN 33244 AND 32337 OR WheelsOff = 1248 OR DivReachedDest = -9999 ORDER BY FlightDate, CancellationCode, DaysSinceEpoch LIMIT 24
+SELECT DivActualElapsedTime FROM mytable WHERE DistanceGroup BETWEEN 4 AND 1 OR DepDelay <> 124.0 ORDER BY OriginStateName LIMIT 7
+SELECT DivActualElapsedTime, ArrDel15, DivAirportIDs FROM mytable LIMIT 19
+SELECT DivActualElapsedTime, DivWheelsOffs, DestStateName FROM mytable WHERE DestCityName < 'Dothan, AL' AND AirTime = 315 AND Carrier >= 'OO' LIMIT 26
+SELECT DivActualElapsedTime, LongestAddGTime, CRSArrTime FROM mytable WHERE DivAirportIDs <= 11618 OR AirTime BETWEEN 134 AND 406 AND AirlineID < 21171 ORDER BY DistanceGroup, DestCityMarketID LIMIT 21
+SELECT DivAirportIDs FROM mytable WHERE AirTime NOT IN (115, 11, 100, 351) ORDER BY Quarter, TailNum LIMIT 4
+SELECT DivAirportIDs FROM mytable WHERE DestCityMarketID <= 30113 AND WheelsOff IN (1921, 1257, 1332) ORDER BY Carrier LIMIT 25
+SELECT DivAirportIDs FROM mytable WHERE Quarter NOT IN (1) AND AirTime IN (312, 273) OR DestState BETWEEN 'PR' AND 'LA' LIMIT 10
+SELECT DivAirportIDs, DestCityName, OriginAirportID FROM mytable WHERE OriginCityName BETWEEN 'San Antonio, TX' AND 'Omaha, NE' OR CarrierDelay <> 169 ORDER BY ArrDelay LIMIT 14
+SELECT DivAirportLandings FROM mytable ORDER BY Flights LIMIT 9
+SELECT DivAirportLandings FROM mytable WHERE ActualElapsedTime NOT IN (180, 145, 415, 177, 347) AND FlightDate BETWEEN '2014-01-06' AND '2014-01-24' OR OriginWac BETWEEN 91 AND 41 LIMIT 9
+SELECT DivAirportLandings FROM mytable WHERE CarrierDelay BETWEEN 23 AND 43 AND DivReachedDest BETWEEN -9999 AND 0 LIMIT 17
+SELECT DivAirportLandings FROM mytable WHERE DestWac BETWEEN 12 AND 85 ORDER BY DepTimeBlk
+SELECT DivAirportLandings, DaysSinceEpoch FROM mytable ORDER BY Quarter LIMIT 27
+SELECT DivAirportLandings, DaysSinceEpoch FROM mytable WHERE ActualElapsedTime NOT IN (544, 335) ORDER BY CarrierDelay, ArrTime, OriginAirportID LIMIT 21
+SELECT DivAirportLandings, DepDelay FROM mytable WHERE DestCityMarketID <= 32519 OR WheelsOff IN (1655, 506, 1900) AND Cancelled >= 0 ORDER BY DepDel15 LIMIT 2
+SELECT DivAirportLandings, DestCityMarketID, Distance FROM mytable ORDER BY SecurityDelay, OriginCityName LIMIT 24
+SELECT DivAirportLandings, "Year", ArrDelay FROM mytable WHERE NASDelay = 92 ORDER BY Carrier LIMIT 19
+SELECT DivAirportSeqIDs FROM mytable ORDER BY NASDelay LIMIT 23
+SELECT DivAirportSeqIDs FROM mytable WHERE DepDelay IN (63.0, 270.0, 408.0) OR OriginCityMarketID = 34794 ORDER BY DivDistance, OriginAirportSeqID, DestAirportID LIMIT 23
+SELECT DivAirportSeqIDs FROM mytable WHERE DivDistance = 128 ORDER BY CRSDepTime, DayOfWeek LIMIT 14
+SELECT DivAirportSeqIDs, DestStateName FROM mytable ORDER BY CarrierDelay, ArrDelayMinutes, DestStateName LIMIT 9
+SELECT DivAirports FROM mytable ORDER BY DestAirportSeqID LIMIT 17
+SELECT DivAirports FROM mytable ORDER BY Quarter LIMIT 26
+SELECT DivAirports FROM mytable WHERE DestStateFips > 17 ORDER BY Distance, ArrDelay, OriginAirportID LIMIT 8
+SELECT DivAirports FROM mytable WHERE UniqueCarrier BETWEEN 'DL' AND 'FL' OR DivReachedDest NOT IN (1, -9999) OR DestAirportID < 11726 ORDER BY ArrDel15 LIMIT 4
+SELECT DivAirports, CancellationCode, DestAirportID FROM mytable WHERE OriginWac > 92 OR DepTimeBlk NOT IN ('1900-1959', '2300-2359', '0800-0859', '1700-1759', '2200-2259') OR  REGEXP_LIKE(FlightDate, '2014-03.*07') ORDER BY OriginCityMarketID, WheelsOn LIMIT 11
+SELECT DivAirports, DepDelayMinutes FROM mytable WHERE NASDelay BETWEEN 23 AND 139 AND DepartureDelayGroups NOT IN (12, 6, -9999, 9, 10) LIMIT 14
+SELECT DivAirports, DistanceGroup, DestAirportID FROM mytable WHERE Diverted NOT IN (0, 1) AND DestCityMarketID NOT IN (30154, 30918, 33485, 31986) ORDER BY ArrDel15 LIMIT 13
+SELECT DivAirports, FirstDepTime, TailNum FROM mytable WHERE  REGEXP_LIKE(OriginState, '.*E') AND ArrivalDelayGroups BETWEEN -2 AND 11 AND DepDel15 > -9999 ORDER BY CarrierDelay, DepTime LIMIT 4
+SELECT DivAirports, OriginAirportSeqID FROM mytable WHERE ActualElapsedTime BETWEEN 445 AND 294 AND DivWheelsOffs <= 914 LIMIT 17
+SELECT DivAirports, OriginCityName FROM mytable WHERE DestStateFips > 25 OR FlightDate = '2014-01-22' ORDER BY OriginStateFips, DivDistance LIMIT 7
+SELECT DivAirports, TaxiIn, DivAirportLandings FROM mytable ORDER BY CRSArrTime, CRSDepTime, DaysSinceEpoch
+SELECT DivAirports, WeatherDelay, Distance FROM mytable WHERE DestWac BETWEEN 74 AND 34 ORDER BY Dest, DaysSinceEpoch LIMIT 1
+SELECT DivArrDelay FROM mytable ORDER BY DayOfWeek, OriginWac LIMIT 18
+SELECT DivArrDelay FROM mytable ORDER BY DepDel15, Dest LIMIT 9
+SELECT DivArrDelay FROM mytable ORDER BY LongestAddGTime, DepDelay, DestState LIMIT 29
+SELECT DivArrDelay FROM mytable WHERE ActualElapsedTime = 399 ORDER BY DivDistance, OriginWac, OriginStateFips LIMIT 8
+SELECT DivArrDelay FROM mytable WHERE DaysSinceEpoch BETWEEN 16244 AND 16175 AND DestStateFips = 15 ORDER BY DepDel15 LIMIT 5
+SELECT DivArrDelay FROM mytable WHERE DistanceGroup IN (4, 7, 9) OR Dest > 'MDT' ORDER BY DepDel15 LIMIT 3
+SELECT DivArrDelay FROM mytable WHERE DivWheelsOffs IN (956) OR DestAirportID NOT IN (12519, 14831, 15841) LIMIT 26
+SELECT DivArrDelay FROM mytable WHERE Flights BETWEEN 1 AND 1 ORDER BY DivReachedDest, DestStateFips, ActualElapsedTime LIMIT 11
+SELECT DivArrDelay FROM mytable WHERE TaxiOut > 138 OR ArrTimeBlk NOT IN ('2000-2059', '0600-0659', '0800-0859', '2200-2259') OR Quarter NOT IN (3) ORDER BY ArrDelay LIMIT 25
+SELECT DivArrDelay, ArrDelay FROM mytable WHERE AirTime = 200 AND DestAirportID = 10136 OR CRSArrTime = 1855 ORDER BY Quarter, OriginWac, AirTime LIMIT 29
+SELECT DivArrDelay, CRSElapsedTime, ArrTimeBlk FROM mytable WHERE DestAirportSeqID BETWEEN 1069302 AND 1190502 OR DayofMonth = 10 OR AirlineID >= 19790 LIMIT 21
+SELECT DivArrDelay, DestWac, DestAirportID FROM mytable WHERE OriginWac <= 2 OR  REGEXP_LIKE(ArrTimeBlk, '1.*00-1359') AND NASDelay > 213 ORDER BY DepartureDelayGroups, OriginAirportSeqID LIMIT 23
+SELECT DivArrDelay, DivActualElapsedTime, ArrTime FROM mytable ORDER BY WheelsOff LIMIT 14
+SELECT DivArrDelay, FlightDate, DayofMonth FROM mytable WHERE FlightNum BETWEEN 512 AND 3535 AND WeatherDelay BETWEEN 88 AND 973 ORDER BY ArrDelayMinutes LIMIT 14
+SELECT DivArrDelay, OriginStateName, DivAirports FROM mytable WHERE OriginAirportSeqID BETWEEN 1387302 AND 1509602 OR Distance = 1532 OR DivWheelsOns IN (1139, 1424, 1401, 1135, 2020) LIMIT 4
+SELECT DivDistance FROM mytable ORDER BY DistanceGroup, CarrierDelay, DepTime LIMIT 26
+SELECT DivDistance FROM mytable WHERE  REGEXP_LIKE(CancellationCode, '.*') LIMIT 15
+SELECT DivDistance FROM mytable WHERE CancellationCode <= 'C' AND Origin BETWEEN 'HOU' AND 'SBA' AND ActualElapsedTime = 130 ORDER BY DayofMonth LIMIT 3
+SELECT DivDistance, ArrTimeBlk FROM mytable WHERE ActualElapsedTime NOT IN (301, 668, 294) OR WeatherDelay = 61 ORDER BY OriginWac, OriginStateFips, ArrivalDelayGroups LIMIT 0
+SELECT DivDistance, CarrierDelay FROM mytable WHERE DestStateFips <= 31 AND DivTailNums BETWEEN 'N8315C' AND 'N4XLAA' ORDER BY SecurityDelay, DivAirportLandings LIMIT 2
+SELECT DivDistance, DepTime FROM mytable ORDER BY FlightNum, Diverted LIMIT 12
+SELECT DivDistance, Dest FROM mytable WHERE DestCityName IN ('Wichita, KS') OR LateAircraftDelay NOT IN (159) AND DestAirportSeqID NOT IN (1468902) ORDER BY WheelsOff, Distance LIMIT 14
+SELECT DivDistance, DestAirportSeqID, TailNum FROM mytable WHERE DestState NOT IN ('CA', 'IA', 'AR') LIMIT 18
+SELECT DivDistance, DestStateFips, TotalAddGTime FROM mytable WHERE LateAircraftDelay IN (127) AND DivReachedDest NOT IN (1, 0, -9999) AND CancellationCode BETWEEN 'noodles' AND 'noodles' LIMIT 17
+SELECT DivDistance, Distance, DepTime FROM mytable WHERE  REGEXP_LIKE(DepTimeBlk, '0800-085.*') AND DivLongestGTimes IN (149.0, 22.0, 124.0) OR AirlineID BETWEEN 20355 AND 20366 ORDER BY DistanceGroup, DestWac, DestCityName LIMIT 19
+SELECT DivDistance, DivAirportSeqIDs FROM mytable ORDER BY DepartureDelayGroups, OriginState LIMIT 6
+SELECT DivDistance, Diverted FROM mytable ORDER BY FlightDate, DivReachedDest, DayofMonth LIMIT 23
+SELECT DivDistance, NASDelay, OriginWac FROM mytable WHERE ArrTimeBlk >= '1400-1459' AND ArrDel15 IN (1, 0) ORDER BY OriginStateFips LIMIT 24
+SELECT DivLongestGTimes FROM mytable ORDER BY SecurityDelay, ArrDelayMinutes LIMIT 21
+SELECT DivLongestGTimes, ArrTimeBlk, DestCityName FROM mytable WHERE DivAirportIDs <= 13024 OR Quarter BETWEEN 1 AND 1 AND DestAirportSeqID NOT IN (1393303, 1164802) ORDER BY OriginState, TaxiIn, "Month" LIMIT 0
+SELECT DivLongestGTimes, DayofMonth FROM mytable WHERE DestCityName BETWEEN 'Hilo, HI' AND 'Boston, MA' AND CarrierDelay BETWEEN 17 AND 141 OR ArrDelayMinutes = 93.0 ORDER BY OriginStateFips, Flights LIMIT 0
+SELECT DivLongestGTimes, DepDelay FROM mytable WHERE FlightDate NOT IN ('2014-01-06', '2014-11-29') ORDER BY ActualElapsedTime, FlightDate LIMIT 17
+SELECT DivLongestGTimes, Distance, CancellationCode FROM mytable WHERE OriginAirportSeqID BETWEEN 1445702 AND 1484304 OR TaxiIn BETWEEN 8 AND 30 AND Cancelled IN (1, 0) ORDER BY DistanceGroup, LateAircraftDelay, NASDelay LIMIT 2
+SELECT DivLongestGTimes, DistanceGroup FROM mytable WHERE DestState = 'NV' LIMIT 14
+SELECT DivLongestGTimes, Flights FROM mytable WHERE DestCityMarketID BETWEEN 34524 AND 30155 ORDER BY DivActualElapsedTime LIMIT 27
+SELECT DivLongestGTimes, OriginAirportSeqID FROM mytable WHERE DivAirports IN ('MDY', 'RNO', 'DRO', 'ATW') OR DestStateFips BETWEEN 13 AND 28 ORDER BY CancellationCode, OriginWac LIMIT 0
+SELECT DivLongestGTimes, TotalAddGTime FROM mytable WHERE WeatherDelay <> 9 AND DivDistance = 417 OR DestStateFips BETWEEN 19 AND 5 LIMIT 0
+SELECT DivReachedDest FROM mytable ORDER BY DistanceGroup, OriginStateFips, WeatherDelay LIMIT 17
+SELECT DivReachedDest FROM mytable WHERE ArrivalDelayGroups BETWEEN -1 AND 5 ORDER BY TailNum LIMIT 20
+SELECT DivReachedDest FROM mytable WHERE DivReachedDest = -9999 ORDER BY OriginCityMarketID, Diverted LIMIT 3
+SELECT DivReachedDest FROM mytable WHERE SecurityDelay NOT IN (1, 0, 4, 27, -9999) OR DivArrDelay = 322 ORDER BY Origin, CRSDepTime LIMIT 7
+SELECT DivReachedDest, ArrDelayMinutes FROM mytable WHERE DivTotalGTimes BETWEEN 164 AND 138 LIMIT 20
+SELECT DivReachedDest, CarrierDelay, WheelsOn FROM mytable ORDER BY OriginCityMarketID, OriginCityName, DaysSinceEpoch LIMIT 20
+SELECT DivReachedDest, DayofMonth FROM mytable WHERE TotalAddGTime BETWEEN 19 AND 40 AND Diverted BETWEEN 1 AND 1 AND DayOfWeek BETWEEN 3 AND 7 LIMIT 10
+SELECT DivReachedDest, DepDelay, Dest FROM mytable WHERE ArrDelay <> 363.0 OR WheelsOff BETWEEN 1836 AND 905 OR DivReachedDest BETWEEN 1 AND 1 ORDER BY DayofMonth LIMIT 11
+SELECT DivReachedDest, DestWac, DivActualElapsedTime FROM mytable WHERE DepTimeBlk IN ('2200-2259', '0700-0759', '0800-0859', '1400-1459', '1800-1859') OR CRSElapsedTime >= 196 OR AirTime BETWEEN 163 AND 251 ORDER BY WheelsOn, ArrivalDelayGroups LIMIT 7
+SELECT DivReachedDest, Diverted, OriginAirportID FROM mytable WHERE DivTailNums >= 'N675MQ' OR DestState BETWEEN 'VI' AND 'VT' AND DepDelayMinutes BETWEEN 82.0 AND 487.0 LIMIT 18
+SELECT DivReachedDest, FlightDate, Origin FROM mytable WHERE ActualElapsedTime BETWEEN 310 AND 423 OR CRSDepTime NOT IN (1454, 1248, 1737, 1036) AND TailNum BETWEEN 'N37267' AND 'N104UW' ORDER BY CRSArrTime, "Month" LIMIT 23
+SELECT DivReachedDest, FlightNum, DepDelayMinutes FROM mytable WHERE SecurityDelay BETWEEN 8 AND 0 ORDER BY Dest, ArrDelay LIMIT 14
+SELECT DivReachedDest, NASDelay FROM mytable WHERE CRSElapsedTime = 255 LIMIT 29
+SELECT DivReachedDest, TailNum FROM mytable WHERE DivTotalGTimes BETWEEN 32 AND 90 AND WheelsOn NOT IN (2017, 812, 1521, 1541, 928) AND DivAirports BETWEEN 'LAS' AND 'SYR' ORDER BY DepTime LIMIT 29
+SELECT DivTailNums FROM mytable ORDER BY NASDelay LIMIT 13
+SELECT DivTailNums FROM mytable WHERE AirTime NOT IN (276, 11) OR CarrierDelay NOT IN (201) LIMIT 29
+SELECT DivTailNums, "Month", CRSElapsedTime FROM mytable LIMIT 21
+SELECT DivTailNums, TailNum, DestCityName FROM mytable WHERE LongestAddGTime BETWEEN 24 AND 69 OR "Month" IN (12, 5) AND DepDel15 = -9999 ORDER BY DivArrDelay, ArrDelayMinutes LIMIT 2
+SELECT DivTotalGTimes FROM mytable LIMIT 5
+SELECT DivTotalGTimes FROM mytable WHERE ArrDelay BETWEEN 349.0 AND 323.0 OR DivWheelsOffs IN (919, 951, 1705) ORDER BY "Year" LIMIT 6
+SELECT DivTotalGTimes FROM mytable WHERE ArrTimeBlk NOT IN ('1200-1259') ORDER BY DayOfWeek, DestState, UniqueCarrier LIMIT 16
+SELECT DivTotalGTimes FROM mytable WHERE DestAirportID >= 13486 OR DivActualElapsedTime BETWEEN 174 AND 207 AND LateAircraftDelay BETWEEN 109 AND 85 ORDER BY DivDistance, TailNum, UniqueCarrier LIMIT 27
+SELECT DivTotalGTimes FROM mytable WHERE DivActualElapsedTime BETWEEN 214 AND 461 OR DivDistance BETWEEN 1262 AND 449 AND CRSArrTime BETWEEN 2102 AND 2221 ORDER BY DepTime, DestCityName, AirlineID LIMIT 16
+SELECT DivTotalGTimes FROM mytable WHERE DivArrDelay NOT IN (1280, 42, 331) OR DepDel15 NOT IN (1, 0, -9999) AND DepDel15 > 0 LIMIT 23
+SELECT DivTotalGTimes FROM mytable WHERE TailNum NOT IN ('N8612K', 'N918MQ', 'N954WN') OR Quarter BETWEEN 1 AND 1 ORDER BY Dest, DepTimeBlk LIMIT 15
+SELECT DivTotalGTimes, DestAirportSeqID, TotalAddGTime FROM mytable WHERE CarrierDelay > 148 ORDER BY DivDistance, WheelsOff, TotalAddGTime LIMIT 18
+SELECT DivTotalGTimes, DestCityMarketID, DivAirportIDs FROM mytable WHERE UniqueCarrier >= 'WN' LIMIT 15
+SELECT DivWheelsOffs FROM mytable ORDER BY DepDelay, ArrDel15 LIMIT 4
+SELECT DivWheelsOffs FROM mytable WHERE ArrDelayMinutes >= 240.0 AND DepTimeBlk BETWEEN '1200-1259' AND '1400-1459' AND Distance BETWEEN 543 AND 900 LIMIT 11
+SELECT DivWheelsOffs FROM mytable WHERE Carrier < 'MQ' LIMIT 4
+SELECT DivWheelsOffs FROM mytable WHERE DaysSinceEpoch <> 16253 AND Flights BETWEEN 1 AND 1 OR Quarter > 1 ORDER BY Origin, TaxiOut LIMIT 17
+SELECT DivWheelsOffs FROM mytable WHERE Flights > 1 OR CRSArrTime = 119 OR  REGEXP_LIKE(DestState, '.*S') LIMIT 10
+SELECT DivWheelsOffs FROM mytable WHERE NASDelay > 53 OR "Year" NOT IN (2014) OR TailNum BETWEEN 'N407WN' AND 'N576SW' ORDER BY DivReachedDest, DepDelayMinutes, OriginWac LIMIT 18
+SELECT DivWheelsOffs, DestCityMarketID FROM mytable WHERE DestStateName BETWEEN 'Virginia' AND 'Alabama' AND CRSArrTime >= 2204 AND DepartureDelayGroups BETWEEN 2 AND 11 LIMIT 6
+SELECT DivWheelsOffs, Origin FROM mytable WHERE DivTailNums IN ('N413SW', 'N248WN', 'N983DL') OR ArrDelay BETWEEN 28.0 AND 184.0 ORDER BY DestStateFips, ArrTime LIMIT 11
+SELECT DivWheelsOffs, OriginStateFips FROM mytable WHERE DivActualElapsedTime BETWEEN 1100 AND 472 ORDER BY ArrivalDelayGroups LIMIT 28
+SELECT DivWheelsOns FROM mytable WHERE ArrTimeBlk <> '1700-1759' OR OriginCityName IN ('Aspen, CO', 'Little Rock, AR', 'Charleston, SC', 'Saginaw/Bay City/Midland, MI') ORDER BY Quarter, DepDelayMinutes, OriginStateName LIMIT 6
+SELECT DivWheelsOns FROM mytable WHERE DivWheelsOns IN (1523, 932, 1706) OR DivAirportLandings BETWEEN 9 AND 1 OR UniqueCarrier > 'MQ' ORDER BY DivReachedDest LIMIT 21
+SELECT DivWheelsOns FROM mytable WHERE Quarter <= 3 AND DepDelay = 42.0 OR ArrTime = 2229 ORDER BY ActualElapsedTime, CarrierDelay, CancellationCode LIMIT 24
+SELECT DivWheelsOns, ArrTime, Origin FROM mytable WHERE ArrDel15 IN (1, 0, -9999) LIMIT 4
+SELECT DivWheelsOns, Carrier FROM mytable WHERE DepDel15 IN (0, -9999) OR WeatherDelay = 32 AND DivTotalGTimes BETWEEN 1 AND 14 ORDER BY FlightNum, UniqueCarrier
+SELECT DivWheelsOns, DestAirportSeqID FROM mytable WHERE OriginStateFips IN (1, 16, 28) OR DestCityMarketID IN (32467, 35249, 33830, 32320, 32891) OR OriginWac <> 61 ORDER BY DivActualElapsedTime, DestWac, TotalAddGTime LIMIT 11
+SELECT DivWheelsOns, DistanceGroup, WeatherDelay FROM mytable ORDER BY CarrierDelay, AirTime LIMIT 3
+SELECT DivWheelsOns, DivAirports, DestStateFips FROM mytable ORDER BY DepDel15, AirTime LIMIT 21
+SELECT DivWheelsOns, DivAirports, DivArrDelay FROM mytable ORDER BY DepDelayMinutes LIMIT 2
+SELECT DivWheelsOns, Flights, DivAirportLandings FROM mytable WHERE WheelsOn NOT IN (1140) AND Cancelled <= 0 LIMIT 13
+SELECT DivWheelsOns, LateAircraftDelay, DivAirportSeqIDs FROM mytable ORDER BY DestState, CarrierDelay, Origin LIMIT 7
+SELECT DivWheelsOns, OriginWac, "Year" FROM mytable WHERE DestWac NOT IN (81, 83, 62, 85, 53) AND ArrDelayMinutes >= 120.0 ORDER BY OriginStateFips, TaxiIn LIMIT 25
+SELECT DivWheelsOns, TaxiIn, Diverted FROM mytable WHERE  REGEXP_LIKE(OriginStateName, 'Conne.*ticut') OR ArrDelay >= 178.0 AND ArrDel15 = 1 LIMIT 5
+SELECT DivWheelsOns, "Year" FROM mytable WHERE Distance = 902 OR OriginAirportID = 12982 AND Diverted IN (1) ORDER BY DivArrDelay, CancellationCode LIMIT 3
+SELECT Diverted FROM mytable ORDER BY DepDelayMinutes LIMIT 10
+SELECT Diverted FROM mytable WHERE DayofMonth NOT IN (20, 4, 18, 15, 14) ORDER BY CancellationCode LIMIT 14
+SELECT Diverted FROM mytable WHERE Flights <= 1 OR Flights <> 1 ORDER BY TaxiOut
+SELECT Diverted, AirlineID FROM mytable WHERE DayofMonth NOT IN (31) AND SecurityDelay >= 10 OR DestWac IN (5, 41, 86, 87) ORDER BY WheelsOff LIMIT 27
+SELECT Diverted, DaysSinceEpoch FROM mytable WHERE OriginWac IN (44, 74) ORDER BY Diverted, DestStateName LIMIT 23
+SELECT Diverted, DepDel15 FROM mytable LIMIT 0
+SELECT Diverted, DestCityName FROM mytable LIMIT 16
+SELECT Diverted, FlightDate FROM mytable ORDER BY Diverted, AirTime LIMIT 12
+SELECT Diverted, OriginCityName, DepDel15 FROM mytable WHERE TaxiIn NOT IN (79, 75, 89) AND DestCityName > 'San Angelo, TX' ORDER BY Origin LIMIT 29
+SELECT Diverted, WeatherDelay FROM mytable WHERE OriginCityMarketID BETWEEN 32896 AND 33785 AND DepTimeBlk IN ('2200-2259', '2100-2159', '2300-2359', '1200-1259') LIMIT 20
+SELECT FirstDepTime FROM mytable LIMIT 6
+SELECT FirstDepTime FROM mytable WHERE DepTime <> 1602 AND ActualElapsedTime = 123 OR LateAircraftDelay = 21 LIMIT 21
+SELECT FirstDepTime FROM mytable WHERE WheelsOff BETWEEN 2205 AND 2230 ORDER BY Carrier, DivArrDelay LIMIT 10
+SELECT FirstDepTime FROM mytable WHERE "Year" NOT IN (2014) ORDER BY DistanceGroup, DepDelayMinutes LIMIT 23
+SELECT FirstDepTime, AirlineID, CRSElapsedTime FROM mytable ORDER BY ArrDel15, TailNum LIMIT 1
+SELECT FirstDepTime, ArrTimeBlk FROM mytable ORDER BY DivAirportLandings, CRSArrTime, DestAirportID LIMIT 18
+SELECT FirstDepTime, Carrier FROM mytable WHERE CRSDepTime <> 1826 OR FirstDepTime BETWEEN 2146 AND 1540 AND "Year" >= 2014 ORDER BY WeatherDelay, DivArrDelay LIMIT 9
+SELECT FirstDepTime, DaysSinceEpoch FROM mytable WHERE NASDelay = 150 LIMIT 29
+SELECT FirstDepTime, DestCityMarketID FROM mytable WHERE OriginStateName NOT IN ('Idaho', 'Massachusetts', 'Wisconsin') AND DestStateName BETWEEN 'Tennessee' AND 'Pennsylvania' OR AirTime >= 376 LIMIT 19
+SELECT FirstDepTime, DestCityMarketID, DaysSinceEpoch FROM mytable LIMIT 3
+SELECT FirstDepTime, DestStateFips FROM mytable WHERE NASDelay NOT IN (202, 305, 16, 60) AND DivTailNums IN ('N373SW') LIMIT 17
+SELECT FirstDepTime, DestStateName, Diverted FROM mytable LIMIT 13
+SELECT FirstDepTime, DestWac, ArrTimeBlk FROM mytable WHERE DivAirports IN ('ISN', 'AGS', 'DLH', 'ANC', 'ACV') OR FlightDate BETWEEN '2014-08-19' AND '2014-10-09' OR ArrTime NOT IN (1027, 130) ORDER BY WheelsOff LIMIT 7
+SELECT FirstDepTime, DistanceGroup FROM mytable ORDER BY Dest LIMIT 3
+SELECT FirstDepTime, DivAirportLandings, CRSElapsedTime FROM mytable WHERE OriginState BETWEEN 'VI' AND 'KS' OR DestStateFips BETWEEN 23 AND 42 ORDER BY DepDelay, ArrTime, DestCityName LIMIT 16
+SELECT FirstDepTime, DivAirportLandings, TaxiOut FROM mytable ORDER BY ArrTime, TotalAddGTime LIMIT 19
+SELECT FirstDepTime, DivReachedDest FROM mytable WHERE DestCityMarketID IN (34574) ORDER BY WheelsOff, WheelsOn, ArrTimeBlk LIMIT 20
+SELECT FirstDepTime, DivTailNums, ArrTime FROM mytable WHERE CarrierDelay = 375 ORDER BY DestCityName LIMIT 8
+SELECT FlightDate FROM mytable LIMIT 24
+SELECT FlightDate FROM mytable ORDER BY CRSDepTime, CarrierDelay, DivAirportLandings LIMIT 7
+SELECT FlightDate, ArrDelayMinutes, DaysSinceEpoch FROM mytable ORDER BY Quarter, OriginStateFips, Distance LIMIT 22
+SELECT FlightDate, ArrTimeBlk, ArrivalDelayGroups FROM mytable LIMIT 18
+SELECT FlightDate, DaysSinceEpoch FROM mytable WHERE CarrierDelay IN (70, 414) OR LateAircraftDelay NOT IN (63) OR "Month" <= 1 LIMIT 23
+SELECT FlightDate, DepDel15, CRSElapsedTime FROM mytable WHERE OriginCityMarketID >= 33244 AND OriginCityName IN ('Seattle, WA', 'Eagle, CO') AND DestCityName <= 'San Luis Obispo, CA' ORDER BY DivDistance, CRSArrTime LIMIT 20
+SELECT FlightDate, Dest, DivActualElapsedTime FROM mytable WHERE DivLongestGTimes < 135.0 ORDER BY WeatherDelay, DaysSinceEpoch LIMIT 22
+SELECT FlightDate, DivAirports, DestWac FROM mytable ORDER BY AirlineID, ArrTime LIMIT 11
+SELECT FlightDate, DivTotalGTimes, DestAirportSeqID FROM mytable ORDER BY SecurityDelay, DepTimeBlk, Distance LIMIT 12
+SELECT FlightDate, OriginCityName FROM mytable WHERE OriginCityName BETWEEN 'Crescent City, CA' AND 'Casper, WY' AND DayOfWeek IN (1, 2, 3, 7) OR Distance = 77 ORDER BY Origin, "Year", TaxiOut LIMIT 18
+SELECT FlightDate, TotalAddGTime FROM mytable WHERE DivAirports < 'SIT' OR DepDelay NOT IN (329.0, 39.0) ORDER BY FlightNum LIMIT 0
+SELECT FlightDate, WheelsOn FROM mytable ORDER BY SecurityDelay, DepDel15, Flights LIMIT 20
+SELECT FlightNum FROM mytable ORDER BY NASDelay, Origin LIMIT 23
+SELECT FlightNum FROM mytable WHERE ArrDel15 NOT IN (0, 1, -9999) OR WheelsOn = 109 OR DayofMonth NOT IN (25, 14) ORDER BY DivActualElapsedTime, Diverted, ArrTimeBlk LIMIT 2
+SELECT FlightNum FROM mytable WHERE CarrierDelay BETWEEN 4 AND 78 ORDER BY ArrivalDelayGroups LIMIT 27
+SELECT FlightNum FROM mytable WHERE DayofMonth BETWEEN 18 AND 11 AND NASDelay BETWEEN 73 AND 39 OR Cancelled NOT IN (0) ORDER BY LateAircraftDelay, OriginState, Cancelled LIMIT 17
+SELECT FlightNum FROM mytable WHERE LateAircraftDelay > 132 LIMIT 25
+SELECT FlightNum, ActualElapsedTime FROM mytable WHERE ArrTime = 1004 OR ArrDelay >= 323.0 ORDER BY FlightNum, OriginCityMarketID, DestWac LIMIT 13
+SELECT FlightNum, ArrDelayMinutes FROM mytable ORDER BY DepDelay, DivAirportLandings, DivArrDelay LIMIT 13
+SELECT FlightNum, ArrDelayMinutes FROM mytable WHERE DivWheelsOffs = 1135 AND  REGEXP_LIKE(UniqueCarrier, '.*9') ORDER BY DayOfWeek, DestAirportID, DestCityName LIMIT 24
+SELECT FlightNum, ArrTime, OriginAirportID FROM mytable WHERE CRSElapsedTime <> 191 OR DepDelay = 33.0 AND OriginState BETWEEN 'WA' AND 'KY' ORDER BY DistanceGroup, DestStateFips, Origin LIMIT 1
+SELECT FlightNum, ArrTimeBlk FROM mytable WHERE "Year" NOT IN (2014) AND OriginAirportSeqID = 1307602 LIMIT 3
+SELECT FlightNum, DayofMonth FROM mytable WHERE DestAirportSeqID IN (1148102, 1532302, 1104103, 1383002) AND Dest NOT IN ('PAH') ORDER BY "Month", DayOfWeek LIMIT 7
+SELECT FlightNum, Dest, TaxiIn FROM mytable WHERE DestCityMarketID IN (32896, 32556, 35841, 34057) AND DestWac = 81 LIMIT 21
+SELECT FlightNum, DestAirportID FROM mytable WHERE OriginStateFips <= 16 AND Carrier NOT IN ('F9', 'WN', 'FL') AND LateAircraftDelay BETWEEN 61 AND 98 ORDER BY DestState, Flights LIMIT 27
+SELECT FlightNum, DestAirportID, OriginAirportID FROM mytable ORDER BY Quarter, FirstDepTime, DivAirportLandings LIMIT 14
+SELECT FlightNum, DestState FROM mytable WHERE LateAircraftDelay = 108 LIMIT 18
+SELECT FlightNum, DestStateFips, TaxiOut FROM mytable LIMIT 21
+SELECT FlightNum, DivTailNums, DestCityMarketID FROM mytable WHERE DivTailNums = 'N8617E' OR OriginCityMarketID BETWEEN 32600 AND 31775 LIMIT 20
+SELECT FlightNum, DivWheelsOns, DestState FROM mytable WHERE DayOfWeek = 4 AND AirlineID BETWEEN 19393 AND 21171 OR OriginCityName NOT IN ('St. George, UT') LIMIT 22
+SELECT FlightNum, Diverted, DestWac FROM mytable WHERE DivTotalGTimes <= 85 OR Distance NOT IN (1204, 1192) ORDER BY DepDelayMinutes, ArrTime, DestWac LIMIT 25
+SELECT FlightNum, FlightDate, TotalAddGTime FROM mytable WHERE TotalAddGTime BETWEEN 34 AND 167 AND CRSElapsedTime = 556 ORDER BY TailNum LIMIT 11
+SELECT FlightNum, LateAircraftDelay FROM mytable LIMIT 1
+SELECT FlightNum, OriginStateName FROM mytable WHERE Distance BETWEEN 901 AND 1144 ORDER BY DestState, FlightDate LIMIT 10
+SELECT FlightNum, WeatherDelay, OriginAirportID FROM mytable WHERE DivAirportSeqIDs BETWEEN 1091802 AND 1029904 AND Origin > 'LGB' LIMIT 19
+SELECT Flights FROM mytable WHERE ArrTimeBlk BETWEEN '2200-2259' AND '2300-2359' ORDER BY DestCityMarketID LIMIT 8
+SELECT Flights FROM mytable WHERE DivTotalGTimes >= 36 OR CarrierDelay <= 32 ORDER BY DepTime, DestCityMarketID, DivArrDelay LIMIT 29
+SELECT Flights, CRSElapsedTime FROM mytable WHERE TaxiIn BETWEEN 75 AND 107 AND DestAirportID NOT IN (11624, 11049) AND DestState = 'AZ' ORDER BY DestStateFips LIMIT 14
+SELECT Flights, DaysSinceEpoch FROM mytable WHERE CRSArrTime BETWEEN 813 AND 1616 ORDER BY OriginStateName LIMIT 6
+SELECT Flights, DepDelayMinutes, WheelsOn FROM mytable WHERE "Month" NOT IN (1) OR CRSDepTime BETWEEN 1427 AND 1906 AND DestState IN ('MS', 'IN') ORDER BY OriginCityMarketID, SecurityDelay, DestStateName LIMIT 17
+SELECT Flights, DepTime FROM mytable WHERE WeatherDelay NOT IN (10, 100) AND FlightDate BETWEEN '2014-01-20' AND '2014-01-17' LIMIT 24
+SELECT Flights, DistanceGroup FROM mytable WHERE FlightNum <= 58 AND DestCityMarketID > 30141 ORDER BY DivAirportLandings, TailNum LIMIT 24
+SELECT Flights, Diverted FROM mytable WHERE SecurityDelay IN (0, 3, 41, 10) LIMIT 19
+SELECT Flights, FlightDate FROM mytable ORDER BY DepartureDelayGroups, SecurityDelay LIMIT 4
+SELECT Flights, OriginWac FROM mytable WHERE WeatherDelay IN (68, 37, 38) ORDER BY NASDelay LIMIT 15
+SELECT Flights, TaxiIn, DivAirportLandings FROM mytable WHERE DestCityMarketID = 31637 ORDER BY OriginCityName
+SELECT Flights, UniqueCarrier FROM mytable WHERE DivTotalGTimes BETWEEN 107 AND 105 ORDER BY DepartureDelayGroups, DepTimeBlk LIMIT 7
+SELECT Flights, WeatherDelay, SecurityDelay FROM mytable WHERE DestAirportID <> 11308 ORDER BY TaxiIn, DestCityName LIMIT 24
+SELECT LateAircraftDelay FROM mytable LIMIT 15
+SELECT LateAircraftDelay FROM mytable ORDER BY DivActualElapsedTime LIMIT 21
+SELECT LateAircraftDelay FROM mytable WHERE TailNum IN ('N684DA', 'N299WN', 'N765US', 'N5CCAA', 'N12924') ORDER BY LongestAddGTime, DepTime, DestStateName LIMIT 22
+SELECT LateAircraftDelay, ArrTime FROM mytable ORDER BY CarrierDelay, "Year", DestCityMarketID LIMIT 20
+SELECT LateAircraftDelay, CarrierDelay FROM mytable WHERE TaxiOut BETWEEN 89 AND 126 AND OriginState IN ('SC', 'KS', 'RI', 'MO', 'DE') AND DestCityMarketID BETWEEN 32177 AND 31122 ORDER BY DivActualElapsedTime, DestStateFips, DepTime LIMIT 19
+SELECT LateAircraftDelay, DestAirportID, CRSDepTime FROM mytable WHERE DepDel15 <= 1 OR OriginStateFips IN (49, 47, 35, 13) ORDER BY LateAircraftDelay, "Month", DaysSinceEpoch LIMIT 4
+SELECT LateAircraftDelay, Flights, OriginStateName FROM mytable WHERE ArrTime BETWEEN 1234 AND 1540 ORDER BY DivReachedDest, DestStateName, CRSDepTime LIMIT 22
+SELECT LateAircraftDelay, Origin FROM mytable WHERE Quarter NOT IN (1) LIMIT 11
+SELECT LateAircraftDelay, OriginCityName, AirTime FROM mytable ORDER BY TotalAddGTime, AirTime, WheelsOn
+SELECT LateAircraftDelay, OriginStateName, DivActualElapsedTime FROM mytable WHERE DivAirportLandings >= 0 OR DivWheelsOffs IN (1612, 2356, 1012, 326) LIMIT 3
+SELECT LateAircraftDelay, TotalAddGTime FROM mytable WHERE LateAircraftDelay <= 87 OR UniqueCarrier = 'AA' OR UniqueCarrier >= 'WN' ORDER BY DepDelayMinutes, Cancelled, DepDel15 LIMIT 14
+SELECT LateAircraftDelay, "Year", DepTimeBlk FROM mytable WHERE ArrDel15 = 1 OR DivAirportSeqIDs BETWEEN 1495203 AND 1131502 OR DivAirportLandings NOT IN (0, 1, 2, 9) ORDER BY SecurityDelay, CancellationCode LIMIT 26
+SELECT LongestAddGTime FROM mytable ORDER BY AirlineID, CRSElapsedTime
+SELECT LongestAddGTime FROM mytable WHERE DistanceGroup BETWEEN 11 AND 5 AND "Month" BETWEEN 1 AND 7 OR LongestAddGTime BETWEEN 142 AND 13 ORDER BY LateAircraftDelay, FirstDepTime, ArrTime LIMIT 5
+SELECT LongestAddGTime FROM mytable WHERE OriginStateFips BETWEEN 31 AND 31 ORDER BY NASDelay, DestAirportSeqID, DestCityMarketID LIMIT 29
+SELECT LongestAddGTime, CRSElapsedTime, ArrDelay FROM mytable ORDER BY DivArrDelay, LongestAddGTime, OriginAirportID LIMIT 1
+SELECT LongestAddGTime, CancellationCode, OriginStateName FROM mytable WHERE CRSDepTime <= 1106 ORDER BY TaxiIn, DestAirportID, AirlineID LIMIT 20
+SELECT LongestAddGTime, Cancelled, DivTailNums FROM mytable ORDER BY DestWac, DivActualElapsedTime, DayOfWeek LIMIT 23
+SELECT LongestAddGTime, DivTailNums FROM mytable WHERE Flights <= 1 OR CRSDepTime BETWEEN 1911 AND 1129 LIMIT 15
+SELECT LongestAddGTime, OriginCityName, DayOfWeek FROM mytable WHERE ArrTime BETWEEN 1537 AND 2258 AND DivAirportLandings >= 0 AND DivTotalGTimes < 99 ORDER BY OriginState, "Month" LIMIT 24
+SELECT LongestAddGTime, OriginStateFips, DestStateFips FROM mytable WHERE DivActualElapsedTime = 141 ORDER BY Quarter, OriginStateName, Flights LIMIT 20
+SELECT LongestAddGTime, TotalAddGTime FROM mytable LIMIT 16
+SELECT LongestAddGTime, TotalAddGTime, DestCityMarketID FROM mytable WHERE DestStateName BETWEEN 'Puerto Rico' AND 'Connecticut' ORDER BY ArrDelay LIMIT 26
+SELECT LongestAddGTime, WeatherDelay FROM mytable ORDER BY CarrierDelay, UniqueCarrier, TailNum LIMIT 18
+SELECT LongestAddGTime, WeatherDelay FROM mytable WHERE TaxiIn IN (79, 109, 52, 38) OR SecurityDelay BETWEEN 0 AND -9999 AND FirstDepTime IN (2145, 1856, 1902) ORDER BY WheelsOn LIMIT 7
+SELECT MIN(div(DaysSinceEpoch,2)) FROM mytable
+SELECT "Month" FROM mytable LIMIT 27
+SELECT "Month" FROM mytable WHERE  REGEXP_LIKE(DestState, 'D.*') AND DivArrDelay BETWEEN 96 AND 935 LIMIT 14
+SELECT "Month" FROM mytable WHERE DivDistance NOT IN (114, 116, 229) AND TaxiIn = 63 ORDER BY CarrierDelay, DestStateName LIMIT 0
+SELECT "Month" FROM mytable WHERE DivReachedDest IN (1) AND CRSArrTime >= 843 ORDER BY OriginStateFips, TotalAddGTime LIMIT 14
+SELECT "Month", CRSArrTime, DestCityName FROM mytable WHERE DestAirportSeqID BETWEEN 1452002 AND 1129202 AND OriginAirportSeqID > 1473003 AND DestCityName NOT IN ('St. Augustine, FL') ORDER BY ArrTimeBlk LIMIT 1
+SELECT "Month", CancellationCode FROM mytable WHERE DepTime IN (2243, 615, 1957) ORDER BY DivAirportLandings, OriginStateFips LIMIT 7
+SELECT "Month", DivTailNums, ArrivalDelayGroups FROM mytable WHERE DestStateName <> 'Hawaii' ORDER BY DayOfWeek, UniqueCarrier, DestStateName LIMIT 29
+SELECT "Month", DivTailNums, DepDelay FROM mytable WHERE DestState <> 'MO' AND DivLongestGTimes >= 27.0 ORDER BY DepDelayMinutes LIMIT 11
+SELECT "Month", OriginStateName, DestStateName FROM mytable ORDER BY Origin, DestCityMarketID LIMIT 16
+SELECT NASDelay FROM mytable WHERE ArrDelayMinutes = 188.0 LIMIT 12
+SELECT NASDelay FROM mytable WHERE ArrDelayMinutes BETWEEN 54.0 AND 208.0 AND CancellationCode BETWEEN 'B' AND 'noodles' OR OriginAirportID BETWEEN 11193 AND 10781 ORDER BY OriginState, CRSArrTime LIMIT 4
+SELECT NASDelay FROM mytable WHERE DepDelay IN (192.0, 23.0, 261.0, 178.0, 326.0) OR DayofMonth = 24 AND FirstDepTime BETWEEN 1440 AND 1733 ORDER BY WeatherDelay, ArrivalDelayGroups LIMIT 25
+SELECT NASDelay FROM mytable WHERE Dest BETWEEN 'SPI' AND 'SAV' OR DepDel15 BETWEEN 1 AND -9999 ORDER BY Origin LIMIT 9
+SELECT NASDelay, AirTime FROM mytable WHERE DivAirportIDs IN (14869, 11193, 13342, 11003, 10521) ORDER BY Origin LIMIT 15
+SELECT NASDelay, ArrDelay FROM mytable LIMIT 8
+SELECT NASDelay, ArrTimeBlk FROM mytable WHERE TaxiIn <> 10 OR ArrDelay NOT IN (96.0, 410.0, 231.0, 112.0) ORDER BY DestAirportID LIMIT 23
+SELECT NASDelay, DestCityMarketID FROM mytable ORDER BY DestAirportSeqID, "Month" LIMIT 21
+SELECT NASDelay, DestCityName, DestStateName FROM mytable WHERE DestWac NOT IN (5, 4, 52, 72, 74) ORDER BY Dest, "Month" LIMIT 4
+SELECT NASDelay, Distance FROM mytable WHERE ArrivalDelayGroups IN (3, 4, 5, 7) OR  REGEXP_LIKE(Origin, 'Y.*K') AND DayofMonth BETWEEN 10 AND 20 ORDER BY CarrierDelay LIMIT 27
+SELECT NASDelay, DivTotalGTimes, DayOfWeek FROM mytable WHERE DivAirportLandings NOT IN (2, 9) ORDER BY ArrDel15, AirlineID, DestAirportID LIMIT 2
+SELECT NASDelay, Diverted, DestWac FROM mytable WHERE ArrDelayMinutes = 180.0 ORDER BY WheelsOn, Distance LIMIT 8
+SELECT NASDelay, Origin FROM mytable WHERE DivWheelsOns BETWEEN 2237 AND 1408 LIMIT 20
+SELECT NASDelay, Origin, OriginAirportID FROM mytable WHERE DayOfWeek BETWEEN 5 AND 5 AND Dest BETWEEN 'WRG' AND 'GUC' AND DestCityName BETWEEN 'Topeka, KS' AND 'Pocatello, ID' ORDER BY ActualElapsedTime, DayofMonth, OriginStateName LIMIT 28
+SELECT Origin FROM mytable WHERE ArrTimeBlk BETWEEN '0600-0659' AND '2100-2159' OR DistanceGroup NOT IN (7, 11) ORDER BY FlightDate LIMIT 26
+SELECT Origin FROM mytable WHERE CarrierDelay IN (111, 141) LIMIT 29
+SELECT Origin FROM mytable WHERE DayOfWeek BETWEEN 1 AND 6 ORDER BY DivArrDelay, DivDistance, UniqueCarrier LIMIT 5
+SELECT Origin, ActualElapsedTime, DivTotalGTimes FROM mytable LIMIT 25
+SELECT Origin, DepDelay FROM mytable WHERE DestWac = 35 AND DivLongestGTimes IN (153.0, 19.0) ORDER BY ArrivalDelayGroups LIMIT 12
+SELECT Origin, DivTailNums FROM mytable WHERE DivDistance BETWEEN 128 AND 77 ORDER BY FirstDepTime, ArrDel15 LIMIT 2
+SELECT Origin, DivTotalGTimes, OriginStateName FROM mytable LIMIT 26
+SELECT Origin, LongestAddGTime, DivTailNums FROM mytable WHERE DestCityMarketID NOT IN (30918, 33792, 35165, 34109) OR CRSArrTime < 1202 AND Flights BETWEEN 1 AND 1 ORDER BY SecurityDelay, "Month", Carrier LIMIT 26
+SELECT Origin, "Month", OriginAirportSeqID FROM mytable WHERE DivTotalGTimes <= 182 OR DivAirportSeqIDs = 1228002 ORDER BY CarrierDelay, OriginCityName LIMIT 12
+SELECT Origin, OriginCityName, DestCityMarketID FROM mytable WHERE WheelsOff BETWEEN 1540 AND 2211 ORDER BY Origin, CancellationCode, DivDistance LIMIT 8
+SELECT Origin, OriginStateName, ArrDel15 FROM mytable WHERE DepDelayMinutes BETWEEN 110.0 AND 124.0 AND DepDelayMinutes NOT IN (151.0, 391.0, 51.0, 505.0, 187.0) AND CancellationCode IN ('C', 'A') ORDER BY ArrDelay LIMIT 24
+SELECT OriginAirportID FROM mytable WHERE CRSDepTime BETWEEN 959 AND 2056 AND  REGEXP_LIKE(ArrTimeBlk, '2000-.*059') ORDER BY DestStateFips LIMIT 9
+SELECT OriginAirportID FROM mytable WHERE "Month" BETWEEN 12 AND 7 OR TotalAddGTime = 12 OR Cancelled BETWEEN 1 AND 0 ORDER BY CRSElapsedTime LIMIT 12
+SELECT OriginAirportSeqID FROM mytable WHERE Origin = 'FCA' OR CRSArrTime BETWEEN 1521 AND 2305 ORDER BY DivDistance LIMIT 29
+SELECT OriginAirportSeqID, ArrDel15, UniqueCarrier FROM mytable WHERE DayOfWeek >= 3 OR DayofMonth <= 30 LIMIT 12
+SELECT OriginAirportSeqID, CRSArrTime FROM mytable WHERE FlightNum NOT IN (2438, 2642, 2012, 6051) OR DepDelayMinutes <> 973.0 OR WheelsOn BETWEEN 1544 AND 2344 ORDER BY DestStateName, AirlineID, CancellationCode LIMIT 12
+SELECT OriginAirportSeqID, DepDelay, OriginStateName FROM mytable WHERE Quarter BETWEEN 1 AND 1 LIMIT 29
+SELECT OriginAirportSeqID, DestAirportSeqID FROM mytable WHERE DestCityMarketID BETWEEN 35165 AND 35323 AND DestStateFips = 51 AND OriginCityName <= 'Manhattan/Ft. Riley, KS' ORDER BY Flights LIMIT 6
+SELECT OriginAirportSeqID, DestStateName, DayOfWeek FROM mytable ORDER BY DaysSinceEpoch, DayOfWeek LIMIT 11
+SELECT OriginAirportSeqID, DivLongestGTimes, ArrivalDelayGroups FROM mytable WHERE DepTime <> 922 ORDER BY Carrier, OriginStateName LIMIT 1
+SELECT OriginAirportSeqID, DivLongestGTimes, ArrivalDelayGroups FROM mytable WHERE TaxiOut BETWEEN 9 AND 37 OR DaysSinceEpoch BETWEEN 16090 AND 16080 ORDER BY TaxiOut LIMIT 0
+SELECT OriginAirportSeqID, DivReachedDest, LateAircraftDelay FROM mytable ORDER BY CarrierDelay, OriginWac LIMIT 0
+SELECT OriginAirportSeqID, OriginStateName FROM mytable WHERE ArrivalDelayGroups IN (-9999) AND Flights < 1 LIMIT 16
+SELECT OriginAirportSeqID, Quarter, DaysSinceEpoch FROM mytable WHERE OriginWac NOT IN (93, 39, 14) OR DepDel15 IN (1, 0, -9999) AND DaysSinceEpoch IN (16074, 16086) ORDER BY DayofMonth, OriginWac LIMIT 4
+SELECT OriginCityMarketID FROM mytable ORDER BY TaxiOut, OriginCityName LIMIT 26
+SELECT OriginCityMarketID FROM mytable WHERE OriginStateName <> 'Virginia' OR FlightNum IN (2943, 2359, 5054, 2909, 4865) OR ActualElapsedTime <> 232 LIMIT 1
+SELECT OriginCityMarketID, ArrTime FROM mytable WHERE "Year" < 2014 AND OriginState NOT IN ('PA', 'VI', 'IA', 'VA', 'RI') LIMIT 14
+SELECT OriginCityMarketID, CancellationCode, DivWheelsOffs FROM mytable WHERE WeatherDelay = 105 AND DivReachedDest = 0 OR DivAirports BETWEEN 'SMF' AND 'BOI' ORDER BY TaxiIn, DepTimeBlk
+SELECT OriginCityMarketID, Cancelled FROM mytable WHERE DepTime = 1220 AND ActualElapsedTime = 578 ORDER BY DivAirportLandings, DestStateFips LIMIT 0
+SELECT OriginCityMarketID, DayofMonth FROM mytable WHERE Dest BETWEEN 'MOD' AND 'RNO' AND DepartureDelayGroups BETWEEN 10 AND 12 LIMIT 14
+SELECT OriginCityMarketID, DayofMonth FROM mytable WHERE NASDelay = 168 AND TotalAddGTime = 106 OR WeatherDelay NOT IN (156, 218, 151, 41) ORDER BY ArrTimeBlk LIMIT 2
+SELECT OriginCityMarketID, DepDelay, CRSElapsedTime FROM mytable WHERE OriginAirportSeqID = 1133703 ORDER BY FlightNum, DestAirportSeqID LIMIT 27
+SELECT OriginCityMarketID, DepDelay, DayofMonth FROM mytable WHERE DayofMonth = 25 ORDER BY "Year", DestStateFips LIMIT 12
+SELECT OriginCityMarketID, DepTimeBlk, CRSArrTime FROM mytable WHERE Distance >= 600 ORDER BY DestState, TailNum, DestAirportID LIMIT 23
+SELECT OriginCityMarketID, Distance, DestAirportID FROM mytable ORDER BY ArrTime, DepTimeBlk LIMIT 2
+SELECT OriginCityMarketID, DistanceGroup, DepTime FROM mytable WHERE Flights = 1 AND ArrDelayMinutes BETWEEN 246.0 AND 181.0 AND DivAirportSeqIDs BETWEEN 1160302 AND 1186703 ORDER BY DepartureDelayGroups LIMIT 20
+SELECT OriginCityMarketID, DivAirportLandings, DestStateName FROM mytable WHERE OriginState NOT IN ('WY') AND ArrDel15 BETWEEN 1 AND -9999 ORDER BY ArrDelay, DestAirportID LIMIT 5
+SELECT OriginCityMarketID, DivAirportSeqIDs FROM mytable WHERE DestState BETWEEN 'CO' AND 'OK' ORDER BY ArrDelayMinutes, ArrDelay LIMIT 27
+SELECT OriginCityMarketID, DivAirportSeqIDs FROM mytable WHERE Origin < 'BUR' LIMIT 24
+SELECT OriginCityMarketID, Origin, ArrivalDelayGroups FROM mytable LIMIT 3
+SELECT OriginCityName FROM mytable WHERE ArrDelayMinutes <= 148.0 OR TotalAddGTime BETWEEN 30 AND 21 ORDER BY DepDelay, Quarter, DestCityMarketID LIMIT 10
+SELECT OriginCityName FROM mytable WHERE DivLongestGTimes BETWEEN 85.0 AND 21.0 OR TailNum BETWEEN 'N28478' AND 'N26210' OR DistanceGroup IN (7, 8) ORDER BY DestWac, NASDelay LIMIT 12
+SELECT OriginCityName FROM mytable WHERE DivWheelsOffs IN (1832, 1350, 1810, 2205) OR ArrivalDelayGroups BETWEEN 1 AND 8 LIMIT 8
+SELECT OriginCityName, DepDel15, AirTime FROM mytable WHERE DivDistance IN (158) OR DestAirportSeqID < 1470903 ORDER BY DepTimeBlk LIMIT 9
+SELECT OriginCityName, DivActualElapsedTime FROM mytable WHERE ArrivalDelayGroups NOT IN (1, 0, -9999) OR DestStateFips BETWEEN 4 AND 49 ORDER BY DaysSinceEpoch LIMIT 1
+SELECT OriginCityName, OriginAirportSeqID, CRSArrTime FROM mytable WHERE DaysSinceEpoch = 16424 ORDER BY DepDel15, ArrivalDelayGroups LIMIT 27
+SELECT OriginState FROM mytable LIMIT 20
+SELECT OriginState FROM mytable WHERE Cancelled = 0 OR DivActualElapsedTime < 223 AND CarrierDelay = 2 ORDER BY SecurityDelay, OriginState, AirTime LIMIT 25
+SELECT OriginState FROM mytable WHERE DivTailNums BETWEEN 'N852AA' AND 'N832AS' AND  REGEXP_LIKE(CancellationCode, '.*') AND  REGEXP_LIKE(ArrTimeBlk, '2200-225.*') ORDER BY OriginAirportID LIMIT 21
+SELECT OriginState FROM mytable WHERE DivWheelsOns IN (1833, 1127, 8, 1759, 1208) OR Flights < 1 ORDER BY TailNum LIMIT 2
+SELECT OriginState, ArrTimeBlk FROM mytable WHERE CRSElapsedTime = 238 AND WheelsOn > 1317 LIMIT 10
+SELECT OriginState, CRSElapsedTime FROM mytable WHERE CRSElapsedTime IN (540, 89, 441, 643, 481) AND DestAirportSeqID BETWEEN 1074702 AND 1212903 ORDER BY LongestAddGTime LIMIT 10
+SELECT OriginState, DayofMonth, UniqueCarrier FROM mytable WHERE DivAirportLandings >= 9 OR OriginAirportID NOT IN (10980, 12888, 10685, 11111) ORDER BY DestStateFips LIMIT 3
+SELECT OriginState, DepDelay, OriginWac FROM mytable WHERE WheelsOff IN (1235, 2134) ORDER BY NASDelay, AirlineID, ArrDelay LIMIT 14
+SELECT OriginState, DepTime FROM mytable WHERE DepDelay IN (179.0, 320.0, -15.0, 94.0, 174.0) OR DepDelay BETWEEN 7.0 AND 139.0 ORDER BY OriginCityName, ArrDel15, "Month" LIMIT 8
+SELECT OriginState, Distance, DivActualElapsedTime FROM mytable WHERE DivTotalGTimes = 76 OR Cancelled = 1 OR DestAirportID <> 13851 ORDER BY TaxiOut, DivActualElapsedTime, DaysSinceEpoch LIMIT 5
+SELECT OriginState, DivReachedDest, DestAirportID FROM mytable WHERE DistanceGroup <> 6 AND DivAirportIDs IN (10918, 13476, 10245, 10599) OR WheelsOff <= 2039 LIMIT 9
+SELECT OriginState, DivTailNums, AirlineID FROM mytable ORDER BY Quarter LIMIT 8
+SELECT OriginState, FlightDate, CancellationCode FROM mytable WHERE DestCityName IN ('Durango, CO', 'Bellingham, WA', 'College Station/Bryan, TX') ORDER BY CRSArrTime LIMIT 21
+SELECT OriginState, FlightDate, DivArrDelay FROM mytable WHERE DestStateFips > 75 OR DivActualElapsedTime IN (389, 198, 307) AND Distance > 3801 ORDER BY DepDelayMinutes LIMIT 10
+SELECT OriginState, LongestAddGTime, DivArrDelay FROM mytable WHERE DepDelayMinutes >= 106.0 OR FirstDepTime IN (814, 1939) OR NASDelay NOT IN (211, 56, 16, 63) ORDER BY NASDelay, DestAirportID LIMIT 10
+SELECT OriginState, OriginStateFips, DestCityMarketID FROM mytable WHERE TailNum NOT IN ('N615MQ', 'N995DL', 'N537AA') ORDER BY DayOfWeek LIMIT 28
+SELECT OriginStateFips FROM mytable WHERE DestWac IN (43, 5, 35, 51, 85) OR Dest <= 'PIA' AND Diverted BETWEEN 0 AND 1 ORDER BY DestWac, DepDel15 LIMIT 22
+SELECT OriginStateFips FROM mytable WHERE OriginCityMarketID >= 30073 ORDER BY CRSElapsedTime LIMIT 9
+SELECT OriginStateFips, ActualElapsedTime, DivTotalGTimes FROM mytable WHERE OriginStateFips >= 2 LIMIT 16
+SELECT OriginStateFips, ArrTimeBlk, OriginAirportID FROM mytable WHERE DivArrDelay NOT IN (161, 864, 410, 9, 710) LIMIT 13
+SELECT OriginStateFips, DestAirportSeqID FROM mytable WHERE CRSArrTime IN (740, 1257, 712, 629) AND DivAirportIDs = 15370 ORDER BY OriginCityMarketID LIMIT 29
+SELECT OriginStateFips, Flights, ArrDel15 FROM mytable WHERE DivDistance NOT IN (306) AND DestCityName >= 'Harlingen/San Benito, TX' LIMIT 10
+SELECT OriginStateName FROM mytable ORDER BY DepDelayMinutes, CRSArrTime LIMIT 9
+SELECT OriginStateName FROM mytable WHERE  REGEXP_LIKE(UniqueCarrier, 'E.*') LIMIT 0
+SELECT OriginStateName FROM mytable WHERE DepDel15 <> 1 LIMIT 14
+SELECT OriginStateName, DivReachedDest, DestCityName FROM mytable ORDER BY TaxiIn, ArrTime, ArrTimeBlk LIMIT 19
+SELECT OriginWac FROM mytable ORDER BY DivAirportLandings, ArrDelay, TotalAddGTime LIMIT 20
+SELECT OriginWac FROM mytable WHERE DepDelayMinutes IN (212.0, 252.0, 69.0) OR DivLongestGTimes IN (24.0, 189.0, 43.0, 98.0, 152.0) AND  REGEXP_LIKE(Carrier, '.*O') LIMIT 3
+SELECT OriginWac FROM mytable WHERE DepTimeBlk IN ('2000-2059') OR OriginAirportSeqID >= 1084903 ORDER BY LongestAddGTime LIMIT 3
+SELECT OriginWac FROM mytable WHERE DestCityName NOT IN ('Gillette, WY', 'Watertown, NY') ORDER BY DivDistance, ArrDelay LIMIT 6
+SELECT OriginWac FROM mytable WHERE DivDistance > 181 LIMIT 19
+SELECT OriginWac FROM mytable WHERE FirstDepTime BETWEEN 1309 AND 1856 AND DestAirportID BETWEEN 12191 AND 10208 AND DivLongestGTimes BETWEEN 6.0 AND 64.0 LIMIT 29
+SELECT OriginWac FROM mytable WHERE "Year" = 2014 OR DayofMonth > 13 AND ArrTimeBlk BETWEEN '2200-2259' AND '1500-1559' LIMIT 1
+SELECT OriginWac, AirlineID, OriginStateName FROM mytable ORDER BY ArrDelayMinutes, DayofMonth LIMIT 7
+SELECT OriginWac, ArrDelay FROM mytable WHERE DivDistance NOT IN (2994, 546, 602, 729) AND ActualElapsedTime <= 370 ORDER BY ArrivalDelayGroups LIMIT 6
+SELECT OriginWac, ArrivalDelayGroups FROM mytable WHERE ArrTime BETWEEN 1540 AND 553 AND Diverted IN (1, 0) ORDER BY "Month" LIMIT 28
+SELECT OriginWac, CRSArrTime FROM mytable WHERE FlightNum BETWEEN 2987 AND 109 OR OriginAirportID = 14307 LIMIT 13
+SELECT OriginWac, CRSElapsedTime FROM mytable WHERE DestCityName < 'Idaho Falls, ID' OR DivAirportIDs IN (11823) OR "Month" NOT IN (3) ORDER BY Quarter, UniqueCarrier, DestStateFips LIMIT 12
+SELECT OriginWac, DayofMonth FROM mytable WHERE DayofMonth NOT IN (22, 28, 8, 10) AND NASDelay = 178 AND NASDelay = 155 ORDER BY OriginStateName, DepDelayMinutes, OriginState LIMIT 15
+SELECT OriginWac, Distance FROM mytable ORDER BY CRSElapsedTime LIMIT 27
+SELECT OriginWac, DistanceGroup FROM mytable WHERE TailNum NOT IN ('N748EV', 'N941MQ', 'N850UA', 'N623DL', 'N216WR') ORDER BY "Month", DepDel15, OriginAirportID LIMIT 13
+SELECT OriginWac, Flights, DepDelay FROM mytable ORDER BY SecurityDelay, OriginCityMarketID, AirlineID LIMIT 21
+SELECT Quarter FROM mytable LIMIT 18
+SELECT Quarter FROM mytable WHERE Origin >= 'XNA' AND DivAirportSeqIDs IN (1019402, 1046902, 1584102) LIMIT 11
+SELECT Quarter, ActualElapsedTime, OriginAirportSeqID FROM mytable WHERE ArrDel15 BETWEEN 1 AND 1 AND DestAirportID IN (10268) OR AirlineID >= 19690 ORDER BY FlightNum, ArrDelayMinutes LIMIT 6
+SELECT Quarter, ArrTime, WeatherDelay FROM mytable WHERE DivWheelsOns > 233 ORDER BY Cancelled LIMIT 29
+SELECT Quarter, CancellationCode FROM mytable WHERE DivDistance > 448 AND DestStateName <= 'Mississippi' AND ArrTime <> 1804 ORDER BY Quarter, Distance, "Month" LIMIT 15
+SELECT Quarter, CarrierDelay, DivAirportSeqIDs FROM mytable WHERE FirstDepTime = 710 AND Cancelled BETWEEN 1 AND 0 ORDER BY DestState, DivArrDelay LIMIT 23
+SELECT Quarter, CarrierDelay, DivTotalGTimes FROM mytable WHERE Distance < 335 OR Dest BETWEEN 'JAX' AND 'DBQ' ORDER BY UniqueCarrier LIMIT 28
+SELECT Quarter, DestStateFips, DestWac FROM mytable WHERE DivWheelsOffs IN (2333, 337) ORDER BY LongestAddGTime, TaxiIn, DestAirportID LIMIT 24
+SELECT Quarter, Distance FROM mytable WHERE WheelsOn IN (2019, 1821, 2105) OR ArrDel15 NOT IN (1) LIMIT 17
+SELECT Quarter, Distance, OriginStateName FROM mytable WHERE DestAirportSeqID BETWEEN 1200702 AND 1562401 OR DivReachedDest >= -9999 ORDER BY DivActualElapsedTime, ArrivalDelayGroups, DaysSinceEpoch LIMIT 17
+SELECT Quarter, DivAirports FROM mytable ORDER BY FlightNum LIMIT 8
+SELECT Quarter, FlightDate, ArrivalDelayGroups FROM mytable WHERE DivArrDelay = 127 OR Flights < 1 AND FlightNum IN (2223, 1763, 2868, 2137) ORDER BY DepartureDelayGroups, DepDelay, OriginAirportID LIMIT 15
+SELECT Quarter, FlightDate, TailNum FROM mytable WHERE DivArrDelay <> 204 ORDER BY OriginAirportSeqID, OriginCityMarketID, ArrTime LIMIT 17
+SELECT Quarter, OriginCityName FROM mytable WHERE Carrier BETWEEN 'EV' AND 'OO' AND WheelsOff BETWEEN 1411 AND 354 ORDER BY Flights LIMIT 10
+SELECT Quarter, OriginStateFips FROM mytable ORDER BY DayofMonth LIMIT 25
+SELECT Quarter, OriginStateFips, DestWac FROM mytable LIMIT 19
+SELECT SecurityDelay FROM mytable ORDER BY Quarter, NASDelay LIMIT 17
+SELECT SecurityDelay FROM mytable WHERE DivWheelsOns <= 18 AND DivDistance BETWEEN 66 AND 160 ORDER BY CRSArrTime LIMIT 12
+SELECT SecurityDelay FROM mytable WHERE OriginCityMarketID BETWEEN 31638 AND 33486 LIMIT 13
+SELECT SecurityDelay, ArrDelay FROM mytable WHERE DistanceGroup BETWEEN 3 AND 8 AND Dest NOT IN ('HOU', 'GSP') ORDER BY ActualElapsedTime, ArrDelay LIMIT 7
+SELECT SecurityDelay, ArrTime, ArrDel15 FROM mytable WHERE DestStateName NOT IN ('New Hampshire') AND ArrTimeBlk > '1500-1559' OR DestCityName BETWEEN 'International Falls, MN' AND 'Ketchikan, AK' ORDER BY OriginStateName, Dest LIMIT 0
+SELECT SecurityDelay, ArrTime, DestStateFips FROM mytable WHERE Diverted NOT IN (0, 1) LIMIT 18
+SELECT SecurityDelay, DepTime, OriginWac FROM mytable ORDER BY OriginWac LIMIT 9
+SELECT SecurityDelay, DestStateFips, TaxiOut FROM mytable WHERE  REGEXP_LIKE(ArrTimeBlk, '18.*0-1859') AND WheelsOn < 2359 OR WheelsOff NOT IN (1305, 1029, 1324, 1300, 1052) ORDER BY TotalAddGTime LIMIT 8
+SELECT SecurityDelay, DestStateName FROM mytable LIMIT 8
+SELECT SecurityDelay, DestWac, DepTime FROM mytable WHERE DivArrDelay = 149 OR CarrierDelay = 239 AND AirlineID = 20366 ORDER BY DivAirportLandings, "Year" LIMIT 9
+SELECT SecurityDelay, DivAirportIDs, AirTime FROM mytable WHERE ArrDel15 NOT IN (1, 0, -9999) LIMIT 2
+SELECT SecurityDelay, DivAirports FROM mytable LIMIT 16
+SELECT SecurityDelay, DivDistance, DepDelay FROM mytable LIMIT 20
+SELECT SecurityDelay, OriginStateFips FROM mytable WHERE DivArrDelay BETWEEN 445 AND 343 OR OriginCityMarketID IN (32951, 33344, 30436) AND CRSArrTime = 1903 LIMIT 23
+SELECT SecurityDelay, OriginStateName, DaysSinceEpoch FROM mytable WHERE DayOfWeek = 4 ORDER BY CRSArrTime, TaxiOut, WheelsOn LIMIT 13
+SELECT SecurityDelay, Quarter, DivLongestGTimes FROM mytable WHERE "Year" >= 2014 ORDER BY UniqueCarrier, DestAirportID, Distance LIMIT 0
+SELECT SecurityDelay, TotalAddGTime FROM mytable WHERE WheelsOn BETWEEN 953 AND 819 OR FirstDepTime NOT IN (908, 1153, 710, 1018, 1449) LIMIT 18
+SELECT SecurityDelay, WeatherDelay FROM mytable WHERE DepTimeBlk >= '2000-2059' OR DayOfWeek BETWEEN 6 AND 5 OR FirstDepTime = 801 ORDER BY DestAirportSeqID
+SELECT TailNum FROM mytable WHERE DivTotalGTimes = 58 AND DepDelayMinutes BETWEEN 130.0 AND 253.0 ORDER BY OriginAirportID LIMIT 10
+SELECT TailNum FROM mytable WHERE "Month" <= 11 ORDER BY DivActualElapsedTime, ArrTime, DestAirportID LIMIT 2
+SELECT TailNum FROM mytable WHERE WheelsOn IN (404, -9999) OR FlightDate >= '2014-04-13' AND CancellationCode BETWEEN 'noodles' AND 'A' ORDER BY OriginWac, DestAirportID, WheelsOn LIMIT 22
+SELECT TailNum, DestCityName, "Month" FROM mytable ORDER BY DistanceGroup, DestWac LIMIT 6
+SELECT TailNum, DivAirportIDs FROM mytable WHERE OriginAirportSeqID BETWEEN 1288403 AND 1537602 AND OriginCityName BETWEEN 'Columbus, GA' AND 'San Antonio, TX' LIMIT 22
+SELECT TailNum, OriginWac FROM mytable WHERE OriginAirportSeqID BETWEEN 1393303 AND 1295402 LIMIT 2
+SELECT TaxiIn FROM mytable WHERE CRSElapsedTime NOT IN (186) AND OriginCityMarketID BETWEEN 30620 AND 32511 AND DayOfWeek BETWEEN 1 AND 4 ORDER BY DestWac, LateAircraftDelay LIMIT 26
+SELECT TaxiIn FROM mytable WHERE DestAirportSeqID BETWEEN 1468502 AND 1448702 OR DestState BETWEEN 'NC' AND 'PA' OR CarrierDelay IN (113, 64, 51, 290, 73) ORDER BY CarrierDelay, OriginAirportID LIMIT 7
+SELECT TaxiIn FROM mytable WHERE WheelsOn = 256 ORDER BY DivDistance, CRSElapsedTime, Cancelled LIMIT 23
+SELECT TaxiIn, AirTime FROM mytable WHERE ArrDelayMinutes IN (146.0, 109.0) ORDER BY DistanceGroup, SecurityDelay LIMIT 29
+SELECT TaxiIn, ArrDel15, AirTime FROM mytable WHERE DivAirportIDs BETWEEN 12992 AND 14107 AND CRSElapsedTime IN (224, 179, 208, 29) LIMIT 16
+SELECT TaxiIn, ArrTime, TotalAddGTime FROM mytable ORDER BY ArrTime LIMIT 13
+SELECT TaxiIn, Cancelled FROM mytable LIMIT 29
+SELECT TaxiIn, DivAirportIDs, Distance FROM mytable WHERE  REGEXP_LIKE(OriginCityName, 'College S.*ation/Bryan, TX') OR DivAirportLandings = 9 AND DivAirportIDs > 13303 ORDER BY DepTimeBlk LIMIT 19
+SELECT TaxiIn, DivAirportSeqIDs, DepTime FROM mytable WHERE DivAirportLandings = 9 AND ArrDelay >= 321.0 ORDER BY DayOfWeek, ArrDelayMinutes LIMIT 16
+SELECT TaxiIn, DivArrDelay FROM mytable WHERE DivArrDelay BETWEEN 640 AND 232 AND LateAircraftDelay <= 17 LIMIT 25
+SELECT TaxiIn, DivArrDelay, DaysSinceEpoch FROM mytable WHERE DivActualElapsedTime > 372 AND ArrDelayMinutes <> 60.0 OR TaxiIn BETWEEN 22 AND 84 ORDER BY "Year", LongestAddGTime, ActualElapsedTime LIMIT 6
+SELECT TaxiIn, UniqueCarrier, OriginAirportID FROM mytable WHERE DestAirportID BETWEEN 11865 AND 14256 ORDER BY ArrTimeBlk, "Month" LIMIT 25
+SELECT TaxiOut FROM mytable ORDER BY ArrDelayMinutes, CRSElapsedTime LIMIT 5
+SELECT TaxiOut FROM mytable WHERE CRSDepTime NOT IN (2210, 716, 1510, 1153, 1517) AND ArrTimeBlk BETWEEN '1900-1959' AND '0700-0759' ORDER BY Flights, OriginCityMarketID LIMIT 25
+SELECT TaxiOut, Carrier, ArrivalDelayGroups FROM mytable WHERE "Month" IN (1) AND DivArrDelay BETWEEN 362 AND 399 OR TailNum NOT IN ('N266WN', 'N3GVAA', 'N593JB') LIMIT 20
+SELECT TaxiOut, DepDel15, DivWheelsOffs FROM mytable WHERE DivAirports < 'MCO' ORDER BY OriginState LIMIT 23
+SELECT TaxiOut, Dest FROM mytable WHERE ArrTime BETWEEN 807 AND 2154 AND ActualElapsedTime BETWEEN 172 AND 307 ORDER BY DestCityName LIMIT 5
+SELECT TaxiOut, DivArrDelay FROM mytable ORDER BY CarrierDelay, SecurityDelay, DepTime LIMIT 23
+SELECT TaxiOut, DivLongestGTimes FROM mytable ORDER BY DestState, Flights LIMIT 1
+SELECT TaxiOut, OriginState, OriginAirportID FROM mytable ORDER BY OriginCityMarketID, CRSArrTime, DestStateName LIMIT 7
+SELECT TaxiOut, TaxiIn, DayOfWeek FROM mytable WHERE TotalAddGTime NOT IN (8) AND CRSArrTime BETWEEN 923 AND 2150 ORDER BY Flights, WeatherDelay, DivActualElapsedTime LIMIT 15
+SELECT TaxiOut, TotalAddGTime FROM mytable WHERE DepartureDelayGroups IN (-1, 8) ORDER BY OriginStateFips, ArrivalDelayGroups LIMIT 2
+SELECT TotalAddGTime FROM mytable LIMIT 24
+SELECT TotalAddGTime FROM mytable WHERE DivAirports = 'ALO' OR WheelsOff IN (1655, 1225, 2314, 515) ORDER BY LateAircraftDelay, Flights, ArrTimeBlk LIMIT 24
+SELECT TotalAddGTime, AirlineID, DaysSinceEpoch FROM mytable WHERE DivWheelsOffs < 1231 OR ArrDelayMinutes BETWEEN 22.0 AND 164.0 AND DivAirportIDs IN (13476, 15376, 13029, 14831) ORDER BY TailNum LIMIT 13
+SELECT TotalAddGTime, ArrTime, "Month" FROM mytable LIMIT 28
+SELECT TotalAddGTime, DepDel15 FROM mytable WHERE CRSElapsedTime NOT IN (349, 183, 356, 41, 315) OR TaxiOut BETWEEN 78 AND 25 ORDER BY CancellationCode, DivArrDelay LIMIT 13
+SELECT TotalAddGTime, DivActualElapsedTime FROM mytable ORDER BY Carrier, CarrierDelay, DestCityName LIMIT 28
+SELECT TotalAddGTime, DivTotalGTimes FROM mytable WHERE CancellationCode IN ('A', 'B', 'C', 'noodles') ORDER BY DivReachedDest, CRSDepTime, DaysSinceEpoch LIMIT 13
+SELECT TotalAddGTime, NASDelay FROM mytable ORDER BY DepartureDelayGroups, TaxiIn, ArrTimeBlk LIMIT 18
+SELECT UniqueCarrier FROM mytable LIMIT 5
+SELECT UniqueCarrier FROM mytable ORDER BY DestState LIMIT 13
+SELECT UniqueCarrier FROM mytable WHERE DivArrDelay IN (68, 520) ORDER BY SecurityDelay, OriginWac LIMIT 21
+SELECT UniqueCarrier FROM mytable WHERE DivLongestGTimes IN (36.0, 118.0, 10.0) OR OriginAirportSeqID = 1127802 LIMIT 10
+SELECT UniqueCarrier FROM mytable WHERE FlightNum BETWEEN 26 AND 2973 AND CRSArrTime <= 639 OR NASDelay IN (6, 41) ORDER BY DistanceGroup, UniqueCarrier LIMIT 12
+SELECT UniqueCarrier FROM mytable WHERE Origin <> 'TOL' AND DepDelay = 256.0 AND NASDelay BETWEEN 368 AND 75 LIMIT 8
+SELECT UniqueCarrier, ArrDelay FROM mytable WHERE ActualElapsedTime NOT IN (203, 92, 97, 98) OR DestAirportID <> 11267 AND  REGEXP_LIKE(OriginStateName, '.*laska') ORDER BY DivArrDelay, "Month" LIMIT 21
+SELECT UniqueCarrier, DayofMonth, DestAirportID FROM mytable WHERE DestStateName IN ('Massachusetts', 'Virginia', 'Kentucky', 'Kansas', 'Washington') ORDER BY DestWac LIMIT 25
+SELECT UniqueCarrier, DaysSinceEpoch FROM mytable WHERE Carrier IN ('DL', 'B6', 'VX') OR Flights < 1 ORDER BY DivActualElapsedTime LIMIT 0
+SELECT UniqueCarrier, DepTime FROM mytable ORDER BY DestAirportSeqID, DestCityMarketID, WeatherDelay LIMIT 28
+SELECT UniqueCarrier, WeatherDelay, DivAirportIDs FROM mytable ORDER BY DivAirportLandings, ArrDelayMinutes LIMIT 1
+SELECT WeatherDelay FROM mytable ORDER BY TaxiIn LIMIT 2
+SELECT WeatherDelay FROM mytable WHERE ActualElapsedTime = 426 ORDER BY FlightDate, DivDistance, ArrivalDelayGroups
+SELECT WeatherDelay FROM mytable WHERE Carrier NOT IN ('EV', 'HA', 'MQ') OR DivWheelsOns IN (1144, 1259, 1558, 1303) AND DivAirportSeqIDs IN (1120302, 1160302, 1106603) ORDER BY TotalAddGTime, CancellationCode LIMIT 16
+SELECT WeatherDelay FROM mytable WHERE DivActualElapsedTime IN (652, 435, 920, 416) OR DestAirportSeqID IN (1239102, 1228002, 1177801) OR TailNum <> 'N797AS' ORDER BY OriginAirportID LIMIT 12
+SELECT WeatherDelay, AirlineID, DivTotalGTimes FROM mytable WHERE DivAirportLandings IN (2, 0, 9) OR SecurityDelay BETWEEN 4 AND 10 ORDER BY CRSDepTime, "Month" LIMIT 28
+SELECT WeatherDelay, CRSDepTime FROM mytable WHERE CRSDepTime BETWEEN 2127 AND 659 ORDER BY FlightNum LIMIT 5
+SELECT WeatherDelay, Cancelled, Dest FROM mytable WHERE AirTime <= 329 OR AirlineID < 20366 OR AirlineID BETWEEN 20304 AND 19805 ORDER BY OriginAirportID LIMIT 22
+SELECT WeatherDelay, DestCityName, DepTimeBlk FROM mytable WHERE ArrTimeBlk <= '1400-1459' AND DestAirportID = 10754 LIMIT 21
+SELECT WeatherDelay, Distance FROM mytable ORDER BY LateAircraftDelay, CancellationCode, DivAirportLandings LIMIT 11
+SELECT WheelsOff FROM mytable ORDER BY CancellationCode, DestWac, DepTime LIMIT 1
+SELECT WheelsOff FROM mytable WHERE ArrTime IN (154, 2214, 257, 702, 207) OR WheelsOff IN (1742, 2010) AND DepTime <= 2306 ORDER BY CRSDepTime, DayofMonth, TailNum LIMIT 16
+SELECT WheelsOff FROM mytable WHERE ArrivalDelayGroups NOT IN (10, 0, 7, -1) LIMIT 20
+SELECT WheelsOff FROM mytable WHERE DivTotalGTimes IN (98, 57, 9, 118) OR DepTime <> 1910 AND DayofMonth <> 25 LIMIT 29
+SELECT WheelsOff FROM mytable WHERE TaxiIn BETWEEN 36 AND 65 AND DestWac >= 88 LIMIT 27
+SELECT WheelsOff, ArrTimeBlk, OriginStateName FROM mytable WHERE DepDel15 NOT IN (0) AND DayofMonth BETWEEN 20 AND 14 ORDER BY Diverted, SecurityDelay, ArrDelayMinutes LIMIT 14
+SELECT WheelsOff, Carrier, DivArrDelay FROM mytable WHERE LateAircraftDelay IN (250, 24) ORDER BY DestWac, Distance, SecurityDelay LIMIT 14
+SELECT WheelsOff, Dest, OriginWac FROM mytable ORDER BY Diverted, TailNum, UniqueCarrier LIMIT 2
+SELECT WheelsOff, DestStateFips FROM mytable WHERE OriginWac >= 11 OR DepTimeBlk BETWEEN '1000-1059' AND '1600-1659' LIMIT 9
+SELECT WheelsOff, DivAirportSeqIDs, "Month" FROM mytable ORDER BY AirlineID, DestAirportID LIMIT 6
+SELECT WheelsOff, DivReachedDest FROM mytable ORDER BY TaxiOut, DepTime, Dest LIMIT 27
+SELECT WheelsOff, DivReachedDest, Cancelled FROM mytable ORDER BY DivReachedDest LIMIT 7
+SELECT WheelsOff, Diverted, OriginAirportID FROM mytable WHERE WheelsOn < 27 ORDER BY CRSElapsedTime LIMIT 13
+SELECT WheelsOff, LongestAddGTime FROM mytable WHERE DivTotalGTimes BETWEEN 92 AND 49 AND ActualElapsedTime <> 274 OR WheelsOff BETWEEN 1033 AND 1318 ORDER BY FlightNum, FlightDate, SecurityDelay LIMIT 21
+SELECT WheelsOff, Origin FROM mytable WHERE DayofMonth NOT IN (2, 6, 31, 22, 25) AND DepartureDelayGroups <> 2 ORDER BY OriginCityMarketID LIMIT 25
+SELECT WheelsOff, TaxiIn, Carrier FROM mytable WHERE OriginCityMarketID = 33933 ORDER BY ArrDelayMinutes LIMIT 29
+SELECT WheelsOff, TotalAddGTime, "Month" FROM mytable ORDER BY OriginState LIMIT 24
+SELECT WheelsOn FROM mytable ORDER BY AirlineID, TailNum LIMIT 12
+SELECT WheelsOn FROM mytable ORDER BY OriginAirportSeqID, WheelsOff, AirlineID LIMIT 29
+SELECT WheelsOn FROM mytable WHERE DivAirportIDs <= 12448 AND DepartureDelayGroups BETWEEN 1 AND 4 AND FlightDate > '2014-01-24' ORDER BY DayofMonth, DayOfWeek, OriginStateName LIMIT 29
+SELECT WheelsOn FROM mytable WHERE DivArrDelay > 284 OR "Month" = 6 AND WeatherDelay BETWEEN 59 AND 147 ORDER BY OriginWac, CRSArrTime LIMIT 8
+SELECT WheelsOn, ArrivalDelayGroups FROM mytable WHERE ArrDel15 NOT IN (0, -9999) AND ArrTimeBlk BETWEEN '0600-0659' AND '1700-1759' LIMIT 4
+SELECT WheelsOn, CRSDepTime, OriginAirportID FROM mytable WHERE Origin BETWEEN 'ATW' AND 'MYR' ORDER BY Diverted, DayOfWeek LIMIT 24
+SELECT WheelsOn, DaysSinceEpoch FROM mytable WHERE DestWac < 52 OR ArrDel15 > -9999 ORDER BY Carrier, Origin LIMIT 29
+SELECT WheelsOn, OriginAirportID FROM mytable WHERE DivReachedDest NOT IN (1) AND DivArrDelay BETWEEN 99 AND 870 LIMIT 3
+SELECT "Year" FROM mytable WHERE DestState BETWEEN 'HI' AND 'OK' LIMIT 0
+SELECT "Year" FROM mytable WHERE DestWac BETWEEN 54 AND 67 ORDER BY OriginAirportSeqID, OriginState LIMIT 15
+SELECT "Year", AirTime, DestStateName FROM mytable ORDER BY LongestAddGTime LIMIT 3
+SELECT "Year", ArrDel15 FROM mytable WHERE OriginState NOT IN ('LA') OR DepDelay IN (357.0, 41.0, 375.0, 126.0) AND DivAirportIDs BETWEEN 13487 AND 15027 ORDER BY DepDelay, ArrDelayMinutes LIMIT 3
+SELECT "Year", ArrTimeBlk FROM mytable WHERE DestState IN ('PR', 'WY') AND OriginCityName IN ('Sacramento, CA', 'El Paso, TX', 'Butte, MT', 'Denver, CO', 'San Antonio, TX') ORDER BY Quarter, DestCityMarketID, ArrivalDelayGroups LIMIT 16
+SELECT "Year", DestWac FROM mytable WHERE DepDelay IN (414.0, 174.0, 142.0, 38.0) AND Flights BETWEEN 1 AND 1 ORDER BY TailNum LIMIT 4
+SELECT "Year", DivArrDelay, DivActualElapsedTime FROM mytable WHERE DivDistance IN (436, 814, 636, 88, 50) AND Flights NOT IN (1) LIMIT 15
+SELECT "Year", DivTailNums, Dest FROM mytable WHERE DaysSinceEpoch BETWEEN 16074 AND 16094 OR DivReachedDest NOT IN (0, -9999) OR DivWheelsOns IN (1810, 928, 1646, 1312) ORDER BY FlightDate, DestAirportSeqID, DepTimeBlk LIMIT 16
+SELECT "Year", FlightNum, LongestAddGTime FROM mytable WHERE DivAirportIDs IN (14307, 14689, 10397) OR CarrierDelay >= 21 OR OriginCityMarketID BETWEEN 32467 AND 30631 ORDER BY WheelsOff, Quarter, DepTime LIMIT 29
+SELECT "Year", LongestAddGTime, CRSDepTime FROM mytable WHERE CancellationCode > 'A' OR LateAircraftDelay NOT IN (122, 176, 246) ORDER BY OriginCityMarketID, ArrDelayMinutes, CancellationCode LIMIT 20
+SELECT "Year", OriginAirportID FROM mytable WHERE DivLongestGTimes BETWEEN 144.0 AND 107.0 AND DivWheelsOns BETWEEN 1202 AND 1752 ORDER BY CRSDepTime, Origin, DivAirportLandings LIMIT 24
+SELECT "Year", OriginState, ArrDel15 FROM mytable WHERE OriginAirportID IN (12343, 10980, 11695, 10423) OR  REGEXP_LIKE(DestState, 'I.*') OR FirstDepTime = 534 ORDER BY DivReachedDest, ArrDelayMinutes, Distance LIMIT 24
+SELECT "Year", OriginWac, CRSDepTime FROM mytable WHERE DivDistance BETWEEN 1011 AND 68 OR UniqueCarrier < 'VX' LIMIT 4
+SELECT "Year", Quarter FROM mytable WHERE DestCityMarketID NOT IN (34960, 33316, 33127, 31973, 32982) LIMIT 19
+SELECT "Year", TaxiOut FROM mytable ORDER BY CarrierDelay LIMIT 9
+SELECT column1, column5, column11 FROM testTable ORDER BY column6, column1
+SELECT column1, column5, column11 FROM testTable WHERE column1 > 100000000 AND column3 BETWEEN 20000000 AND 1000000000 AND column5 = 'gFuH' AND (column6 < 500000000 OR column11 NOT IN ('t', 'P')) AND daysSinceEpoch = 126164076 ORDER BY column6, column1
+SELECT column1, column5, column6 FROM testTable ORDER BY column5, column9
+SELECT column1, column5, column6 FROM testTable WHERE column1 > 100000000 AND column2 BETWEEN 20000000 AND 1000000000 AND column3 <> 'w' AND (column6 < 500000 OR column7 NOT IN (225, 407)) AND daysSinceEpoch = 1756015683 ORDER BY column5, column9
+select $docId, $segmentName, $hostName from mytable where $docId < 5 limit 50
+select $docId, $segmentName, $hostName from mytable where $docId = 5 limit 50
+select $docId, $segmentName, $hostName from mytable where $docId > 19998 limit 50
+SELECT SUM(met) FROM mytable WHERE timeConvert(DaysSinceEpoch,'DAYS','SECONDS') = 1394323200
+select COUNT(*) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKeys(mapField) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKey(mapField,k1) from baseballStats where DIV(numberOfGames,10) = 100
+select mapKey(mapField,k1) from baseballStats where mapKey(mapField,k1) = 'v1'
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java
index 914addaae7d..2eb17f5a38d 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTest.java
@@ -184,7 +184,7 @@ protected TableTaskConfig getTaskConfig() {
   }
 
   @Nullable
-  protected  String getServerTenant() {
+  protected String getServerTenant() {
     return TagNameUtils.DEFAULT_TENANT_NAME;
   }
 
@@ -384,6 +384,19 @@ public Boolean apply(@Nullable Void aVoid) {
   protected void testQuery(@Nonnull String pqlQuery, @Nullable List<String> sqlQueries)
       throws Exception {
     ClusterIntegrationTestUtils
-        .testQuery(pqlQuery, _brokerBaseApiUrl, getPinotConnection(), sqlQueries, getH2Connection());
+        .testQuery(pqlQuery, "pql", _brokerBaseApiUrl, getPinotConnection(), sqlQueries, getH2Connection());
+  }
+
+  /**
+   * Run equivalent Pinot and H2 query and compare the results.
+   *
+   * @param sqlQuery Pinot query
+   * @param sqlQueries H2 query
+   * @throws Exception
+   */
+  protected void testSqlQuery(@Nonnull String sqlQuery, @Nullable List<String> sqlQueries)
+      throws Exception {
+    ClusterIntegrationTestUtils
+        .testQuery(sqlQuery, "sql", _brokerBaseApiUrl, getPinotConnection(), sqlQueries, getH2Connection());
   }
 }
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java
index 461128eefb5..8dd1b7e2d8a 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/BaseClusterIntegrationTestSet.java
@@ -141,6 +141,53 @@ public void testHardcodedQueries()
             + "HAVING SUM(ArrDelay) <> 6325.973 AND AVG(CAST(CRSDepTime AS DOUBLE)) <= 1569.8755 OR SUM(TaxiIn) = 1003.87274"));
   }
 
+
+  /**
+   * Test hardcoded queries.
+   * <p>NOTE:
+   * <p>For queries with <code>LIMIT</code> or <code>TOP</code>, need to remove limit or add <code>LIMIT 10000</code> to
+   * the H2 SQL query because the comparison only works on exhausted result with at most 10000 rows.
+   * <ul>
+   *   <li>
+   *     Eg. <code>SELECT a FROM table LIMIT 15 -> [SELECT a FROM table LIMIT 10000]</code>
+   *   </li>
+   * </ul>
+   * <p>For queries with multiple aggregation functions, need to split each of them into a separate H2 SQL query.
+   * <ul>
+   *   <li>
+   *     Eg. <code>SELECT SUM(a), MAX(b) FROM table -> [SELECT SUM(a) FROM table, SELECT MAX(b) FROM table]</code>
+   *   </li>
+   * </ul>
+   * <p>For group-by queries, need to add group-by columns to the select clause for H2 SQL query.
+   * <ul>
+   *   <li>
+   *     Eg. <code>SELECT SUM(a) FROM table GROUP BY b -> [SELECT b, SUM(a) FROM table GROUP BY b]</code>
+   *   </li>
+   * </ul>
+   *
+   * @throws Exception
+   */
+  public void testHardcodedSqlQueries()
+      throws Exception {
+    // Here are some sample queries.
+    String query;
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch = 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <> 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch > 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch >= 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch < 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT COUNT(*) FROM mytable WHERE DaysSinceEpoch <= 16312 AND Carrier = 'DL'";
+    testSqlQuery(query, Collections.singletonList(query));
+    query = "SELECT MAX(ArrTime), MIN(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 16312";
+    testSqlQuery(query, Arrays.asList("SELECT MAX(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 15312",
+        "SELECT MIN(ArrTime) FROM mytable WHERE DaysSinceEpoch >= 15312"));
+  }
+
   /**
    * Test to ensure that broker response contains expected stats
    *
@@ -219,6 +266,44 @@ public void testQueriesFromQueryFile()
     }
   }
 
+  /**
+   * Test random SQL queries from the query file.
+   *
+   * @throws Exception
+   */
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    URL resourceUrl = BaseClusterIntegrationTestSet.class.getClassLoader().getResource(getQueryFileName());
+    Assert.assertNotNull(resourceUrl);
+    File queryFile = new File(resourceUrl.getFile());
+
+    int maxNumQueriesToSkipInQueryFile = getMaxNumQueriesToSkipInQueryFile();
+    try (BufferedReader reader = new BufferedReader(new FileReader(queryFile))) {
+      while (true) {
+        int numQueriesSkipped = RANDOM.nextInt(maxNumQueriesToSkipInQueryFile);
+        for (int i = 0; i < numQueriesSkipped; i++) {
+          reader.readLine();
+        }
+
+        String queryString = reader.readLine();
+        // Reach end of file.
+        if (queryString == null) {
+          return;
+        }
+
+        JsonNode query = JsonUtils.stringToJsonNode(queryString);
+        String sqlQuery = query.get("pql").asText();
+        JsonNode hsqls = query.get("hsqls");
+        List<String> sqlQueries = new ArrayList<>();
+        int length = hsqls.size();
+        for (int i = 0; i < length; i++) {
+          sqlQueries.add(hsqls.get(i).asText());
+        }
+        testSqlQuery(sqlQuery, sqlQueries);
+      }
+    }
+  }
+
   /**
    * Test queries without multi values generated by query generator.
    *
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java
index 1bb383fcc7e..fe017b20e4e 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterIntegrationTestUtils.java
@@ -52,6 +52,8 @@
 import org.apache.avro.io.BinaryEncoder;
 import org.apache.avro.io.EncoderFactory;
 import org.apache.avro.util.Utf8;
+import org.apache.pinot.broker.requesthandler.PinotQueryRequest;
+import org.apache.pinot.client.Request;
 import org.apache.pinot.client.ResultSetGroup;
 import org.apache.pinot.common.utils.JsonUtils;
 import org.apache.pinot.common.utils.StringUtil;
@@ -496,20 +498,23 @@ private static Object generateRandomValue(@Nonnull Schema.Type fieldType) {
    *   <li>Do not examine the order of result records.</li>
    * </ul>
    *
-   * @param pqlQuery Pinot PQL query
+   * @param pinotQuery Pinot query
+   * @param queryFormat Pinot query format
    * @param brokerUrl Pinot broker URL
    * @param pinotConnection Pinot connection
    * @param sqlQueries H2 SQL queries
    * @param h2Connection H2 connection
    * @throws Exception
    */
-  public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl,
+  public static void testQuery(@Nonnull String pinotQuery, @Nonnull String queryFormat, @Nonnull String brokerUrl,
       @Nonnull org.apache.pinot.client.Connection pinotConnection, @Nullable List<String> sqlQueries,
       @Nullable Connection h2Connection)
       throws Exception {
     // Use broker response for metadata check, connection response for value check
-    JsonNode pinotResponse = ClusterTest.postQuery(pqlQuery, brokerUrl);
-    ResultSetGroup pinotResultSetGroup = pinotConnection.execute(pqlQuery);
+    PinotQueryRequest pinotBrokerQueryRequest = new PinotQueryRequest(queryFormat, pinotQuery);
+    JsonNode pinotResponse = ClusterTest.postQuery(pinotBrokerQueryRequest, brokerUrl);
+    Request pinotClientRequest = new Request(queryFormat, pinotQuery);
+    ResultSetGroup pinotResultSetGroup = pinotConnection.execute(pinotClientRequest);
 
     // Skip comparison if SQL queries are not specified
     if (sqlQueries == null) {
@@ -530,7 +535,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
         String failureMessage =
             "Number of aggregation results: " + numAggregationResults + " does not match number of SQL queries: "
                 + numSqlQueries;
-        failure(pqlQuery, sqlQueries, failureMessage);
+        failure(pinotQuery, sqlQueries, failureMessage);
       }
 
       // Get aggregation type
@@ -551,7 +556,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
             if (pinotNumRecordsSelected != 0) {
               String failureMessage =
                   "No record selected in H2 but " + pinotNumRecordsSelected + " records selected in Pinot";
-              failure(pqlQuery, sqlQueries, failureMessage);
+              failure(pinotQuery, sqlQueries, failureMessage);
             }
 
             // Skip further comparison
@@ -565,7 +570,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
           if (!DoubleMath.fuzzyEquals(actualValue, expectedValue, 1.0)) {
             String failureMessage =
                 "Value: " + aggregationIndex + " does not match, expected: " + h2Value + ", got: " + pinotValue;
-            failure(pqlQuery, sqlQueries, failureMessage);
+            failure(pinotQuery, sqlQueries, failureMessage);
           }
         }
 
@@ -609,18 +614,18 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
           if (h2NumGroups == 0) {
             if (pinotNumGroups != 0) {
               String failureMessage = "No group returned in H2 but " + pinotNumGroups + " groups returned in Pinot";
-              failure(pqlQuery, sqlQueries, failureMessage);
+              failure(pinotQuery, sqlQueries, failureMessage);
             }
 
             // If the query has a HAVING clause and both H2 and Pinot have no groups, that is expected, so we don't need
             // to compare the number of docs scanned
-            if (pqlQuery.contains("HAVING")) {
+            if (pinotQuery.contains("HAVING")) {
               return;
             }
 
             if (pinotNumRecordsSelected != 0) {
               String failureMessage = "No group returned in Pinot but " + pinotNumRecordsSelected + " records selected";
-              failure(pqlQuery, sqlQueries, failureMessage);
+              failure(pinotQuery, sqlQueries, failureMessage);
             }
 
             // Skip further comparison
@@ -644,7 +649,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
               String h2Value = expectedValues.get(groupKey);
               if (h2Value == null) {
                 String failureMessage = "Group returned in Pinot but not in H2: " + groupKey;
-                failure(pqlQuery, sqlQueries, failureMessage);
+                failure(pinotQuery, sqlQueries, failureMessage);
                 return;
               }
               double expectedValue = Double.parseDouble(h2Value);
@@ -654,7 +659,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
                 String failureMessage =
                     "Value: " + aggregationIndex + " does not match, expected: " + h2Value + ", got: " + pinotValue
                         + ", for group: " + groupKey;
-                failure(pqlQuery, sqlQueries, failureMessage);
+                failure(pinotQuery, sqlQueries, failureMessage);
               }
             }
           }
@@ -665,7 +670,7 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
 
       // Neither aggregation-only or group-by results
       String failureMessage = "Inside aggregation results, no aggregation-only or group-by results found";
-      failure(pqlQuery, sqlQueries, failureMessage);
+      failure(pinotQuery, sqlQueries, failureMessage);
     }
 
     // Selection results
@@ -740,14 +745,14 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
       if (h2NumRows == 0) {
         if (pinotNumRows != 0) {
           String failureMessage = "No record selected in H2 but number of records selected in Pinot: " + pinotNumRows;
-          failure(pqlQuery, sqlQueries, failureMessage);
+          failure(pinotQuery, sqlQueries, failureMessage);
           return;
         }
 
         if (pinotNumRecordsSelected != 0) {
           String failureMessage =
               "No selection result returned in Pinot but number of records selected: " + pinotNumRecordsSelected;
-          failure(pqlQuery, sqlQueries, failureMessage);
+          failure(pinotQuery, sqlQueries, failureMessage);
           return;
         }
 
@@ -793,15 +798,15 @@ public static void testQuery(@Nonnull String pqlQuery, @Nonnull String brokerUrl
           // Check actual value in expected values set
           if (!expectedValues.contains(actualValue)) {
             String failureMessage = "Selection result returned in Pinot but not in H2: " + actualValue;
-            failure(pqlQuery, sqlQueries, failureMessage);
+            failure(pinotQuery, sqlQueries, failureMessage);
             return;
           }
         }
       }
     } else {
       // Neither aggregation or selection results
-      String failureMessage = "No aggregation or selection results found for query: " + pqlQuery;
-      failure(pqlQuery, sqlQueries, failureMessage);
+      String failureMessage = "No aggregation or selection results found for query: " + pinotQuery;
+      failure(pinotQuery, sqlQueries, failureMessage);
     }
   }
 
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java
index d8fb9b9a81b..0ec8ef2f92b 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java
@@ -45,6 +45,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.http.HttpStatus;
 import org.apache.pinot.broker.broker.helix.HelixBrokerStarter;
+import org.apache.pinot.broker.requesthandler.PinotQueryRequest;
 import org.apache.pinot.common.config.IndexingConfig;
 import org.apache.pinot.common.config.SegmentPartitionConfig;
 import org.apache.pinot.common.config.TableConfig;
@@ -516,18 +517,18 @@ protected JsonNode getDebugInfo(final String uri)
 
   protected JsonNode postQuery(String query)
       throws Exception {
-    return postQuery(query, _brokerBaseApiUrl);
+    return postQuery(new PinotQueryRequest("pql", query), _brokerBaseApiUrl);
   }
 
-  public static JsonNode postQuery(String query, String brokerBaseApiUrl)
+  public static JsonNode postQuery(PinotQueryRequest r, String brokerBaseApiUrl)
       throws Exception {
-    return postQuery(query, brokerBaseApiUrl, false);
+    return postQuery(r.getQuery(), brokerBaseApiUrl, false, r.getQueryFormat());
   }
 
-  public static JsonNode postQuery(String query, String brokerBaseApiUrl, boolean enableTrace)
+  public static JsonNode postQuery(String query, String brokerBaseApiUrl, boolean enableTrace, String queryType)
       throws Exception {
     ObjectNode payload = JsonUtils.newObjectNode();
-    payload.put("pql", query);
+    payload.put(queryType, query);
     payload.put("trace", enableTrace);
 
     return JsonUtils.stringToJsonNode(sendPostRequest(brokerBaseApiUrl + "/query", payload.toString()));
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/DeleteAPIHybridClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/DeleteAPIHybridClusterIntegrationTest.java
index 7ee70773eea..03610a8d645 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/DeleteAPIHybridClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/DeleteAPIHybridClusterIntegrationTest.java
@@ -46,6 +46,16 @@ public class DeleteAPIHybridClusterIntegrationTest extends HybridClusterIntegrat
   private String TABLE_NAME;
   private long nOfflineRows;
 
+  private static void removeValue(JsonNode jsonArray, String value) {
+    Iterator<JsonNode> elements = jsonArray.elements();
+    while (elements.hasNext()) {
+      if (elements.next().asText().equals(value)) {
+        elements.remove();
+        return;
+      }
+    }
+  }
+
   @BeforeClass
   public void setUp()
       throws Exception {
@@ -103,6 +113,10 @@ public void testGeneratedQueriesWithMultiValues() {
   public void testQueriesFromQueryFile() {
   }
 
+  @Override // Leaving this out because it is done in the superclass
+  public void testSqlQueriesFromQueryFile() {
+  }
+
   @Override // Leaving this out because it is done in the superclass
   public void testBrokerDebugOutput() {
   }
@@ -303,14 +317,4 @@ private void repushOfflineSegments()
     uploadSegments(_tarDir);
     waitForNumRows(nOfflineRows, CommonConstants.Helix.TableType.OFFLINE);
   }
-
-  private static void removeValue(JsonNode jsonArray, String value) {
-    Iterator<JsonNode> elements = jsonArray.elements();
-    while (elements.hasNext()) {
-      if (elements.next().asText().equals(value)) {
-        elements.remove();
-        return;
-      }
-    }
-  }
 }
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HadoopSegmentBuildPushOfflineClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HadoopSegmentBuildPushOfflineClusterIntegrationTest.java
index bda936e0bd5..49903ef82e1 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HadoopSegmentBuildPushOfflineClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HadoopSegmentBuildPushOfflineClusterIntegrationTest.java
@@ -121,6 +121,13 @@ public void testQueriesFromQueryFile()
     super.testQueriesFromQueryFile();
   }
 
+  @Test
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    super.testQueriesFromQueryFile();
+  }
+
   @Test
   @Override
   public void testGeneratedQueriesWithMultiValues()
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTest.java
index 875969f5d21..0983d4ea796 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTest.java
@@ -235,6 +235,13 @@ public void testQueriesFromQueryFile()
     super.testQueriesFromQueryFile();
   }
 
+  @Test
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    super.testQueriesFromQueryFile();
+  }
+
   @Test
   @Override
   public void testGeneratedQueriesWithMultiValues()
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTestCommandLineRunner.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTestCommandLineRunner.java
index c1f77d8702a..be24be88dde 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTestCommandLineRunner.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/HybridClusterIntegrationTestCommandLineRunner.java
@@ -36,6 +36,7 @@
 import javax.annotation.Nonnull;
 import kafka.server.KafkaServerStartable;
 import org.apache.commons.io.FileUtils;
+import org.apache.pinot.broker.requesthandler.PinotQueryRequest;
 import org.apache.pinot.common.data.Schema;
 import org.apache.pinot.common.utils.JsonUtils;
 import org.apache.pinot.controller.ControllerConf;
@@ -338,7 +339,8 @@ public void testQueriesFromQueryFile()
                 @Override
                 public void run() {
                   try {
-                    JsonNode actualResponse = postQuery(currentQuery, "http://localhost:" + BROKER_BASE_PORT);
+                    JsonNode actualResponse =
+                        postQuery(new PinotQueryRequest("pql", currentQuery), "http://localhost:" + BROKER_BASE_PORT);
                     if (QueryComparison.compareWithEmpty(actualResponse, expectedResponse)
                         == QueryComparison.ComparisonStatus.FAILED) {
                       numFailedQueries.getAndIncrement();
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MultiNodesOfflineClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MultiNodesOfflineClusterIntegrationTest.java
index d5605d68150..b653ec6d63f 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MultiNodesOfflineClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/MultiNodesOfflineClusterIntegrationTest.java
@@ -45,6 +45,13 @@ public void testQueriesFromQueryFile()
     super.testQueriesFromQueryFile();
   }
 
+  @Test
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    super.testQueriesFromQueryFile();
+  }
+
   @Test
   @Override
   public void testGeneratedQueriesWithMultiValues()
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java
index 9ae4eef5319..71598b9cf3f 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java
@@ -752,4 +752,11 @@ private void testInstanceDecommission()
   protected boolean isUsingNewConfigFormat() {
     return true;
   }
+
+  @Test
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    super.testQueriesFromQueryFile();
+  }
 }
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java
index d5196bf67d1..8b4baebaae4 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/RealtimeClusterIntegrationTest.java
@@ -106,6 +106,13 @@ public void testQueriesFromQueryFile()
     super.testQueriesFromQueryFile();
   }
 
+  @Test
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    super.testQueriesFromQueryFile();
+  }
+
   @Test
   @Override
   public void testGeneratedQueriesWithMultiValues()
@@ -194,4 +201,10 @@ private void testDictionaryBasedFunctions(String column)
   protected boolean isUsingNewConfigFormat() {
     return true;
   }
+
+  @Test
+  public void testHardcodedSqlQueries()
+      throws Exception {
+    super.testHardcodedSqlQueries();
+  }
 }
diff --git a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTests.java b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTests.java
index 7e7b04173d1..7984493c458 100644
--- a/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTests.java
+++ b/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/SegmentCompletionIntegrationTests.java
@@ -192,6 +192,13 @@ public void testQueriesFromQueryFile()
     // Skipped
   }
 
+  @Test(enabled = false)
+  @Override
+  public void testSqlQueriesFromQueryFile()
+      throws Exception {
+    // Skipped
+  }
+
   @Test(enabled = false)
   @Override
   public void testGeneratedQueriesWithMultiValues()
diff --git a/pom.xml b/pom.xml
index 7e8ba3b67fe..6dd58153cf9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -126,6 +126,7 @@
     <swagger.version>1.5.16</swagger.version>
     <hadoop.version>2.7.0</hadoop.version>
     <antlr.version>4.6</antlr.version>
+    <calcite.version>1.19.0</calcite.version>
     <!-- commons-configuration, hadoop-common, hadoop-client use commons-lang -->
     <commons-lang.version>2.6</commons-lang.version>
     <!-- pinot-common, commons-configuration, hadoop-common, hadoop-client use commons-logging-->
@@ -713,6 +714,89 @@
         <artifactId>antlr4-runtime</artifactId>
         <version>${antlr.version}</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.calcite</groupId>
+        <artifactId>calcite-core</artifactId>
+        <version>${calcite.version}</version>
+        <exclusions>
+          <exclusion>
+            <groupId>com.google.protobuf</groupId>
+            <artifactId>protobuf-java</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.apache.calcite.avatica</groupId>
+            <artifactId>avatica-metrics</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.google.protobuf</groupId>
+            <artifactId>protobuf-java</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpcore</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-dbcp2</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.esri.geometry</groupId>
+            <artifactId>esri-geometry-api</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.fasterxml.jackson.dataformat</groupId>
+            <artifactId>jackson-dataformat-yaml</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.yahoo.datasketches</groupId>
+            <artifactId>sketches-core</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>net.hydromatic</groupId>
+            <artifactId>aggdesigner-algorithm</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-core</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-databind</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.fasterxml.jackson.core</groupId>
+            <artifactId>jackson-annotations</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.jayway.jsonpath</groupId>
+            <artifactId>json-path</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>joda-time</groupId>
+            <artifactId>joda-time</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.codehaus.janino</groupId>
+            <artifactId>janino</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.codehaus.janino</groupId>
+            <artifactId>commons-compiler</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>com.google.code.findbugs</groupId>
+            <artifactId>jsr305</artifactId>
+          </exclusion>
+          <exclusion>
+            <groupId>org.apache.commons</groupId>
+            <artifactId>commons-lang3</artifactId>
+          </exclusion>
+        </exclusions>
+      </dependency>
       <dependency>
         <groupId>com.jcabi</groupId>
         <artifactId>jcabi-log</artifactId>
