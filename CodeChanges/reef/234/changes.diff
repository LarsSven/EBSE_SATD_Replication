diff --git a/lang/cs/Org.Apache.REEF.Examples/MachineLearning/KMeans/KMeansDriverHandlers.cs b/lang/cs/Org.Apache.REEF.Examples/MachineLearning/KMeans/KMeansDriverHandlers.cs
index f4c1ca8382..ae22701e14 100644
--- a/lang/cs/Org.Apache.REEF.Examples/MachineLearning/KMeans/KMeansDriverHandlers.cs
+++ b/lang/cs/Org.Apache.REEF.Examples/MachineLearning/KMeans/KMeansDriverHandlers.cs
@@ -33,12 +33,10 @@
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
-using Org.Apache.REEF.Network.Group.Operators.Impl;
 using Org.Apache.REEF.Network.Group.Pipelining.Impl;
 using Org.Apache.REEF.Network.NetworkService;
 using Org.Apache.REEF.Network.NetworkService.Codec;
 using Org.Apache.REEF.Tang.Annotations;
-using Org.Apache.REEF.Tang.Formats;
 using Org.Apache.REEF.Tang.Implementations.Configuration;
 using Org.Apache.REEF.Tang.Implementations.Tang;
 using Org.Apache.REEF.Tang.Interface;
@@ -65,6 +63,10 @@ public class KMeansDriverHandlers :
         private readonly IGroupCommDriver _groupCommDriver;
         private readonly ICommunicationGroupDriver _commGroup;
         private readonly TaskStarter _groupCommTaskStarter;
+        private readonly IConfiguration _centroidCodecConf;
+        private readonly IConfiguration _controlMessageCodecConf;
+        private readonly IConfiguration _processedResultsCodecConf;
+
 
         [Inject]
         public KMeansDriverHandlers([Parameter(typeof(NumPartitions))] int numPartitions, GroupCommDriver groupCommDriver)
@@ -83,7 +85,7 @@ public KMeansDriverHandlers([Parameter(typeof(NumPartitions))] int numPartitions
 
             _groupCommDriver = groupCommDriver;
 
-            IConfiguration conf1 = CodecConfiguration<Centroids>.Conf
+            _centroidCodecConf = CodecToStreamingCodecConfiguration<Centroids>.Conf
                 .Set(CodecConfiguration<Centroids>.Codec, GenericType<CentroidsCodec>.Class)
                 .Build();
 
@@ -91,7 +93,7 @@ public KMeansDriverHandlers([Parameter(typeof(NumPartitions))] int numPartitions
                 .Set(PipelineDataConverterConfiguration<Centroids>.DataConverter, GenericType<DefaultPipelineDataConverter<Centroids>>.Class)
                 .Build();
 
-            IConfiguration conf2 = CodecConfiguration<ControlMessage>.Conf
+            _controlMessageCodecConf = CodecToStreamingCodecConfiguration<ControlMessage>.Conf
                 .Set(CodecConfiguration<ControlMessage>.Codec, GenericType<ControlMessageCodec>.Class)
                 .Build();
 
@@ -99,7 +101,7 @@ public KMeansDriverHandlers([Parameter(typeof(NumPartitions))] int numPartitions
                 .Set(PipelineDataConverterConfiguration<ControlMessage>.DataConverter, GenericType<DefaultPipelineDataConverter<ControlMessage>>.Class)
                 .Build();
 
-            IConfiguration conf3 = CodecConfiguration<ProcessedResults>.Conf
+            _processedResultsCodecConf = CodecToStreamingCodecConfiguration<ProcessedResults>.Conf
                 .Set(CodecConfiguration<ProcessedResults>.Codec, GenericType<ProcessedResultsCodec>.Class)
                 .Build();
 
@@ -112,9 +114,9 @@ public KMeansDriverHandlers([Parameter(typeof(NumPartitions))] int numPartitions
                 .Build();
 
             _commGroup = _groupCommDriver.DefaultGroup
-                   .AddBroadcast<Centroids>(Constants.CentroidsBroadcastOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, conf1, dataConverterConfig1)
-                   .AddBroadcast<ControlMessage>(Constants.ControlMessageBroadcastOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, conf2, dataConverterConfig2)
-                   .AddReduce<ProcessedResults>(Constants.MeansReduceOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, conf3, reduceFunctionConfig, dataConverterConfig3)
+                   .AddBroadcast<Centroids>(Constants.CentroidsBroadcastOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, dataConverterConfig1)
+                   .AddBroadcast<ControlMessage>(Constants.ControlMessageBroadcastOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, dataConverterConfig2)
+                   .AddReduce<ProcessedResults>(Constants.MeansReduceOperatorName, Constants.MasterTaskId, TopologyTypes.Flat, reduceFunctionConfig, dataConverterConfig3)
                    .Build();
 
             _groupCommTaskStarter = new TaskStarter(_groupCommDriver, _totalEvaluators);
@@ -149,10 +151,10 @@ public void OnNext(IAllocatedEvaluator allocatedEvaluator)
                     partitionNum = _partitionInex;
                     _partitionInex++;
                 }
-            } 
+            }
 
             IConfiguration gcServiceConfiguration = _groupCommDriver.GetServiceConfiguration();
-
+            gcServiceConfiguration = Configurations.Merge(gcServiceConfiguration, _centroidCodecConf, _controlMessageCodecConf, _processedResultsCodecConf);
             IConfiguration commonServiceConfiguration = TangFactory.GetTang().NewConfigurationBuilder(gcServiceConfiguration)
                 .BindNamedParameter<DataPartitionCache.PartitionIndex, int>(GenericType<DataPartitionCache.PartitionIndex>.Class, partitionNum.ToString(CultureInfo.InvariantCulture))
                 .BindNamedParameter<KMeansConfiguratioinOptions.ExecutionDirectory, string>(GenericType<KMeansConfiguratioinOptions.ExecutionDirectory>.Class, _executionDirectory)
diff --git a/lang/cs/Org.Apache.REEF.Network.Examples.Client/Run.cs b/lang/cs/Org.Apache.REEF.Network.Examples.Client/Run.cs
index e4d10da8fa..639335b021 100644
--- a/lang/cs/Org.Apache.REEF.Network.Examples.Client/Run.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Examples.Client/Run.cs
@@ -34,7 +34,8 @@ static void Main(string[] args)
             int startPort = 8900;
             int portRange = 1000;
             string testToRun = "RunBroadcastAndReduce";
-            
+            testToRun = testToRun.ToLower();
+
             if (args != null)
             {
                 if (args.Length > 0)
diff --git a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/BroadcastReduceDriverAndTasks/BroadcastReduceDriver.cs b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/BroadcastReduceDriverAndTasks/BroadcastReduceDriver.cs
index 1d91e63596..85ae3c0614 100644
--- a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/BroadcastReduceDriverAndTasks/BroadcastReduceDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/BroadcastReduceDriverAndTasks/BroadcastReduceDriver.cs
@@ -27,6 +27,7 @@
 using Org.Apache.REEF.Driver.Bridge;
 using Org.Apache.REEF.Driver.Context;
 using Org.Apache.REEF.Driver.Evaluator;
+using Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
@@ -57,6 +58,7 @@ public class BroadcastReduceDriver : IStartHandler, IObserver<IEvaluatorRequesto
         private readonly ICommunicationGroupDriver _commGroup;
         private readonly TaskStarter _groupCommTaskStarter;
         private readonly IConfiguration _tcpPortProviderConfig;
+        private readonly IConfiguration _codecConfig;
 
         [Inject]
         public BroadcastReduceDriver(
@@ -78,8 +80,9 @@ public class BroadcastReduceDriver : IStartHandler, IObserver<IEvaluatorRequesto
                     portRange.ToString(CultureInfo.InvariantCulture))
                 .Build();
 
-            IConfiguration codecConfig = CodecConfiguration<int>.Conf
-                .Set(CodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
+
+            _codecConfig = StreamingCodecConfiguration<int>.Conf
+                .Set(StreamingCodecConfiguration<int>.Codec, GenericType<IntStreamingCodec>.Class)
                 .Build();
 
             IConfiguration reduceFunctionConfig = ReduceFunctionConfiguration<int>.Conf
@@ -95,13 +98,11 @@ public class BroadcastReduceDriver : IStartHandler, IObserver<IEvaluatorRequesto
                         GroupTestConstants.BroadcastOperatorName,
                         GroupTestConstants.MasterTaskId, 
                         TopologyTypes.Tree,
-                        codecConfig,
                         dataConverterConfig)
                     .AddReduce<int>(
                         GroupTestConstants.ReduceOperatorName,
                         GroupTestConstants.MasterTaskId,
                         TopologyTypes.Tree,
-                        codecConfig,
                         reduceFunctionConfig,
                         dataConverterConfig)
                     .Build();
@@ -123,12 +124,14 @@ public void OnNext(IAllocatedEvaluator allocatedEvaluator)
         {
             IConfiguration contextConf = _groupCommDriver.GetContextConfiguration();
             IConfiguration serviceConf = _groupCommDriver.GetServiceConfiguration();
-            serviceConf = Configurations.Merge(serviceConf, _tcpPortProviderConfig);
+            serviceConf = Configurations.Merge(serviceConf, _tcpPortProviderConfig, _codecConfig);
             allocatedEvaluator.SubmitContextAndService(contextConf, serviceConf);
         }
 
         public void OnNext(IActiveContext activeContext)
         {
+            IConfiguration serviceConfig = _groupCommDriver.GetServiceConfiguration();
+
             if (_groupCommDriver.IsMasterTaskContext(activeContext))
             {
                 // Configure Master Task
@@ -190,7 +193,6 @@ private void CreateClassHierarchy()
             clrDlls.Add(typeof(BroadcastReduceDriver).Assembly.GetName().Name);
             clrDlls.Add(typeof(INameClient).Assembly.GetName().Name);
             clrDlls.Add(typeof(INetworkService<>).Assembly.GetName().Name);
-
             ClrHandlerHelper.GenerateClassHierarchy(clrDlls);
         }
 
diff --git a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/GroupTestConfig.cs b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/GroupTestConfig.cs
index e329788816..8a53dc82ae 100644
--- a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/GroupTestConfig.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/GroupTestConfig.cs
@@ -43,12 +43,12 @@ public class EvaluatorId : Name<string>
         {
         }
 
-        [NamedParameter("Size of the array")]
+        [NamedParameter(Documentation = "Size of the array", DefaultValue = "6")]
         public class ArraySize : Name<int>
         {
         }
 
-        [NamedParameter("Chunk size for pipelining")]
+        [NamedParameter(Documentation = "Chunk size for pipelining", DefaultValue = "2")]
         public class ChunkSize : Name<int>
         {
         }
diff --git a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/PipelineBroadcastReduceDriverAndTasks/PipelinedBroadcastReduceDriver.cs b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/PipelineBroadcastReduceDriverAndTasks/PipelinedBroadcastReduceDriver.cs
index 4cf84861e3..f32de617b4 100644
--- a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/PipelineBroadcastReduceDriverAndTasks/PipelinedBroadcastReduceDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/PipelineBroadcastReduceDriverAndTasks/PipelinedBroadcastReduceDriver.cs
@@ -27,6 +27,8 @@
 using Org.Apache.REEF.Driver.Bridge;
 using Org.Apache.REEF.Driver.Context;
 using Org.Apache.REEF.Driver.Evaluator;
+using Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs;
+using Org.Apache.REEF.Network.Examples.GroupCommunication.BroadcastReduceDriverAndTasks;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
@@ -56,6 +58,7 @@ public class PipelinedBroadcastReduceDriver : IStartHandler, IObserver<IEvaluato
         private readonly int _numEvaluators;
         private readonly int _numIterations;
         private readonly IConfiguration _tcpPortProviderConfig;
+        private readonly IConfiguration _codecConfig;
 
         [Inject]
         public PipelinedBroadcastReduceDriver(
@@ -81,8 +84,8 @@ public class PipelinedBroadcastReduceDriver : IStartHandler, IObserver<IEvaluato
                     portRange.ToString(CultureInfo.InvariantCulture))
                 .Build();
 
-            var codecConfig = CodecConfiguration<int[]>.Conf
-                .Set(CodecConfiguration<int[]>.Codec, GenericType<IntArrayCodec>.Class)
+            _codecConfig = StreamingCodecConfiguration<int[]>.Conf
+                .Set(StreamingCodecConfiguration<int[]>.Codec, GenericType<IntArrayStreamingCodec>.Class)
                 .Build();
 
             var reduceFunctionConfig = ReduceFunctionConfiguration<int[]>.Conf
@@ -106,13 +109,11 @@ public class PipelinedBroadcastReduceDriver : IStartHandler, IObserver<IEvaluato
                     GroupTestConstants.BroadcastOperatorName,
                     GroupTestConstants.MasterTaskId,
                     TopologyTypes.Tree,
-                    codecConfig,
                     dataConverterConfig)
                 .AddReduce<int[]>(
                     GroupTestConstants.ReduceOperatorName,
                     GroupTestConstants.MasterTaskId,
                     TopologyTypes.Tree,
-                    codecConfig,
                     reduceFunctionConfig,
                     dataConverterConfig)
                 .Build();
@@ -121,7 +122,21 @@ public class PipelinedBroadcastReduceDriver : IStartHandler, IObserver<IEvaluato
 
             CreateClassHierarchy();
         }
+        public string Identifier { get; set; }
+
+        public void OnNext(IEvaluatorRequestor evaluatorRequestor)
+        {
+            EvaluatorRequest request = new EvaluatorRequest(_numEvaluators, 512, 2, "WonderlandRack", "BroadcastEvaluator");
+            evaluatorRequestor.Submit(request);
+        }
 
+        public void OnNext(IAllocatedEvaluator allocatedEvaluator)
+        {
+            IConfiguration contextConf = _groupCommDriver.GetContextConfiguration();
+            IConfiguration serviceConf = _groupCommDriver.GetServiceConfiguration();
+            serviceConf = Configurations.Merge(serviceConf, _codecConfig, _tcpPortProviderConfig);
+            allocatedEvaluator.SubmitContextAndService(contextConf, serviceConf);
+        }
         public void OnNext(IActiveContext activeContext)
         {
             if (_groupCommDriver.IsMasterTaskContext(activeContext))
@@ -173,20 +188,6 @@ public void OnNext(IActiveContext activeContext)
             }
         }
 
-        public void OnNext(IAllocatedEvaluator allocatedEvaluator)
-        {
-            var contextConf = _groupCommDriver.GetContextConfiguration();
-            var serviceConf = _groupCommDriver.GetServiceConfiguration();
-            serviceConf = Configurations.Merge(serviceConf, _tcpPortProviderConfig);
-            allocatedEvaluator.SubmitContextAndService(contextConf, serviceConf);
-        }
-
-        public void OnNext(IEvaluatorRequestor evaluatorRequestor)
-        {
-            var request = new EvaluatorRequest(_numEvaluators, 512, 2, "WonderlandRack", "BroadcastEvaluator");
-            evaluatorRequestor.Submit(request);
-        }
-
         public void OnError(Exception error)
         {
         }
@@ -199,8 +200,6 @@ public void OnNext(IFailedEvaluator value)
         {
         }
 
-        public string Identifier { get; set; }
-
         private void CreateClassHierarchy()
         {
             var clrDlls = new HashSet<string>();
diff --git a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/ScatterReduceDriverAndTasks/ScatterReduceDriver.cs b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/ScatterReduceDriverAndTasks/ScatterReduceDriver.cs
index ba812e3a1d..8a9d3e2e92 100644
--- a/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/ScatterReduceDriverAndTasks/ScatterReduceDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Examples/GroupCommunication/ScatterReduceDriverAndTasks/ScatterReduceDriver.cs
@@ -27,6 +27,7 @@
 using Org.Apache.REEF.Driver.Bridge;
 using Org.Apache.REEF.Driver.Context;
 using Org.Apache.REEF.Driver.Evaluator;
+using Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs;
 using Org.Apache.REEF.Network.Examples.GroupCommunication.BroadcastReduceDriverAndTasks;
 using Org.Apache.REEF.Network.Examples.GroupCommunication.PipelineBroadcastReduceDriverAndTasks;
 using Org.Apache.REEF.Network.Group.Config;
@@ -55,6 +56,7 @@ public class ScatterReduceDriver : IStartHandler, IObserver<IEvaluatorRequestor>
         private readonly IGroupCommDriver _groupCommDriver;
         private readonly ICommunicationGroupDriver _commGroup;
         private readonly TaskStarter _groupCommTaskStarter;
+        private readonly IConfiguration _codecConfig;
 
         [Inject]
         public ScatterReduceDriver(
@@ -65,9 +67,9 @@ public class ScatterReduceDriver : IStartHandler, IObserver<IEvaluatorRequestor>
             _numEvaluators = numEvaluators;
             _groupCommDriver = groupCommDriver;
 
-            IConfiguration codecConfig = CodecConfiguration<int>.Conf
-                .Set(CodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
-                .Build();
+            _codecConfig = StreamingCodecConfiguration<int>.Conf
+               .Set(StreamingCodecConfiguration<int>.Codec, GenericType<IntStreamingCodec>.Class)
+               .Build();
 
             IConfiguration reduceFunctionConfig = ReduceFunctionConfiguration<int>.Conf
                 .Set(ReduceFunctionConfiguration<int>.ReduceFunction, GenericType<SumFunction>.Class)
@@ -82,13 +84,11 @@ public class ScatterReduceDriver : IStartHandler, IObserver<IEvaluatorRequestor>
                         GroupTestConstants.ScatterOperatorName,
                             GroupTestConstants.MasterTaskId,
                             TopologyTypes.Tree, 
-                            codecConfig,
                             dataConverterConfig)
                     .AddReduce<int>(
                         GroupTestConstants.ReduceOperatorName,
                         GroupTestConstants.MasterTaskId,
                         TopologyTypes.Tree, 
-                        codecConfig,
                         reduceFunctionConfig,
                         dataConverterConfig)
 
@@ -111,6 +111,7 @@ public void OnNext(IAllocatedEvaluator allocatedEvaluator)
         {
             IConfiguration contextConf = _groupCommDriver.GetContextConfiguration();
             IConfiguration serviceConf = _groupCommDriver.GetServiceConfiguration();
+            serviceConf = Configurations.Merge(serviceConf, _codecConfig);
             allocatedEvaluator.SubmitContextAndService(contextConf, serviceConf);
         }
 
diff --git a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTests.cs b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTests.cs
index 53b8cb5c3e..f2bec7c323 100644
--- a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTests.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTests.cs
@@ -21,17 +21,17 @@
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Globalization;
+using System.IO;
 using System.Linq;
 using System.Net;
 using System.Reactive;
-using System.Text;
+using System.Threading;
+using System.Threading.Tasks;
 using Microsoft.VisualStudio.TestTools.UnitTesting;
 using Org.Apache.REEF.Common.Io;
 using Org.Apache.REEF.Common.Tasks;
-using Org.Apache.REEF.Examples.MachineLearning.KMeans;
-using Org.Apache.REEF.Examples.MachineLearning.KMeans.codecs;
+using Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs;
 using Org.Apache.REEF.Network.Examples.GroupCommunication;
-using Org.Apache.REEF.Network.Group.Codec;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
@@ -43,7 +43,7 @@
 using Org.Apache.REEF.Network.Group.Topology;
 using Org.Apache.REEF.Network.Naming;
 using Org.Apache.REEF.Network.NetworkService;
-using Org.Apache.REEF.Network.NetworkService.Codec;
+using Org.Apache.REEF.Network.StreamingCodec;
 using Org.Apache.REEF.Network.Tests.NamingService;
 using Org.Apache.REEF.Tang.Annotations;
 using Org.Apache.REEF.Tang.Formats;
@@ -53,7 +53,6 @@
 using Org.Apache.REEF.Tang.Util;
 using Org.Apache.REEF.Wake.Remote;
 using Org.Apache.REEF.Wake.Remote.Impl;
-using Constants = Org.Apache.REEF.Common.Constants;
 
 namespace Org.Apache.REEF.Network.Tests.GroupCommunication
 {
@@ -66,34 +65,41 @@ public void TestSender()
             using (var nameServer = NameServerTests.BuildNameServer())
             {
                 IPEndPoint endpoint = nameServer.LocalEndpoint;
-                BlockingCollection<GroupCommunicationMessage> messages1 = new BlockingCollection<GroupCommunicationMessage>();
-                BlockingCollection<GroupCommunicationMessage> messages2 = new BlockingCollection<GroupCommunicationMessage>();
 
-                var handler1 = Observer.Create<NsMessage<GroupCommunicationMessage>>(
-                    msg => messages1.Add(msg.Data.First()));
-                var handler2 = Observer.Create<NsMessage<GroupCommunicationMessage>>(
-                    msg => messages2.Add(msg.Data.First()));
+                BlockingCollection<GeneralGroupCommunicationMessage> messages1 =
+                    new BlockingCollection<GeneralGroupCommunicationMessage>();
+                BlockingCollection<GeneralGroupCommunicationMessage> messages2 =
+                    new BlockingCollection<GeneralGroupCommunicationMessage>();
 
-                var networkService1 = BuildNetworkService(endpoint, handler1);
-                var networkService2 = BuildNetworkService(endpoint, handler2);
+                var handler1 =
+                    Observer.Create<WritableNsMessage<GeneralGroupCommunicationMessage>>(msg => messages1.Add(msg.Data.First()));
+                var handler2 =
+                    Observer.Create<WritableNsMessage<GeneralGroupCommunicationMessage>>(msg => messages2.Add(msg.Data.First()));
 
+                var networkServiceInjector1 = BuildNetworkServiceInjector(endpoint, handler1);
+                var networkServiceInjector2 = BuildNetworkServiceInjector(endpoint, handler2);
+
+                var networkService1 = networkServiceInjector1.GetInstance<
+                  WritableNetworkService<GeneralGroupCommunicationMessage>>();
+                var networkService2 = networkServiceInjector2.GetInstance<
+                    WritableNetworkService<GeneralGroupCommunicationMessage>>();
                 networkService1.Register(new StringIdentifier("id1"));
                 networkService2.Register(new StringIdentifier("id2"));
 
-                Sender sender1 = new Sender(networkService1, new StringIdentifierFactory());
-                Sender sender2 = new Sender(networkService2, new StringIdentifierFactory());
+                Sender sender1 = networkServiceInjector1.GetInstance<Sender>();
+                Sender sender2 = networkServiceInjector2.GetInstance<Sender>();
 
-                sender1.Send(CreateGcm("abc", "id1", "id2"));
-                sender1.Send(CreateGcm("def", "id1", "id2"));
+                sender1.Send(CreateGcmStringType("abc", "id1", "id2"));
+                sender1.Send(CreateGcmStringType("def", "id1", "id2"));
+                sender2.Send(CreateGcmStringType("ghi", "id2", "id1"));
 
-                sender2.Send(CreateGcm("ghi", "id2", "id1"));
+                string msg1 = (messages2.Take() as GroupCommunicationMessage<string>).Data[0];
+                string msg2 = (messages2.Take() as GroupCommunicationMessage<string>).Data[0];
 
-                string msg1 = Encoding.UTF8.GetString(messages2.Take().Data[0]);
-                string msg2 = Encoding.UTF8.GetString(messages2.Take().Data[0]);
                 Assert.AreEqual("abc", msg1);
                 Assert.AreEqual("def", msg2);
 
-                string msg3 = Encoding.UTF8.GetString(messages1.Take().Data[0]);
+                string msg3 = (messages1.Take() as GroupCommunicationMessage<string>).Data[0];
                 Assert.AreEqual("ghi", msg3);
             }
         }
@@ -115,18 +121,16 @@ public void TestBroadcastReduceOperators()
                     broadcastOperatorName,
                     masterTaskId,
                     TopologyTypes.Flat,
-                    GetDefaulCodecConfig(),
                     GetDefaulDataConverterConfig())
                 .AddReduce<int>(
                     reduceOperatorName,
                     masterTaskId,
                     TopologyTypes.Flat,
-                    GetDefaulCodecConfig(),
                     GetDefaulDataConverterConfig(),
                     GetDefaulReduceFuncConfig())
                 .Build();
 
-            var commGroups = CommGroupClients(groupName, numTasks, groupCommunicationDriver, commGroup);
+            var commGroups = CommGroupClients(groupName, numTasks, groupCommunicationDriver, commGroup, GetDefaultCodecConfig());
 
             //for master task
             IBroadcastSender<int> broadcastSender = commGroups[0].GetBroadcastSender<int>(broadcastOperatorName);
@@ -172,8 +176,8 @@ public void TestGetBroadcastReduceOperatorsForIntArrayMessageType()
             const int numTasks = 3;
             const int fanOut = 2;
 
-            IConfiguration codecConfig = CodecConfiguration<int[]>.Conf
-                .Set(CodecConfiguration<int[]>.Codec, GenericType<IntArrayCodec>.Class)
+            IConfiguration codecConfig = StreamingCodecConfiguration<int[]>.Conf
+                .Set(StreamingCodecConfiguration<int[]>.Codec, GenericType<IntArrayStreamingCodec>.Class)
                 .Build();
 
             IConfiguration reduceFunctionConfig = ReduceFunctionConfiguration<int[]>.Conf
@@ -196,18 +200,16 @@ public void TestGetBroadcastReduceOperatorsForIntArrayMessageType()
                         broadcastOperatorName,
                         masterTaskId,
                         TopologyTypes.Flat,
-                        codecConfig,
                         dataConverterConfig)
                     .AddReduce<int[]>(
                         reduceOperatorName,
                         masterTaskId,
                         TopologyTypes.Flat,
-                        codecConfig,
                         dataConverterConfig,
                         reduceFunctionConfig)
                     .Build();
 
-            var commGroups = CommGroupClients(groupName, numTasks, groupCommunicationDriver, commGroup);
+            var commGroups = CommGroupClients(groupName, numTasks, groupCommunicationDriver, commGroup, codecConfig);
 
             //for master task
             IBroadcastSender<int[]> broadcastSender = commGroups[0].GetBroadcastSender<int[]>(broadcastOperatorName);
@@ -245,18 +247,16 @@ public void TestScatterReduceOperators()
                     scatterOperatorName,
                     masterTaskId,
                     TopologyTypes.Flat,
-                    GetDefaulCodecConfig(),
                     GetDefaulDataConverterConfig())
                 .AddReduce<int>(
                         reduceOperatorName,
                         masterTaskId,
                         TopologyTypes.Flat,
-                        GetDefaulCodecConfig(),
                         GetDefaulReduceFuncConfig(),
                         GetDefaulDataConverterConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(scatterOperatorName);
             IReduceReceiver<int> sumReducer = commGroups[0].GetReduceReceiver<int>(reduceOperatorName);
@@ -294,43 +294,6 @@ public void TestScatterReduceOperators()
             Assert.AreEqual(sum, data.Sum());
         }
 
-        [TestMethod]
-        public void TestCodecConfig()
-        {
-            string groupName = "group1";
-            string masterTaskId = "task0";
-            string driverId = "Driver Id";
-            string meansReduceOperatorName = "MeansReduce";
-            string centroidsBroadcastOperatorName = "CentroidsBroadcast";
-            string controlMessageBroadcastOperatorName = "ControlMessageBroadcast";
-
-
-            IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, 2, 5);
-
-            IConfiguration conf1 = CodecConfiguration<Centroids>.Conf
-                .Set(CodecConfiguration<Centroids>.Codec, GenericType<CentroidsCodec>.Class)
-                .Build();
-
-            IConfiguration conf2 = CodecConfiguration<ControlMessage>.Conf
-                .Set(CodecConfiguration<ControlMessage>.Codec, GenericType<ControlMessageCodec>.Class)
-                .Build();
-
-            IConfiguration conf3 = CodecConfiguration<ProcessedResults>.Conf
-                .Set(CodecConfiguration<ProcessedResults>.Codec, GenericType<ProcessedResultsCodec>.Class)
-                .Build();
-
-            IConfiguration reduceFunctionConfig = ReduceFunctionConfiguration<ProcessedResults>.Conf
-                .Set(ReduceFunctionConfiguration<ProcessedResults>.ReduceFunction, GenericType<KMeansMasterTask.AggregateMeans>.Class)
-                .Build();
-
-            IConfiguration merged = Configurations.Merge(conf3, reduceFunctionConfig);
-            var group = groupCommDriver.DefaultGroup
-                   .AddBroadcast<Centroids>(centroidsBroadcastOperatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
-                   .AddBroadcast<ControlMessage>(controlMessageBroadcastOperatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
-                   .AddReduce<ProcessedResults>(meansReduceOperatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
-                   .Build();
-        }
-
         [TestMethod]
         public void TestBroadcastOperator()
         {
@@ -348,7 +311,7 @@ public void TestBroadcastOperator()
                 .AddBroadcast(operatorName, masterTaskId)
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IBroadcastSender<int> sender = commGroups[0].GetBroadcastSender<int>(operatorName);
             IBroadcastReceiver<int> receiver1 = commGroups[1].GetBroadcastReceiver<int>(operatorName);
@@ -382,7 +345,7 @@ public void TestBroadcastOperatorWithDefaultCodec()
                 .AddBroadcast(operatorName, masterTaskId)
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IBroadcastSender<int> sender = commGroups[0].GetBroadcastSender<int>(operatorName);
             IBroadcastReceiver<int> receiver1 = commGroups[1].GetBroadcastReceiver<int>(operatorName);
@@ -416,7 +379,7 @@ public void TestBroadcastOperator2()
               .AddBroadcast(operatorName, masterTaskId)
               .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IBroadcastSender<int> sender = commGroups[0].GetBroadcastSender<int>(operatorName);
             IBroadcastReceiver<int> receiver1 = commGroups[1].GetBroadcastReceiver<int>(operatorName);
@@ -452,10 +415,10 @@ public void TestReduceOperator()
             IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             var commGroup = groupCommDriver.DefaultGroup
-                .AddReduce<int>(operatorName, "task0", TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
+                .AddReduce<int>(operatorName, "task0", TopologyTypes.Flat, GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IReduceReceiver<int> receiver = commGroups[0].GetReduceReceiver<int>(operatorName);
             IReduceSender<int> sender1 = commGroups[1].GetReduceSender<int>(operatorName);
@@ -487,10 +450,10 @@ public void TestReduceOperator2()
             IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             var commGroup = groupCommDriver.DefaultGroup
-                .AddReduce<int>(operatorName, "task0", TopologyTypes.Flat, GetDefaulCodecConfig(),GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
+                .AddReduce<int>(operatorName, "task0", TopologyTypes.Flat,GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IReduceReceiver<int> receiver = commGroups[0].GetReduceReceiver<int>(operatorName);
             IReduceSender<int> sender1 = commGroups[1].GetReduceSender<int>(operatorName);
@@ -534,7 +497,7 @@ public void TestScatterOperator()
                 .AddScatter(operatorName, masterTaskId)
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -573,7 +536,7 @@ public void TestScatterOperatorWithDefaultCodec()
                 .AddScatter(operatorName, masterTaskId)
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -609,10 +572,10 @@ public void TestScatterOperator2()
             IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             var commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -659,10 +622,10 @@ public void TestScatterOperator3()
             IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             var commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulDataConverterConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -706,10 +669,10 @@ public void TestScatterOperator4()
             IGroupCommDriver groupCommDriver = GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             var commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Flat, GetDefaulDataConverterConfig())
                 .Build();
 
-            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            List<ICommunicationGroupClient> commGroups = CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
             IScatterReceiver<int> receiver2 = commGroups[2].GetScatterReceiver<int>(operatorName);
@@ -744,20 +707,27 @@ public void TestScatterOperator4()
         public void TestConfigurationBroadcastSpec()
         {
             FlatTopology<int> topology = new FlatTopology<int>("Operator", "Operator", "task1", "driverid",
-                new BroadcastOperatorSpec("Sender", GetDefaulCodecConfig(), GetDefaulDataConverterConfig()));
+                new BroadcastOperatorSpec("Sender", GetDefaultCodecConfig(), GetDefaulDataConverterConfig()));
 
             topology.AddTask("task1");
             var conf = topology.GetTaskConfiguration("task1");
 
-            ICodec<int> codec = TangFactory.GetTang().NewInjector(conf).GetInstance<ICodec<int>>();
-            Assert.AreEqual(3, codec.Decode(codec.Encode(3)));
+            IStreamingCodec<int> codec = TangFactory.GetTang().NewInjector(conf).GetInstance<IStreamingCodec<int>>();
+            
+            var stream = new MemoryStream();
+            IDataWriter writer = new StreamDataWriter(stream);
+            codec.Write(3, writer);
+            stream.Position = 0;
+            IDataReader reader = new StreamDataReader(stream);
+            int res = codec.Read(reader);
+            Assert.AreEqual(3, res);
         }
 
         [TestMethod]
         public void TestConfigurationReduceSpec()
         {
             FlatTopology<int> topology = new FlatTopology<int>("Operator", "Group", "task1", "driverid",
-                new ReduceOperatorSpec("task1", Configurations.Merge(GetDefaulCodecConfig(), GetDefaulDataConverterConfig(),  GetDefaulReduceFuncConfig())));
+                new ReduceOperatorSpec("task1", Configurations.Merge(GetDefaultCodecConfig(), GetDefaulDataConverterConfig(),  GetDefaulReduceFuncConfig())));
 
             topology.AddTask("task1");
             var conf2 = topology.GetTaskConfiguration("task1");
@@ -781,10 +751,41 @@ public static IGroupCommDriver GetInstanceOfGroupCommDriver(string driverId, str
             return groupCommDriver;
         }
 
-        public static List<ICommunicationGroupClient> CommGroupClients(string groupName, int numTasks, IGroupCommDriver groupCommDriver, ICommunicationGroupDriver commGroupDriver)
+        [TestMethod]
+        public async Task TestCodecToStreamingCodecConfiguration()
+        {
+            var config = CodecToStreamingCodecConfiguration<int>.Conf
+               .Set(CodecToStreamingCodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
+               .Build();
+
+            IStreamingCodec<PipelineMessage<int>> streamingCodec =
+                TangFactory.GetTang().NewInjector(config).GetInstance<IStreamingCodec<PipelineMessage<int>>>();
+
+            CancellationToken token = new CancellationToken();
+
+            int obj = 5;
+            PipelineMessage<int> message = new PipelineMessage<int>(obj, true);
+            var stream = new MemoryStream();
+            IDataWriter writer = new StreamDataWriter(stream);
+            streamingCodec.Write(message, writer);
+            PipelineMessage<int> message1 = new PipelineMessage<int>(obj + 1, false);
+            await streamingCodec.WriteAsync(message1, writer, token);
+
+            stream.Position = 0;
+            IDataReader reader = new StreamDataReader(stream);
+            var res1 = streamingCodec.Read(reader);
+            var res2 = await streamingCodec.ReadAsync(reader, token);
+            Assert.AreEqual(obj, res1.Data);
+            Assert.AreEqual(obj + 1, res2.Data);
+            Assert.AreEqual(true, res1.IsLast);
+            Assert.AreEqual(false, res2.IsLast);
+        }
+
+        public static List<ICommunicationGroupClient> CommGroupClients(string groupName, int numTasks, IGroupCommDriver groupCommDriver, ICommunicationGroupDriver commGroupDriver, IConfiguration userServiceConfig)
         {
             List<ICommunicationGroupClient> commGroups = new List<ICommunicationGroupClient>();
             IConfiguration serviceConfig = groupCommDriver.GetServiceConfiguration();
+            serviceConfig = Configurations.Merge(serviceConfig, userServiceConfig);
 
             List<IConfiguration> partialConfigs = new List<IConfiguration>();
             for (int i = 0; i < numTasks; i++)
@@ -820,24 +821,31 @@ public static List<ICommunicationGroupClient> CommGroupClients(string groupName,
             return commGroups;
         }
 
-        public static NetworkService<GroupCommunicationMessage> BuildNetworkService(
-            IPEndPoint nameServerEndpoint, IObserver<NsMessage<GroupCommunicationMessage>> handler)
+        public static IInjector BuildNetworkServiceInjector(
+            IPEndPoint nameServerEndpoint, IObserver<WritableNsMessage<GeneralGroupCommunicationMessage>> handler)
         {
-            var injector = TangFactory.GetTang().NewInjector();
-            var remoteManagerFactory = injector.GetInstance<IRemoteManagerFactory>();
-            return new NetworkService<GroupCommunicationMessage>(
-                0, handler, new StringIdentifierFactory(),
-                new GroupCommunicationMessageCodec(),
-                new NameClient(nameServerEndpoint.Address.ToString(),
-                    nameServerEndpoint.Port),
-                    remoteManagerFactory);
-                    
+            var config = TangFactory.GetTang().NewConfigurationBuilder()
+                .BindNamedParameter(typeof (NamingConfigurationOptions.NameServerAddress),
+                    nameServerEndpoint.Address.ToString())
+                .BindNamedParameter(typeof (NamingConfigurationOptions.NameServerPort),
+                    nameServerEndpoint.Port.ToString())
+                .BindNamedParameter(typeof (NetworkServiceOptions.NetworkServicePort),
+                    (0).ToString(CultureInfo.InvariantCulture))
+                .BindImplementation(GenericType<INameClient>.Class, GenericType<NameClient>.Class)
+                .BindImplementation(GenericType<IStreamingCodec<string>>.Class, GenericType<StringStreamingCodec>.Class)
+                .Build();
+
+            var injector = TangFactory.GetTang().NewInjector(config);
+            injector.BindVolatileInstance(
+                GenericType<IObserver<WritableNsMessage<GeneralGroupCommunicationMessage>>>.Class, handler);
+
+            return injector;
         }
 
-        private GroupCommunicationMessage CreateGcm(string message, string from, string to)
+        private GroupCommunicationMessage<string> CreateGcmStringType(string message, string from, string to)
         {
-            byte[] data = Encoding.UTF8.GetBytes(message);
-            return new GroupCommunicationMessage("g1", "op1", from, to, data, MessageType.Data);
+            var stringCodec = TangFactory.GetTang().NewInjector().GetInstance<StringStreamingCodec>();
+            return new GroupCommunicationMessage<string>("g1", "op1", from, to, message, MessageType.Data, stringCodec);
         }
 
         private static void ScatterReceiveReduce(IScatterReceiver<int> receiver, IReduceSender<int> sumSender)
@@ -852,21 +860,21 @@ public static int TriangleNumber(int n)
             return Enumerable.Range(1, n).Sum();
         }
 
-        private IConfiguration GetDefaulCodecConfig()
+        private static IConfiguration GetDefaultCodecConfig()
         {
-            return CodecConfiguration<int>.Conf
-                .Set(CodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
+            return StreamingCodecConfiguration<int>.Conf
+                .Set(StreamingCodecConfiguration<int>.Codec, GenericType<IntStreamingCodec>.Class)
                 .Build();
         }
 
-        private IConfiguration GetDefaulReduceFuncConfig()
+        private static IConfiguration GetDefaulReduceFuncConfig()
         {
             return ReduceFunctionConfiguration<int>.Conf
                 .Set(ReduceFunctionConfiguration<int>.ReduceFunction, GenericType<SumFunction>.Class)
                 .Build();
         }
 
-        private IConfiguration GetDefaulDataConverterConfig()
+        private static IConfiguration GetDefaulDataConverterConfig()
         {
             return PipelineDataConverterConfiguration<int>.Conf
                 .Set(PipelineDataConverterConfiguration<int>.DataConverter, GenericType<DefaultPipelineDataConverter<int>>.Class)
@@ -937,33 +945,6 @@ public int[] Reduce(IEnumerable<int[]> elements)
         }
     }
 
-    class IntArrayCodec : ICodec<int[]>
-    {
-        [Inject]
-        private IntArrayCodec()
-        {
-        }
-
-        public byte[] Encode(int[] obj)
-        {
-            byte[] result = new byte[sizeof(Int32) * obj.Length];
-            Buffer.BlockCopy(obj, 0, result, 0, result.Length);
-            return result;
-        }
-
-        public int[] Decode(byte[] data)
-        {
-            if (data.Length % sizeof(Int32) != 0)
-            {
-                throw new Exception("error inside integer array decoder, byte array length not a multiple of interger size");
-            }
-
-            int[] result = new int[data.Length / sizeof(Int32)];
-            Buffer.BlockCopy(data, 0, result, 0, data.Length);
-            return result;
-        }
-    }
-
     class PipelineIntDataConverter : IPipelineDataConverter<int[]>
     {
         readonly int _chunkSize;
diff --git a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTreeTopologyTests.cs b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTreeTopologyTests.cs
index f8af7222f9..88ae9b3220 100644
--- a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTreeTopologyTests.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/GroupCommunicationTreeTopologyTests.cs
@@ -21,8 +21,10 @@
 using System.Globalization;
 using System.Linq;
 using Microsoft.VisualStudio.TestTools.UnitTesting;
+using Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver;
+using Org.Apache.REEF.Network.Group.Driver.Impl;
 using Org.Apache.REEF.Network.Group.Operators;
 using Org.Apache.REEF.Network.Group.Operators.Impl;
 using Org.Apache.REEF.Network.Group.Pipelining.Impl;
@@ -42,7 +44,7 @@ public class GroupCommunicationTreeTopologyTests
         public void TestTreeTopology()
         {
             TreeTopology<int> topology = new TreeTopology<int>("Operator", "Operator", "task1", "driverid",
-                new BroadcastOperatorSpec("task1", GetDefaulCodecConfig(), GetDefaulDataConverterConfig()), 2);
+                new BroadcastOperatorSpec("task1", GetDefaultDataConverterConfig()), 2);
             for (int i = 1; i < 8; i++)
             {
                 string taskid = "task" + i;
@@ -68,10 +70,10 @@ public void TestReduceOperator()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddReduce<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
+                .AddReduce<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig(), GetDefaultReduceFuncConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IReduceReceiver<int> receiver = commGroups[0].GetReduceReceiver<int>(operatorName);
             IReduceSender<int> sender1 = commGroups[1].GetReduceSender<int>(operatorName);
@@ -124,10 +126,10 @@ public void TestBroadcastOperator()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddBroadcast<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig(), GetDefaulReduceFuncConfig())
+                .AddBroadcast<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig(), GetDefaultReduceFuncConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IBroadcastSender<int> sender = commGroups[0].GetBroadcastSender<int>(operatorName);
             IBroadcastReceiver<int> receiver1 = commGroups[1].GetBroadcastReceiver<int>(operatorName);
@@ -204,18 +206,16 @@ public void TestBroadcastReduceOperators()
                     broadcastOperatorName,
                     masterTaskId,
                     TopologyTypes.Tree,
-                    GetDefaulCodecConfig(),
-                    GetDefaulDataConverterConfig())
+                    GetDefaultDataConverterConfig())
                 .AddReduce<int>(
                     reduceOperatorName,
                     masterTaskId,
                     TopologyTypes.Tree,
-                    GetDefaulCodecConfig(),
-                    GetDefaulDataConverterConfig(),
-                    GetDefaulReduceFuncConfig())
+                    GetDefaultDataConverterConfig(),
+                    GetDefaultReduceFuncConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             //for master task
             IBroadcastSender<int> broadcastSender = commGroups[0].GetBroadcastSender<int>(broadcastOperatorName);
@@ -317,10 +317,10 @@ public void TestScatterOperator()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -362,10 +362,10 @@ public void TestScatterOperator2()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -416,10 +416,10 @@ public void TestScatterOperator3()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -467,10 +467,10 @@ public void TestScatterOperator4()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -519,10 +519,10 @@ public void TestScatterOperator5()
             var groupCommDriver = GroupCommunicationTests.GetInstanceOfGroupCommDriver(driverId, masterTaskId, groupName, fanOut, numTasks);
 
             ICommunicationGroupDriver commGroup = groupCommDriver.DefaultGroup
-                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaulCodecConfig(), GetDefaulDataConverterConfig())
+                .AddScatter<int>(operatorName, masterTaskId, TopologyTypes.Tree, GetDefaultDataConverterConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(operatorName);
             IScatterReceiver<int> receiver1 = commGroups[1].GetScatterReceiver<int>(operatorName);
@@ -586,18 +586,16 @@ public void TestScatterReduceOperators()
                     scatterOperatorName,
                     masterTaskId,
                     TopologyTypes.Tree,
-                    GetDefaulCodecConfig(),
-                    GetDefaulDataConverterConfig())
+                    GetDefaultDataConverterConfig())
                 .AddReduce<int>(
                     reduceOperatorName,
                     masterTaskId,
                     TopologyTypes.Tree,
-                    GetDefaulCodecConfig(),
-                    GetDefaulDataConverterConfig(),
-                    GetDefaulReduceFuncConfig())
+                    GetDefaultDataConverterConfig(),
+                    GetDefaultReduceFuncConfig())
                 .Build();
 
-            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup);
+            var commGroups = GroupCommunicationTests.CommGroupClients(groupName, numTasks, groupCommDriver, commGroup, GetDefaultCodecConfig());
 
             IScatterSender<int> sender = commGroups[0].GetScatterSender<int>(scatterOperatorName);
             IReduceReceiver<int> sumReducer = commGroups[0].GetReduceReceiver<int>(reduceOperatorName);
@@ -646,21 +644,21 @@ public void TestScatterReduceOperators()
             Assert.AreEqual(sum, 6325);
         }
 
-        private IConfiguration GetDefaulCodecConfig()
+        private IConfiguration GetDefaultCodecConfig()
         {
-            return CodecConfiguration<int>.Conf
-                .Set(CodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
+            return StreamingCodecConfiguration<int>.Conf
+                .Set(StreamingCodecConfiguration<int>.Codec, GenericType<IntStreamingCodec>.Class)
                 .Build();
         }
 
-        private IConfiguration GetDefaulReduceFuncConfig()
+        private IConfiguration GetDefaultReduceFuncConfig()
         {
             return ReduceFunctionConfiguration<int>.Conf
                 .Set(ReduceFunctionConfiguration<int>.ReduceFunction, GenericType<SumFunction>.Class)
                 .Build();
         }
 
-        private IConfiguration GetDefaulDataConverterConfig()
+        private IConfiguration GetDefaultDataConverterConfig()
         {
             return PipelineDataConverterConfiguration<int>.Conf
                 .Set(PipelineDataConverterConfiguration<int>.DataConverter, GenericType<DefaultPipelineDataConverter<int>>.Class)
diff --git a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/StreamingCodecTests.cs b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/StreamingCodecTests.cs
index 6dea9f104a..d4f06475f1 100644
--- a/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/StreamingCodecTests.cs
+++ b/lang/cs/Org.Apache.REEF.Network.Tests/GroupCommunication/StreamingCodecTests.cs
@@ -50,12 +50,15 @@ public async Task TestCommonStreamingCodecs()
             IStreamingCodec<double[]> doubleArrCodec = injector.GetInstance<DoubleArrayStreamingCodec>();
             IStreamingCodec<float[]> floatArrCodec = injector.GetInstance<FloatArrayStreamingCodec>();
 
+            IStreamingCodec<string> stringCodec = injector.GetInstance<StringStreamingCodec>();
+
             CancellationToken token = new CancellationToken();
 
             int obj = 5;
             int[] intArr = {1, 2};
             double[] doubleArr = { 1, 2 };
             float[] floatArr = { 1, 2 };
+            string stringObj = "hello";
 
             var stream = new MemoryStream();
             IDataWriter writer = new StreamDataWriter(stream);
@@ -71,6 +74,8 @@ public async Task TestCommonStreamingCodecs()
             await doubleArrCodec.WriteAsync(doubleArr, writer, token);
             floatArrCodec.Write(floatArr, writer);
             await floatArrCodec.WriteAsync(floatArr, writer, token);
+            stringCodec.Write(stringObj, writer);
+            await stringCodec.WriteAsync(stringObj, writer, token);
 
             stream.Position = 0;
             IDataReader reader = new StreamDataReader(stream);
@@ -86,13 +91,17 @@ public async Task TestCommonStreamingCodecs()
             double[] resArr4 = await doubleArrCodec.ReadAsync(reader, token);
             float[] resArr5 = floatArrCodec.Read(reader);
             float[] resArr6 = await floatArrCodec.ReadAsync(reader, token);
-            
+            string resArr7 = stringCodec.Read(reader);
+            string resArr8 = await stringCodec.ReadAsync(reader, token);
+
             Assert.AreEqual(obj, res1);
             Assert.AreEqual(obj + 1, res2);
             Assert.AreEqual(obj + 2, res3);
             Assert.AreEqual(obj + 3, res4);
             Assert.AreEqual(obj + 4, res5);
             Assert.AreEqual(obj + 5, res6);
+            Assert.AreEqual(stringObj, resArr7);
+            Assert.AreEqual(stringObj, resArr8);
 
             for (int i = 0; i < intArr.Length; i++)
             {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Codec/GcmMessageProto.cs b/lang/cs/Org.Apache.REEF.Network/Group/Codec/GcmMessageProto.cs
deleted file mode 100644
index 755851a82b..0000000000
--- a/lang/cs/Org.Apache.REEF.Network/Group/Codec/GcmMessageProto.cs
+++ /dev/null
@@ -1,70 +0,0 @@
-﻿/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-using Org.Apache.REEF.Network.Group.Driver.Impl;
-using ProtoBuf;
-
-namespace Org.Apache.REEF.Network.Group.Codec
-{
-    [ProtoContract]
-    public class GcmMessageProto
-    {
-        [ProtoMember(1)]
-        public byte[][] Data { get; set; }
-
-        [ProtoMember(2)]
-        public string OperatorName { get; set; }
-
-        [ProtoMember(3)]
-        public string GroupName { get; set; }
-
-        [ProtoMember(4)]
-        public string Source { get; set; }
-
-        [ProtoMember(5)]
-        public string Destination { get; set; }
-
-        [ProtoMember(6)]
-        public MessageType MsgType { get; set; }
-
-        public static GcmMessageProto Create(GroupCommunicationMessage gcm)
-        {
-            return new GcmMessageProto()
-            {
-                Data = gcm.Data,
-                OperatorName = gcm.OperatorName,
-                GroupName = gcm.GroupName,
-                Source = gcm.Source,
-                Destination = gcm.Destination,
-                MsgType = gcm.MsgType,
-            };
-        }
-
-        public GroupCommunicationMessage ToGcm()
-        {
-            return new GroupCommunicationMessage(
-                GroupName,
-                OperatorName,
-                Source,
-                Destination,
-                Data,
-                MsgType);
-        }
-    }
-}
\ No newline at end of file
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Codec/GroupCommunicationMessageCodec.cs b/lang/cs/Org.Apache.REEF.Network/Group/Codec/GroupCommunicationMessageCodec.cs
deleted file mode 100644
index 081804f1cc..0000000000
--- a/lang/cs/Org.Apache.REEF.Network/Group/Codec/GroupCommunicationMessageCodec.cs
+++ /dev/null
@@ -1,70 +0,0 @@
-﻿/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-
-using System.IO;
-using Org.Apache.REEF.Network.Group.Driver.Impl;
-using Org.Apache.REEF.Tang.Annotations;
-using Org.Apache.REEF.Wake.Remote;
-using ProtoBuf;
-
-namespace Org.Apache.REEF.Network.Group.Codec
-{
-    /// <summary>
-    /// Used to serialize GroupCommunicationMessages.
-    /// </summary>
-    public class GroupCommunicationMessageCodec : ICodec<GroupCommunicationMessage>
-    {
-        /// <summary>
-        /// Create a new GroupCommunicationMessageCodec.
-        /// </summary>
-        [Inject]
-        public GroupCommunicationMessageCodec()
-        {
-        }
-
-        /// <summary>
-        /// Serialize the GroupCommunicationObject into a byte array using Protobuf.
-        /// </summary>
-        /// <param name="obj">The object to serialize.</param>
-        /// <returns>The serialized GroupCommunicationMessage in byte array form</returns>
-        public byte[] Encode(GroupCommunicationMessage obj)
-        {
-            GcmMessageProto proto = GcmMessageProto.Create(obj);
-            using (var stream = new MemoryStream())
-            {
-                Serializer.Serialize(stream, proto);
-                return stream.ToArray();
-            }
-        }
-
-        /// <summary>
-        /// Deserialize the byte array into a GroupCommunicationMessage using Protobuf.
-        /// </summary>
-        /// <param name="data">The byte array to deserialize</param>
-        /// <returns>The deserialized GroupCommunicationMessage object.</returns>
-        public GroupCommunicationMessage Decode(byte[] data)
-        {
-            using (var stream = new MemoryStream(data))
-            {
-                GcmMessageProto proto = Serializer.Deserialize<GcmMessageProto>(stream);
-                return proto.ToGcm();
-            }
-        }
-    }
-}
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Config/CodecToStreamingCodecConfiguration.cs b/lang/cs/Org.Apache.REEF.Network/Group/Config/CodecToStreamingCodecConfiguration.cs
new file mode 100644
index 0000000000..a270272dbf
--- /dev/null
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Config/CodecToStreamingCodecConfiguration.cs
@@ -0,0 +1,44 @@
+﻿/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+using Org.Apache.REEF.Network.Group.Pipelining;
+using Org.Apache.REEF.Network.StreamingCodec;
+using Org.Apache.REEF.Tang.Formats;
+using Org.Apache.REEF.Tang.Util;
+using Org.Apache.REEF.Wake.Remote;
+
+namespace Org.Apache.REEF.Network.Group.Config
+{
+    public sealed class CodecToStreamingCodecConfiguration<T> : ConfigurationModuleBuilder
+    {
+        /// <summary>
+        /// RequiredImpl for Codec. Client needs to set implementation for this paramter
+        /// </summary>
+        public static readonly RequiredImpl<ICodec<T>> Codec = new RequiredImpl<ICodec<T>>();
+
+        /// <summary>
+        /// Configuration Module for Codec
+        /// </summary>
+        public static ConfigurationModule Conf = new CodecToStreamingCodecConfiguration<T>()
+            .BindImplementation(GenericType<ICodec<T>>.Class, Codec)
+            .BindImplementation(GenericType<IStreamingCodec<T>>.Class, GenericType<CodecToStreamingCodec<T>>.Class)
+            .BindImplementation(GenericType<IStreamingCodec<PipelineMessage<T>>>.Class, GenericType<StreamingPipelineMessageCodec<T>>.Class)
+            .Build();
+    }
+}
\ No newline at end of file
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Driver/ICommunicationGroupDriver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Driver/ICommunicationGroupDriver.cs
index 3cc7270038..240d244a77 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Driver/ICommunicationGroupDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Driver/ICommunicationGroupDriver.cs
@@ -17,14 +17,9 @@
  * under the License.
  */
 
-using System;
 using System.Collections.Generic;
-using Org.Apache.REEF.Network.Group.Operators;
-using Org.Apache.REEF.Network.Group.Operators.Impl;
-using Org.Apache.REEF.Network.Group.Pipelining;
 using Org.Apache.REEF.Network.Group.Topology;
 using Org.Apache.REEF.Tang.Interface;
-using Org.Apache.REEF.Wake.Remote;
 
 namespace Org.Apache.REEF.Network.Group.Driver
 {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/CommunicationGroupDriver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/CommunicationGroupDriver.cs
index 07581ba45f..5ebb35711b 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/CommunicationGroupDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/CommunicationGroupDriver.cs
@@ -17,23 +17,20 @@
  * under the License.
  */
 
+using System;
 using System.Collections.Generic;
 using System.Reflection;
-using System.Threading;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Operators.Impl;
-using Org.Apache.REEF.Network.Group.Pipelining;
 using Org.Apache.REEF.Network.Group.Pipelining.Impl;
 using Org.Apache.REEF.Network.Group.Topology;
 using Org.Apache.REEF.Tang.Exceptions;
 using Org.Apache.REEF.Tang.Formats;
-using Org.Apache.REEF.Tang.Implementations.Configuration;
 using Org.Apache.REEF.Tang.Implementations.Tang;
 using Org.Apache.REEF.Tang.Interface;
 using Org.Apache.REEF.Tang.Util;
 using Org.Apache.REEF.Utilities.Logging;
-using Org.Apache.REEF.Wake.Remote;
-using Org.Apache.REEF.Wake.Remote.Impl;
+
 
 namespace Org.Apache.REEF.Network.Group.Driver.Impl
 {
@@ -42,7 +39,8 @@ namespace Org.Apache.REEF.Network.Group.Driver.Impl
     /// All operators in the same Communication Group run on the the 
     /// same set of tasks.
     /// </summary>
-    public class CommunicationGroupDriver : ICommunicationGroupDriver
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.]
+    public sealed class CommunicationGroupDriver : ICommunicationGroupDriver
     {
         private static readonly Logger LOGGER = Logger.GetLogger(typeof (CommunicationGroupDriver));
 
@@ -141,7 +139,7 @@ public ICommunicationGroupDriver AddBroadcast<T>(string operatorName, string mas
         /// <returns>The same CommunicationGroupDriver with the added Broadcast operator info</returns>
         public ICommunicationGroupDriver AddBroadcast(string operatorName, string masterTaskId, TopologyTypes topologyType = TopologyTypes.Flat)
         {
-            return AddBroadcast<int>( operatorName, masterTaskId, topologyType, GetDefaulConfiguration());
+            return AddBroadcast<int>( operatorName, masterTaskId, topologyType, GetDefaultConfiguration());
         }
 
         /// <summary>
@@ -236,7 +234,7 @@ public ICommunicationGroupDriver AddBroadcast(string operatorName, string master
         public ICommunicationGroupDriver AddScatter(string operatorName, string senderId,
             TopologyTypes topologyType = TopologyTypes.Flat)
         {
-            return AddScatter<int>(operatorName, senderId, topologyType, GetDefaulConfiguration());
+            return AddScatter<int>(operatorName, senderId, topologyType, GetDefaultConfiguration());
         }
 
         /// <summary>
@@ -343,18 +341,14 @@ private IConfiguration GetOperatorConfiguration(string operatorName, string task
             return (IConfiguration) info.Invoke(topology, new[] {(object) taskId});
         }
 
-        private IConfiguration[] GetDefaulConfiguration()
+        private IConfiguration[] GetDefaultConfiguration()
         {
             List<IConfiguration> list = new List<IConfiguration>(); 
-            IConfiguration codecConfig = CodecConfiguration<int>.Conf
-                .Set(CodecConfiguration<int>.Codec, GenericType<IntCodec>.Class)
-                .Build();
 
             IConfiguration dataConverterConfig = PipelineDataConverterConfiguration<int>.Conf
                 .Set(PipelineDataConverterConfiguration<int>.DataConverter, GenericType<DefaultPipelineDataConverter<int>>.Class)
                 .Build();
 
-            list.Add(codecConfig);
             list.Add(dataConverterConfig);
 
             return list.ToArray();
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GeneralGroupCommunicationMessage.cs b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GeneralGroupCommunicationMessage.cs
new file mode 100644
index 0000000000..e807a4e057
--- /dev/null
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GeneralGroupCommunicationMessage.cs
@@ -0,0 +1,114 @@
+﻿/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+using System;
+using System.Threading;
+using Org.Apache.REEF.Wake.Remote;
+using Org.Apache.REEF.Tang.Annotations;
+
+namespace Org.Apache.REEF.Network.Group.Driver.Impl
+{
+    /// <summary>
+    /// Messages sent by MPI Operators. This is the abstract class inherited by 
+    /// WritableGroupCommunicationMessage but seen by Network Service
+    /// </summary>
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public abstract class GeneralGroupCommunicationMessage : IWritable
+    {        
+        /// <summary>
+        /// Empty constructor to allow instantiation by reflection
+        /// </summary>
+        protected GeneralGroupCommunicationMessage()
+        {
+        }
+
+        /// <summary>
+        /// Create new CommunicationGroupMessage.
+        /// </summary>
+        /// <param name="groupName">The name of the communication group</param>
+        /// <param name="operatorName">The name of the MPI operator</param>
+        /// <param name="source">The message source</param>
+        /// <param name="destination">The message destination</param>
+        /// <param name="messageType">The type of message to send</param>
+        protected GeneralGroupCommunicationMessage(
+            string groupName,
+            string operatorName,
+            string source,
+            string destination,
+            MessageType messageType)
+        {
+            GroupName = groupName;
+            OperatorName = operatorName;
+            Source = source;
+            Destination = destination;
+            MsgType = messageType;
+        }
+
+        /// <summary>
+        /// Returns the Communication Group name.
+        /// </summary>
+        public string GroupName { get; internal set; }
+
+        /// <summary>
+        /// Returns the MPI Operator name.
+        /// </summary>
+        public string OperatorName { get; internal set; }
+
+        /// <summary>
+        /// Returns the source of the message.
+        /// </summary>
+        public string Source { get; internal set; }
+
+        /// <summary>
+        /// Returns the destination of the message.
+        /// </summary>
+        public string Destination { get; internal set; }
+
+        /// <summary>
+        /// Returns the type of message being sent.
+        /// </summary>
+        public MessageType MsgType { get; internal set; }
+
+        /// <summary>
+        /// Read the class fields.
+        /// </summary>
+        /// <param name="reader">The reader from which to read </param>
+        public abstract void Read(IDataReader reader);
+
+        /// <summary>
+        /// Writes the class fields.
+        /// </summary>
+        /// <param name="writer">The writer to which to write</param>
+        public abstract void Write(IDataWriter writer);
+
+        /// <summary>
+        /// Read the class fields.
+        /// </summary>
+        /// <param name="reader">The reader from which to read </param>
+        /// <param name="token">The cancellation token</param>
+        public abstract System.Threading.Tasks.Task ReadAsync(IDataReader reader, CancellationToken token);
+
+        /// <summary>
+        /// Writes the class fields.
+        /// </summary>
+        /// <param name="writer">The writer to which to write</param>
+        /// <param name="token">The cancellation token</param>
+        public abstract System.Threading.Tasks.Task WriteAsync(IDataWriter writer, CancellationToken token);
+    }
+}
\ No newline at end of file
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommDriver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommDriver.cs
index 3ccf31f3b1..ade5834bc2 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommDriver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommDriver.cs
@@ -25,19 +25,16 @@
 using Org.Apache.REEF.Common.Io;
 using Org.Apache.REEF.Common.Services;
 using Org.Apache.REEF.Driver.Context;
-using Org.Apache.REEF.Network.Group.Codec;
 using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Task.Impl;
 using Org.Apache.REEF.Network.Naming;
 using Org.Apache.REEF.Network.NetworkService;
 using Org.Apache.REEF.Tang.Annotations;
 using Org.Apache.REEF.Tang.Formats;
-using Org.Apache.REEF.Tang.Implementations.Configuration;
 using Org.Apache.REEF.Tang.Implementations.Tang;
 using Org.Apache.REEF.Tang.Interface;
 using Org.Apache.REEF.Tang.Util;
 using Org.Apache.REEF.Utilities.Logging;
-using Org.Apache.REEF.Wake.Remote;
 
 namespace Org.Apache.REEF.Network.Group.Driver.Impl
 {
@@ -45,7 +42,8 @@ namespace Org.Apache.REEF.Network.Group.Driver.Impl
     /// Used to create Communication Groups for Group Communication Operators on the Reef driver.
     /// Also manages configuration for Group Communication tasks/services.
     /// </summary>
-    public class GroupCommDriver : IGroupCommDriver
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class GroupCommDriver : IGroupCommDriver
     {
         private const string MasterTaskContextName = "MasterTaskContext";
         private const string SlaveTaskContextName = "SlaveTaskContext";
@@ -53,17 +51,16 @@ public class GroupCommDriver : IGroupCommDriver
         private static Logger LOGGER = Logger.GetLogger(typeof(GroupCommDriver));
 
         private readonly string _driverId;
-        private readonly string _nameServerAddr;           
+        private readonly string _nameServerAddr;
         private readonly int _nameServerPort;
         private int _contextIds;
-        private int _fanOut;
-        private string _groupName;
+        private readonly int _fanOut;
+        private readonly string _groupName;
 
-        private readonly Dictionary<string, ICommunicationGroupDriver> _commGroups; 
+        private readonly Dictionary<string, ICommunicationGroupDriver> _commGroups;
         private readonly AvroConfigurationSerializer _configSerializer;
-        private readonly INameServer _nameServer;
 
-        
+
         /// <summary>
         /// Create a new GroupCommunicationDriver object.
         /// </summary>
@@ -75,7 +72,7 @@ public class GroupCommDriver : IGroupCommDriver
         /// <param name="configSerializer">Used to serialize task configuration</param>
         /// <param name="nameServer">Used to map names to ip adresses</param>
         [Inject]
-        public GroupCommDriver(
+        private GroupCommDriver(
             [Parameter(typeof(GroupCommConfigurationOptions.DriverId))] string driverId,
             [Parameter(typeof(GroupCommConfigurationOptions.MasterTaskId))] string masterTaskId,
             [Parameter(typeof(GroupCommConfigurationOptions.FanOut))] int fanOut,
@@ -92,9 +89,8 @@ public class GroupCommDriver : IGroupCommDriver
 
             _configSerializer = configSerializer;
             _commGroups = new Dictionary<string, ICommunicationGroupDriver>();
-            _nameServer = nameServer;
 
-            IPEndPoint localEndpoint = _nameServer.LocalEndpoint;
+            IPEndPoint localEndpoint = nameServer.LocalEndpoint;
             _nameServerAddr = localEndpoint.Address.ToString();
             _nameServerPort = localEndpoint.Port;
 
@@ -123,11 +119,13 @@ public ICommunicationGroupDriver NewCommunicationGroup(string groupName, int num
             {
                 throw new ArgumentNullException("groupName");
             }
-            else if (numTasks < 1)
+
+            if (numTasks < 1)
             {
-                throw new ArgumentException("NumTasks must be greater than 0");                
+                throw new ArgumentException("NumTasks must be greater than 0");
             }
-            else if (_commGroups.ContainsKey(groupName))
+            
+            if (_commGroups.ContainsKey(groupName))
             {
                 throw new ArgumentException("Group Name already registered with GroupCommunicationDriver");
             }
@@ -144,8 +142,8 @@ public ICommunicationGroupDriver NewCommunicationGroup(string groupName, int num
         public IConfiguration GetContextConfiguration()
         {
             int contextNum = Interlocked.Increment(ref _contextIds);
-            string id = (contextNum == 0) 
-                ? MasterTaskContextName 
+            string id = (contextNum == 0)
+                ? MasterTaskContextName
                 : GetSlaveTaskContextName(contextNum);
 
             return ContextConfiguration.ConfigurationModule
@@ -160,16 +158,13 @@ public IConfiguration GetContextConfiguration()
         public IConfiguration GetServiceConfiguration()
         {
             IConfiguration serviceConfig = ServiceConfiguration.ConfigurationModule
-                .Set(ServiceConfiguration.Services, GenericType<NetworkService<GroupCommunicationMessage>>.Class)
+                .Set(ServiceConfiguration.Services, GenericType<WritableNetworkService<GeneralGroupCommunicationMessage>>.Class)
                 .Build();
 
             return TangFactory.GetTang().NewConfigurationBuilder(serviceConfig)
                 .BindImplementation(
-                    GenericType<IObserver<NsMessage<GroupCommunicationMessage>>>.Class,
+                    GenericType<IObserver<WritableNsMessage<GeneralGroupCommunicationMessage>>>.Class,
                     GenericType<GroupCommNetworkObserver>.Class)
-                .BindImplementation(
-                    GenericType<ICodec<GroupCommunicationMessage>>.Class,
-                    GenericType<GroupCommunicationMessageCodec>.Class)
                 .BindNamedParameter<NamingConfigurationOptions.NameServerAddress, string>(
                     GenericType<NamingConfigurationOptions.NameServerAddress>.Class,
                     _nameServerAddr)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommunicationMessage.cs b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommunicationMessage.cs
index dd67f8c56d..33f9c92c90 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommunicationMessage.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Driver/Impl/GroupCommunicationMessage.cs
@@ -17,91 +17,191 @@
  * under the License.
  */
 
+using System;
+using System.Threading;
+using Org.Apache.REEF.Network.StreamingCodec;
+using Org.Apache.REEF.Wake.Remote;
+using Org.Apache.REEF.Tang.Annotations;
+
 namespace Org.Apache.REEF.Network.Group.Driver.Impl
 {
     /// <summary>
-    /// Messages sent by Group Communication Operators
+    /// Messages sent by MPI Operators. This is the Writable version of GroupCommunicationMessage
+    ///  class and will eventually replace it once everybody agrees with the design
     /// </summary>
-    public class GroupCommunicationMessage
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class GroupCommunicationMessage<T> : GeneralGroupCommunicationMessage
     {
+        private readonly IStreamingCodec<T> _codec;
+
+        /// <summary>
+        /// Empty constructor to allow instantiation by reflection
+        /// </summary>
+        [Inject]
+        private GroupCommunicationMessage(IStreamingCodec<T> codec)
+        {
+            _codec = codec;
+        }
+
         /// <summary>
         /// Create new CommunicationGroupMessage.
         /// </summary>
         /// <param name="groupName">The name of the communication group</param>
-        /// <param name="operatorName">The name of the Group Communication operator</param>
+        /// <param name="operatorName">The name of the MPI operator</param>
         /// <param name="source">The message source</param>
         /// <param name="destination">The message destination</param>
-        /// <param name="data">The actual byte array of data</param>
+        /// <param name="message">The actual Writable message</param>
         /// <param name="messageType">The type of message to send</param>
+        /// <param name="codec">Streaming Codec</param>
         public GroupCommunicationMessage(
             string groupName,
             string operatorName,
             string source,
             string destination,
-            byte[] data,
-            MessageType messageType)
+            T message,
+            MessageType messageType,
+            IStreamingCodec<T> codec)
+            : base(groupName, operatorName, source, destination, messageType)
         {
-            GroupName = groupName;
-            OperatorName = operatorName;
-            Source = source;
-            Destination = destination;
-            Data = new[] { data };
-            MsgType = messageType;
+            _codec = codec;
+            Data = new T[] { message };
         }
 
         /// <summary>
         /// Create new CommunicationGroupMessage.
         /// </summary>
         /// <param name="groupName">The name of the communication group</param>
-        /// <param name="operatorName">The name of the Group Communication operator</param>
+        /// <param name="operatorName">The name of the MPI operator</param>
         /// <param name="source">The message source</param>
         /// <param name="destination">The message destination</param>
-        /// <param name="data">The actual byte array of data</param>
+        /// <param name="message">The actual Writable message array</param>
         /// <param name="messageType">The type of message to send</param>
+        /// <param name="codec">Streaming Codec</param>
         public GroupCommunicationMessage(
             string groupName,
             string operatorName,
             string source,
             string destination,
-            byte[][] data,
-            MessageType messageType)
+            T[] message,
+            MessageType messageType,
+            IStreamingCodec<T> codec)
+            : base(groupName, operatorName, source, destination, messageType)
         {
-            GroupName = groupName;
-            OperatorName = operatorName;
-            Source = source;
-            Destination = destination;
-            Data = data;
-            MsgType = messageType;
+            _codec = codec;
+            Data = message;
         }
 
         /// <summary>
-        /// Returns the Communication Group name.
+        /// Returns the array of messages.
         /// </summary>
-        public string GroupName { get; private set; }
+        public T[] Data
+        {
+            get;
+            set;
+        }
 
         /// <summary>
-        /// Returns the Group Communication Operator name.
+        /// Read the class fields.
         /// </summary>
-        public string OperatorName { get; private set; }
+        /// <param name="reader">The reader from which to read </param>
+        public override void Read(IDataReader reader)
+        {
+            GroupName = reader.ReadString();
+            OperatorName = reader.ReadString();
+            Source = reader.ReadString();
+            Destination = reader.ReadString();
 
-        /// <summary>
-        /// Returns the source of the message.
-        /// </summary>
-        public string Source { get; private set; }
+            int dataCount = reader.ReadInt32();
+
+            if (dataCount == 0)
+            {
+                throw new Exception("Data Count in Group COmmunication Message cannot be zero");
+            }
+
+            MsgType = (MessageType)Enum.Parse(typeof(MessageType), reader.ReadString());
+            Data = new T[dataCount];
+
+            for (int index = 0; index < dataCount; index++)
+            {
+                Data[index] = _codec.Read(reader);
+
+                if (Data[index] == null)
+                {
+                    throw new Exception("message instance cannot be created from the IDataReader in Group Communication Message");
+                }
+            }
+        }
 
         /// <summary>
-        /// Returns the destination of the message.
+        /// Writes the class fields.
         /// </summary>
-        public string Destination { get; private set; }
+        /// <param name="writer">The writer to which to write</param>
+        public override void Write(IDataWriter writer)
+        {
+            writer.WriteString(GroupName);
+            writer.WriteString(OperatorName);
+            writer.WriteString(Source);
+            writer.WriteString(Destination);
+            writer.WriteInt32(Data.Length);
+            writer.WriteString(MsgType.ToString());
+
+            foreach (var data in Data)
+            {
+                _codec.Write(data, writer);
+            }
+        }
 
         /// <summary>
-        /// Returns the message data.
+        /// Read the class fields.
         /// </summary>
-        public byte[][] Data { get; private set; }
+        /// <param name="reader">The reader from which to read </param>
+        /// <param name="token">The cancellation token</param>
+        public override async System.Threading.Tasks.Task ReadAsync(IDataReader reader, CancellationToken token)
+        {
+            GroupName = await reader.ReadStringAsync(token);
+            OperatorName = await reader.ReadStringAsync(token);
+            Source = await reader.ReadStringAsync(token);
+            Destination = await reader.ReadStringAsync(token);
+
+            int dataCount = await reader.ReadInt32Async(token);
+
+            if (dataCount == 0)
+            {
+                throw new Exception("Data Count in Group COmmunication Message cannot be zero");
+            }
+
+            MsgType = (MessageType)Enum.Parse(typeof(MessageType), await reader.ReadStringAsync(token));
+            Data = new T[dataCount];
+
+            for (int index = 0; index < dataCount; index++)
+            {
+                Data[index] = await _codec.ReadAsync(reader, token);
+
+                if (Data[index] == null)
+                {
+                    throw new Exception("message instance cannot be created from the IDataReader in Group Communication Message");
+                }
+            }
+        }
 
         /// <summary>
-        /// Returns the type of message being sent.
+        /// Writes the class fields.
         /// </summary>
-        public MessageType MsgType { get; private set; }
+        /// <param name="writer">The writer to which to write</param>
+        /// <param name="token">The cancellation token</param>
+        public override async System.Threading.Tasks.Task WriteAsync(IDataWriter writer, CancellationToken token)
+        {
+            await writer.WriteStringAsync(GroupName, token);
+            await writer.WriteStringAsync(OperatorName, token);
+            await writer.WriteStringAsync(Source, token);
+            await writer.WriteStringAsync(Destination, token);
+            await writer.WriteInt32Async(Data.Length, token);
+            await writer.WriteStringAsync(MsgType.ToString(), token);
+
+            foreach (var data in Data)
+            {
+                await _codec.WriteAsync(data, writer, token);
+            }
+        }
     }
 }
\ No newline at end of file
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastReceiver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastReceiver.cs
index b53929ef65..e7fcb52957 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastReceiver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastReceiver.cs
@@ -33,7 +33,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// Group Communication Operator used to receive broadcast messages in pipelined fashion.
     /// </summary>
     /// <typeparam name="T">The type of message being sent.</typeparam>
-    public class BroadcastReceiver<T> : IBroadcastReceiver<T>
+    public sealed class BroadcastReceiver<T> : IBroadcastReceiver<T>
     {
         private const int PipelineVersion = 2;
         private readonly IOperatorTopology<PipelineMessage<T>> _topology;
@@ -64,7 +64,7 @@ public class BroadcastReceiver<T> : IBroadcastReceiver<T>
             PipelineDataConverter = dataConverter;
             _topology = topology;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             if (initialize)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastSender.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastSender.cs
index 4af01c7efb..5457a708df 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastSender.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/BroadcastSender.cs
@@ -33,7 +33,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// Group Communication Operator used to send messages to child Tasks in pipelined fashion.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class BroadcastSender<T> : IBroadcastSender<T>
+    public sealed class BroadcastSender<T> : IBroadcastSender<T>
     {
         private static readonly Logger Logger = Logger.GetLogger(typeof(BroadcastSender<T>));
         private const int PipelineVersion = 2;
@@ -66,7 +66,7 @@ public class BroadcastSender<T> : IBroadcastSender<T>
             Version = PipelineVersion;
             PipelineDataConverter = dataConverter;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             if (initialize)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceReceiver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceReceiver.cs
index bea9c836cb..187bd58149 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceReceiver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceReceiver.cs
@@ -33,7 +33,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// Group Communication operator used to receive and reduce messages in pipelined fashion.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class ReduceReceiver<T> : IReduceReceiver<T>
+    public sealed class ReduceReceiver<T> : IReduceReceiver<T>
     {
         private static readonly Logger Logger = Logger.GetLogger(typeof(ReduceReceiver<T>));
         private const int PipelineVersion = 2;
@@ -71,7 +71,7 @@ public class ReduceReceiver<T> : IReduceReceiver<T>
             _pipelinedReduceFunc = new PipelinedReduceFunction<T>(ReduceFunction);
             _topology = topology;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             if (initialize)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceSender.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceSender.cs
index 5f289dad9f..0c13d3ca7a 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceSender.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ReduceSender.cs
@@ -34,7 +34,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// Group Communication Operator used to send messages to be reduced by the ReduceReceiver in pipelined fashion.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class ReduceSender<T> : IReduceSender<T>
+    public sealed class ReduceSender<T> : IReduceSender<T>
     {
         private static readonly Logger Logger = Logger.GetLogger(typeof(ReduceSender<T>));
         private const int PipelineVersion = 2;
@@ -72,7 +72,7 @@ public class ReduceSender<T> : IReduceSender<T>
             _pipelinedReduceFunc = new PipelinedReduceFunction<T>(ReduceFunction);
             _topology = topology;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             PipelineDataConverter = dataConverter;
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterReceiver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterReceiver.cs
index a9f4b103b0..a21656d4bd 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterReceiver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterReceiver.cs
@@ -33,7 +33,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// from the IScatterSender.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class ScatterReceiver<T> : IScatterReceiver<T>
+    public sealed class ScatterReceiver<T> : IScatterReceiver<T>
     {
         private const int DefaultVersion = 1;
         private readonly IOperatorTopology<T> _topology;
@@ -60,7 +60,7 @@ public class ScatterReceiver<T> : IScatterReceiver<T>
             Version = DefaultVersion;
             _topology = topology;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             if (initialize)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterSender.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterSender.cs
index 80bc84e959..42e7f6b334 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterSender.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/ScatterSender.cs
@@ -33,7 +33,7 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
     /// of the IScatterReceivers.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class ScatterSender<T> : IScatterSender<T>
+    public sealed class ScatterSender<T> : IScatterSender<T>
     {
         private const int DefaultVersion = 1;
         private readonly IOperatorTopology<T> _topology;
@@ -60,7 +60,7 @@ public class ScatterSender<T> : IScatterSender<T>
             Version = DefaultVersion;
             _topology = topology;
 
-            var msgHandler = Observer.Create<GroupCommunicationMessage>(message => topology.OnNext(message));
+            var msgHandler = Observer.Create<GeneralGroupCommunicationMessage>(message => topology.OnNext(message));
             networkHandler.Register(operatorName, msgHandler);
 
             if (initialize)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/Sender.cs b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/Sender.cs
index 7b37c07a9c..a78b13c2dc 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/Sender.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Operators/Impl/Sender.cs
@@ -27,10 +27,12 @@ namespace Org.Apache.REEF.Network.Group.Operators.Impl
 {
     /// <summary>
     /// Group Communication operator used to do point-to-point communication between named Tasks.
+    /// It uses Writable classes
     /// </summary>
-    public class Sender
+    [Obsolete("Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295 ", false)]
+    public sealed class Sender
     {
-        private readonly INetworkService<GroupCommunicationMessage> _networkService;
+        private readonly INetworkService<GeneralGroupCommunicationMessage> _networkService;
         private readonly IIdentifierFactory _idFactory;
 
         /// <summary>
@@ -39,8 +41,8 @@ public class Sender
         /// <param name="networkService">The network services used to send messages.</param>
         /// <param name="idFactory">Used to create IIdentifier for GroupCommunicationMessages.</param>
         [Inject]
-        public Sender(
-            NetworkService<GroupCommunicationMessage> networkService, 
+        private Sender(
+            WritableNetworkService<GeneralGroupCommunicationMessage> networkService,
             IIdentifierFactory idFactory)
         {
             _networkService = networkService;
@@ -52,7 +54,7 @@ public class Sender
         /// included in the message.
         /// </summary>
         /// <param name="message">The message to send.</param>
-        public void Send(GroupCommunicationMessage message)
+        public void Send(GeneralGroupCommunicationMessage message)
         {
             if (message == null)
             {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/ICommunicationGroupNetworkObserver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/ICommunicationGroupNetworkObserver.cs
index e4f5b40e84..96c36e152a 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/ICommunicationGroupNetworkObserver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/ICommunicationGroupNetworkObserver.cs
@@ -26,12 +26,14 @@ namespace Org.Apache.REEF.Network.Group.Task
 {
     /// <summary>
     /// Handles incoming messages sent to this Communication Group.
+    /// Writable Version
     /// </summary>
     [DefaultImplementation(typeof(CommunicationGroupNetworkObserver))]
-    public interface ICommunicationGroupNetworkObserver : IObserver<GroupCommunicationMessage>
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public interface ICommunicationGroupNetworkObserver : IObserver<GeneralGroupCommunicationMessage>
     {
         /// <summary>
-        /// Registers the handler with the CommunicationGroupNetworkObserver.
+        /// Registers the handler with the WritableCommunicationGroupNetworkObserver.
         /// Messages that are to be sent to the operator specified by operatorName
         /// are handled by the given observer.
         /// </summary>
@@ -39,6 +41,6 @@ public interface ICommunicationGroupNetworkObserver : IObserver<GroupCommunicati
         /// will be invoked</param>
         /// <param name="observer">The handler to invoke when messages are sent
         /// to the operator specified by operatorName</param>
-        void Register(string operatorName, IObserver<GroupCommunicationMessage> observer);
+        void Register(string operatorName, IObserver<GeneralGroupCommunicationMessage> observer);
     }
 }
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/IGroupCommNetworkObserver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/IGroupCommNetworkObserver.cs
index 8416ccaefe..de1975470a 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/IGroupCommNetworkObserver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/IGroupCommNetworkObserver.cs
@@ -27,9 +27,11 @@ namespace Org.Apache.REEF.Network.Group.Task
 {
     /// <summary>
     /// Handles all incoming messages for this Task.
+    /// Writable Version
     /// </summary>
     [DefaultImplementation(typeof(GroupCommNetworkObserver))]
-    public interface IGroupCommNetworkObserver : IObserver<NsMessage<GroupCommunicationMessage>>
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public interface IGroupCommNetworkObserver : IObserver<WritableNsMessage<GeneralGroupCommunicationMessage>>
     {
         /// <summary>
         /// Registers the network handler for the given CommunicationGroup.
@@ -39,6 +41,6 @@ public interface IGroupCommNetworkObserver : IObserver<NsMessage<GroupCommunicat
         /// <param name="groupName">The group name for the network handler</param>
         /// <param name="commGroupHandler">The network handler to invoke when
         /// messages are sent to the given group.</param>
-        void Register(string groupName, IObserver<GroupCommunicationMessage> commGroupHandler);
+        void Register(string groupName, IObserver<GeneralGroupCommunicationMessage> commGroupHandler);
     }
 }
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/CommunicationGroupNetworkObserver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/CommunicationGroupNetworkObserver.cs
index 30dddcf81b..5be1457d54 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/CommunicationGroupNetworkObserver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/CommunicationGroupNetworkObserver.cs
@@ -19,8 +19,6 @@
 
 using System;
 using System.Collections.Generic;
-using System.Threading;
-using Org.Apache.REEF.Network.Group.Config;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
 using Org.Apache.REEF.Tang.Annotations;
 using Org.Apache.REEF.Utilities.Diagnostics;
@@ -30,19 +28,21 @@ namespace Org.Apache.REEF.Network.Group.Task.Impl
 {
     /// <summary>
     /// Handles incoming messages sent to this Communication Group.
+    /// Writable version
     /// </summary>
-    public class CommunicationGroupNetworkObserver : ICommunicationGroupNetworkObserver
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class CommunicationGroupNetworkObserver : ICommunicationGroupNetworkObserver
     {
         private static readonly Logger LOGGER = Logger.GetLogger(typeof(CommunicationGroupNetworkObserver));
-        private readonly Dictionary<string, IObserver<GroupCommunicationMessage>> _handlers;
+        private readonly Dictionary<string, IObserver<GeneralGroupCommunicationMessage>> _handlers;
 
         /// <summary>
         /// Creates a new CommunicationGroupNetworkObserver.
         /// </summary>
         [Inject]
-        public CommunicationGroupNetworkObserver()
+        private CommunicationGroupNetworkObserver()
         {
-            _handlers = new Dictionary<string, IObserver<GroupCommunicationMessage>>();
+            _handlers = new Dictionary<string, IObserver<GeneralGroupCommunicationMessage>>();
         }
 
         /// <summary>
@@ -52,9 +52,9 @@ public CommunicationGroupNetworkObserver()
         /// </summary>
         /// <param name="operatorName">The name of the operator whose handler
         /// will be invoked</param>
-        /// <param name="observer">The handler to invoke when messages are sent
+        /// <param name="observer">The writable handler to invoke when messages are sent
         /// to the operator specified by operatorName</param>
-        public void Register(string operatorName, IObserver<GroupCommunicationMessage> observer)
+        public void Register(string operatorName, IObserver<GeneralGroupCommunicationMessage> observer)
         {
             if (string.IsNullOrEmpty(operatorName))
             {
@@ -69,16 +69,15 @@ public void Register(string operatorName, IObserver<GroupCommunicationMessage> o
         }
 
         /// <summary>
-        /// Handles the incoming GroupCommunicationMessage sent to this Communication Group.
+        /// Handles the incoming GeneralGroupCommunicationMessage sent to this Communication Group.
         /// Looks for the operator that the message is being sent to and invoke its handler.
         /// </summary>
         /// <param name="message">The incoming message</param>
-        public void OnNext(GroupCommunicationMessage message)
+        public void OnNext(GeneralGroupCommunicationMessage message)
         {
             string operatorName = message.OperatorName;
 
-            IObserver<GroupCommunicationMessage> handler = GetOperatorHandler(operatorName);
-
+            IObserver<GeneralGroupCommunicationMessage> handler = GetOperatorHandler(operatorName);
             if (handler == null)
             {
                 Exceptions.Throw(new ArgumentException("No handler registered with the operator name: " + operatorName), LOGGER);
@@ -94,14 +93,15 @@ public void OnNext(GroupCommunicationMessage message)
         /// </summary>
         /// <param name="operatorName"></param>
         /// <returns></returns>
-        private IObserver<GroupCommunicationMessage> GetOperatorHandler(string operatorName)
+        private IObserver<GeneralGroupCommunicationMessage> GetOperatorHandler(string operatorName)
         {
-            IObserver<GroupCommunicationMessage> handler;
+            IObserver<GeneralGroupCommunicationMessage> handler;
             if (!_handlers.TryGetValue(operatorName, out handler))
             {
                 Exceptions.Throw(new ApplicationException("No handler registered yet with the operator name: " + operatorName), LOGGER);
             }
             return handler;
+
         }
 
         public void OnError(Exception error)
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommClient.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommClient.cs
index 4cf0e06a76..8a8e69687e 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommClient.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommClient.cs
@@ -31,28 +31,30 @@
 namespace Org.Apache.REEF.Network.Group.Task.Impl
 {
     /// <summary>
-    /// Container of ommunicationGroupClients
+    /// Used by Tasks to fetch CommunicationGroupClients.
+    /// Writable version
     /// </summary>
-    public class GroupCommClient : IGroupCommClient
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class GroupCommClient : IGroupCommClient
     {
         private readonly Dictionary<string, ICommunicationGroupClient> _commGroups;
 
-        private readonly INetworkService<GroupCommunicationMessage> _networkService;
+        private readonly INetworkService<GeneralGroupCommunicationMessage> _networkService;
 
         /// <summary>
-        /// Creates a new GroupCommClient and registers the task ID with the Name Server.
-        /// Currently the GroupCommClient is injected in task constructor. When work with REEF-289, we should put the injection at a proepr palce. 
+        /// Creates a new WritableGroupCommClient and registers the task ID with the Name Server.
         /// </summary>
         /// <param name="groupConfigs">The set of serialized Group Communication configurations</param>
-        /// <param name="taskId">The identifier for this taskfor this task</param>
-        /// <param name="networkService">The network service used to send messages</param>
+        /// <param name="taskId">The identifier for this task</param>
+        /// <param name="networkService">The writable network service used to send messages</param>
         /// <param name="configSerializer">Used to deserialize Group Communication configuration</param>
         /// <param name="injector">injector forked from the injector that creates this instance</param>
         [Inject]
-        private GroupCommClient(
+        [Obsolete("Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295 ", false)]
+        public GroupCommClient(
             [Parameter(typeof(GroupCommConfigurationOptions.SerializedGroupConfigs))] ISet<string> groupConfigs,
             [Parameter(typeof(TaskConfigurationOptions.Identifier))] string taskId,
-            NetworkService<GroupCommunicationMessage> networkService,
+            WritableNetworkService<GeneralGroupCommunicationMessage> networkService,
             AvroConfigurationSerializer configSerializer,
             IInjector injector)
         {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommNetworkObserver.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommNetworkObserver.cs
index 56048859cc..9d35ff12c1 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommNetworkObserver.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/GroupCommNetworkObserver.cs
@@ -29,29 +29,31 @@ namespace Org.Apache.REEF.Network.Group.Task.Impl
 {
     /// <summary>
     /// Handles all incoming messages for this Task.
+    /// Writable version
     /// </summary>
-    public class GroupCommNetworkObserver : IGroupCommNetworkObserver
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class GroupCommNetworkObserver : IGroupCommNetworkObserver
     {
         private static readonly Logger LOGGER = Logger.GetLogger(typeof(GroupCommNetworkObserver));
 
-        private readonly Dictionary<string, IObserver<GroupCommunicationMessage>> _commGroupHandlers;
-            
+        private readonly Dictionary<string, IObserver<GeneralGroupCommunicationMessage>> _commGroupHandlers;
+
         /// <summary>
         /// Creates a new GroupCommNetworkObserver.
         /// </summary>
         [Inject]
         public GroupCommNetworkObserver()
         {
-            _commGroupHandlers = new Dictionary<string, IObserver<GroupCommunicationMessage>>();
+            _commGroupHandlers = new Dictionary<string, IObserver<GeneralGroupCommunicationMessage>>();
         }
 
         /// <summary>
-        /// Handles the incoming NsMessage for this Task.
-        /// Delegates the GroupCommunicationMessage to the correct 
-        /// CommunicationGroupNetworkObserver.
+        /// Handles the incoming WritableNsMessage for this Task.
+        /// Delegates the GeneralGroupCommunicationMessage to the correct 
+        /// WritableCommunicationGroupNetworkObserver.
         /// </summary>
         /// <param name="nsMessage"></param>
-        public void OnNext(NsMessage<GroupCommunicationMessage> nsMessage)
+        public void OnNext(WritableNsMessage<GeneralGroupCommunicationMessage> nsMessage)
         {
             if (nsMessage == null)
             {
@@ -60,7 +62,7 @@ public void OnNext(NsMessage<GroupCommunicationMessage> nsMessage)
 
             try
             {
-                GroupCommunicationMessage gcm = nsMessage.Data.First();
+                GeneralGroupCommunicationMessage gcm = nsMessage.Data.First();
                 _commGroupHandlers[gcm.GroupName].OnNext(gcm);
             }
             catch (InvalidOperationException)
@@ -83,7 +85,7 @@ public void OnNext(NsMessage<GroupCommunicationMessage> nsMessage)
         /// <param name="groupName">The group name for the network handler</param>
         /// <param name="commGroupHandler">The network handler to invoke when
         /// messages are sent to the given group.</param>
-        public void Register(string groupName, IObserver<GroupCommunicationMessage> commGroupHandler)
+        public void Register(string groupName, IObserver<GeneralGroupCommunicationMessage> commGroupHandler)
         {
             if (string.IsNullOrEmpty(groupName))
             {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/NodeStruct.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/NodeStruct.cs
index 013f76b3f0..aa5de1e271 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/NodeStruct.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/NodeStruct.cs
@@ -17,17 +17,22 @@
  * under the License.
  */
 
+using System;
 using System.Collections.Concurrent;
 using Org.Apache.REEF.Network.Group.Driver.Impl;
 
 namespace Org.Apache.REEF.Network.Group.Task.Impl
 {
+
     /// <summary>
     /// Stores all incoming messages sent by a particular Task.
+    /// Writable version
     /// </summary>
-    internal class NodeStruct
+    /// <typeparam name="T"> Generic type of message</typeparam>
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    internal sealed class NodeStruct<T>
     {
-        private readonly BlockingCollection<GroupCommunicationMessage> _messageQueue;
+        private readonly BlockingCollection<GroupCommunicationMessage<T>> _messageQueue;
 
         /// <summary>
         /// Creates a new NodeStruct.
@@ -36,7 +41,7 @@ internal class NodeStruct
         public NodeStruct(string id)
         {
             Identifier = id;
-            _messageQueue = new BlockingCollection<GroupCommunicationMessage>();
+            _messageQueue = new BlockingCollection<GroupCommunicationMessage<T>>();
         }
 
         /// <summary>
@@ -49,7 +54,7 @@ public NodeStruct(string id)
         /// Gets the first message in the message queue.
         /// </summary>
         /// <returns>The first available message.</returns>
-        public byte[][] GetData()
+        public T[] GetData()
         {
             return _messageQueue.Take().Data;
         }
@@ -58,7 +63,7 @@ public byte[][] GetData()
         /// Adds an incoming message to the message queue.
         /// </summary>
         /// <param name="gcm">The incoming message</param>
-        public void AddData(GroupCommunicationMessage gcm)
+        public void AddData(GroupCommunicationMessage<T> gcm)
         {
             _messageQueue.Add(gcm);
         }
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/OperatorTopology.cs b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/OperatorTopology.cs
index dd11402b0a..67e1da9026 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/OperatorTopology.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Task/Impl/OperatorTopology.cs
@@ -18,7 +18,6 @@
  */
 
 using System;
-using System.Collections;
 using System.Collections.Concurrent;
 using System.Collections.Generic;
 using System.Linq;
@@ -30,20 +29,22 @@
 using Org.Apache.REEF.Network.Group.Operators;
 using Org.Apache.REEF.Network.Group.Operators.Impl;
 using Org.Apache.REEF.Network.NetworkService;
+using Org.Apache.REEF.Network.StreamingCodec;
 using Org.Apache.REEF.Tang.Annotations;
 using Org.Apache.REEF.Tang.Exceptions;
 using Org.Apache.REEF.Utilities.Logging;
-using Org.Apache.REEF.Wake.Remote;
 
 namespace Org.Apache.REEF.Network.Group.Task.Impl
 {
     /// <summary>
     /// Contains the Operator's topology graph.
+    /// Writable version
     /// Used to send or receive messages to/from operators in the same
     /// Communication Group.
     /// </summary>
     /// <typeparam name="T">The message type</typeparam>
-    public class OperatorTopology<T> : IOperatorTopology<T>, IObserver<GroupCommunicationMessage>
+    // TODO: Need to remove Iwritable and use IstreamingCodec. Please see Jira REEF-295.
+    public sealed class OperatorTopology<T> : IOperatorTopology<T>, IObserver<GeneralGroupCommunicationMessage>
     {
         private const int DefaultTimeout = 50000;
         private const int RetryCount = 10;
@@ -57,14 +58,14 @@ public class OperatorTopology<T> : IOperatorTopology<T>, IObserver<GroupCommunic
         private readonly int _timeout;
         private readonly int _retryCount;
 
-        private readonly NodeStruct _parent;
-        private readonly List<NodeStruct> _children;
-        private readonly Dictionary<string, NodeStruct> _idToNodeMap;
-        private readonly ICodec<T> _codec;
+        private readonly NodeStruct<T> _parent;
+        private readonly List<NodeStruct<T>> _children;
+        private readonly Dictionary<string, NodeStruct<T>> _idToNodeMap;
         private readonly INameClient _nameClient;
         private readonly Sender _sender;
-        private readonly BlockingCollection<NodeStruct> _nodesWithData;
+        private readonly BlockingCollection<NodeStruct<T>> _nodesWithData;
         private readonly Object _thisLock = new Object();
+        private readonly IStreamingCodec<T> _codec;
 
         /// <summary>
         /// Creates a new OperatorTopology object.
@@ -73,37 +74,39 @@ public class OperatorTopology<T> : IOperatorTopology<T>, IObserver<GroupCommunic
         /// <param name="groupName">The name of the operator's Communication Group</param>
         /// <param name="taskId">The operator's Task identifier</param>
         /// <param name="driverId">The identifer for the driver</param>
+        /// <param name="timeout">Timeout value for cancellation token</param>
+        /// <param name="retryCount">Number of times to retry registration</param>
         /// <param name="rootId">The identifier for the root Task in the topology graph</param>
         /// <param name="childIds">The set of child Task identifiers in the topology graph</param>
         /// <param name="networkService">The network service</param>
-        /// <param name="codec">The codec used to serialize and deserialize messages</param>
         /// <param name="sender">The Sender used to do point to point communication</param>
+        /// <param name="codec">Streaming codec to encode objects</param>
         [Inject]
-        public OperatorTopology(
+        private OperatorTopology(
             [Parameter(typeof(GroupCommConfigurationOptions.OperatorName))] string operatorName,
             [Parameter(typeof(GroupCommConfigurationOptions.CommunicationGroupName))] string groupName,
             [Parameter(typeof(TaskConfigurationOptions.Identifier))] string taskId,
             [Parameter(typeof(GroupCommConfigurationOptions.DriverId))] string driverId,
-            [Parameter(typeof(GroupCommConfigurationOptions.Timeout))] int timrout,
+            [Parameter(typeof(GroupCommConfigurationOptions.Timeout))] int timeout,
             [Parameter(typeof(GroupCommConfigurationOptions.RetryCount))] int retryCount,
             [Parameter(typeof(GroupCommConfigurationOptions.TopologyRootTaskId))] string rootId,
             [Parameter(typeof(GroupCommConfigurationOptions.TopologyChildTaskIds))] ISet<string> childIds,
-            NetworkService<GroupCommunicationMessage> networkService,
-            ICodec<T> codec,
-            Sender sender)
+            WritableNetworkService<GeneralGroupCommunicationMessage> networkService,
+            Sender sender,
+            IStreamingCodec<T> codec)
         {
             _operatorName = operatorName;
             _groupName = groupName;
             _selfId = taskId;
             _driverId = driverId;
-            _timeout = timrout;
+            _timeout = timeout;
             _retryCount = retryCount;
-            _codec = codec;
             _nameClient = networkService.NamingClient;
             _sender = sender;
-            _nodesWithData = new BlockingCollection<NodeStruct>();
-            _children = new List<NodeStruct>();
-            _idToNodeMap = new Dictionary<string, NodeStruct>();
+            _nodesWithData = new BlockingCollection<NodeStruct<T>>();
+            _children = new List<NodeStruct<T>>();
+            _idToNodeMap = new Dictionary<string, NodeStruct<T>>();
+            _codec = codec;
 
             if (_selfId.Equals(rootId))
             {
@@ -111,12 +114,12 @@ public class OperatorTopology<T> : IOperatorTopology<T>, IObserver<GroupCommunic
             }
             else
             {
-                _parent = new NodeStruct(rootId);
+                _parent = new NodeStruct<T>(rootId);
                 _idToNodeMap[rootId] = _parent;
             }
             foreach (var childId in childIds)
             {
-                var node = new NodeStruct(childId);
+                var node = new NodeStruct<T>(childId);
                 _children.Add(node);
                 _idToNodeMap[childId] = node;
             }
@@ -151,7 +154,7 @@ public void Initialize()
         /// Updates the sending node's message queue.
         /// </summary>
         /// <param name="gcm">The incoming message</param>
-        public void OnNext(GroupCommunicationMessage gcm)
+        public void OnNext(GeneralGroupCommunicationMessage gcm)
         {
             if (gcm == null)
             {
@@ -171,7 +174,14 @@ public void OnNext(GroupCommunicationMessage gcm)
             lock (_thisLock)
             {
                 _nodesWithData.Add(sourceNode);
-                sourceNode.AddData(gcm);
+                var message = gcm as GroupCommunicationMessage<T>;
+
+                if (message == null)
+                {
+                    throw new NullReferenceException("message passed not of type GroupCommunicationMessage");
+                }
+
+                sourceNode.AddData(message);
             }
         }
 
@@ -204,7 +214,7 @@ public void SendToChildren(T message, MessageType type)
 
             foreach (var child in _children)
             {
-                SendToNode(message, MessageType.Data, child); 
+                SendToNode(message, MessageType.Data, child);
             }
         }
 
@@ -218,14 +228,14 @@ public void ScatterToChildren(IList<T> messages, MessageType type)
         {
             if (messages == null)
             {
-                throw new ArgumentNullException("messages"); 
+                throw new ArgumentNullException("messages");
             }
             if (_children.Count <= 0)
             {
                 return;
             }
 
-            var count = (int) Math.Ceiling(((double) messages.Count) / _children.Count);
+            var count = (int)Math.Ceiling(((double)messages.Count) / _children.Count);
             ScatterHelper(messages, _children, count);
         }
 
@@ -268,10 +278,10 @@ public void ScatterToChildren(IList<T> messages, List<string> order, MessageType
                 throw new ArgumentException("order cannot be null and must have the same number of elements as child tasks");
             }
 
-            List<NodeStruct> nodes = new List<NodeStruct>(); 
+            List<NodeStruct<T>> nodes = new List<NodeStruct<T>>();
             foreach (string taskId in order)
             {
-                NodeStruct node = FindNode(taskId);
+                NodeStruct<T> node = FindNode(taskId);
                 if (node == null)
                 {
                     throw new IllegalStateException("Received message from invalid task id: " + taskId);
@@ -280,7 +290,7 @@ public void ScatterToChildren(IList<T> messages, List<string> order, MessageType
                 nodes.Add(node);
             }
 
-            int count = (int) Math.Ceiling(((double) messages.Count) / _children.Count);
+            int count = (int)Math.Ceiling(((double)messages.Count) / _children.Count);
             ScatterHelper(messages, nodes, count);
         }
 
@@ -290,28 +300,24 @@ public void ScatterToChildren(IList<T> messages, List<string> order, MessageType
         /// <returns>The parent Task's message</returns>
         public T ReceiveFromParent()
         {
-            byte[][] data = ReceiveFromNode(_parent);
+            T[] data = ReceiveFromNode(_parent);
             if (data == null || data.Length != 1)
             {
                 throw new InvalidOperationException("Cannot receive data from parent node");
             }
 
-            return _codec.Decode(data[0]);
+            return data[0];
         }
 
-        /// <summary>
-        /// Receive a list of incoming messages from the parent Task.
-        /// </summary>
-        /// <returns>The parent Task's list of messages</returns>
         public IList<T> ReceiveListFromParent()
         {
-            byte[][] data = ReceiveFromNode(_parent);
+            T[] data = ReceiveFromNode(_parent);
             if (data == null || data.Length == 0)
             {
                 throw new InvalidOperationException("Cannot receive data from parent node");
             }
 
-            return data.Select(b => _codec.Decode(b)).ToList();
+            return data.ToList();
         }
 
         /// <summary>
@@ -336,13 +342,13 @@ public T ReceiveFromChildren(IReduceFunction<T> reduceFunction)
 
                 foreach (var child in childrenWithData)
                 {
-                    byte[][] data = ReceiveFromNode(child);
+                    T[] data = ReceiveFromNode(child);
                     if (data == null || data.Length != 1)
                     {
                         throw new InvalidOperationException("Received invalid data from child with id: " + child.Identifier);
                     }
 
-                    receivedData.Add(_codec.Decode(data[0]));
+                    receivedData.Add(data[0]);
                     childrenToReceiveFrom.Remove(child.Identifier);
                 }
             }
@@ -368,10 +374,10 @@ public bool HasChildren()
         /// </summary>
         ///<param name="nodeSetIdentifier">Candidate set of nodes from which data is to be received</param>
         /// <returns>A Vector of NodeStruct with incoming data.</returns>
-        private IEnumerable<NodeStruct> GetNodeWithData(IEnumerable<string> nodeSetIdentifier)
+        private IEnumerable<NodeStruct<T>> GetNodeWithData(IEnumerable<string> nodeSetIdentifier)
         {
             CancellationTokenSource timeoutSource = new CancellationTokenSource(_timeout);
-            List<NodeStruct> nodesSubsetWithData = new List<NodeStruct>();
+            List<NodeStruct<T>> nodesSubsetWithData = new List<NodeStruct<T>>();
 
             try
             {
@@ -408,7 +414,7 @@ private IEnumerable<NodeStruct> GetNodeWithData(IEnumerable<string> nodeSetIdent
                     potentialNode = _nodesWithData.Take();
                 }
 
-                return new NodeStruct[] { potentialNode };
+                return new NodeStruct<T>[] { potentialNode };
 
             }
             catch (OperationCanceledException)
@@ -434,10 +440,10 @@ private IEnumerable<NodeStruct> GetNodeWithData(IEnumerable<string> nodeSetIdent
         /// <param name="message">The message to send</param>
         /// <param name="msgType">The message type</param>
         /// <param name="node">The NodeStruct representing the Task to send to</param>
-        private void SendToNode(T message, MessageType msgType, NodeStruct node)
+        private void SendToNode(T message, MessageType msgType, NodeStruct<T> node)
         {
-            GroupCommunicationMessage gcm = new GroupCommunicationMessage(_groupName, _operatorName,
-                _selfId, node.Identifier, _codec.Encode(message), msgType);
+            GeneralGroupCommunicationMessage gcm = new GroupCommunicationMessage<T>(_groupName, _operatorName,
+                _selfId, node.Identifier, message, msgType, _codec);
 
             _sender.Send(gcm);
         }
@@ -448,16 +454,40 @@ private void SendToNode(T message, MessageType msgType, NodeStruct node)
         /// <param name="messages">The list of messages to send</param>
         /// <param name="msgType">The message type</param>
         /// <param name="node">The NodeStruct representing the Task to send to</param>
-        private void SendToNode(IList<T> messages, MessageType msgType, NodeStruct node)
+        private void SendToNode(IList<T> messages, MessageType msgType, NodeStruct<T> node)
         {
-            byte[][] encodedMessages = messages.Select(message => _codec.Encode(message)).ToArray();
-            GroupCommunicationMessage gcm = new GroupCommunicationMessage(_groupName, _operatorName,
-                _selfId, node.Identifier, encodedMessages, msgType);
+            T[] encodedMessages = messages.ToArray();
+
+            GroupCommunicationMessage<T> gcm = new GroupCommunicationMessage<T>(_groupName, _operatorName,
+                _selfId, node.Identifier, encodedMessages, msgType, _codec);
 
             _sender.Send(gcm);
         }
 
-        private void ScatterHelper(IList<T> messages, List<NodeStruct> order, int count)
+        /// <summary>
+        /// Receive a message from the Task represented by the given NodeStruct.
+        /// Removes the NodeStruct from the nodesWithData queue if requested.
+        /// </summary>
+        /// <param name="node">The node to receive from</param>
+        /// <returns>The byte array message from the node</returns>
+        private T[] ReceiveFromNode(NodeStruct<T> node)
+        {
+            var data = node.GetData();
+            return data;
+        }
+
+        /// <summary>
+        /// Find the NodeStruct with the given Task identifier.
+        /// </summary>
+        /// <param name="identifier">The identifier of the Task</param>
+        /// <returns>The NodeStruct</returns>
+        private NodeStruct<T> FindNode(string identifier)
+        {
+            NodeStruct<T> node;
+            return _idToNodeMap.TryGetValue(identifier, out node) ? node : null;
+        }
+
+        private void ScatterHelper(IList<T> messages, List<NodeStruct<T>> order, int count)
         {
             if (count <= 0)
             {
@@ -465,7 +495,7 @@ private void ScatterHelper(IList<T> messages, List<NodeStruct> order, int count)
             }
 
             int i = 0;
-            foreach (NodeStruct nodeStruct in order)
+            foreach (var nodeStruct in order)
             {
                 // The last sublist might be smaller than count if the number of
                 // child tasks is not evenly divisible by count
@@ -483,29 +513,6 @@ private void ScatterHelper(IList<T> messages, List<NodeStruct> order, int count)
             }
         }
 
-        /// <summary>
-        /// Receive a message from the Task represented by the given NodeStruct.
-        /// Removes the NodeStruct from the nodesWithData queue if requested.
-        /// </summary>
-        /// <param name="node">The node to receive from</param>
-        /// <returns>The byte array message from the node</returns>
-        private byte[][] ReceiveFromNode(NodeStruct node)
-        {
-            byte[][] data = node.GetData();
-            return data;
-        }
-
-        /// <summary>
-        /// Find the NodeStruct with the given Task identifier.
-        /// </summary>
-        /// <param name="identifier">The identifier of the Task</param>
-        /// <returns>The NodeStruct</returns>
-        private NodeStruct FindNode(string identifier)
-        {
-            NodeStruct node;
-            return _idToNodeMap.TryGetValue(identifier, out node) ? node : null;
-        }
-
         /// <summary>
         /// Checks if the identifier is registered with the Name Server.
         /// Throws exception if the operation fails more than the retry count.
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Topology/FlatTopology.cs b/lang/cs/Org.Apache.REEF.Network/Group/Topology/FlatTopology.cs
index c36f1ca7fa..b182a39963 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Topology/FlatTopology.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Topology/FlatTopology.cs
@@ -25,8 +25,6 @@
 using Org.Apache.REEF.Tang.Implementations.Tang;
 using Org.Apache.REEF.Tang.Interface;
 using Org.Apache.REEF.Tang.Util;
-using Org.Apache.REEF.Wake.Remote;
-using Org.Apache.REEF.Network.Group.Pipelining;
 using Org.Apache.REEF.Tang.Implementations.Configuration;
 
 namespace Org.Apache.REEF.Network.Group.Topology
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Topology/ITopology.cs b/lang/cs/Org.Apache.REEF.Network/Group/Topology/ITopology.cs
index 0c7f164f89..0bd46a2b93 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Topology/ITopology.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Topology/ITopology.cs
@@ -19,7 +19,6 @@
 
 using Org.Apache.REEF.Network.Group.Operators;
 using Org.Apache.REEF.Tang.Interface;
-using Org.Apache.REEF.Wake.Remote;
 
 namespace Org.Apache.REEF.Network.Group.Topology
 {
diff --git a/lang/cs/Org.Apache.REEF.Network/Group/Topology/TreeTopology.cs b/lang/cs/Org.Apache.REEF.Network/Group/Topology/TreeTopology.cs
index d6c6bc64b2..3e76b64d47 100644
--- a/lang/cs/Org.Apache.REEF.Network/Group/Topology/TreeTopology.cs
+++ b/lang/cs/Org.Apache.REEF.Network/Group/Topology/TreeTopology.cs
@@ -25,18 +25,12 @@
 using Org.Apache.REEF.Tang.Implementations.Tang;
 using Org.Apache.REEF.Tang.Interface;
 using Org.Apache.REEF.Tang.Util;
-using Org.Apache.REEF.Wake.Remote;
-using Org.Apache.REEF.Network.Group.Pipelining;
-using Org.Apache.REEF.Network.Group.Task.Impl;
 using Org.Apache.REEF.Tang.Implementations.Configuration;
-using Org.Apache.REEF.Utilities.Logging;
 
 namespace Org.Apache.REEF.Network.Group.Topology
 {
     public class TreeTopology<T> : ITopology<T> 
     {
-        private readonly Logger LOGGER = Logger.GetLogger(typeof(TreeTopology<T>));
-
         private readonly string _groupName;
         private readonly string _operatorName;
 
diff --git a/lang/cs/Org.Apache.REEF.Network/NetworkService/WritableNsMessage.cs b/lang/cs/Org.Apache.REEF.Network/NetworkService/WritableNsMessage.cs
index 28cd5f9d4e..a9299bbf32 100644
--- a/lang/cs/Org.Apache.REEF.Network/NetworkService/WritableNsMessage.cs
+++ b/lang/cs/Org.Apache.REEF.Network/NetworkService/WritableNsMessage.cs
@@ -101,12 +101,13 @@ public void Read(IDataReader reader)
             SourceId = _factory.Create(reader.ReadString());
             DestId = _factory.Create(reader.ReadString());
             int messageCount = reader.ReadInt32();
+            string dataType = reader.ReadString();
 
             Data = new List<T>();
 
             for (int index = 0; index < messageCount; index++)
             {
-                var dataPoint = (T)_injection.ForkInjector().GetInstance(typeof(T));
+                var dataPoint = (T)_injection.ForkInjector().GetInstance(Type.GetType(dataType));
 
                 if (null == dataPoint)
                 {
@@ -127,6 +128,7 @@ public void Write(IDataWriter writer)
             writer.WriteString(SourceId.ToString());
             writer.WriteString(DestId.ToString());
             writer.WriteInt32(Data.Count);
+            writer.WriteString(Data[0].GetType().AssemblyQualifiedName);
 
             foreach (var data in Data)
             {
@@ -144,12 +146,13 @@ public async Task ReadAsync(IDataReader reader, CancellationToken token)
             SourceId = _factory.Create(await reader.ReadStringAsync(token));
             DestId = _factory.Create(await reader.ReadStringAsync(token));
             int messageCount = await reader.ReadInt32Async(token);
+            string dataType = await reader.ReadStringAsync(token);
 
             Data = new List<T>();
 
             for (int index = 0; index < messageCount; index++)
             {
-                var dataPoint = Activator.CreateInstance<T>();
+                var dataPoint = (T) _injection.ForkInjector().GetInstance(Type.GetType(dataType));
 
                 if (null == dataPoint)
                 {
@@ -171,6 +174,7 @@ public async Task WriteAsync(IDataWriter writer, CancellationToken token)
             await writer.WriteStringAsync(SourceId.ToString(), token);
             await writer.WriteStringAsync(DestId.ToString(), token);
             await writer.WriteInt32Async(Data.Count, token);
+            await writer.WriteStringAsync(Data[0].GetType().AssemblyQualifiedName, token);
 
             foreach (var data in Data)
             {
diff --git a/lang/cs/Org.Apache.REEF.Network/Org.Apache.REEF.Network.csproj b/lang/cs/Org.Apache.REEF.Network/Org.Apache.REEF.Network.csproj
index 6a8fa0bba7..390bbb44b1 100644
--- a/lang/cs/Org.Apache.REEF.Network/Org.Apache.REEF.Network.csproj
+++ b/lang/cs/Org.Apache.REEF.Network/Org.Apache.REEF.Network.csproj
@@ -50,14 +50,15 @@ under the License.
     <Reference Include="System.Xml" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Group\Config\CodecToStreamingCodecConfiguration.cs" />
+    <Compile Include="Group\Driver\Impl\GeneralGroupCommunicationMessage.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\FloatArrayStreamingCodec.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\DoubleArrayStreamingCodec.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\FloatStreamingCodec.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\IntArrayStreamingCodec.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\DoubleStreamingCodec.cs" />
+    <Compile Include="StreamingCodec\CommonStreamingCodecs\StringStreamingCodec.cs" />
     <Compile Include="StreamingCodec\CommonStreamingCodecs\IntStreamingCodec.cs" />
-    <Compile Include="Group\Codec\GcmMessageProto.cs" />
-    <Compile Include="Group\Codec\GroupCommunicationMessageCodec.cs" />
     <Compile Include="Group\Config\CodecConfiguration.cs" />
     <Compile Include="Group\Config\GroupCommConfigurationOptions.cs" />
     <Compile Include="Group\Config\PipelineDataConverterConfiguration.cs" />
diff --git a/lang/cs/Org.Apache.REEF.Network/StreamingCodec/CommonStreamingCodecs/StringStreamingCodec.cs b/lang/cs/Org.Apache.REEF.Network/StreamingCodec/CommonStreamingCodecs/StringStreamingCodec.cs
new file mode 100644
index 0000000000..63036f5904
--- /dev/null
+++ b/lang/cs/Org.Apache.REEF.Network/StreamingCodec/CommonStreamingCodecs/StringStreamingCodec.cs
@@ -0,0 +1,82 @@
+﻿/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+using System.Threading;
+using System.Threading.Tasks;
+using Org.Apache.REEF.Tang.Annotations;
+using Org.Apache.REEF.Wake.Remote;
+
+namespace Org.Apache.REEF.Network.StreamingCodec.CommonStreamingCodecs
+{
+    /// <summary>
+    /// Streaming codec for string
+    /// </summary>
+    public sealed class StringStreamingCodec : IStreamingCodec<string>
+    {
+        /// <summary>
+        /// Injectable constructor
+        /// </summary>
+        [Inject]
+        private StringStreamingCodec()
+        {
+        }
+
+        /// <summary>
+        /// Instantiate the class from the reader.
+        /// </summary>
+        /// <param name="reader">The reader from which to read</param>
+        ///<returns>The string read from the reader</returns>
+        public string Read(IDataReader reader)
+        {
+            return reader.ReadString();
+        }
+
+        /// <summary>
+        /// Writes the string to the writer.
+        /// </summary>
+        /// <param name="obj">The string to be encoded</param>
+        /// <param name="writer">The writer to which to write</param>
+        public void Write(string obj, IDataWriter writer)
+        {
+            writer.WriteString(obj);
+        }
+
+        ///  <summary>
+        ///  Instantiate the class from the reader.
+        ///  </summary>
+        ///  <param name="reader">The reader from which to read</param>
+        /// <param name="token">Cancellation token</param>
+        /// <returns>The string read from the reader</returns>
+        public async Task<string> ReadAsync(IDataReader reader, CancellationToken token)
+        {
+            return await reader.ReadStringAsync(token);
+        }
+
+        /// <summary>
+        /// Writes the string to the writer.
+        /// </summary>
+        /// <param name="obj">The string to be encoded</param>
+        /// <param name="writer">The writer to which to write</param>
+        /// <param name="token">Cancellation token</param>
+        public async Task WriteAsync(string obj, IDataWriter writer, CancellationToken token)
+        {
+            await writer.WriteStringAsync(obj, token);
+        }
+    }
+}
