diff --git a/java/core/src/java/org/apache/orc/impl/ReaderImpl.java b/java/core/src/java/org/apache/orc/impl/ReaderImpl.java
index 602e5c303a..76132f4540 100644
--- a/java/core/src/java/org/apache/orc/impl/ReaderImpl.java
+++ b/java/core/src/java/org/apache/orc/impl/ReaderImpl.java
@@ -436,6 +436,32 @@ protected static void ensureOrcFooter(FSDataInputStream in,
     }
   }
 
+  /**
+   * Ensure this is an ORC file to prevent users from trying to read text
+   * files or RC files as ORC files.
+   * @param psLen the postscript length
+   * @param buffer the tail of the file
+   * @deprecated Use {@link ReaderImpl#ensureOrcFooter(FSDataInputStream, Path, int, ByteBuffer)} instead.
+   */
+  protected static void ensureOrcFooter(ByteBuffer buffer, int psLen) throws IOException {
+    int magicLength = OrcFile.MAGIC.length();
+    int fullLength = magicLength + 1;
+    if (psLen < fullLength || buffer.remaining() < fullLength) {
+      throw new FileFormatException("Malformed ORC file. Invalid postscript length " + psLen);
+    }
+
+    int offset = buffer.arrayOffset() + buffer.position() + buffer.limit() - fullLength;
+    byte[] array = buffer.array();
+    // now look for the magic string at the end of the postscript.
+    if (!Text.decode(array, offset, magicLength).equals(OrcFile.MAGIC)) {
+      // if it isn't there, this may be 0.11.0 version of the ORC file.
+      // Read the first 3 bytes from the buffer to check for the header
+      if (!Text.decode(buffer.array(), 0, magicLength).equals(OrcFile.MAGIC)) {
+        throw new FileFormatException("Malformed ORC file. Invalid postscript length " + psLen);
+      }
+    }
+  }
+
   /**
    * Build a version string out of an array.
    * @param version the version number as a list
@@ -643,6 +669,56 @@ private static void read(FSDataInputStream file,
     }
   }
 
+  /**
+   * @deprecated Use {@link ReaderImpl#extractFileTail(FileSystem, Path, long)} instead.
+   * This is for backward compatibility.
+   */
+  public static OrcTail extractFileTail(ByteBuffer buffer)
+      throws IOException {
+    return extractFileTail(buffer, -1,-1);
+  }
+
+  /**
+   * @deprecated Use {@link ReaderImpl#extractFileTail(FileSystem, Path, long)} instead.
+   * This is for backward compatibility.
+   */
+  public static OrcTail extractFileTail(ByteBuffer buffer, long fileLen, long modificationTime)
+      throws IOException {
+    OrcProto.PostScript ps;
+    long readSize = fileLen != -1 ? fileLen : buffer.limit();
+    OrcProto.FileTail.Builder fileTailBuilder = OrcProto.FileTail.newBuilder();
+    fileTailBuilder.setFileLength(readSize);
+
+    int psLen = buffer.get((int) (readSize - 1)) & 0xff;
+    int psOffset = (int) (readSize - 1 - psLen);
+    ensureOrcFooter(buffer, psLen);
+    byte[] psBuffer = new byte[psLen];
+    System.arraycopy(buffer.array(), psOffset, psBuffer, 0, psLen);
+
+    ps = OrcProto.PostScript.parseFrom(psBuffer);
+    int footerSize = (int) ps.getFooterLength();
+    CompressionKind compressionKind =
+        CompressionKind.valueOf(ps.getCompression().name());
+    fileTailBuilder.setPostscriptLength(psLen).setPostscript(ps);
+
+    InStream.StreamOptions compression = new InStream.StreamOptions();
+    try (CompressionCodec codec = OrcCodecPool.getCodec(compressionKind)){
+      if (codec != null) {
+        compression.withCodec(codec)
+            .withBufferSize((int) ps.getCompressionBlockSize());
+      }
+
+      OrcProto.Footer footer =
+          OrcProto.Footer.parseFrom(
+              InStream.createCodedInputStream(
+                  InStream.create("footer", new BufferChunk(buffer, 0), psOffset - footerSize, footerSize, compression)));
+      fileTailBuilder.setPostscriptLength(psLen).setFooter(footer);
+    }
+    // clear does not clear the contents but sets position to 0 and limit = capacity
+    buffer.clear();
+    return new OrcTail(fileTailBuilder.build(), new BufferChunk(buffer.slice(), 0), modificationTime);
+  }
+
   protected OrcTail extractFileTail(FileSystem fs, Path path,
       long maxFileLength) throws IOException {
     BufferChunk buffer;
diff --git a/java/core/src/test/org/apache/orc/impl/TestReaderImpl.java b/java/core/src/test/org/apache/orc/impl/TestReaderImpl.java
index 8e5085b9ff..3082c153cb 100644
--- a/java/core/src/test/org/apache/orc/impl/TestReaderImpl.java
+++ b/java/core/src/test/org/apache/orc/impl/TestReaderImpl.java
@@ -20,7 +20,6 @@
 
 import java.io.ByteArrayInputStream;
 import java.io.EOFException;
-import java.io.File;
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -49,7 +48,6 @@
 import org.apache.orc.RecordReader;
 import org.apache.orc.StripeStatistics;
 import org.apache.orc.TestVectorOrcFile;
-import org.apache.orc.TimestampColumnStatistics;
 import org.apache.orc.TypeDescription;
 import org.junit.Before;
 import org.junit.Rule;
@@ -368,6 +366,28 @@ public void testOrcTailStripeStats() throws Exception {
           stats.get(0).getColumn(5).getTimestampStatistics();
       assertEquals(-28800000, tsStats.getMinimumUtc());
       assertEquals(-28550000, tsStats.getMaximumUtc());
+
+      // Test Tail and Stats extraction from ByteBuffer
+      ByteBuffer tailBuffer = tail.getSerializedTail();
+      OrcTail extractedTail = ReaderImpl.extractFileTail(tailBuffer);
+
+      assertEquals(tail.getTailBuffer(), extractedTail.getTailBuffer());
+      assertEquals(tail.getTailBuffer().getData(), extractedTail.getTailBuffer().getData());
+      assertEquals(tail.getTailBuffer().getOffset(), extractedTail.getTailBuffer().getOffset());
+      assertEquals(tail.getTailBuffer().getEnd(), extractedTail.getTailBuffer().getEnd());
+
+      assertEquals(tail.getMetadataOffset(), extractedTail.getMetadataOffset());
+      assertEquals(tail.getMetadataSize(), extractedTail.getMetadataSize());
+
+      Reader dummyReader = new ReaderImpl(null,
+          OrcFile.readerOptions(OrcFile.readerOptions(conf).getConfiguration())
+          .orcTail(extractedTail));
+      List<StripeStatistics> tailBufferStats = dummyReader.getVariantStripeStatistics(null);
+
+      assertEquals(stats.size(), tailBufferStats.size());
+      OrcProto.TimestampStatistics bufferTsStats = tailBufferStats.get(0).getColumn(5).getTimestampStatistics();
+      assertEquals(tsStats.getMinimumUtc(), bufferTsStats.getMinimumUtc());
+      assertEquals(tsStats.getMaximumUtc(), bufferTsStats.getMaximumUtc());
     }
   }
 
