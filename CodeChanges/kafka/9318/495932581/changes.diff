diff --git a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java
index fc2fda29399..a0ac5e83d6d 100644
--- a/clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java
+++ b/clients/src/main/java/org/apache/kafka/clients/consumer/internals/ConsumerProtocol.java
@@ -23,8 +23,7 @@
 import org.apache.kafka.common.message.ConsumerProtocolAssignment;
 import org.apache.kafka.common.message.ConsumerProtocolSubscription;
 import org.apache.kafka.common.protocol.ByteBufferAccessor;
-import org.apache.kafka.common.protocol.Message;
-import org.apache.kafka.common.protocol.ObjectSerializationCache;
+import org.apache.kafka.common.protocol.MessageUtil;
 import org.apache.kafka.common.protocol.types.SchemaException;
 import org.apache.kafka.common.utils.CollectionUtils;
 
@@ -82,7 +81,7 @@ public static ByteBuffer serializeSubscription(final Subscription subscription,
                 .setPartitions(topicEntry.getValue()));
         }
 
-        return serializeMessage(version, data);
+        return MessageUtil.serializeMessage(version, data);
     }
 
     public static Subscription deserializeSubscription(final ByteBuffer buffer, short version) {
@@ -128,7 +127,7 @@ public static ByteBuffer serializeAssignment(final Assignment assignment, short
                 .setPartitions(topicEntry.getValue()));
         }
 
-        return serializeMessage(version, data);
+        return MessageUtil.serializeMessage(version, data);
     }
 
     public static Assignment deserializeAssignment(final ByteBuffer buffer, short version) {
@@ -174,15 +173,4 @@ else if (version > ConsumerProtocolAssignment.HIGHEST_SUPPORTED_VERSION)
         else
             return version;
     }
-
-    private static ByteBuffer serializeMessage(final short version, final Message message) {
-        ObjectSerializationCache cache = new ObjectSerializationCache();
-        int size = message.size(cache, version);
-        ByteBuffer bytes = ByteBuffer.allocate(2 + size);
-        ByteBufferAccessor accessor = new ByteBufferAccessor(bytes);
-        accessor.writeShort(version);
-        message.write(accessor, cache, version);
-        bytes.flip();
-        return bytes;
-    }
 }
diff --git a/clients/src/main/java/org/apache/kafka/common/protocol/MessageUtil.java b/clients/src/main/java/org/apache/kafka/common/protocol/MessageUtil.java
index d47fa44c161..a8244303710 100644
--- a/clients/src/main/java/org/apache/kafka/common/protocol/MessageUtil.java
+++ b/clients/src/main/java/org/apache/kafka/common/protocol/MessageUtil.java
@@ -180,4 +180,15 @@ public static boolean compareRawTaggedFields(List<RawTaggedField> first,
             return first.equals(second);
         }
     }
+
+    public static ByteBuffer serializeMessage(final short version, final Message message) {
+        ObjectSerializationCache cache = new ObjectSerializationCache();
+        int size = message.size(cache, version);
+        ByteBuffer bytes = ByteBuffer.allocate(2 + size);
+        ByteBufferAccessor accessor = new ByteBufferAccessor(bytes);
+        accessor.writeShort(version);
+        message.write(accessor, cache, version);
+        bytes.flip();
+        return bytes;
+    }
 }
diff --git a/core/src/main/resources/common/message/GroupMetadataKey.json b/core/src/main/resources/common/message/GroupMetadataKey.json
deleted file mode 100644
index 15e991a4d37..00000000000
--- a/core/src/main/resources/common/message/GroupMetadataKey.json
+++ /dev/null
@@ -1,27 +0,0 @@
-// Licensed to the Apache Software Foundation (ASF) under one or more
-// contributor license agreements.  See the NOTICE file distributed with
-// this work for additional information regarding copyright ownership.
-// The ASF licenses this file to You under the Apache License, Version 2.0
-// (the "License"); you may not use this file except in compliance with
-// the License.  You may obtain a copy of the License at
-//
-//    http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-
-{
-  "name": "GroupMetadataKey",
-  "validVersions": "2",
-  "fields": [
-    {
-      "name": "group",
-      "versions": "2+",
-      "type": "string"
-    }
-  ],
-  "type": "data"
-}
diff --git a/core/src/main/resources/common/message/GroupMetadataValue.json b/core/src/main/resources/common/message/GroupMetadataValue.json
index 4cb16d952dd..533b435d0e2 100644
--- a/core/src/main/resources/common/message/GroupMetadataValue.json
+++ b/core/src/main/resources/common/message/GroupMetadataValue.json
@@ -14,90 +14,31 @@
 // limitations under the License.
 
 {
+  "type": "data",
   "name": "GroupMetadataValue",
   "validVersions": "0-3",
   "fields": [
-    {
-      "name": "protocolType",
-      "versions": "0+",
-      "type": "string"
-    },
-    {
-      "name": "generation",
-      "versions": "0+",
-      "type": "int32"
-    },
-    {
-      "name": "protocol",
-      "versions": "0+",
-      "type": "string",
-      "nullableVersions": "0+"
-    },
-    {
-      "name": "leader",
-      "versions": "0+",
-      "type": "string",
-      "nullableVersions": "0+"
-    },
-    {
-      "name": "members",
-      "versions": "0+",
-      "type": "[]MemberMetadata"
-    },
-    {
-      "name": "currentStateTimestamp",
-      "versions": "2+",
-      "type": "int64"
-    }
+    { "name": "protocolType", "versions": "0+", "type": "string"},
+    { "name": "generation", "versions": "0+", "type": "int32" },
+    { "name": "protocol", "versions": "0+", "type": "string", "nullableVersions": "0+" },
+    { "name": "leader", "versions": "0+", "type": "string", "nullableVersions": "0+" },
+    { "name": "currentStateTimestamp", "versions": "2+", "type": "int64" },
+    { "name": "members", "versions": "0+", "type": "[]MemberMetadata" }
   ],
   "commonStructs": [
     {
       "name": "MemberMetadata",
       "versions": "0-3",
       "fields": [
-        {
-          "name": "memberId",
-          "versions": "0+",
-          "type": "string"
-        },
-        {
-          "name": "clientId",
-          "versions": "0+",
-          "type": "string"
-        },
-        {
-          "name": "clientHost",
-          "versions": "0+",
-          "type": "string"
-        },
-        {
-          "name": "sessionTimeout",
-          "versions": "0+",
-          "type": "int32"
-        },
-        {
-          "name": "subscription",
-          "versions": "0+",
-          "type": "bytes"
-        },
-        {
-          "name": "assignment",
-          "versions": "0+",
-          "type": "bytes"
-        },
-        {
-          "name": "rebalanceTimeout",
-          "versions": "1+",
-          "type": "int32"
-        },
-        {
-          "name": "groupInstanceId",
-          "versions": "3+",
-          "type": "string",
-          "nullableVersions": "3+"
-        }
+        { "name": "memberId", "versions": "0+", "type": "string" },
+        { "name": "groupInstanceId", "versions": "3+", "type": "string", "nullableVersions": "3+" },
+        { "name": "clientId", "versions": "0+", "type": "string" },
+        { "name": "clientHost", "versions": "0+", "type": "string" },
+        { "name": "rebalanceTimeout", "versions": "1+", "type": "int32" },
+        { "name": "sessionTimeout", "versions": "0+", "type": "int32" },
+        { "name": "subscription", "versions": "0+", "type": "bytes" },
+        { "name": "assignment", "versions": "0+", "type": "bytes" }
       ]
     }
-  ],
-  "type": "data"
+  ]
 }
diff --git a/core/src/main/resources/common/message/OffsetCommitKey.json b/core/src/main/resources/common/message/OffsetCommitKey.json
index f74f3d0ab83..3000e3d1ab6 100644
--- a/core/src/main/resources/common/message/OffsetCommitKey.json
+++ b/core/src/main/resources/common/message/OffsetCommitKey.json
@@ -14,24 +14,12 @@
 // limitations under the License.
 
 {
+  "type": "data",
   "name": "OffsetCommitKey",
-  "validVersions": "0-1",
+  "validVersions": "0-2",
   "fields": [
-    {
-      "name": "group",
-      "versions": "0+",
-      "type": "string"
-    },
-    {
-      "name": "topic",
-      "versions": "0+",
-      "type": "string"
-    },
-    {
-      "name": "partition",
-      "versions": "0+",
-      "type": "int32"
-    }
-  ],
-  "type": "data"
+    { "name": "group", "type": "string", "versions": "0-2" },
+    { "name": "topic", "type": "string", "versions": "0-1" },
+    { "name": "partition", "type": "int32", "versions": "0-1" }
+  ]
 }
diff --git a/core/src/main/resources/common/message/OffsetCommitValue.json b/core/src/main/resources/common/message/OffsetCommitValue.json
index 7d3d46ce13c..685b4757ef4 100644
--- a/core/src/main/resources/common/message/OffsetCommitValue.json
+++ b/core/src/main/resources/common/message/OffsetCommitValue.json
@@ -14,39 +14,14 @@
 // limitations under the License.
 
 {
+  "type": "data",
   "name": "OffsetCommitValue",
   "validVersions": "0-3",
   "fields": [
-    {
-      "name": "offset",
-      "versions": "0+",
-      "type": "int64"
-    },
-    {
-      "name": "metadata",
-      "versions": "0+",
-      "type": "string"
-    },
-    {
-      "name": "timestamp",
-      "versions": "0",
-      "type": "int64"
-    },
-    {
-      "name": "commitTimestamp",
-      "versions": "1+",
-      "type": "int64"
-    },
-    {
-      "name": "expireTimestamp",
-      "versions": "1",
-      "type": "int64"
-    },
-    {
-      "name": "leaderEpoch",
-      "versions": "3+",
-      "type": "int32"
-    }
-  ],
-  "type": "data"
+    { "name": "offset", "type": "int64", "versions": "0+" },
+    { "name": "leaderEpoch", "type": "int32", "versions": "3+" },
+    { "name": "metadata", "type": "string", "versions": "0+" },
+    { "name": "commitTimestamp", "type": "int64", "versions": "0+" },
+    { "name": "expireTimestamp", "type": "int64", "versions": "1" }
+  ]
 }
diff --git a/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala b/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
index 5cac2d6f383..e382df06dd6 100644
--- a/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
+++ b/core/src/main/scala/kafka/coordinator/group/GroupMetadataManager.scala
@@ -28,7 +28,6 @@ import java.util.concurrent.locks.ReentrantLock
 import com.yammer.metrics.core.Gauge
 import kafka.api.{ApiVersion, KAFKA_0_10_1_IV0, KAFKA_2_1_IV0, KAFKA_2_1_IV1, KAFKA_2_3_IV0}
 import kafka.common.OffsetAndMetadata
-import kafka.internals.generated
 import kafka.internals.generated.{GroupMetadataValue, OffsetCommitKey, OffsetCommitValue}
 import kafka.log.AppendOrigin
 import kafka.metrics.KafkaMetricsGroup
@@ -42,7 +41,7 @@ import org.apache.kafka.clients.consumer.internals.ConsumerProtocol
 import org.apache.kafka.common.internals.Topic
 import org.apache.kafka.common.metrics.Metrics
 import org.apache.kafka.common.metrics.stats.{Avg, Max, Meter}
-import org.apache.kafka.common.protocol.{ByteBufferAccessor, Errors, Message, ObjectSerializationCache}
+import org.apache.kafka.common.protocol.{ByteBufferAccessor, Errors, Message, MessageUtil}
 import org.apache.kafka.common.record._
 import org.apache.kafka.common.requests.OffsetFetchResponse.PartitionData
 import org.apache.kafka.common.requests.ProduceResponse.PartitionResponse
@@ -997,46 +996,11 @@ object GroupMetadataManager {
   val MetricsGroup: String = "group-coordinator-metrics"
   val LoadTimeSensor: String = "GroupPartitionLoadTime"
 
-  /**
-   *
-   * Statically check to make sure that the generated code always stays in sync with the overall protocol
-   * @param clz generated class
-   * @param actual actual version
-   * @param expected expected version
-   * @return correct version
-   */
-  private def checkVersionOfGeneratedCode(clz: Class[_], actual: Short, expected: Short): Short = {
-    if (actual != expected) {
-      throw new IllegalArgumentException(
-        s"core/src/main/resources/common/message/${clz.getSimpleName}.json needs to be updated to match the " +
-          s"latest assignment protocol version. ${clz.getSimpleName} only supports up to  ["
-          + actual + "] but needs to support up to [" + expected + "].");
-    }
-    expected
-  }
+  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = 1.toShort
+  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = 2.toShort
+  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = 3.toShort
 
-  private val CURRENT_OFFSET_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
-    clz = classOf[OffsetCommitKey],
-    actual = (OffsetCommitKey.SCHEMAS.length - 1).toShort,
-    expected = 1.toShort)
-  private val CURRENT_GROUP_KEY_SCHEMA_VERSION = checkVersionOfGeneratedCode(
-    clz = classOf[generated.GroupMetadataKey],
-    actual = (generated.GroupMetadataKey.SCHEMAS.length - 1).toShort,
-    expected = 2.toShort)
-  private val CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION = checkVersionOfGeneratedCode(
-    clz = classOf[GroupMetadataValue],
-    actual = (GroupMetadataValue.SCHEMAS.length - 1).toShort,
-    expected = 3.toShort)
-
-  private def serializeMessage(version: Short, message: Message): Array[Byte] = {
-    val cache = new ObjectSerializationCache()
-    val size = message.size(cache, version)
-    val bytes = ByteBuffer.allocate(2 + size)
-    val accessor = new ByteBufferAccessor(bytes)
-    accessor.writeShort(version)
-    message.write(accessor, cache, version)
-    bytes.array()
-  }
+  private def serializeMessage(version: Short, message: Message): Array[Byte] = MessageUtil.serializeMessage(version, message).array
 
   /**
    * Generates the key for offset commit message for given (group, topic, partition)
@@ -1047,7 +1011,10 @@ object GroupMetadataManager {
    */
   def offsetCommitKey(groupId: String, topicPartition: TopicPartition): Array[Byte] = {
     serializeMessage(CURRENT_OFFSET_KEY_SCHEMA_VERSION,
-      new OffsetCommitKey().setGroup(groupId).setTopic(topicPartition.topic()).setPartition(topicPartition.partition()))
+      new OffsetCommitKey()
+        .setGroup(groupId)
+        .setTopic(topicPartition.topic())
+        .setPartition(topicPartition.partition()))
   }
 
   /**
@@ -1058,7 +1025,8 @@ object GroupMetadataManager {
    */
   def groupMetadataKey(groupId: String): Array[Byte] = {
     serializeMessage(CURRENT_GROUP_KEY_SCHEMA_VERSION,
-      new kafka.internals.generated.GroupMetadataKey().setGroup(groupId))
+      new OffsetCommitKey()
+        .setGroup(groupId))
   }
 
   /**
@@ -1165,11 +1133,11 @@ object GroupMetadataManager {
     if (version <= CURRENT_OFFSET_KEY_SCHEMA_VERSION) {
       // version 0 and 1 refer to offset
       val key = new OffsetCommitKey(new ByteBufferAccessor(buffer), version)
-      OffsetKey(version, GroupTopicPartition(key.group(), new TopicPartition(key.topic(), key.partition())))
+      OffsetKey(version, GroupTopicPartition(key.group, new TopicPartition(key.topic, key.partition)))
     } else if (version == CURRENT_GROUP_KEY_SCHEMA_VERSION) {
       // version 2 refers to offset
-      val key = new generated.GroupMetadataKey(new ByteBufferAccessor(buffer), version)
-      GroupMetadataKey(version, key.group())
+      val key = new OffsetCommitKey(new ByteBufferAccessor(buffer), version)
+      GroupMetadataKey(version, key.group)
     } else {
       throw new IllegalStateException(s"Unknown group metadata message version: $version")
     }
@@ -1188,17 +1156,17 @@ object GroupMetadataManager {
       val version = buffer.getShort
       val value = new OffsetCommitValue(new ByteBufferAccessor(buffer), version)
       if (version == 0) {
-        OffsetAndMetadata(value.offset(), value.metadata(), value.timestamp())
+        OffsetAndMetadata(value.offset, value.metadata, value.commitTimestamp)
       } else if (version == 1) {
         if (value.expireTimestamp() == OffsetCommitRequest.DEFAULT_TIMESTAMP)
-          OffsetAndMetadata(value.offset(), value.metadata(), value.commitTimestamp())
+          OffsetAndMetadata(value.offset, value.metadata, value.commitTimestamp)
         else
-          OffsetAndMetadata(value.offset(), value.metadata(), value.commitTimestamp(), value.expireTimestamp())
+          OffsetAndMetadata(value.offset, value.metadata, value.commitTimestamp, value.expireTimestamp)
       } else if (version == 2) {
-        OffsetAndMetadata(value.offset(), value.metadata(), value.commitTimestamp())
+        OffsetAndMetadata(value.offset, value.metadata, value.commitTimestamp)
       } else if (version == 3) {
         val leaderEpochOpt: Optional[Integer] = if (value.leaderEpoch() < 0) Optional.empty() else Optional.of(value.leaderEpoch())
-        OffsetAndMetadata(value.offset(), leaderEpochOpt, value.metadata(), value.commitTimestamp())
+        OffsetAndMetadata(value.offset, leaderEpochOpt, value.metadata, value.commitTimestamp)
       } else {
         throw new IllegalStateException(s"Unknown offset message version: $version")
       }
@@ -1220,34 +1188,34 @@ object GroupMetadataManager {
       val version = buffer.getShort
       if (version >= 0 && version <= CURRENT_GROUP_METADATA_VALUE_SCHEMA_VERSION) {
         val value = new GroupMetadataValue(new ByteBufferAccessor(buffer), version)
-        val generationId = value.generation()
-        val protocolType = value.protocolType()
-        val protocol = value.protocol()
-        val leaderId = value.leader()
-        val memberMetadataArray = value.members().asScala
+        val generationId = value.generation
+        val protocolType = value.protocolType
+        val protocol = value.protocol
+        val leaderId = value.leader
+        val memberMetadataArray = value.members.asScala
         val initialState = if (memberMetadataArray.isEmpty) Empty else Stable
         val currentStateTimestamp: Option[Long] =
           if (version >= 2) {
-            val timestamp = value.currentStateTimestamp()
+            val timestamp = value.currentStateTimestamp
             if (timestamp == -1) None else Some(timestamp)
           } else None
 
         val members = memberMetadataArray.map { memberMetadataObj =>
-          val memberId = memberMetadataObj.memberId()
+          val memberId = memberMetadataObj.memberId
           val groupInstanceId =
             if (version >= 3)
-              Some(memberMetadataObj.groupInstanceId())
+              Some(memberMetadataObj.groupInstanceId)
             else
               None
-          val clientId = memberMetadataObj.clientId()
-          val clientHost = memberMetadataObj.clientHost()
-          val sessionTimeout = memberMetadataObj.sessionTimeout()
-          val rebalanceTimeout = if (version == 0) sessionTimeout else memberMetadataObj.rebalanceTimeout()
-          val subscription = memberMetadataObj.subscription()
+          val clientId = memberMetadataObj.clientId
+          val clientHost = memberMetadataObj.clientHost
+          val sessionTimeout = memberMetadataObj.sessionTimeout
+          val rebalanceTimeout = if (version == 0) sessionTimeout else memberMetadataObj.rebalanceTimeout
+          val subscription = memberMetadataObj.subscription
 
           val member = new MemberMetadata(memberId, groupId, groupInstanceId, clientId, clientHost, rebalanceTimeout, sessionTimeout,
             protocolType, List((protocol, subscription)))
-          member.assignment = memberMetadataObj.assignment()
+          member.assignment = memberMetadataObj.assignment
           member
         }
         GroupMetadata.loadGroup(groupId, initialState, generationId, protocolType, protocol, leaderId, currentStateTimestamp, members, time)
