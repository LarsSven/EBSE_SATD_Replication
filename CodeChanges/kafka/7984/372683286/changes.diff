diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
index 743552fccbe..fdf38e21ad9 100644
--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
@@ -1160,21 +1160,9 @@ public <K> KeyQueryMetadata queryMetadataForKey(final String storeName,
         return streamsMetadataState.getKeyQueryMetadataForKey(storeName, key, partitioner);
     }
 
+
     /**
-     * Get a facade wrapping the local {@link StateStore} instances with the provided {@code storeName} if the Store's
-     * type is accepted by the provided {@link QueryableStoreType#accepts(StateStore) queryableStoreType}.
-     * The returned object can be used to query the {@link StateStore} instances.
-     *
-     * Only permits queries on active replicas of the store (no standbys or restoring replicas).
-     * See {@link KafkaStreams#store(StoreQueryParams)}
-     * for the option to set {@code StoreQueryParams.withIncludeStaleStores()} and trade off consistency in favor of availability.
-     *
-     * @param storeName           name of the store to find
-     * @param queryableStoreType  accept only stores that are accepted by {@link QueryableStoreType#accepts(StateStore)}
-     * @param <T>                 return type
-     * @return A facade wrapping the local {@link StateStore} instances
-     * @throws InvalidStateStoreException if Kafka Streams is (re-)initializing or a store with {@code storeName} and
-     * {@code queryableStoreType} doesn't exist
+     * @deprecated since 2.5 release; use {@link #store(StoreQueryParams)}  instead
      */
     @Deprecated
     public <T> T store(final String storeName, final QueryableStoreType<T> queryableStoreType) {
@@ -1185,16 +1173,9 @@ public <T> T store(final String storeName, final QueryableStoreType<T> queryable
      * Get a facade wrapping the local {@link StateStore} instances with the provided {@link StoreQueryParams}.
      * StoreQueryParams need required parameters to be set, which are {@code storeName} and if
      * type is accepted by the provided {@link QueryableStoreType#accepts(StateStore) queryableStoreType}.
-     * The optional parameters to the StoreQueryParams include {@code partition} and {@code staleStoresEnabled}.
      * The returned object can be used to query the {@link StateStore} instances.
      *
-     * @param storeQueryParams    If StoreQueryParams.fromNameAndType(storeName, queryableStoreType).withPartition(int partition) is used, it allow queries on the specific partition irrespective if it is a standby
-     *                            or a restoring replicas in addition to active ones.
-     *                            If StoreQueryParams.fromNameAndType(storeName, queryableStoreType).withIncludeStaleStores() is used, it allow queries on standbys and restoring replicas in addition to active ones for all the local partitions on the instance.
-     *                            If StoreQueryParams.fromNameAndType(storeName, queryableStoreType).withIncludeStaleStores().withPartition(int partition), it allow queries on the specific partition irrespective if it is a standby
-     *                            or a restoring replicas in addition to active ones..
-     *                            By default, if just storeQueryParams is used, it returns all the local partitions for the store which are in running state.
-     * @param <T>                 return type
+     * @param storeQueryParams   to set the optional parameters to fetch type of stores user wants to fetch when a key is queried
      * @return A facade wrapping the local {@link StateStore} instances
      * @throws InvalidStateStoreException if Kafka Streams is (re-)initializing or a store with {@code storeName} and
      * {@code queryableStoreType} doesn't exist
diff --git a/streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java b/streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java
index 3c9b22b5bd4..474f9be07f6 100644
--- a/streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java
+++ b/streams/src/main/java/org/apache/kafka/streams/StoreQueryParams.java
@@ -21,8 +21,12 @@
 import java.util.Objects;
 
 /**
- * Represents all the query options that a user can provide to state what kind of stores it is expecting. The options would be whether a user would want to enable/disable stale stores* or whether it knows the list of partitions that it specifically wants to fetch. If this information is not provided the default behavior is to fetch the stores for all the partitions available on that instance* for that particular store name.
- * It contains a partition, which for a point queries can be populated from the  KeyQueryMetadata.
+ * Represents all the query options that a user can provide to state what kind of stores it is expecting.
+ * The options would be whether a user would want to enable/disable stale stores
+ * or whether it knows the list of partitions that it specifically wants to fetch.
+ * If this information is not provided the default behavior is to fetch the stores for all the partitions
+ * available on that instance for that particular store name.
+ * It contains a partition, which for a point queries can be populated from the {@link KeyQueryMetadata}.
  */
 public class StoreQueryParams<T> {
 
@@ -36,50 +40,35 @@ private StoreQueryParams(final String storeName, final QueryableStoreType<T>  qu
         this.queryableStoreType = queryableStoreType;
     }
 
-    public static final <T> StoreQueryParams<T> fromNameAndType(final String storeName, final QueryableStoreType<T>  queryableStoreType) {
+    public static <T> StoreQueryParams<T> fromNameAndType(final String storeName,
+                                                          final QueryableStoreType<T>  queryableStoreType) {
         return new<T> StoreQueryParams<T>(storeName, queryableStoreType);
     }
 
     /**
-     * Get the partition to be used to fetch list of Queryable store from QueryableStoreProvider.
-     * If the function returns null, it would mean that no specific partition has been requested so all the local partitions
-     * for the store will be returned.
-     *
-     * @return Integer partition
-     */
-    public Integer partition() {
-        return partition;
-    }
-
-    /**
-     * Get the flag staleStores. If true, include standbys and recovering stores along with running stores.
-     *
-     * @return boolean staleStores
-     */
-    public boolean staleStoresEnabled() {
-        return staleStores;
-    }
-
-    /**
-     * Get the {@link StoreQueryParams} with stale(standby, restoring) stores added via fetching the stores.
+     * Set a specific partition that should be queried exclusively.
      *
      * @param partition   The specific integer partition to be fetched from the stores list by using {@link StoreQueryParams}.
      *
      * @return String storeName
      */
     public StoreQueryParams<T> withPartition(final Integer partition) {
-        this.partition = partition;
-        return this;
+        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());
+        storeQueryParams.partition = partition;
+        storeQueryParams.staleStores = this.staleStores;
+        return storeQueryParams;
     }
 
     /**
-     * Get the {@link StoreQueryParams} with stale(standby, restoring) stores added via fetching the stores.
+     * Enable querying of stale state stores, i.e., allow to query active tasks during restore as well as standby tasks.
      *
      * @return String storeName
      */
     public StoreQueryParams<T> enableStaleStores() {
-        this.staleStores = true;
-        return this;
+        final StoreQueryParams<T> storeQueryParams = StoreQueryParams.fromNameAndType(this.storeName(), this.queryableStoreType());
+        storeQueryParams.partition = this.partition;
+        storeQueryParams.staleStores = true;
+        return storeQueryParams;
     }
 
     /**
@@ -87,7 +76,7 @@ public StoreQueryParams<T> enableStaleStores() {
      *
      * @return String storeName
      */
-    public String getStoreName() {
+    public String storeName() {
         return storeName;
     }
 
@@ -96,10 +85,30 @@ public String getStoreName() {
      *
      * @return QueryableStoreType queryableStoreType
      */
-    public QueryableStoreType<T> getQueryableStoreType() {
+    public QueryableStoreType<T> queryableStoreType() {
         return queryableStoreType;
     }
 
+    /**
+     * Get the partition to be used to fetch list of stores.
+     * If the method returns {@code null}, it would mean that no specific partition has been requested,
+     * so all the local partitions for the store will be returned.
+     *
+     * @return Integer partition
+     */
+    public Integer partition() {
+        return partition;
+    }
+
+    /**
+     * Get the flag staleStores. If {@code true}, include standbys and recovering stores along with running stores.
+     *
+     * @return boolean staleStores
+     */
+    public boolean staleStoresEnabled() {
+        return staleStores;
+    }
+
     @Override
     public boolean equals(final Object obj) {
         if (!(obj instanceof StoreQueryParams)) {
diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/QueryableStoreProvider.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/QueryableStoreProvider.java
index fb324f9cf56..4458b265f12 100644
--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/QueryableStoreProvider.java
+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/QueryableStoreProvider.java
@@ -50,8 +50,8 @@ public QueryableStoreProvider(final List<StreamThreadStateStoreProvider> storePr
      * @return A composite object that wraps the store instances.
      */
     public <T> T getStore(final StoreQueryParams<T> storeQueryParams) {
-        final String storeName = storeQueryParams.getStoreName();
-        final QueryableStoreType<T> queryableStoreType = storeQueryParams.getQueryableStoreType();
+        final String storeName = storeQueryParams.storeName();
+        final QueryableStoreType<T> queryableStoreType = storeQueryParams.queryableStoreType();
         final List<T> globalStore = globalStoreProvider.stores(storeName, queryableStoreType);
         if (!globalStore.isEmpty()) {
             return queryableStoreType.create(globalStoreProvider, storeName);
diff --git a/streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java b/streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
index faecfceaa77..eeb852d4a2b 100644
--- a/streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
+++ b/streams/src/main/java/org/apache/kafka/streams/state/internals/StreamThreadStateStoreProvider.java
@@ -40,15 +40,16 @@ public class StreamThreadStateStoreProvider {
     private final StreamThread streamThread;
     private final InternalTopologyBuilder internalTopologyBuilder;
 
-    public StreamThreadStateStoreProvider(final StreamThread streamThread, final InternalTopologyBuilder internalTopologyBuilder) {
+    public StreamThreadStateStoreProvider(final StreamThread streamThread,
+                                          final InternalTopologyBuilder internalTopologyBuilder) {
         this.streamThread = streamThread;
         this.internalTopologyBuilder = internalTopologyBuilder;
     }
 
     @SuppressWarnings("unchecked")
     public <T> List<T> stores(final StoreQueryParams storeQueryParams) {
-        final String storeName = storeQueryParams.getStoreName();
-        final QueryableStoreType<T> queryableStoreType = storeQueryParams.getQueryableStoreType();
+        final String storeName = storeQueryParams.storeName();
+        final QueryableStoreType<T> queryableStoreType = storeQueryParams.queryableStoreType();
         final TaskId keyTaskId = createKeyTaskId(storeName, storeQueryParams.partition());
         if (streamThread.state() == StreamThread.State.DEAD) {
             return Collections.emptyList();
diff --git a/streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java b/streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java
index 6cfe0328218..c03998f543c 100644
--- a/streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java
+++ b/streams/src/test/java/org/apache/kafka/streams/integration/StoreQueryIntegrationTest.java
@@ -18,7 +18,6 @@
 
 import org.apache.kafka.clients.consumer.ConsumerConfig;
 import org.apache.kafka.clients.producer.ProducerConfig;
-import org.apache.kafka.common.TopicPartition;
 import org.apache.kafka.common.serialization.IntegerSerializer;
 import org.apache.kafka.common.serialization.Serdes;
 import org.apache.kafka.common.utils.Bytes;
@@ -34,7 +33,6 @@
 import org.apache.kafka.streams.integration.utils.IntegrationTestUtils;
 import org.apache.kafka.streams.kstream.Consumed;
 import org.apache.kafka.streams.kstream.Materialized;
-import org.apache.kafka.streams.processor.StateRestoreListener;
 import org.apache.kafka.streams.state.KeyValueStore;
 import org.apache.kafka.streams.state.QueryableStoreType;
 import org.apache.kafka.streams.state.QueryableStoreTypes;
@@ -55,7 +53,6 @@
 import java.util.Properties;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicLong;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
@@ -100,8 +97,7 @@ public void shouldQueryAllActivePartitionStoresByDefault() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final StreamsBuilder builder = new StreamsBuilder();
-        builder
-                .table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
+        builder.table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
                         Materialized.<Integer, Integer, KeyValueStore<Bytes, byte[]>>as(TABLE_NAME)
                                 .withCachingDisabled())
                 .toStream()
@@ -145,8 +141,7 @@ public void shouldQuerySpecificActivePartitionStores() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final StreamsBuilder builder = new StreamsBuilder();
-        builder
-                .table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
+        builder.table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
                         Materialized.<Integer, Integer, KeyValueStore<Bytes, byte[]>>as(TABLE_NAME)
                                 .withCachingDisabled())
                 .toStream()
@@ -226,8 +221,7 @@ public void shouldQueryAllStalePartitionStores() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final StreamsBuilder builder = new StreamsBuilder();
-        builder
-                .table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
+        builder.table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
                         Materialized.<Integer, Integer, KeyValueStore<Bytes, byte[]>>as(TABLE_NAME)
                                 .withCachingDisabled())
                 .toStream()
@@ -263,8 +257,7 @@ public void shouldQuerySpecificStalePartitionStores() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final StreamsBuilder builder = new StreamsBuilder();
-        builder
-                .table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
+        builder.table(INPUT_TOPIC_NAME, Consumed.with(Serdes.Integer(), Serdes.Integer()),
                         Materialized.<Integer, Integer, KeyValueStore<Bytes, byte[]>>as(TABLE_NAME)
                                 .withCachingDisabled())
                 .toStream()
diff --git a/streams/src/test/java/org/apache/kafka/test/StateStoreProviderStub.java b/streams/src/test/java/org/apache/kafka/test/StateStoreProviderStub.java
index ad7b4232198..28835d21c18 100644
--- a/streams/src/test/java/org/apache/kafka/test/StateStoreProviderStub.java
+++ b/streams/src/test/java/org/apache/kafka/test/StateStoreProviderStub.java
@@ -40,8 +40,8 @@ public StateStoreProviderStub(final boolean throwException) {
     @SuppressWarnings("unchecked")
     @Override
     public <T> List<T> stores(final StoreQueryParams storeQueryParams) {
-        final String storeName = storeQueryParams.getStoreName();
-        final QueryableStoreType<T> queryableStoreType = storeQueryParams.getQueryableStoreType();
+        final String storeName = storeQueryParams.storeName();
+        final QueryableStoreType<T> queryableStoreType = storeQueryParams.queryableStoreType();
         if (throwException) {
             throw new InvalidStateStoreException("store is unavailable");
         }
