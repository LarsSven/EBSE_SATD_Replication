diff --git a/clients/src/main/java/org/apache/kafka/common/config/ConfigData.java b/clients/src/main/java/org/apache/kafka/common/config/ConfigData.java
index 4e2599adee5..c55aa123b10 100644
--- a/clients/src/main/java/org/apache/kafka/common/config/ConfigData.java
+++ b/clients/src/main/java/org/apache/kafka/common/config/ConfigData.java
@@ -24,7 +24,7 @@
 public class ConfigData {
 
     private final Map<String, String> data;
-    private final long ttl;
+    private final Long ttl;
 
     /**
      * Creates a new ConfigData with the given data and TTL (in milliseconds).
@@ -32,7 +32,7 @@ public class ConfigData {
      * @param data a Map of key-value pairs
      * @param ttl the time-to-live of the data in milliseconds
      */
-    public ConfigData(Map<String, String> data, long ttl) {
+    public ConfigData(Map<String, String> data, Long ttl) {
         this.data = data;
         this.ttl = ttl;
     }
@@ -43,7 +43,7 @@ public ConfigData(Map<String, String> data, long ttl) {
      * @param data a Map of key-value pairs
      */
     public ConfigData(Map<String, String> data) {
-        this(data, Long.MAX_VALUE);
+        this(data, null);
     }
 
     /**
@@ -60,7 +60,7 @@ public Map<String, String> data() {
      *
      * @return ttl the time-to-live (in milliseconds) of the data.
      */
-    public long ttl() {
+    public Long ttl() {
         return ttl;
     }
 }
diff --git a/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java b/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
index 95fd406bdcb..7c3c516b073 100644
--- a/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
+++ b/clients/src/main/java/org/apache/kafka/common/config/ConfigTransformer.java
@@ -97,8 +97,8 @@ public ConfigTransformerResult transform(Map<String, String> configs) {
                     Set<String> keys = new HashSet<>(pathWithKeys.getValue());
                     ConfigData configData = provider.get(path, keys);
                     Map<String, String> data = configData.data();
-                    long ttl = configData.ttl();
-                    if (ttl >= 0 && ttl < Long.MAX_VALUE) {
+                    Long ttl = configData.ttl();
+                    if (ttl != null && ttl >= 0) {
                         ttls.put(path, ttl);
                     }
                     Map<String, Map<String, String>> keyValuesByPath =
diff --git a/clients/src/test/java/org/apache/kafka/common/config/FileConfigProviderTest.java b/clients/src/test/java/org/apache/kafka/common/config/FileConfigProviderTest.java
index 93b77021467..9157e380456 100644
--- a/clients/src/test/java/org/apache/kafka/common/config/FileConfigProviderTest.java
+++ b/clients/src/test/java/org/apache/kafka/common/config/FileConfigProviderTest.java
@@ -45,7 +45,7 @@ public void testGetAllKeysAtPath() throws Exception {
         result.put("testKey", "testResult");
         result.put("testKey2", "testResult2");
         assertEquals(result, configData.data());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     @Test
@@ -54,35 +54,35 @@ public void testGetOneKeyAtPath() throws Exception {
         Map<String, String> result = new HashMap<>();
         result.put("testKey", "testResult");
         assertEquals(result, configData.data());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     @Test
     public void testEmptyPath() throws Exception {
         ConfigData configData = configProvider.get("", Collections.singleton("testKey"));
         assertTrue(configData.data().isEmpty());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     @Test
     public void testEmptyPathWithKey() throws Exception {
         ConfigData configData = configProvider.get("");
         assertTrue(configData.data().isEmpty());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     @Test
     public void testNullPath() throws Exception {
         ConfigData configData = configProvider.get(null);
         assertTrue(configData.data().isEmpty());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     @Test
     public void testNullPathWithKey() throws Exception {
         ConfigData configData = configProvider.get(null, Collections.singleton("testKey"));
         assertTrue(configData.data().isEmpty());
-        assertEquals(Long.MAX_VALUE, configData.ttl());
+        assertEquals(null, configData.ttl());
     }
 
     public static class TestFileConfigProvider extends FileConfigProvider {
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java
index 1a4bb233812..5c7cc1429aa 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Herder.java
@@ -152,7 +152,7 @@ public interface Herder {
      * Get the configuration reload action.
      * @param connName name of the connector
      */
-    ConfigReloadAction getConnectorConfigReloadAction(final String connName);
+    ConfigReloadAction connectorConfigReloadAction(final String connName);
 
     /**
      * Restart the connector.
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java
index 34d83f0e9c8..4f491b28fe7 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/Worker.java
@@ -486,10 +486,12 @@ private WorkerTask buildWorkerTask(ClusterConfigState configState,
             OffsetStorageWriter offsetWriter = new OffsetStorageWriter(offsetBackingStore, id.connector(),
                     internalKeyConverter, internalValueConverter);
             KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(producerProps);
+            // Note we pass the configState as it performs dynamic transformations under the covers
             return new WorkerSourceTask(id, (SourceTask) task, statusListener, initialState, keyConverter, valueConverter,
                     headerConverter, transformationChain, producer, offsetReader, offsetWriter, config, configState, metrics, loader, time);
         } else if (task instanceof SinkTask) {
             TransformationChain<SinkRecord> transformationChain = new TransformationChain<>(connConfig.<SinkRecord>transformations());
+            // Note we pass the configState as it performs dynamic transformations under the covers
             return new WorkerSinkTask(id, (SinkTask) task, statusListener, initialState, config, configState, metrics, keyConverter,
                     valueConverter, headerConverter, transformationChain, loader, time);
         } else {
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java
index cbce863f4a9..d91411cb8e8 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/WorkerConfigTransformer.java
@@ -52,7 +52,7 @@ private void scheduleReload(String connectorName, Map<String, Long> ttls) {
 
     private void scheduleReload(String connectorName, String path, long ttl) {
         Herder herder = worker.herder();
-        if (herder.getConnectorConfigReloadAction(connectorName) == Herder.ConfigReloadAction.RESTART) {
+        if (herder.connectorConfigReloadAction(connectorName) == Herder.ConfigReloadAction.RESTART) {
             Map<String, HerderRequest> connectorRequests = requests.get(connectorName);
             if (connectorRequests == null) {
                 connectorRequests = new ConcurrentHashMap<>();
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java
index c0ae96743b9..5efb78a93e4 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/distributed/DistributedHerder.java
@@ -643,7 +643,7 @@ else if (!configState.contains(connName))
     }
 
     @Override
-    public ConfigReloadAction getConnectorConfigReloadAction(final String connName) {
+    public ConfigReloadAction connectorConfigReloadAction(final String connName) {
         return ConfigReloadAction.valueOf(
                 configState.connectorConfig(connName).get(ConnectorConfig.CONFIG_RELOAD_ACTION_CONFIG)
                         .toUpperCase(Locale.ROOT));
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/Plugins.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/Plugins.java
index 0f27930fe78..bc7824b79c8 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/Plugins.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/isolation/Plugins.java
@@ -336,8 +336,8 @@ public ConfigProvider newConfigProvider(AbstractConfig config, String providerPr
 
         // Configure the ConfigProvider
         String configPrefix = providerPrefix + ".param.";
-        Map<String, Object> converterConfig = config.originalsWithPrefix(configPrefix);
-        plugin.configure(converterConfig);
+        Map<String, Object> configProviderConfig = config.originalsWithPrefix(configPrefix);
+        plugin.configure(configProviderConfig);
         return plugin;
     }
 
diff --git a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java
index dd4cae3c211..20c6a24d384 100644
--- a/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java
+++ b/connect/runtime/src/main/java/org/apache/kafka/connect/runtime/standalone/StandaloneHerder.java
@@ -94,6 +94,12 @@ public synchronized void start() {
     public synchronized void stop() {
         log.info("Herder stopping");
         requestExecutorService.shutdown();
+        try {
+            if (!requestExecutorService.awaitTermination(30, TimeUnit.SECONDS))
+                requestExecutorService.shutdownNow();
+        } catch (InterruptedException e) {
+            // ignore
+        }
 
         // There's no coordination/hand-off to do here since this is all standalone. Instead, we
         // should just clean up the stuff we normally would, i.e. cleanly checkpoint and shutdown all
@@ -253,7 +259,7 @@ public synchronized void restartTask(ConnectorTaskId taskId, Callback<Void> cb)
     }
 
     @Override
-    public ConfigReloadAction getConnectorConfigReloadAction(final String connName) {
+    public ConfigReloadAction connectorConfigReloadAction(final String connName) {
         return ConfigReloadAction.valueOf(
                 configState.connectorConfig(connName).get(ConnectorConfig.CONFIG_RELOAD_ACTION_CONFIG)
                         .toUpperCase(Locale.ROOT));
diff --git a/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTransformerTest.java b/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTransformerTest.java
index 4656e8d36dd..89bba09b0da 100644
--- a/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTransformerTest.java
+++ b/connect/runtime/src/test/java/org/apache/kafka/connect/runtime/WorkerConfigTransformerTest.java
@@ -68,7 +68,7 @@ public void testReplaceVariable() throws Exception {
     @Test
     public void testReplaceVariableWithTTL() throws Exception {
         EasyMock.expect(worker.herder()).andReturn(herder);
-        EasyMock.expect(herder.getConnectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.NONE);
+        EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.NONE);
 
         replayAll();
 
@@ -79,7 +79,7 @@ public void testReplaceVariableWithTTL() throws Exception {
     @Test
     public void testReplaceVariableWithTTLAndScheduleRestart() throws Exception {
         EasyMock.expect(worker.herder()).andReturn(herder);
-        EasyMock.expect(herder.getConnectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
+        EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
         EasyMock.expect(herder.restartConnector(1L, MY_CONNECTOR, null)).andReturn(requestId);
 
         replayAll();
@@ -91,11 +91,11 @@ public void testReplaceVariableWithTTLAndScheduleRestart() throws Exception {
     @Test
     public void testReplaceVariableWithTTLFirstCancelThenScheduleRestart() throws Exception {
         EasyMock.expect(worker.herder()).andReturn(herder);
-        EasyMock.expect(herder.getConnectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
+        EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
         EasyMock.expect(herder.restartConnector(1L, MY_CONNECTOR, null)).andReturn(requestId);
 
         EasyMock.expect(worker.herder()).andReturn(herder);
-        EasyMock.expect(herder.getConnectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
+        EasyMock.expect(herder.connectorConfigReloadAction(MY_CONNECTOR)).andReturn(Herder.ConfigReloadAction.RESTART);
         EasyMock.expectLastCall();
         requestId.cancel();
         EasyMock.expectLastCall();
