diff --git a/core/src/main/scala/kafka/server/KafkaRequestHandler.scala b/core/src/main/scala/kafka/server/KafkaRequestHandler.scala
index ec52ddb0224..f6b971b06cb 100755
--- a/core/src/main/scala/kafka/server/KafkaRequestHandler.scala
+++ b/core/src/main/scala/kafka/server/KafkaRequestHandler.scala
@@ -23,7 +23,7 @@ import kafka.metrics.KafkaMetricsGroup
 import java.util.concurrent.{CountDownLatch, TimeUnit}
 import java.util.concurrent.atomic.AtomicInteger
 
-import com.yammer.metrics.core.{Meter, Metric, MetricsRegistry}
+import com.yammer.metrics.core.{Meter}
 import org.apache.kafka.common.internals.FatalExitError
 import org.apache.kafka.common.utils.{KafkaThread, Time}
 
@@ -150,7 +150,6 @@ class BrokerTopicMetrics(name: Option[String]) extends KafkaMetricsGroup {
 
   def messagesInRate = metricTypeMap.getAndMaybePut(
     BrokerTopicStats.MessagesInPerSec, newMeter(BrokerTopicStats.MessagesInPerSec, "messages", TimeUnit.SECONDS, tags))
-
   def bytesInRate = metricTypeMap.getAndMaybePut(
     BrokerTopicStats.BytesInPerSec, newMeter(BrokerTopicStats.BytesInPerSec, "bytes", TimeUnit.SECONDS, tags))
   def bytesOutRate = metricTypeMap.getAndMaybePut(
@@ -217,13 +216,6 @@ class BrokerTopicStats {
   private var stats = new Pool[String, BrokerTopicMetrics](Some(valueFactory))
   var allTopicsStats = new BrokerTopicMetrics(None)
 
-  // only visible for testing
-  private[kafka] def updateMetricsRegistry(metricsRegistry: MetricsRegistry) = {
-    // reassign stats using new valueFactory with new metricsRegistry
-    stats = new Pool[String, BrokerTopicMetrics](Some((k: String) => new BrokerTopicMetrics(Some(k))))
-    allTopicsStats = new BrokerTopicMetrics(None)
-  }
-
   def topicStats(topic: String): BrokerTopicMetrics =
     stats.getAndMaybePut(topic)
 
@@ -263,7 +255,6 @@ class BrokerTopicStats {
     }
   }
 
-
   def close(): Unit = {
     allTopicsStats.close()
     stats.values.foreach(_.close())
diff --git a/core/src/main/scala/kafka/server/ReplicaManager.scala b/core/src/main/scala/kafka/server/ReplicaManager.scala
index 322a6493da3..2fa442d6a76 100644
--- a/core/src/main/scala/kafka/server/ReplicaManager.scala
+++ b/core/src/main/scala/kafka/server/ReplicaManager.scala
@@ -1133,8 +1133,8 @@ class ReplicaManager(val config: KafkaConfig,
         // in all of the partitions that the current broker is now a follower of
         // add all the topics in a list as candidate to remove metrics
         // and finally remove all the metrics of topics that the current broker IS NO LONGER a leader of
-        val topicNotToInclude = leaderPartitionsIterator.map(_.topic).toSet
-        partitionsBecomeFollower.map(_.topic).diff(topicNotToInclude).foreach(brokerTopicStats.removeOldLeaderMetrics)
+        val leaderTopicSet = leaderPartitionsIterator.map(_.topic).toSet
+        partitionsBecomeFollower.map(_.topic).diff(leaderTopicSet).foreach(brokerTopicStats.removeOldLeaderMetrics)
 
         leaderAndIsrRequest.partitionStates.asScala.keys.foreach { topicPartition =>
           /*
diff --git a/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala b/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala
index fb85e85423b..27e5dcd394a 100644
--- a/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala
+++ b/core/src/test/scala/unit/kafka/metrics/MetricsTest.scala
@@ -18,7 +18,6 @@
 package kafka.metrics
 
 import java.util.Properties
-
 import javax.management.ObjectName
 import com.yammer.metrics.Metrics
 import com.yammer.metrics.core.{Meter, MetricPredicate}
diff --git a/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala b/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala
index e96e739c95c..b265d2ec59a 100644
--- a/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala
+++ b/core/src/test/scala/unit/kafka/server/ReplicaManagerTest.scala
@@ -692,7 +692,7 @@ class ReplicaManagerTest {
       val tp0 = new TopicPartition(topic, 0)
       val tp1 = new TopicPartition(topic, 1)
       val partition0Replicas = Seq[Integer](0, 1).asJava
-      val partition1Replicas = Seq[Integer](0, 1).asJava
+      val partition1Replicas = Seq[Integer](1, 0).asJava
 
       val leaderAndIsrRequest1 = new LeaderAndIsrRequest.Builder(ApiKeys.LEADER_AND_ISR.latestVersion,
         controllerId, 0, brokerEpoch,
@@ -707,7 +707,6 @@ class ReplicaManagerTest {
       rm0.becomeLeaderOrFollower(correlationId, leaderAndIsrRequest1, (_, _) => ())
       rm1.becomeLeaderOrFollower(correlationId, leaderAndIsrRequest1, (_, _) => ())
 
-
       // make broker 0 the leader of partition 1 so broker 1 loses its leadership position
       val leaderAndIsrRequest2 = new LeaderAndIsrRequest.Builder(ApiKeys.LEADER_AND_ISR.latestVersion, controllerId,
         controllerEpoch, brokerEpoch,
