diff --git a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
index 548e5941152..4bbd431b0a1 100644
--- a/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
+++ b/streams/src/main/java/org/apache/kafka/streams/KafkaStreams.java
@@ -389,10 +389,21 @@ public void run() {
      * in debugging scenarios.
      * @return A string representation of the Kafka Streams instance.
      */
+    @Override
     public String toString() {
-        final StringBuilder sb = new StringBuilder("KafkaStreams processID:" + processId + "\n");
+        return toString("");
+    }
+
+    /**
+     * Produces a string representation contain useful information about Kafka Streams
+     * such as thread IDs, task IDs and a representation of the topology starting with the given indent. This is useful
+     * in debugging scenarios.
+     * @return A string representation of the Kafka Streams instance.
+     */
+    public String toString(String indent) {
+        final StringBuilder sb = new StringBuilder(indent + "KafkaStreams processID:" + processId + "\n");
         for (final StreamThread thread : threads) {
-            sb.append("\t").append(thread.toString());
+            sb.append(thread.toString(indent + "\t"));
         }
         sb.append("\n");
 
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java
index 622426d8bd4..2df3f221d9b 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/AbstractTask.java
@@ -161,25 +161,33 @@ public StateStore getStore(final String name) {
      * This is useful in debugging scenarios.
      * @return A string representation of the StreamTask instance.
      */
+    @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("StreamsTask taskId:" + this.id() + "\n");
+        return toString("");
+    }
+
+    /**
+     * Produces a string representation contain useful information about a StreamTask starting with the given indent.
+     * This is useful in debugging scenarios.
+     * @return A string representation of the StreamTask instance.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(indent + "StreamsTask taskId: " + this.id() + "\n");
 
         // print topology
         if (topology != null) {
-            sb.append("\t\t\t" + topology.toString());
+            sb.append(indent).append(topology.toString(indent + "\t"));
         }
 
         // print assigned partitions
         if (partitions != null && !partitions.isEmpty()) {
-            sb.append("\t\t\tPartitions [");
+            sb.append(indent).append("Partitions [");
             for (TopicPartition topicPartition : partitions) {
-                sb.append(topicPartition.toString() + ",");
+                sb.append(topicPartition.toString()).append(", ");
             }
-            sb.setLength(sb.length() - 1);
-            sb.append("]");
+            sb.setLength(sb.length() - 2);
+            sb.append("]\n");
         }
-
-        sb.append("\n");
         return sb.toString();
     }
 
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java
index 49cd472f963..05c7c5e7cf0 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorNode.java
@@ -86,18 +86,23 @@ public void process(final K key, final V value) {
      * @return a string representation of this node, useful for debugging.
      */
     public String toString() {
-        StringBuilder sb = new StringBuilder(name);
-        sb.append(":");
+        return toString("");
+    }
+
+    /**
+     * @return a string representation of this node starting with the given indent, useful for debugging.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(indent + name + ":\n");
         if (stateStores != null && !stateStores.isEmpty()) {
-            sb.append("\n\t\t\t\t\tstates:\t\t[");
+            sb.append(indent).append("\tstates:\t\t[");
             for (String store : stateStores) {
                 sb.append(store);
                 sb.append(", ");
             }
             sb.setLength(sb.length() - 2);  // remove the last comma
-            sb.append("]");
+            sb.append("]\n");
         }
-        sb.append("\n");
         return sb.toString();
     }
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java
index 27ccb49aad7..32bd46d4855 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/ProcessorTopology.java
@@ -86,12 +86,12 @@ public Map<StateStore, ProcessorNode> storeToProcessorNodeMap() {
         return storeToProcessorNodeMap;
     }
 
-    private String childrenToString(List<ProcessorNode<?, ?>> children) {
+    private String childrenToString(String indent, List<ProcessorNode<?, ?>> children) {
         if (children == null || children.isEmpty()) {
             return "";
         }
 
-        StringBuilder sb = new StringBuilder("\t\t\t\t\tchildren:\t[");
+        StringBuilder sb = new StringBuilder(indent + "\tchildren:\t[");
         for (ProcessorNode child : children) {
             sb.append(child.name());
             sb.append(", ");
@@ -101,27 +101,34 @@ private String childrenToString(List<ProcessorNode<?, ?>> children) {
 
         // recursively print children
         for (ProcessorNode child : children) {
-            sb.append("\t\t\t\t");
-            sb.append(child.toString());
-            sb.append(childrenToString(child.children()));
+            sb.append(child.toString(indent)).append(childrenToString(indent, child.children()));
         }
         return sb.toString();
     }
 
     /**
-     * Produces a string representation contain useful information this topology.
+     * Produces a string representation contain useful information this topology starting with the given indent.
      * This is useful in debugging scenarios.
      * @return A string representation of this instance.
      */
+    @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("ProcessorTopology:\n");
+        return toString("");
+    }
+
+    /**
+     * Produces a string representation contain useful information this topology.
+     * This is useful in debugging scenarios.
+     * @return A string representation of this instance.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(indent + "ProcessorTopology:\n");
 
         // start from sources
         for (SourceNode source : sourceByTopics.values()) {
-            sb.append("\t\t\t\t");
-            sb.append(source.toString());
-            sb.append(childrenToString(source.children()));
+            sb.append(source.toString(indent + "\t")).append(childrenToString(indent + "\t", source.children()));
         }
         return sb.toString();
     }
+
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java
index 95d12b101dd..2a4b4d68a01 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/SinkNode.java
@@ -99,11 +99,20 @@ public void close() {
     /**
      * @return a string representation of this node, useful for debugging.
      */
+    @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(super.toString());
-        sb.append("\t\t\t\t\ttopic:\t\t");
+        return toString("");
+    }
+
+    /**
+     * @return a string representation of this node starting with the given indent, useful for debugging.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(super.toString(indent));
+        sb.append(indent).append("\ttopic:\t\t");
         sb.append(topic);
         sb.append("\n");
         return sb.toString();
     }
+
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java
index 3befd629d34..f8a9618aca9 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/SourceNode.java
@@ -74,9 +74,17 @@ public void close() {
     /**
      * @return a string representation of this node, useful for debugging.
      */
+    @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder(super.toString());
-        sb.append("\t\t\t\t\ttopics:\t\t[");
+        return toString("");
+    }
+
+    /**
+     * @return a string representation of this node starting with the given indent, useful for debugging.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(super.toString(indent));
+        sb.append(indent).append("\ttopics:\t\t[");
         for (String topic : topics) {
             sb.append(topic);
             sb.append(", ");
@@ -85,4 +93,5 @@ public String toString() {
         sb.append("]\n");
         return sb.toString();
     }
+
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java
index 626de7c8378..a2ae83f3921 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/StreamThread.java
@@ -1031,25 +1031,34 @@ public void apply(final AbstractTask task) {
      */
     @Override
     public String toString() {
-        StringBuilder sb = new StringBuilder("StreamsThread appId:" + this.applicationId + "\n");
-        sb.append("\tStreamsThread clientId:" + clientId + "\n");
-        sb.append("\tStreamsThread threadId:" + this.getName() + "\n");
+        return toString("");
+    }
+
+    /**
+     * Produces a string representation contain useful information about a StreamThread, starting with the given indent.
+     * This is useful in debugging scenarios.
+     * @return A string representation of the StreamThread instance.
+     */
+    public String toString(String indent) {
+        StringBuilder sb = new StringBuilder(indent + "StreamsThread appId: " + this.applicationId + "\n");
+        sb.append(indent).append("\tStreamsThread clientId: ").append(clientId).append("\n");
+        sb.append(indent).append("\tStreamsThread threadId: ").append(this.getName()).append("\n");
 
         // iterate and print active tasks
         if (activeTasks != null) {
-            sb.append("\tActive tasks:\n");
+            sb.append(indent).append("\tActive tasks:\n");
             for (TaskId tId : activeTasks.keySet()) {
                 StreamTask task = activeTasks.get(tId);
-                sb.append("\t\t" + task.toString());
+                sb.append(indent).append(task.toString(indent + "\t\t"));
             }
         }
 
         // iterate and print standby tasks
         if (standbyTasks != null) {
-            sb.append("\tStandby tasks:\n");
+            sb.append(indent).append("\tStandby tasks:\n");
             for (TaskId tId : standbyTasks.keySet()) {
                 StandbyTask task = standbyTasks.get(tId);
-                sb.append("\t\t" + task.toString());
+                sb.append(indent).append(task.toString(indent + "\t\t"));
             }
             sb.append("\n");
         }
