diff --git a/INSTALL.md b/INSTALL.md
index 6e924c49245..f3d5873b6b6 100644
--- a/INSTALL.md
+++ b/INSTALL.md
@@ -46,22 +46,23 @@ with the following command.
 
 If the command fails, its OK to continue with setup and resolve the issue later.
 
-Run the command below to create configuration for Accumulo in `conf/`:
+Accumulo is configured by the files +accumulo-site.xml+ and +accumulo-env.sh+ in the `conf/`
+directory. You can either edit these files for your environment or run the command below which will
+overwrite them with files configured for your environment.
 
     accumulo-util create-config
 
 The script will ask you questions about your set up. Below are some suggestions:
 
-* When the script asks about memory-map type, choose Native if the build native script 
+* When the script asks about memory-map type, choose Native if the build native script
   was successful. Otherwise, choose Java.
 * The script will prompt for memory usage. Please note that the footprints are
   only for the Accumulo system processes, so ample space should be left for other
   processes like Hadoop, Zookeeper, and the Accumulo client code.  If Accumulo
   worker processes are swapped out and unresponsive, they may be killed.
 
-After the `accumulo-util create-config` command is run, the `conf/` directory will contain
-`accumulo-env.sh`, `accumulo-site.xml`, and few a additional files. These files require
-a few edits before starting Accumulo.
+While `accumulo-util create-config` creates  `accumulo-env.sh` and `accumulo-site.xml` files
+targeted for your environment, these files still require a few more edits before starting Accumulo.
 
 ### Secret
 
@@ -83,7 +84,7 @@ must be provided.
    `accumulo-site.xml`.  If your namenode is running at 192.168.1.9:9000
    and you want to store data in `/accumulo` in HDFS, then set
   `instance.volumes` to `hdfs://192.168.1.9:9000/accumulo`.
- * **Location of Zoookeeper and Hadoop jars** :  Setting `ZOOKEEPER_HOME` and
+ * **Location of Zookeeper and Hadoop jars** :  Setting `ZOOKEEPER_HOME` and
    `HADOOP_PREFIX` in `accumulo-env.sh` will help Accumulo find these jars
    when using the default setting for `general.classpaths` in accumulo-site.xml.
 
@@ -143,7 +144,7 @@ changed and the next section should be skipped.
 #### Multi-node configuration
 
 If you are running an Accumulo cluster on multiple nodes, the following files
-in `conf/` should be configured with a newline seperated list of node names:
+in `conf/` should be configured with a newline separated list of node names:
 
  * `masters` : Accumulo primary coordinating process. Must specify one node. Can
                specify a few for fault tolerance.
diff --git a/assemble/bin/accumulo b/assemble/bin/accumulo
index f530e3ca7ad..275075bbd09 100755
--- a/assemble/bin/accumulo
+++ b/assemble/bin/accumulo
@@ -53,7 +53,7 @@ function main() {
   fi
   if [[ ! -f $conf/accumulo-env.sh || ! -f $conf/accumulo-site.xml ]]; then
     echo "The configuration files 'accumulo-env.sh' & 'accumulo-site.xml' must exist in $conf"
-    echo "Copy them from $conf/examples and edit them for your environment."
+    echo "Run 'accumulo-util create-config' to create them and edit them for your environment."
     exit 1
   fi
   source "$conf/accumulo-env.sh"
@@ -79,14 +79,6 @@ function main() {
     export JAVA_OPTS=("${JAVA_OPTS[@]}" "-Djava.security.krb5.conf=${conf}/krb5.conf")
   fi
 
-  if [[ ! "$ACCUMULO_CMD" =~ ^(gc|master|monitor|tserver|tracer)$ ]]; then
-    if [[ -f ${conf}/log4j.properties ]]; then
-      export JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configuration=file:${conf}/log4j.properties")
-    else
-      export JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configuration=file:${conf}/examples/log4j.properties")
-    fi
-  fi
-
   # This is default for hadoop 2.x; for another distribution, specify (DY)LD_LIBRARY_PATH explicitly above
   if [ -e "${HADOOP_PREFIX}/lib/native/libhadoop.so" ]; then
     export LD_LIBRARY_PATH="${HADOOP_PREFIX}/lib/native:${LD_LIBRARY_PATH}"     # For Linux
diff --git a/assemble/bin/accumulo-service b/assemble/bin/accumulo-service
index c9b0a1713a9..d1e12fae0c2 100755
--- a/assemble/bin/accumulo-service
+++ b/assemble/bin/accumulo-service
@@ -41,20 +41,6 @@ function invalid_args {
   exit 1
 }
 
-function get_host {
-  host="$(hostname -f)"
-  if [ "$1" == "-s" ]; then
-    host="$(hostname -s)"
-  fi
-  if [[ -z "$host" ]]; then
-    host=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
-    if [[ $? != 0 ]]; then
-      host=$(getent ahosts "$(hostname -f)" | grep DGRAM | cut -f 1 -d ' ')
-    fi
-  fi 
-  echo "$host"
-}
-
 function rotate_log () {
   logfile="$1"
   max_retained="5"
@@ -69,8 +55,6 @@ function rotate_log () {
 }
 
 function start_service() {
-  host="$(get_host -s)"
-
   if [ -f "$pid_file" ]; then
     pid=$(cat "$pid_file")
     if kill -0 "$pid" 2>/dev/null; then
@@ -89,12 +73,6 @@ function start_service() {
   rotate_log "$outfile"
   rotate_log "$errfile"
 
-  export ACCUMULO_MONITOR_BIND_ALL=${ACCUMULO_MONITOR_BIND_ALL:-"true"}
-  extra_args=""
-  if [[ $service == "monitor" && $ACCUMULO_MONITOR_BIND_ALL == "true" ]]; then
-    extra_args=('--address' '0.0.0.0')
-  fi
-
   nohup "${bin}/accumulo" "$service" "${extra_args[@]}" >"$outfile" 2>"$errfile" < /dev/null &
   echo "$!" > "${pid_file}"
 
@@ -110,7 +88,7 @@ function start_service() {
 
 function stop_service() {
   if [ -f "$pid_file" ]; then
-    echo "Stopping $service on $(get_host -s)";
+    echo "Stopping $service on $host";
     kill -s TERM "$(cat "$pid_file")" 2>/dev/null
     rm -f "${pid_file}" 2>/dev/null
   fi
@@ -118,7 +96,7 @@ function stop_service() {
 
 function kill_service() {
   if [ -f "$pid_file" ]; then
-    echo "Killing $service on $(get_host -s)";
+    echo "Killing $service on $host";
     kill -s KILL "$(cat "$pid_file")" 2>/dev/null
     rm -f "${pid_file}" 2>/dev/null
   fi
@@ -148,6 +126,10 @@ function main() {
   mkdir -p "$ACCUMULO_LOG_DIR" 2>/dev/null
   mkdir -p "${basedir}/run" 2>/dev/null
 
+  host="$(hostname)"
+  if [[ -z "$host" ]]; then
+    host=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')
+  fi 
   service="$1"
   pid_file="${basedir}/run/accumulo-${service}.pid"
   case "$service" in
diff --git a/assemble/bin/accumulo-util b/assemble/bin/accumulo-util
index 55e89bd5985..25dc90751b9 100755
--- a/assemble/bin/accumulo-util
+++ b/assemble/bin/accumulo-util
@@ -46,7 +46,7 @@ EOF
 }
 
 function create_config() {
-  TEMPLATE_CONF_DIR="${conf}/examples/templates"
+  TEMPLATE_CONF_DIR="${conf}/templates"
   CONF_DIR="${conf}"
   ACCUMULO_SITE=accumulo-site.xml
   ACCUMULO_ENV=accumulo-env.sh
@@ -300,10 +300,6 @@ function create_config() {
 
   mkdir -p "${CONF_DIR}" && cp "${TEMPLATE_CONF_DIR}"/* "${CONF_DIR}"/
 
-  if [[ -f "${CONF_DIR}/examples/client.conf" ]]; then
-    cp "${CONF_DIR}"/examples/client.conf "${CONF_DIR}"/
-  fi
-
   #Configure accumulo-env.sh
   sed -e "s/\${tServerHigh_tServerLow}/${!TSERVER}/" \
     -e "s/\${masterHigh_masterLow}/${!MASTER}/" \
diff --git a/assemble/conf/examples/accumulo-metrics.xml b/assemble/conf/accumulo-metrics.xml
similarity index 100%
rename from assemble/conf/examples/accumulo-metrics.xml
rename to assemble/conf/accumulo-metrics.xml
diff --git a/assemble/conf/examples/client.conf b/assemble/conf/client.conf
similarity index 100%
rename from assemble/conf/examples/client.conf
rename to assemble/conf/client.conf
diff --git a/assemble/conf/examples/auditLog.xml b/assemble/conf/examples/auditLog.xml
deleted file mode 100644
index 9111811bec0..00000000000
--- a/assemble/conf/examples/auditLog.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-    <!--  Write out Audit info to an Audit file -->
-    <appender name="Audit" class="org.apache.log4j.DailyRollingFileAppender">
-        <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.ip.localhost.hostname}.audit"/>
-        <param name="MaxBackupIndex" value="10"/>
-        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
-        <layout class="org.apache.log4j.PatternLayout">
-            <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss,SSS/Z} [%c{2}] %-5p: %m%n"/>
-        </layout>
-    </appender>
-    <logger name="Audit"  additivity="false">
-        <appender-ref ref="Audit" />
-        <level value="OFF"/>
-    </logger>
-
-</log4j:configuration>
diff --git a/assemble/conf/examples/generic_logger.properties b/assemble/conf/examples/generic_logger.properties
deleted file mode 100644
index b4db23ac172..00000000000
--- a/assemble/conf/examples/generic_logger.properties
+++ /dev/null
@@ -1,56 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Write out everything at the DEBUG level to the debug log
-log4j.appender.A2=org.apache.log4j.RollingFileAppender
-log4j.appender.A2.File=${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}${accumulo.service.instance}_${org.apache.accumulo.core.ip.localhost.hostname}_fromprops.debug.log
-log4j.appender.A2.MaxFileSize=1000MB
-log4j.appender.A2.MaxBackupIndex=10
-log4j.appender.A2.Threshold=DEBUG
-log4j.appender.A2.layout=org.apache.log4j.PatternLayout
-log4j.appender.A2.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
-
-# Write out INFO and higher to the regular log
-log4j.appender.A3=org.apache.log4j.RollingFileAppender
-log4j.appender.A3.File=${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}${accumulo.service.instance}_${org.apache.accumulo.core.ip.localhost.hostname}_fromprops.log
-log4j.appender.A3.MaxFileSize=1000MB
-log4j.appender.A3.MaxBackupIndex=10
-log4j.appender.A3.Threshold=INFO
-log4j.appender.A3.layout=org.apache.log4j.PatternLayout
-log4j.appender.A3.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
-
-# Send all logging data to a centralized logger
-# If the centralized logger is down, buffer the log events, but drop them if it stays down
-log4j.appender.ASYNC=org.apache.accumulo.core.util.AsyncSocketAppender
-log4j.appender.ASYNC.RemoteHost=${org.apache.accumulo.core.host.log}
-log4j.appender.ASYNC.Port=${org.apache.accumulo.core.host.log.port}
-log4j.appender.ASYNC.Application=${org.apache.accumulo.core.application}${accumulo.service.instance}:${org.apache.accumulo.core.ip.localhost.hostname}
-log4j.appender.ASYNC.Threshold=WARN
-
-# Log accumulo events to the debug, normal and remote logs.
-log4j.logger.org.apache.accumulo=DEBUG, A2, A3, ASYNC
-log4j.additivity.org.apache.accumulo=false
-
-# change to INFO for authorization events
-log4j.logger.org.apache.accumulo.server.security.Auditor=WARN
-
-log4j.logger.org.apache.accumulo.core.file.rfile.bcfile=INFO
-
-log4j.logger.org.mortbay.log=WARN
-
-log4j.logger.com.yahoo.zookeeper=ERROR
-
-# Log non-accumulo events to the debug and normal logs
-log4j.rootLogger=INFO, A2, A3
diff --git a/assemble/conf/examples/generic_logger.xml b/assemble/conf/examples/generic_logger.xml
deleted file mode 100644
index 23a159840ab..00000000000
--- a/assemble/conf/examples/generic_logger.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-  <!-- Write out everything at the DEBUG level to the debug log -->
-  <appender name="A2" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}${accumulo.service.instance}_${org.apache.accumulo.core.ip.localhost.hostname}.debug.log"/>
-     <param name="MaxFileSize"    value="1000MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="DEBUG"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %m%n"/>
-     </layout>
-  </appender>
-
-  <!--  Write out INFO and higher to the regular log -->
-  <appender name="A3" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}${accumulo.service.instance}_${org.apache.accumulo.core.ip.localhost.hostname}.log"/>
-     <param name="MaxFileSize"    value="1000MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="INFO"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %m%n"/>
-     </layout>
-  </appender>
-
-  <!-- Send all logging data to a centralized logger -->
-  <appender name="N1" class="org.apache.log4j.net.SocketAppender">
-     <param name="remoteHost"     value="${org.apache.accumulo.core.host.log}"/>
-     <param name="port"           value="${org.apache.accumulo.core.host.log.port}"/>
-     <param name="application"    value="${org.apache.accumulo.core.application}${accumulo.service.instance}:${org.apache.accumulo.core.ip.localhost.hostname}"/>
-     <param name="Threshold"      value="WARN"/>
-  </appender>
-
-  <!--  If the centralized logger is down, buffer the log events, but drop them if it stays down -->
-  <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
-     <appender-ref ref="N1" />
-  </appender>
-
-  <!-- Log accumulo events to the debug, normal and remote logs. -->
-  <logger name="org.apache.accumulo" additivity="false">
-     <level value="DEBUG"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-     <appender-ref ref="ASYNC" />
-  </logger>
-
-  <logger name="org.apache.accumulo.core.file.rfile.bcfile">
-     <level value="INFO"/>
-  </logger>
-
-  <logger name="org.mortbay.log">
-     <level value="WARN"/>
-  </logger>
-
-  <logger name="org.apache.zookeeper">
-     <level value="ERROR"/>
-  </logger>
-
-  <!-- Log non-accumulo events to the debug and normal logs. -->
-  <root>
-     <level value="INFO"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-  </root>
-
-</log4j:configuration>
diff --git a/assemble/conf/examples/monitor_logger.properties b/assemble/conf/examples/monitor_logger.properties
deleted file mode 100644
index 4dada2d46e2..00000000000
--- a/assemble/conf/examples/monitor_logger.properties
+++ /dev/null
@@ -1,44 +0,0 @@
-# Licensed to the Apache Software Foundation (ASF) under one or more
-# contributor license agreements.  See the NOTICE file distributed with
-# this work for additional information regarding copyright ownership.
-# The ASF licenses this file to You under the Apache License, Version 2.0
-# (the "License"); you may not use this file except in compliance with
-# the License.  You may obtain a copy of the License at
-#
-#      http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# Write out everything at the DEBUG level to the debug log
-log4j.appender.A2=org.apache.log4j.RollingFileAppender
-log4j.appender.A2.File=${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}_fromprops.debug.log
-log4j.appender.A2.MaxFileSize=100MB
-log4j.appender.A2.MaxBackupIndex=10
-log4j.appender.A2.Threshold=DEBUG
-log4j.appender.A2.layout=org.apache.log4j.PatternLayout
-log4j.appender.A2.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n
-
-# Write out INFO and higher to the regular log
-log4j.appender.A3=org.apache.log4j.RollingFileAppender
-log4j.appender.A3.File=${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}_fromprops.log
-log4j.appender.A3.MaxFileSize=100MB
-log4j.appender.A3.MaxBackupIndex=10
-log4j.appender.A3.Threshold=INFO
-log4j.appender.A3.layout=org.apache.log4j.PatternLayout
-log4j.appender.A3.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n
-
-# Keep the last few log messages for display to the user
-log4j.appender.GUI=org.apache.accumulo.server.monitor.LogService
-log4j.appender.GUI.Keep=50
-log4j.appender.GUI.Threshold=WARN
-
-# Log accumulo messages to debug, normal and GUI
-log4j.logger.org.apache.accumulo=DEBUG, A2, A3, GUI
-log4j.additivity.org.apache.accumulo=false
-
-# Log non-accumulo messages to debug, normal logs.
-log4j.rootLogger=INFO, A2, A3
diff --git a/assemble/conf/examples/monitor_logger.xml b/assemble/conf/examples/monitor_logger.xml
deleted file mode 100644
index 91a7671d249..00000000000
--- a/assemble/conf/examples/monitor_logger.xml
+++ /dev/null
@@ -1,64 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-  <!-- Write out everything at the DEBUG level to the debug log -->
-  <appender name="A2" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.debug.log"/>
-     <param name="MaxFileSize"    value="100MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="DEBUG"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n"/>
-     </layout>
-  </appender>
-
-  <!--  Write out INFO and higher to the regular log -->
-  <appender name="A3" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.log"/>
-     <param name="MaxFileSize"    value="100MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="INFO"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n"/>
-     </layout>
-  </appender>
-
-  <!-- Keep the last few log messages for display to the user -->
-  <appender name="GUI" class="org.apache.accumulo.server.monitor.LogService">
-     <param name="keep"           value="40"/>
-     <param name="Threshold"      value="WARN"/>
-  </appender>
-
-  <!-- Log accumulo messages to debug, normal and GUI -->
-  <logger name="org.apache.accumulo" additivity="false">
-     <level value="DEBUG"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-     <appender-ref ref="GUI" />
-  </logger>
-
-  <!-- Log non-accumulo messages to debug, normal logs. -->
-  <root>
-     <level value="INFO"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-  </root>
-
-</log4j:configuration>
diff --git a/assemble/conf/examples/hadoop-metrics2-accumulo.properties b/assemble/conf/hadoop-metrics2-accumulo.properties
similarity index 100%
rename from assemble/conf/examples/hadoop-metrics2-accumulo.properties
rename to assemble/conf/hadoop-metrics2-accumulo.properties
diff --git a/assemble/conf/log4j-monitor.properties b/assemble/conf/log4j-monitor.properties
new file mode 100644
index 00000000000..8004677607d
--- /dev/null
+++ b/assemble/conf/log4j-monitor.properties
@@ -0,0 +1,38 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+## Log4j 1.2 file that configures logging for Accumulo Monitor
+## The system properties referenced below are configured by accumulo-env.sh
+
+## Write out INFO and higher to log file
+log4j.appender.file=org.apache.log4j.RollingFileAppender
+log4j.appender.file.File=${accumulo.log.dir}/${accumulo.service.id}.log
+log4j.appender.file.MaxFileSize=100MB
+log4j.appender.file.MaxBackupIndex=10
+log4j.appender.file.Threshold=INFO
+log4j.appender.file.layout=org.apache.log4j.PatternLayout
+log4j.appender.file.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
+
+## Keep the last few log messages for display to the user in Monitor GUI
+log4j.appender.gui=org.apache.accumulo.server.monitor.LogService
+log4j.appender.gui.Keep=50
+log4j.appender.gui.Threshold=WARN
+
+## Log accumulo messages to file and gui appenders
+log4j.logger.org.apache.accumulo=INFO, file, gui
+log4j.additivity.org.apache.accumulo=false
+
+# Log non-accumulo messages to file
+log4j.rootLogger=INFO, file
diff --git a/assemble/conf/log4j-service.properties b/assemble/conf/log4j-service.properties
new file mode 100644
index 00000000000..e7212e0e458
--- /dev/null
+++ b/assemble/conf/log4j-service.properties
@@ -0,0 +1,55 @@
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#      http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+## Log4j 1.2 file that configures logging for all Accumulo services (Master, TabletServer, GC & Tracer) except Monitor
+## The system properties referenced below are configured by accumulo-env.sh
+
+## Write out INFO and higher to log file
+log4j.appender.file=org.apache.log4j.RollingFileAppender
+log4j.appender.file.File=${accumulo.log.dir}/${accumulo.service.id}.log
+log4j.appender.file.MaxFileSize=100MB
+log4j.appender.file.MaxBackupIndex=10
+log4j.appender.file.Threshold=INFO
+log4j.appender.file.layout=org.apache.log4j.PatternLayout
+log4j.appender.file.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
+
+## Forwards Accumulo messages at WARN or higher to Accumulo Monitor
+log4j.appender.monitor=org.apache.accumulo.start.util.AsyncSocketAppender
+log4j.appender.monitor.RemoteHost=${accumulo.monitor.host}
+log4j.appender.monitor.Port=${accumulo.monitor.log.port}
+log4j.appender.monitor.Application=${accumulo.service.id}
+log4j.appender.monitor.Threshold=WARN
+
+## Configures Audit logs which are OFF by default.
+#log4j.appender.audit=org.apache.log4j.DailyRollingFileAppender
+#log4j.appender.audit.File=${accumulo.log.dir}/${accumulo.audit.log}
+#log4j.appender.audit.DatePattern='.'yyyy-MM-dd
+#log4j.appender.audit.layout=org.apache.log4j.PatternLayout
+#log4j.appender.audit.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS/Z} [%c{2}] %-5p: %m%n
+#log4j.logger.org.apache.accumulo.audit=INFO, audit
+#log4j.additivity.org.apache.accumulo.audit=false
+## Uncomment above and comment out line below to turn Audit logging ON
+log4j.logger.org.apache.accumulo.audit=OFF
+
+# Log Accumulo messages to file & monitor
+log4j.logger.org.apache.accumulo=INFO, file, monitor
+log4j.additivity.org.apache.accumulo=false
+
+log4j.logger.org.apache.accumulo.core.file.rfile.bcfile=INFO
+log4j.logger.org.mortbay.log=WARN
+log4j.logger.org.apache.zookeeper=ERROR
+
+# Log non-accumulo messages to file
+log4j.rootLogger=INFO, file
diff --git a/assemble/conf/examples/log4j.properties b/assemble/conf/log4j.properties
similarity index 56%
rename from assemble/conf/examples/log4j.properties
rename to assemble/conf/log4j.properties
index 98587950c37..5e602f262cf 100644
--- a/assemble/conf/examples/log4j.properties
+++ b/assemble/conf/log4j.properties
@@ -13,30 +13,22 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-# default logging properties:
-#  by default, log everything at INFO or higher to the console
-log4j.rootLogger=INFO,A1
+# Log4j 1.2 file that configures logging for Accumulo commands
 
-# hide Jetty junk
-log4j.logger.org.mortbay.log=WARN,A1
-
-# hide "Got brand-new compressor" messages
-log4j.logger.org.apache.hadoop.io.compress=WARN,A1
-log4j.logger.org.apache.accumulo.core.file.rfile.bcfile.Compression=WARN,A1
-
-# hide junk from TestRandomDeletes
-log4j.logger.org.apache.accumulo.test.TestRandomDeletes=WARN,A1
-
-# hide junk from VFS
-log4j.logger.org.apache.commons.vfs2.impl.DefaultFileSystemManager=WARN,A1
-
-# hide almost everything from zookeeper
-log4j.logger.org.apache.zookeeper=ERROR,A1
+# Setup console appender
+log4j.appender.console=org.apache.log4j.ConsoleAppender
+log4j.appender.console.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
+log4j.appender.console.layout=org.apache.log4j.PatternLayout
 
 # hide AUDIT messages in the shell, alternatively you could send them to a different logger
-log4j.logger.org.apache.accumulo.shell.Shell.audit=WARN,A1
+log4j.logger.org.apache.accumulo.shell.Shell.audit=WARN
+
+log4j.logger.org.apache.accumulo.core.file.rfile.bcfile.Compression=WARN
+log4j.logger.org.apache.accumulo.test.TestRandomDeletes=WARN
+log4j.logger.org.apache.commons.vfs2.impl.DefaultFileSystemManager=WARN
+log4j.logger.org.apache.hadoop.io.compress=WARN
+log4j.logger.org.apache.zookeeper=ERROR
+log4j.logger.org.mortbay.log=WARN
 
-# Send most things to the console
-log4j.appender.A1=org.apache.log4j.ConsoleAppender
-log4j.appender.A1.layout.ConversionPattern=%d{ISO8601} [%-8c{2}] %-5p: %m%n
-log4j.appender.A1.layout=org.apache.log4j.PatternLayout
+# By default, log everything at INFO or higher to the console
+log4j.rootLogger=INFO, console
diff --git a/assemble/conf/examples/templates/accumulo-env.sh b/assemble/conf/templates/accumulo-env.sh
similarity index 75%
rename from assemble/conf/examples/templates/accumulo-env.sh
rename to assemble/conf/templates/accumulo-env.sh
index e6a360c52bc..fafc5f6ddfd 100644
--- a/assemble/conf/examples/templates/accumulo-env.sh
+++ b/assemble/conf/templates/accumulo-env.sh
@@ -25,6 +25,19 @@
 # Variables that must be set
 ############################
 
+## Accumulo logs directory. Referenced by logger config.
+export ACCUMULO_LOG_DIR="${ACCUMULO_LOG_DIR:-$ACCUMULO_HOME/logs}"
+## Hadoop installation
+export HADOOP_PREFIX="${HADOOP_PREFIX:-/path/to/hadoop}"
+## Hadoop configuration
+export HADOOP_CONF_DIR="${HADOOP_CONF_DIR:-${HADOOP_PREFIX}/etc/hadoop}"
+## Zookeeper installation
+export ZOOKEEPER_HOME="${ZOOKEEPER_HOME:-/path/to/zookeeper}"
+
+##################################################################
+# Build JAVA_OPTS variable. Defaults below work but can be edited.
+##################################################################
+
 ## JVM options set for all processes. Extra options can be passed in by setting ACCUMULO_JAVA_OPTS to an array of options.
 JAVA_OPTS=("${ACCUMULO_JAVA_OPTS[@]}" '-XX:+UseConcMarkSweepGC' '-XX:CMSInitiatingOccupancyFraction=75' '-XX:+CMSClassUnloadingEnabled'
 '-XX:OnOutOfMemoryError=kill -9 %p' '-XX:-OmitStackTraceInFastThrow' '-Djava.net.preferIPv4Stack=true' 
@@ -33,23 +46,31 @@ JAVA_OPTS=("${ACCUMULO_JAVA_OPTS[@]}" '-XX:+UseConcMarkSweepGC' '-XX:CMSInitiati
 ## JVM options set for individual applications
 case "$ACCUMULO_CMD" in
 master)  JAVA_OPTS=("${JAVA_OPTS[@]}" ${masterHigh_masterLow}) ;;
+monitor) JAVA_OPTS=("${JAVA_OPTS[@]}" ${monitorHigh_monitorLow}) ;;
 gc)      JAVA_OPTS=("${JAVA_OPTS[@]}" ${gcHigh_gcLow}) ;;
 tserver) JAVA_OPTS=("${JAVA_OPTS[@]}" ${tServerHigh_tServerLow}) ;;
-monitor) JAVA_OPTS=("${JAVA_OPTS[@]}" ${monitorHigh_monitorLow}) ;;
 shell)   JAVA_OPTS=("${JAVA_OPTS[@]}" ${shellHigh_shellLow}) ;;
 *)       JAVA_OPTS=("${JAVA_OPTS[@]}" ${otherHigh_otherLow}) ;;
 esac
+
+## JVM options set for logging.  Review logj4 properties files to see how they are used.
+JAVA_OPTS=("${JAVA_OPTS[@]}" 
+  "-Daccumulo.log.dir=${ACCUMULO_LOG_DIR}"
+  "-Daccumulo.service.id=${ACCUMULO_CMD}${ACCUMULO_SERVICE_INSTANCE}_$(hostname)"
+  "-Daccumulo.audit.log=$(hostname).audit")
+
+case "$ACCUMULO_CMD" in
+monitor)                    JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configuration=file:${ACCUMULO_CONF_DIR}/log4j-monitor.properties") ;;
+gc|master|tserver|tracer)   JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configuration=file:${ACCUMULO_CONF_DIR}/log4j-service.properties") ;;
+*)                          JAVA_OPTS=("${JAVA_OPTS[@]}" "-Dlog4j.configuration=file:${ACCUMULO_CONF_DIR}/log4j.properties") ;;
+esac
+
 export JAVA_OPTS
 
-## Accumulo logs directory. Referenced by logger config.
-export ACCUMULO_LOG_DIR="${ACCUMULO_LOG_DIR:-$ACCUMULO_HOME/logs}"
-## Hadoop installation
-export HADOOP_PREFIX="${HADOOP_PREFIX:-/path/to/hadoop}"
-## Hadoop configuration
-export HADOOP_CONF_DIR="${HADOOP_CONF_DIR:-${HADOOP_PREFIX}/etc/hadoop}"
-## Zookeeper installation
-export ZOOKEEPER_HOME="${ZOOKEEPER_HOME:-/path/to/zookeeper}"
-## See HADOOP-7154 and ACCUMULO-847
+############################
+# Variables set to a default
+############################
+
 export MALLOC_ARENA_MAX=${MALLOC_ARENA_MAX:-1}
 
 ###############################################
diff --git a/assemble/conf/examples/templates/accumulo-site.xml b/assemble/conf/templates/accumulo-site.xml
similarity index 100%
rename from assemble/conf/examples/templates/accumulo-site.xml
rename to assemble/conf/templates/accumulo-site.xml
diff --git a/assemble/src/main/assemblies/component.xml b/assemble/src/main/assemblies/component.xml
index 3aae23f1a13..a346ab29cb3 100644
--- a/assemble/src/main/assemblies/component.xml
+++ b/assemble/src/main/assemblies/component.xml
@@ -81,14 +81,6 @@
         <exclude>*/**</exclude>
       </excludes>
     </fileSet>
-    <fileSet>
-      <directory>./</directory>
-      <outputDirectory>logs</outputDirectory>
-      <directoryMode>0700</directoryMode>
-      <excludes>
-        <exclude>*/**</exclude>
-      </excludes>
-    </fileSet>
     <fileSet>
       <directory>conf</directory>
       <directoryMode>0755</directoryMode>
@@ -96,7 +88,7 @@
     </fileSet>
     <fileSet>
       <directory>target/example-configs</directory>
-      <outputDirectory>conf/examples</outputDirectory>
+      <outputDirectory>conf</outputDirectory>
       <directoryMode>0755</directoryMode>
       <fileMode>0644</fileMode>
     </fileSet>
diff --git a/docs/src/main/asciidoc/chapters/administration.txt b/docs/src/main/asciidoc/chapters/administration.txt
index ad6cf119a25..69ae1a83aec 100644
--- a/docs/src/main/asciidoc/chapters/administration.txt
+++ b/docs/src/main/asciidoc/chapters/administration.txt
@@ -100,22 +100,21 @@ sync, which can cause problems with automatically timestamped data.
 === Configuration
 
 The Accumulo tarball contains a +conf/+ directory where Accumulo looks for configuration. If you
-installed Accumulo using downstream packaging, the +conf/+ could be something else like +/etc/accumulo/+.
+installed Accumulo using downstream packaging, the +conf/+ could be something else like
++/etc/accumulo/+.
 
-Before starting Accumulo, the configuration files +accumulo-env.sh+ and +accumulo-site.xml+ must exist in
-+conf/+ and be properly configured.  You can either copy these files from +conf/examples+ or run
+Before starting Accumulo, the configuration files +accumulo-env.sh+ and +accumulo-site.xml+ must
+exist in +conf/+ and be properly configured. You can either edit the files in +conf/+ or run
 +accumulo-util create-config+ to generate these files. If you are using +accumulo-cluster+ to launch
-a cluster, the `conf/` directory must also contain hosts file for Accumulo services (i.e +gc+, +masters+,
-+monitor+, +tservers+, +tracers+). You can either create these files manually or run 
+a cluster, the `conf/` directory must also contain hosts file for Accumulo services (i.e +gc+,
++masters+, +monitor+, +tservers+, +tracers+). You can either create these files manually or run
 +accumulo-cluster create-config+.
 
-Additional optional configuration files can be copied from `conf/examples` to `conf/`. For example,
-logging is primarily controlled using the log4j configuration files, +generic_logger.xml+ and
-+monitor_logger.xml+ (or their corresponding +.properties+ version if the +.xml+ version is missing).
-The generic logger is used for most server types, and is typically configured to send logs to the
-monitor, as well as log files. The monitor logger is used by the monitor, and is typically configured
-to log only errors the monitor itself generates, rather than all the logs that it receives from other
-server types.
+Logging is configured in +accumulo-env.sh+ to use three log4j configuration files in +conf/+. The
+file used depends on the Accumulo command or service being run. Logging for most Accumulo services
+(i.e Master, TabletServer, Garbage Collector) is configured by +log4j-service.properties+ except for
+the Monitor which is configured by +log4j-monitor.properties+. All Accumulo commands (i.e +init+,
++shell+, etc) are configured by +log4j.properties+.
 
 ==== Configure accumulo-env.sh
 
@@ -178,7 +177,7 @@ also locate the native maps shared library by setting +LD_LIBRARY_PATH+
 
 As mentioned, Accumulo will use the native libraries if they are found in the expected
 location and +tserver.memory.maps.native.enabled+ is set to +true+ (which is the default).
-Using the native maps over JVM Maps nets a noticable improvement in ingest rates; however,
+Using the native maps over JVM Maps nets a noticeable improvement in ingest rates; however,
 certain configuration variables are important to modify when increasing the size of the
 native map.
 
@@ -405,7 +404,6 @@ and BatchScanner passing in the name of the context, app1 in the example above.
 iterators to load classes from the locations defined by the context. Passing the context name to the scanners allows you to override the table setting
 to load only scan time iterators from a different location. 
 
-
 === Initialization
 
 Accumulo must be initialized to create the structures it uses internally to locate
@@ -466,10 +464,10 @@ Alternatively, you can ssh to each of the hosts you want to remove and run:
 
 Be sure to update your +conf/tservers+ file to
 account for the removal of these hosts. Bear in mind that the monitor will not re-read the
-tservers file automatically, so it will report the decomissioned servers as down; it's
+tservers file automatically, so it will report the decommissioned servers as down; it's
 recommended that you restart the monitor so that the node list is up to date.
 
-The steps described to decomission a node can also be used (without removal of the host
+The steps described to decommission a node can also be used (without removal of the host
 from the +conf/tservers+ file) to gracefully stop a node. This will
 ensure that the tabletserver is cleanly stopped and recovery will not need to be performed
 when the tablets are re-hosted.
@@ -1132,12 +1130,12 @@ can be exacerbated by resource constraints and clock drift.
 ==== Tested Versions
 Each release of Accumulo is built with a specific version of Apache
 Hadoop, Apache ZooKeeper and Apache Thrift.  We expect Accumulo to
-work with versions that are API compatable with those versions.
+work with versions that are API compatible with those versions.
 However this compatibility is not guaranteed because Hadoop, ZooKeeper
 and Thift may not provide guarantees between their own versions. We
 have also found that certain versions of Accumulo and Hadoop included
 bugs that greatly affected overall stability.  Thrift is particularly
-prone to compatablity changes between versions and you must use the
+prone to compatibility changes between versions and you must use the
 same version your Accumulo is built with.
 
 Please check the release notes for your Accumulo version or use the
diff --git a/docs/src/main/asciidoc/chapters/kerberos.txt b/docs/src/main/asciidoc/chapters/kerberos.txt
index 06d46c2af9c..848ac312672 100644
--- a/docs/src/main/asciidoc/chapters/kerberos.txt
+++ b/docs/src/main/asciidoc/chapters/kerberos.txt
@@ -545,11 +545,11 @@ I don't know what is actually failing.
 This will enable lots of extra debugging at the JVM level which is often sufficient to
 diagnose some high-level configuration problem. Client applications can add this system property by
 hand to the command line and Accumulo server processes or applications started using the `accumulo`
-script by adding the property to +ACCUMULO_GENERAL_OPTS+ in +accumulo-env.sh+.
+script by adding the property to +JAVA_OPTS+ in +accumulo-env.sh+.
 
 Additionally, you can increase the log4j levels on +org.apache.hadoop.security+, which includes the
 Hadoop +UserGroupInformation+ class, which will include some high-level debug statements. This
-can be controlled in your client application, or using +generic_logger.xml+
+can be controlled in your client application, or using +log4j-service.properties+
 
 *Q*: All of my Accumulo processes successfully start and log in with their
 keytab, but they are unable to communicate with each other, showing the
diff --git a/minicluster/src/main/java/org/apache/accumulo/minicluster/impl/MiniAccumuloClusterImpl.java b/minicluster/src/main/java/org/apache/accumulo/minicluster/impl/MiniAccumuloClusterImpl.java
index 2d60b0cd047..cf1a901183f 100644
--- a/minicluster/src/main/java/org/apache/accumulo/minicluster/impl/MiniAccumuloClusterImpl.java
+++ b/minicluster/src/main/java/org/apache/accumulo/minicluster/impl/MiniAccumuloClusterImpl.java
@@ -96,7 +96,6 @@
 import org.apache.accumulo.start.classloader.vfs.MiniDFSUtil;
 import org.apache.commons.configuration.AbstractConfiguration;
 import org.apache.commons.configuration.MapConfiguration;
-import org.apache.commons.io.FileUtils;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.impl.VFSClassLoader;
 import org.apache.hadoop.conf.Configuration;
@@ -464,14 +463,6 @@ public MiniAccumuloClusterImpl(MiniAccumuloConfigImpl config) throws IOException
 
       fileWriter.close();
     }
-
-    // disable audit logging for mini....
-    InputStream auditStream = this.getClass().getResourceAsStream("/auditLog.xml");
-
-    if (auditStream != null) {
-      FileUtils.copyInputStreamToFile(auditStream, new File(config.getConfDir(), "auditLog.xml"));
-    }
-
     clusterControl = new MiniAccumuloClusterControl(this);
   }
 
diff --git a/minicluster/src/main/resources/auditLog.xml b/minicluster/src/main/resources/auditLog.xml
deleted file mode 100644
index 9b7987e027d..00000000000
--- a/minicluster/src/main/resources/auditLog.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-
-
-    <!--  Write out Audit info to an Audit file -->
-    <appender name="Audit" class="org.apache.log4j.DailyRollingFileAppender">
-        <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.ip.localhost.hostname}.audit"/>
-        <param name="MaxBackupIndex" value="10"/>
-        <param name="DatePattern" value="'.'yyyy-MM-dd"/>
-        <layout class="org.apache.log4j.PatternLayout">
-            <param name="ConversionPattern" value="%d{yyyy-MM-dd HH:mm:ss,SSS/Z} [%c{2}] %-5p: %m%n"/>
-        </layout>
-    </appender>
-    <logger name="Audit"  additivity="false">
-        <appender-ref ref="Audit" />
-        <level value="OFF"/>
-    </logger>
-
-
-
-
-
-</log4j:configuration>
diff --git a/server/base/src/main/java/org/apache/accumulo/server/Accumulo.java b/server/base/src/main/java/org/apache/accumulo/server/Accumulo.java
index fa936c49d9d..e4234978829 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/Accumulo.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/Accumulo.java
@@ -22,7 +22,6 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.util.Arrays;
 import java.util.Map.Entry;
@@ -45,14 +44,12 @@
 import org.apache.accumulo.server.conf.ServerConfigurationFactory;
 import org.apache.accumulo.server.fs.VolumeManager;
 import org.apache.accumulo.server.util.time.SimpleTimer;
-import org.apache.accumulo.server.watcher.Log4jConfiguration;
 import org.apache.accumulo.server.watcher.MonitorLog4jWatcher;
 import org.apache.accumulo.server.zookeeper.ZooReaderWriter;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.log4j.Logger;
-import org.apache.log4j.helpers.LogLog;
 import org.apache.zookeeper.KeeperException;
 
 import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
@@ -108,69 +105,20 @@ public static synchronized Path getAccumuloInstanceIdPath(VolumeManager fs) {
     return ServerConstants.getInstanceIdLocation(v);
   }
 
-  /**
-   * Finds the best log4j configuration file. A generic file is used only if an application-specific file is not available. An XML file is preferred over a
-   * properties file, if possible.
-   *
-   * @param confDir
-   *          directory where configuration files should reside
-   * @param application
-   *          application name for configuration file name
-   * @return configuration file name
-   */
-  static String locateLogConfig(String confDir, String application) {
-    String explicitConfigFile = System.getProperty("log4j.configuration");
-    if (explicitConfigFile != null) {
-      return explicitConfigFile;
-    }
-    String[] configFiles = {String.format("%s/%s_logger.xml", confDir, application), String.format("%s/%s_logger.properties", confDir, application),
-        String.format("%s/examples/%s_logger.xml", confDir, application), String.format("%s/examples/%s_logger.properties", confDir, application),
-        String.format("%s/generic_logger.xml", confDir), String.format("%s/generic_logger.properties", confDir),
-        String.format("%s/examples/generic_logger.xml", confDir), String.format("%s/examples/generic_logger.properties", confDir),};
-    String defaultConfigFile = String.format("%s/examples/generic_logger.xml", confDir);
-    for (String f : configFiles) {
-      if (new File(f).exists()) {
-        return f;
-      }
-    }
-    return defaultConfigFile;
-  }
-
-  public static void setupLogging(String application) throws UnknownHostException {
-    System.setProperty("org.apache.accumulo.core.application", application);
-
-    if (System.getenv("ACCUMULO_LOG_DIR") != null) {
-      System.setProperty("org.apache.accumulo.core.dir.log", System.getenv("ACCUMULO_LOG_DIR"));
-    }
-
-    String localhost = InetAddress.getLocalHost().getHostName();
-    System.setProperty("org.apache.accumulo.core.ip.localhost.hostname", localhost);
-
-    // Use a specific log config, if it exists
-    String logConfigFile = locateLogConfig(System.getenv("ACCUMULO_CONF_DIR"), application);
-    // Turn off messages about not being able to reach the remote logger... we protect against that.
-    LogLog.setQuietMode(true);
-
-    // Set up local file-based logging right away
-    Log4jConfiguration logConf = new Log4jConfiguration(logConfigFile);
-    logConf.resetLogger();
-  }
-
   public static void init(VolumeManager fs, ServerConfigurationFactory serverConfig, String application) throws IOException {
     final AccumuloConfiguration conf = serverConfig.getConfiguration();
     final Instance instance = serverConfig.getInstance();
 
-    // Use a specific log config, if it exists
-    final String logConfigFile = locateLogConfig(System.getenv("ACCUMULO_CONF_DIR"), application);
-
-    // Set up polling log4j updates and log-forwarding using information advertised in zookeeper by the monitor
-    MonitorLog4jWatcher logConfigWatcher = new MonitorLog4jWatcher(instance.getInstanceID(), logConfigFile);
-    logConfigWatcher.setDelay(5000L);
-    logConfigWatcher.start();
-
-    // Makes sure the log-forwarding to the monitor is configured
-    int[] logPort = conf.getPort(Property.MONITOR_LOG4J_PORT);
-    System.setProperty("org.apache.accumulo.core.host.log.port", Integer.toString(logPort[0]));
+    String logConfigFile = System.getProperty("log4j.configuration");
+    if (logConfigFile != null) {
+      if (logConfigFile.startsWith("file:")) {
+        logConfigFile = logConfigFile.split(":")[1];
+      }
+      // Set up polling log4j updates and log-forwarding using information advertised in zookeeper by the monitor
+      MonitorLog4jWatcher logConfigWatcher = new MonitorLog4jWatcher(instance.getInstanceID(), logConfigFile);
+      logConfigWatcher.setDelay(5000L);
+      logConfigWatcher.start();
+    }
 
     log.info(application + " starting");
     log.info("Instance " + serverConfig.getInstance().getInstanceID());
diff --git a/server/base/src/main/java/org/apache/accumulo/server/security/AuditedSecurityOperation.java b/server/base/src/main/java/org/apache/accumulo/server/security/AuditedSecurityOperation.java
index e5ca006c9a5..8f4934bc26f 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/security/AuditedSecurityOperation.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/security/AuditedSecurityOperation.java
@@ -57,7 +57,7 @@
  */
 public class AuditedSecurityOperation extends SecurityOperation {
 
-  public static final String AUDITLOG = "Audit";
+  public static final String AUDITLOG = "org.apache.accumulo.audit";
   public static final Logger audit = Logger.getLogger(AUDITLOG);
 
   public AuditedSecurityOperation(AccumuloServerContext context, Authorizor author, Authenticator authent, PermissionHandler pm) {
diff --git a/server/base/src/main/java/org/apache/accumulo/server/watcher/Log4jConfiguration.java b/server/base/src/main/java/org/apache/accumulo/server/watcher/Log4jConfiguration.java
index bea71755ced..68e489799ca 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/watcher/Log4jConfiguration.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/watcher/Log4jConfiguration.java
@@ -32,16 +32,12 @@ public class Log4jConfiguration {
   private final boolean usingProperties;
   private final String filename;
   private final File log4jFile;
-  private final String auditConfig;
 
   public Log4jConfiguration(String filename) {
     requireNonNull(filename, "log4j configuration filename must not be null");
     usingProperties = filename.endsWith(".properties");
     this.filename = filename;
     log4jFile = new File(filename);
-
-    // Read the auditing config
-    auditConfig = String.format("%s/auditLog.xml", System.getenv("ACCUMULO_CONF_DIR"));
   }
 
   public boolean isUsingProperties() {
@@ -58,10 +54,6 @@ public void resetLogger() {
       } else {
         new DOMConfigurator().doConfigure(filename, LogManager.getLoggerRepository());
       }
-
-      // Watch the auditLog.xml for the future updates. Because we reset the subsystem, we have to reconfigure auditing, too.
-      DOMConfigurator.configureAndWatch(auditConfig, 5000l);
     }
-
   }
 }
diff --git a/server/base/src/main/java/org/apache/accumulo/server/watcher/MonitorLog4jWatcher.java b/server/base/src/main/java/org/apache/accumulo/server/watcher/MonitorLog4jWatcher.java
index 103aefc552b..a0783a45f15 100644
--- a/server/base/src/main/java/org/apache/accumulo/server/watcher/MonitorLog4jWatcher.java
+++ b/server/base/src/main/java/org/apache/accumulo/server/watcher/MonitorLog4jWatcher.java
@@ -37,8 +37,8 @@
 public class MonitorLog4jWatcher extends FileWatchdog implements Watcher {
   private static final Logger log = Logger.getLogger(MonitorLog4jWatcher.class);
 
-  private static final String HOST_PROPERTY_NAME = "org.apache.accumulo.core.host.log";
-  private static final String PORT_PROPERTY_NAME = "org.apache.accumulo.core.host.log.port";
+  private static final String HOST_PROPERTY_NAME = "accumulo.monitor.host";
+  private static final String PORT_PROPERTY_NAME = "accumulo.monitor.log.port";
 
   private final Object lock;
   private final Log4jConfiguration logConfig;
diff --git a/server/base/src/test/java/org/apache/accumulo/server/AccumuloTest.java b/server/base/src/test/java/org/apache/accumulo/server/AccumuloTest.java
index 955ee9a9bd0..2d990580101 100644
--- a/server/base/src/test/java/org/apache/accumulo/server/AccumuloTest.java
+++ b/server/base/src/test/java/org/apache/accumulo/server/AccumuloTest.java
@@ -20,12 +20,9 @@
 import static org.easymock.EasyMock.expect;
 import static org.easymock.EasyMock.replay;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 
-import java.io.File;
 import java.io.FileNotFoundException;
 
-import org.apache.commons.io.FileUtils;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
@@ -85,54 +82,4 @@ public void testGetAccumuloPersistentVersion_Fail() throws Exception {
 
     assertEquals(-1, Accumulo.getAccumuloPersistentVersion(fs, path));
   }
-
-  @Test
-  public void testLocateLogConfig() throws Exception {
-    File confDir = new File(FileUtils.getTempDirectory(), "AccumuloTest" + System.currentTimeMillis());
-    String confDirName = confDir.getAbsolutePath();
-    assertTrue("Failed to make test configuration directory", confDir.mkdir());
-    try {
-      File appProps = new File(confDir, "flogger_logger.properties");
-      String appPropsName = String.format("%s/flogger_logger.properties", confDirName);
-      FileUtils.touch(appProps);
-      File genericXml = new File(confDir, "generic_logger.xml");
-      String genericXmlName = String.format("%s/generic_logger.xml", confDirName);
-      FileUtils.touch(genericXml);
-
-      assertEquals(appPropsName, Accumulo.locateLogConfig(confDirName, "flogger"));
-      assertEquals(genericXmlName, Accumulo.locateLogConfig(confDirName, "flagger"));
-
-      assertTrue("Failed to delete log configuration file", appProps.delete());
-      assertEquals(genericXmlName, Accumulo.locateLogConfig(confDirName, "flogger"));
-    } finally {
-      FileUtils.deleteDirectory(confDir);
-    }
-  }
-
-  @Test
-  public void testLocateLogConfig_Default() throws Exception {
-    File confDir = new File(FileUtils.getTempDirectory(), "AccumuloTest" + System.currentTimeMillis());
-    String confDirName = confDir.getAbsolutePath();
-    assertTrue("Failed to make test configuration directory", confDir.mkdir());
-    try {
-      String genericXmlName = String.format("%s/examples/generic_logger.xml", confDirName);
-
-      assertEquals(genericXmlName, Accumulo.locateLogConfig(confDirName, "flogger"));
-    } finally {
-      FileUtils.deleteDirectory(confDir);
-    }
-  }
-
-  @Test
-  public void testLocateLogConfig_Explicit() throws Exception {
-    File confDir = new File(FileUtils.getTempDirectory(), "AccumuloTest" + System.currentTimeMillis());
-    String confDirName = confDir.getAbsolutePath();
-    System.setProperty("log4j.configuration", "myconfig.xml");
-    try {
-      assertEquals("myconfig.xml", Accumulo.locateLogConfig(confDirName, "flogger"));
-    } finally {
-      FileUtils.deleteDirectory(confDir);
-      System.clearProperty("log4j.configuration");
-    }
-  }
 }
diff --git a/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java b/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
index 1e8553bbdba..90f3457c669 100644
--- a/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
+++ b/server/gc/src/main/java/org/apache/accumulo/gc/SimpleGarbageCollector.java
@@ -144,7 +144,6 @@ static class Opts extends ServerOpts {
 
   public static void main(String[] args) throws UnknownHostException, IOException {
     final String app = "gc";
-    Accumulo.setupLogging(app);
     SecurityUtil.serverLogin(SiteConfiguration.getInstance());
     Instance instance = HdfsZooInstance.getInstance();
     ServerConfigurationFactory conf = new ServerConfigurationFactory(instance);
diff --git a/server/master/src/main/java/org/apache/accumulo/master/Master.java b/server/master/src/main/java/org/apache/accumulo/master/Master.java
index c3443e7eb28..032d6bcd315 100644
--- a/server/master/src/main/java/org/apache/accumulo/master/Master.java
+++ b/server/master/src/main/java/org/apache/accumulo/master/Master.java
@@ -1436,7 +1436,6 @@ private void getMasterLock(final String zMasterLoc) throws KeeperException, Inte
   public static void main(String[] args) throws Exception {
     try {
       final String app = "master";
-      Accumulo.setupLogging(app);
       SecurityUtil.serverLogin(SiteConfiguration.getInstance());
 
       ServerOpts opts = new ServerOpts();
diff --git a/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java b/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
index d239a84be21..346820abb05 100644
--- a/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
+++ b/server/monitor/src/main/java/org/apache/accumulo/monitor/Monitor.java
@@ -19,6 +19,8 @@
 import static com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
+import java.net.InetAddress;
+import java.net.UnknownHostException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -425,7 +427,6 @@ private static GCStatus fetchGcStatus() {
 
   public static void main(String[] args) throws Exception {
     final String app = "monitor";
-    Accumulo.setupLogging(app);
     SecurityUtil.serverLogin(SiteConfiguration.getInstance());
 
     ServerOpts opts = new ServerOpts();
@@ -496,11 +497,18 @@ public void run(String hostname) {
       throw new RuntimeException(e);
     }
 
-    try {
-      log.debug("Using " + hostname + " to advertise monitor location in ZooKeeper");
-
-      String monitorAddress = HostAndPort.fromParts(hostname, server.getPort()).toString();
+    String advertiseHost = hostname;
+    if (advertiseHost.equals("0.0.0.0")) {
+      try {
+        advertiseHost = InetAddress.getLocalHost().getHostName();
+      } catch (UnknownHostException e) {
+        log.error("Unable to get hostname", e);
+      }
+    }
+    log.debug("Using " + advertiseHost + " to advertise monitor location");
 
+    try {
+      String monitorAddress = HostAndPort.fromParts(advertiseHost, server.getPort()).toString();
       ZooReaderWriter.getInstance().putPersistentData(ZooUtil.getRoot(instance) + Constants.ZMONITOR_HTTP_ADDR, monitorAddress.getBytes(UTF_8),
           NodeExistsPolicy.OVERWRITE);
       log.info("Set monitor address in zookeeper to " + monitorAddress);
@@ -508,8 +516,8 @@ public void run(String hostname) {
       log.error("Unable to set monitor HTTP address in zookeeper", ex);
     }
 
-    if (null != hostname) {
-      LogService.startLogListener(Monitor.getContext().getConfiguration(), instance.getInstanceID(), hostname);
+    if (null != advertiseHost) {
+      LogService.startLogListener(Monitor.getContext().getConfiguration(), instance.getInstanceID(), advertiseHost);
     } else {
       log.warn("Not starting log4j listener as we could not determine address to use");
     }
diff --git a/server/tracer/src/main/java/org/apache/accumulo/tracer/TraceServer.java b/server/tracer/src/main/java/org/apache/accumulo/tracer/TraceServer.java
index 7c0d9b29044..a6bdaa84575 100644
--- a/server/tracer/src/main/java/org/apache/accumulo/tracer/TraceServer.java
+++ b/server/tracer/src/main/java/org/apache/accumulo/tracer/TraceServer.java
@@ -378,7 +378,6 @@ private static void loginTracer(AccumuloConfiguration acuConf) {
 
   public static void main(String[] args) throws Exception {
     final String app = "tracer";
-    Accumulo.setupLogging(app);
     loginTracer(SiteConfiguration.getInstance());
     ServerOpts opts = new ServerOpts();
     opts.parseArgs(app, args);
diff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java
index b1b2d722f52..47a0d18eb41 100644
--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java
+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/TabletServer.java
@@ -2945,7 +2945,6 @@ public TabletServerStatus getStats(Map<String,MapCounter<ScanRunState>> scanCoun
   public static void main(String[] args) throws IOException {
     try {
       final String app = "tserver";
-      Accumulo.setupLogging(app);
       SecurityUtil.serverLogin(SiteConfiguration.getInstance());
       ServerOpts opts = new ServerOpts();
       opts.parseArgs(app, args);
diff --git a/core/src/main/java/org/apache/accumulo/core/util/AsyncSocketAppender.java b/start/src/main/java/org/apache/accumulo/start/util/AsyncSocketAppender.java
similarity index 98%
rename from core/src/main/java/org/apache/accumulo/core/util/AsyncSocketAppender.java
rename to start/src/main/java/org/apache/accumulo/start/util/AsyncSocketAppender.java
index 07c2b6c5a40..db64ecbbf95 100644
--- a/core/src/main/java/org/apache/accumulo/core/util/AsyncSocketAppender.java
+++ b/start/src/main/java/org/apache/accumulo/start/util/AsyncSocketAppender.java
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.accumulo.core.util;
+package org.apache.accumulo.start.util;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
diff --git a/core/src/test/java/org/apache/accumulo/core/util/AsyncSocketAppenderTest.java b/start/src/test/java/org/apache/accumulo/start/util/AsyncSocketAppenderTest.java
similarity index 73%
rename from core/src/test/java/org/apache/accumulo/core/util/AsyncSocketAppenderTest.java
rename to start/src/test/java/org/apache/accumulo/start/util/AsyncSocketAppenderTest.java
index f7040f0c079..6c73782038c 100644
--- a/core/src/test/java/org/apache/accumulo/core/util/AsyncSocketAppenderTest.java
+++ b/start/src/test/java/org/apache/accumulo/start/util/AsyncSocketAppenderTest.java
@@ -14,19 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.accumulo.core.util;
-
-import static org.easymock.EasyMock.createMock;
-import static org.easymock.EasyMock.replay;
-import static org.easymock.EasyMock.verify;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertTrue;
+package org.apache.accumulo.start.util;
 
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 import org.apache.log4j.net.SocketAppender;
 import org.apache.log4j.spi.LoggingEvent;
+import org.easymock.EasyMock;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -36,7 +31,7 @@ public class AsyncSocketAppenderTest {
 
   @Before
   public void setUp() throws Exception {
-    sa = createMock(SocketAppender.class);
+    sa = EasyMock.createMock(SocketAppender.class);
   }
 
   @Test
@@ -47,37 +42,37 @@ public void testDelegates() {
     asa.setPort(1234);
     asa.setReconnectionDelay(56);
     asa.setRemoteHost("remotehost");
-    assertEquals("myapp", asa.getApplication());
-    assertEquals(true, asa.getLocationInfo()); // not really delegating
-    assertEquals(1234, asa.getPort());
-    assertEquals(56, asa.getReconnectionDelay());
-    assertEquals("remotehost", asa.getRemoteHost());
+    Assert.assertEquals("myapp", asa.getApplication());
+    Assert.assertEquals(true, asa.getLocationInfo()); // not really delegating
+    Assert.assertEquals(1234, asa.getPort());
+    Assert.assertEquals(56, asa.getReconnectionDelay());
+    Assert.assertEquals("remotehost", asa.getRemoteHost());
   }
 
   @Test
   public void testSetLocationInfo() {
     sa.setLocationInfo(true);
-    replay(sa);
+    EasyMock.replay(sa);
     asa = new AsyncSocketAppender(sa);
     asa.setLocationInfo(true);
-    verify(sa);
+    EasyMock.verify(sa);
   }
 
   @Test
   public void testAppend() {
     asa = new AsyncSocketAppender(sa);
-    assertFalse(asa.isAttached(sa));
+    Assert.assertFalse(asa.isAttached(sa));
     LoggingEvent event1 = new LoggingEvent("java.lang.String", Logger.getRootLogger(), Level.INFO, "event1", null);
     LoggingEvent event2 = new LoggingEvent("java.lang.Integer", Logger.getRootLogger(), Level.WARN, "event2", null);
     sa.activateOptions();
     sa.doAppend(event1);
     sa.doAppend(event2);
     sa.close();
-    replay(sa);
+    EasyMock.replay(sa);
     asa.doAppend(event1);
     asa.doAppend(event2);
     asa.close(); // forces events to be appended to socket appender
-    assertTrue(asa.isAttached(sa));
-    verify(sa);
+    Assert.assertTrue(asa.isAttached(sa));
+    EasyMock.verify(sa);
   }
 }
diff --git a/test/src/main/java/org/apache/accumulo/test/AuditMessageIT.java b/test/src/main/java/org/apache/accumulo/test/AuditMessageIT.java
index 1f4779317a9..87809ba1027 100644
--- a/test/src/main/java/org/apache/accumulo/test/AuditMessageIT.java
+++ b/test/src/main/java/org/apache/accumulo/test/AuditMessageIT.java
@@ -81,10 +81,6 @@ public int defaultTimeoutSeconds() {
 
   @Override
   public void beforeClusterStart(MiniAccumuloConfigImpl cfg) throws Exception {
-    File f = new File(cfg.getConfDir(), "auditLog.xml");
-    if (f.delete()) {
-      log.debug("Deleted " + f);
-    }
     cfg.setNumTservers(1);
   }
 
diff --git a/test/src/main/java/org/apache/accumulo/test/functional/MonitorLoggingIT.java b/test/src/main/java/org/apache/accumulo/test/functional/MonitorLoggingIT.java
deleted file mode 100644
index 2cf9b84146a..00000000000
--- a/test/src/main/java/org/apache/accumulo/test/functional/MonitorLoggingIT.java
+++ /dev/null
@@ -1,121 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.accumulo.test.functional;
-
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
-
-import java.io.File;
-import java.net.URL;
-
-import org.apache.accumulo.core.client.Connector;
-import org.apache.accumulo.core.client.IteratorSetting;
-import org.apache.accumulo.core.client.Scanner;
-import org.apache.accumulo.core.security.Authorizations;
-import org.apache.accumulo.minicluster.impl.MiniAccumuloConfigImpl;
-import org.apache.accumulo.monitor.Monitor;
-import org.apache.accumulo.server.util.Admin;
-import org.apache.commons.io.FileUtils;
-import org.apache.zookeeper.KeeperException;
-import org.junit.Test;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class MonitorLoggingIT extends ConfigurableMacBase {
-  private static final Logger log = LoggerFactory.getLogger(MonitorLoggingIT.class);
-
-  @Override
-  public void beforeClusterStart(MiniAccumuloConfigImpl cfg) throws Exception {
-    cfg.setNumTservers(1);
-    File confDir = cfg.getConfDir();
-    try {
-      FileUtils.copyInputStreamToFile(MonitorLoggingIT.class.getResourceAsStream("/conf/generic_logger.xml"), new File(confDir, "generic_logger.xml"));
-      FileUtils.copyInputStreamToFile(MonitorLoggingIT.class.getResourceAsStream("/conf/monitor_logger.xml"), new File(confDir, "monitor_logger.xml"));
-    } catch (Exception e) {
-      log.error("Failed to copy Log4J XML files to conf dir", e);
-    }
-  }
-
-  private static final int NUM_LOCATION_PASSES = 5;
-  private static final int LOCATION_DELAY_SECS = 5;
-
-  @Override
-  protected int defaultTimeoutSeconds() {
-    return 30 + ((NUM_LOCATION_PASSES + 2) * LOCATION_DELAY_SECS);
-  }
-
-  @Test
-  public void logToMonitor() throws Exception {
-    // Start the monitor.
-    log.debug("Starting Monitor");
-    Process monitor = cluster.exec(Monitor.class);
-
-    // Get monitor location to ensure it is running.
-    String monitorLocation = null;
-    for (int i = 0; i < NUM_LOCATION_PASSES; i++) {
-      Thread.sleep(LOCATION_DELAY_SECS * 1000);
-      try {
-        monitorLocation = getMonitor();
-        break;
-      } catch (KeeperException e) {
-        log.debug("Monitor not up yet, trying again in " + LOCATION_DELAY_SECS + " secs");
-      }
-    }
-    assertNotNull("Monitor failed to start within " + (LOCATION_DELAY_SECS * NUM_LOCATION_PASSES) + " secs", monitorLocation);
-    log.debug("Monitor running at " + monitorLocation);
-
-    // The tserver has to observe that the log-forwarding address
-    // changed in ZooKeeper. If we cause the error before the tserver
-    // updates, we'll never see the error on the monitor.
-    Thread.sleep(10000);
-
-    // Attempt a scan with an invalid iterator to force a log message in the monitor.
-    try {
-      Connector c = getConnector();
-      Scanner s = c.createScanner("accumulo.root", new Authorizations());
-      IteratorSetting cfg = new IteratorSetting(100, "incorrect", "java.lang.String");
-      s.addScanIterator(cfg);
-      s.iterator().next();
-    } catch (RuntimeException e) {
-      // expected, the iterator was bad
-    }
-
-    String result = "";
-    while (true) {
-      Thread.sleep(LOCATION_DELAY_SECS * 1000); // extra precaution to ensure monitor has opportunity to log
-
-      // Verify messages were received at the monitor.
-      URL url = new URL("http://" + monitorLocation + "/log");
-      log.debug("Fetching web page " + url);
-      result = FunctionalTestUtils.readAll(url.openStream());
-      if (result.contains("<pre class='logevent'>")) {
-        break;
-      }
-      log.debug("No messages found, waiting a little longer...");
-    }
-
-    assertTrue("No log messages found", result.contains("<pre class='logevent'>"));
-
-    // Shutdown cleanly.
-    log.debug("Stopping mini accumulo cluster");
-    Process shutdown = cluster.exec(Admin.class, "stopAll");
-    shutdown.waitFor();
-    assertTrue(shutdown.exitValue() == 0);
-    log.debug("success!");
-    monitor.destroy();
-  }
-}
diff --git a/test/src/main/resources/conf/generic_logger.xml b/test/src/main/resources/conf/generic_logger.xml
deleted file mode 100644
index db79efe31ce..00000000000
--- a/test/src/main/resources/conf/generic_logger.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-  <!-- Write out everything at the DEBUG level to the debug log -->
-  <appender name="A2" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.debug.log"/>
-     <param name="MaxFileSize"    value="1000MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="DEBUG"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %m%n"/>
-     </layout>
-  </appender>
-
-  <!--  Write out INFO and higher to the regular log -->
-  <appender name="A3" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.log"/>
-     <param name="MaxFileSize"    value="1000MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="INFO"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %m%n"/>
-     </layout>
-  </appender>
-
-  <!-- Send all logging data to a centralized logger -->
-  <appender name="N1" class="org.apache.log4j.net.SocketAppender">
-     <param name="remoteHost"     value="${org.apache.accumulo.core.host.log}"/>
-     <param name="port"           value="${org.apache.accumulo.core.host.log.port}"/>
-     <param name="application"    value="${org.apache.accumulo.core.application}:${org.apache.accumulo.core.ip.localhost.hostname}"/>
-     <param name="Threshold"      value="WARN"/>
-  </appender>
-
-  <!--  If the centralized logger is down, buffer the log events, but drop them if it stays down -->
-  <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
-     <appender-ref ref="N1" />
-  </appender>
-
-  <!-- Log accumulo events to the debug, normal and remote logs. -->
-  <logger name="org.apache.accumulo" additivity="false">
-     <level value="DEBUG"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-     <appender-ref ref="ASYNC" />
-  </logger>
-
-  <logger name="org.apache.accumulo.core.file.rfile.bcfile">
-     <level value="INFO"/>
-  </logger>
-
-  <logger name="org.mortbay.log">
-     <level value="WARN"/>
-  </logger>
-
-  <logger name="org.apache.zookeeper">
-     <level value="ERROR"/>
-  </logger>
-
-  <!-- Log non-accumulo events to the debug and normal logs. -->
-  <root>
-     <level value="INFO"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-  </root>
-
-</log4j:configuration>
diff --git a/test/src/main/resources/conf/monitor_logger.xml b/test/src/main/resources/conf/monitor_logger.xml
deleted file mode 100644
index 91a7671d249..00000000000
--- a/test/src/main/resources/conf/monitor_logger.xml
+++ /dev/null
@@ -1,64 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-  Licensed to the Apache Software Foundation (ASF) under one or more
-  contributor license agreements.  See the NOTICE file distributed with
-  this work for additional information regarding copyright ownership.
-  The ASF licenses this file to You under the Apache License, Version 2.0
-  (the "License"); you may not use this file except in compliance with
-  the License.  You may obtain a copy of the License at
-
-      http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
-<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">
-
-  <!-- Write out everything at the DEBUG level to the debug log -->
-  <appender name="A2" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.debug.log"/>
-     <param name="MaxFileSize"    value="100MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="DEBUG"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n"/>
-     </layout>
-  </appender>
-
-  <!--  Write out INFO and higher to the regular log -->
-  <appender name="A3" class="org.apache.log4j.RollingFileAppender">
-     <param name="File"           value="${org.apache.accumulo.core.dir.log}/${org.apache.accumulo.core.application}_${org.apache.accumulo.core.ip.localhost.hostname}.log"/>
-     <param name="MaxFileSize"    value="100MB"/>
-     <param name="MaxBackupIndex" value="10"/>
-     <param name="Threshold"      value="INFO"/>
-     <layout class="org.apache.log4j.PatternLayout">
-       <param name="ConversionPattern" value="%d{ISO8601} [%-8c{2}] %-5p: %X{application} %m%n"/>
-     </layout>
-  </appender>
-
-  <!-- Keep the last few log messages for display to the user -->
-  <appender name="GUI" class="org.apache.accumulo.server.monitor.LogService">
-     <param name="keep"           value="40"/>
-     <param name="Threshold"      value="WARN"/>
-  </appender>
-
-  <!-- Log accumulo messages to debug, normal and GUI -->
-  <logger name="org.apache.accumulo" additivity="false">
-     <level value="DEBUG"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-     <appender-ref ref="GUI" />
-  </logger>
-
-  <!-- Log non-accumulo messages to debug, normal logs. -->
-  <root>
-     <level value="INFO"/>
-     <appender-ref ref="A2" />
-     <appender-ref ref="A3" />
-  </root>
-
-</log4j:configuration>
