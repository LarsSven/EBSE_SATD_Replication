diff --git a/conf/functions_worker.yml b/conf/functions_worker.yml
index cc4a1f85de8d7..4aec9e5422628 100644
--- a/conf/functions_worker.yml
+++ b/conf/functions_worker.yml
@@ -104,6 +104,8 @@ assignmentWriteMaxRetries: 60
 instanceLivenessCheckFreqMs: 30000
 # Frequency how often worker performs compaction on function-topics
 topicCompactionFrequencySec: 1800
+# should the function context have pulsar admin client exposed? Default is disabled.
+exposeAdminClientEnabled: false
 
 
 ###############################
diff --git a/pom.xml b/pom.xml
index 51158250245dc..1a93087fe6dd3 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1656,6 +1656,7 @@ flexible messaging model and an intuitive client API.</description>
         <module>pulsar-client</module>
         <module>pulsar-client-shaded</module>
         <module>pulsar-client-1x-base</module>
+        <module>pulsar-client-admin-api</module>
         <module>pulsar-client-admin</module>
         <module>pulsar-client-admin-shaded</module>
         <module>pulsar-client-tools</module>
@@ -1717,6 +1718,7 @@ flexible messaging model and an intuitive client API.</description>
         <module>pulsar-broker</module>
         <module>pulsar-client-api</module>
         <module>pulsar-client</module>
+        <module>pulsar-client-admin-api</module>
         <module>pulsar-client-admin</module>
         <module>pulsar-client-tools</module>
         <module>pulsar-client-tools-test</module>
diff --git a/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/LoadBalancerTest.java b/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/LoadBalancerTest.java
index 5118abadcf08f..ccf7376e45be1 100644
--- a/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/LoadBalancerTest.java
+++ b/pulsar-broker/src/test/java/org/apache/pulsar/broker/loadbalance/LoadBalancerTest.java
@@ -63,6 +63,7 @@
 import org.apache.pulsar.broker.loadbalance.impl.SimpleResourceUnit;
 import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.admin.internal.NamespacesImpl;
+import org.apache.pulsar.client.admin.internal.PulsarAdminImpl;
 import org.apache.pulsar.common.naming.NamespaceName;
 import org.apache.pulsar.common.naming.TopicName;
 import org.apache.pulsar.common.policies.data.AutoFailoverPolicyData;
@@ -635,7 +636,7 @@ public void testNamespaceBundleAutoSplit() throws Exception {
 
         // fake Namespaces Admin
         NamespacesImpl namespaceAdmin = mock(NamespacesImpl.class);
-        setObjectField(PulsarAdmin.class, pulsarServices[0].getAdminClient(), "namespaces", namespaceAdmin);
+        setObjectField(PulsarAdminImpl.class, pulsarServices[0].getAdminClient(), "namespaces", namespaceAdmin);
 
         // create load report
         // namespace 01~09 need to be split
diff --git a/pulsar-client-admin-api/.gitignore b/pulsar-client-admin-api/.gitignore
new file mode 100644
index 0000000000000..b83d22266ac8a
--- /dev/null
+++ b/pulsar-client-admin-api/.gitignore
@@ -0,0 +1 @@
+/target/
diff --git a/pulsar-client-admin-api/pom.xml b/pulsar-client-admin-api/pom.xml
new file mode 100644
index 0000000000000..505c234850dd1
--- /dev/null
+++ b/pulsar-client-admin-api/pom.xml
@@ -0,0 +1,73 @@
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.pulsar</groupId>
+        <artifactId>pulsar</artifactId>
+        <version>2.8.0-SNAPSHOT</version>
+        <relativePath>..</relativePath>
+    </parent>
+
+    <artifactId>pulsar-client-admin-api</artifactId>
+    <name>Pulsar Client Admin :: API</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>pulsar-common</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>pulsar-client-original</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>pulsar-package-core</artifactId>
+            <version>${project.version}</version>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-checkstyle-plugin</artifactId>
+                <executions>
+                    <execution>
+                        <id>checkstyle</id>
+                        <phase>verify</phase>
+                        <goals>
+                            <goal>check</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Bookies.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Bookies.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Bookies.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Bookies.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/BrokerStats.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/BrokerStats.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/BrokerStats.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/BrokerStats.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Brokers.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Brokers.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Brokers.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Brokers.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Clusters.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Clusters.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Clusters.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Clusters.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Functions.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Functions.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Functions.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Functions.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/LongRunningProcessStatus.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/LongRunningProcessStatus.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/LongRunningProcessStatus.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/LongRunningProcessStatus.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Lookup.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Lookup.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Lookup.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Lookup.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Namespaces.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Namespaces.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Namespaces.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/NonPersistentTopics.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/NonPersistentTopics.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/NonPersistentTopics.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/NonPersistentTopics.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/OffloadProcessStatus.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/OffloadProcessStatus.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/OffloadProcessStatus.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/OffloadProcessStatus.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Packages.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Packages.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Packages.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Packages.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Properties.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Properties.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Properties.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Properties.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/ProxyStats.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/ProxyStats.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/ProxyStats.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/ProxyStats.java
diff --git a/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java
new file mode 100644
index 0000000000000..58b4fd2888fbf
--- /dev/null
+++ b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java
@@ -0,0 +1,166 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.client.admin;
+
+import java.io.Closeable;
+import org.apache.pulsar.client.admin.utils.DefaultImplementation;
+import org.apache.pulsar.client.impl.conf.ClientConfigurationData;
+import org.apache.pulsar.common.classification.InterfaceAudience;
+import org.apache.pulsar.common.classification.InterfaceStability;
+
+@InterfaceAudience.Public
+@InterfaceStability.Stable
+public interface PulsarAdmin extends Closeable {
+
+    /**
+     * Get a new builder instance that can used to configure and build a {@link PulsarAdmin} instance.
+     *
+     * @return the {@link PulsarAdminBuilder}
+     *
+     */
+    static PulsarAdminBuilder builder() {
+        return DefaultImplementation.newAdminClientBuilder();
+    }
+
+    /**
+     * @return the clusters management object
+     */
+    Clusters clusters();
+
+    /**
+     * @return the brokers management object
+     */
+    Brokers brokers();
+
+    /**
+     * @return the tenants management object
+     */
+    Tenants tenants();
+
+    /**
+     *
+     * @deprecated since 2.0. See {@link #tenants()}
+     */
+    @Deprecated
+    Properties properties();
+
+    /**
+     * @return the namespaces management object
+     */
+    Namespaces namespaces();
+
+    /**
+     * @return the topics management object
+     */
+    Topics topics();
+
+    /**
+     * @return the bookies management object
+     */
+    Bookies bookies();
+
+    /**
+     * @return the persistentTopics management object
+     * @deprecated Since 2.0. See {@link #topics()}
+     */
+    @Deprecated
+    NonPersistentTopics nonPersistentTopics();
+
+    /**
+     * @return the resource quota management object
+     */
+    ResourceQuotas resourceQuotas();
+
+    /**
+     * @return does a looks up for the broker serving the topic
+     */
+    Lookup lookups();
+
+    /**
+     *
+     * @return the functions management object
+     */
+    Functions functions();
+
+    /**
+     * @return the sources management object
+     * @deprecated in favor of {@link #sources()}
+     */
+    @Deprecated
+    Source source();
+
+    /**
+     * @return the sources management object
+     */
+    Sources sources();
+
+    /**
+     * @return the sinks management object
+     * @deprecated in favor of {@link #sinks}
+     */
+    @Deprecated
+    Sink sink();
+
+    /**
+     * @return the sinks management object
+     */
+    Sinks sinks();
+
+    /**
+     * @return the Worker stats
+     */
+    Worker worker();
+
+    /**
+     * @return the broker statics
+     */
+    BrokerStats brokerStats();
+
+    /**
+     * @return the proxy statics
+     */
+    ProxyStats proxyStats();
+
+    /**
+     * @return the service HTTP URL that is being used
+     */
+    String getServiceUrl();
+
+    /**
+     * @return the client Configuration Data that is being used
+     */
+    ClientConfigurationData getClientConfigData();
+
+    /**
+     * @return the schemas
+     */
+    Schemas schemas();
+
+    /**
+     * @return the packages management object
+     */
+    Packages packages();
+
+    /**
+     * Close the PulsarAdminClient and release all the resources.
+     *
+     */
+    @Override
+    void close();
+}
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminBuilder.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdminBuilder.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminBuilder.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdminBuilder.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/PulsarAdminException.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/ResourceQuotas.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/ResourceQuotas.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/ResourceQuotas.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/ResourceQuotas.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Schemas.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Schemas.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Schemas.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Schemas.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sink.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sink.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sink.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sink.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sinks.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sinks.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sinks.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sinks.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Source.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Source.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Source.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Source.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sources.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sources.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Sources.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Sources.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Tenants.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Tenants.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Tenants.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Tenants.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Topics.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Topics.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Topics.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Topics.java
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Worker.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Worker.java
similarity index 100%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/Worker.java
rename to pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/Worker.java
diff --git a/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/package-info.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/package-info.java
new file mode 100644
index 0000000000000..718606be4837c
--- /dev/null
+++ b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/package-info.java
@@ -0,0 +1,19 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.client.admin;
\ No newline at end of file
diff --git a/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/DefaultImplementation.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/DefaultImplementation.java
new file mode 100644
index 0000000000000..1bab85b4165dd
--- /dev/null
+++ b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/DefaultImplementation.java
@@ -0,0 +1,36 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.client.admin.utils;
+
+import lombok.experimental.UtilityClass;
+import org.apache.pulsar.client.admin.PulsarAdminBuilder;
+
+/**
+ * Helper class for class instantiations and it also contains methods to work with schemas.
+ */
+@SuppressWarnings("unchecked")
+@UtilityClass
+public class DefaultImplementation {
+    private static final Class<PulsarAdminBuilder> ADMIN_CLIENT_BUILDER_IMPL = ReflectionUtils.newClassInstance(
+            "org.apache.pulsar.client.admin.internal.PulsarAdminBuilderImpl");
+
+    public static PulsarAdminBuilder newAdminClientBuilder() {
+        return ReflectionUtils.catchExceptions(() -> ADMIN_CLIENT_BUILDER_IMPL.newInstance());
+    }
+}
diff --git a/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/ReflectionUtils.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/ReflectionUtils.java
new file mode 100644
index 0000000000000..b14a0ee875821
--- /dev/null
+++ b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/ReflectionUtils.java
@@ -0,0 +1,83 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.client.admin.utils;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+class ReflectionUtils {
+    interface SupplierWithException<T> {
+        T get() throws Exception;
+    }
+
+    static <T> T catchExceptions(SupplierWithException<T> s) {
+        try {
+            return s.get();
+        } catch (Throwable t) {
+            if (t instanceof InvocationTargetException) {
+                // exception is thrown during invocation
+                Throwable cause = t.getCause();
+                if (cause instanceof RuntimeException) {
+                    throw (RuntimeException) cause;
+                } else {
+                    throw new RuntimeException(cause);
+                }
+            }
+            throw new RuntimeException(t);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    static <T> Class<T> newClassInstance(String className) {
+        try {
+            try {
+                // when the API is loaded in the same classloader as the impl
+                return (Class<T>) DefaultImplementation.class.getClassLoader().loadClass(className);
+            } catch (Exception e) {
+                // when the API is loaded in a separate classloader as the impl
+                // the classloader that loaded the impl needs to be a child classloader of the classloader
+                // that loaded the API
+                return (Class<T>) Thread.currentThread().getContextClassLoader().loadClass(className);
+            }
+        } catch (ClassNotFoundException | NoClassDefFoundError e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    static <T> Constructor<T> getConstructor(String className, Class<?>... argTypes) {
+        try {
+            Class<T> clazz = newClassInstance(className);
+            return clazz.getConstructor(argTypes);
+        } catch (NoSuchMethodException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    static <T> Method getStaticMethod(String className, String method, Class<?>... argTypes) {
+        try {
+            Class<T> clazz = newClassInstance(className);
+            return clazz.getMethod(method, argTypes);
+        } catch (NoSuchMethodException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/package-info.java b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/package-info.java
new file mode 100644
index 0000000000000..6ec0b73941e59
--- /dev/null
+++ b/pulsar-client-admin-api/src/main/java/org/apache/pulsar/client/admin/utils/package-info.java
@@ -0,0 +1,22 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+/**
+ * Helpers which provide useful functionality for the implementation of Pulsar Client API.
+ */
+package org.apache.pulsar.client.admin.utils;
diff --git a/pulsar-client-admin/pom.xml b/pulsar-client-admin/pom.xml
index f1e7fd4f6882e..23c5361b01fa6 100644
--- a/pulsar-client-admin/pom.xml
+++ b/pulsar-client-admin/pom.xml
@@ -40,6 +40,12 @@
       <version>${project.version}</version>
     </dependency>
 
+    <dependency>
+      <groupId>${project.groupId}</groupId>
+      <artifactId>pulsar-client-admin-api</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
     <dependency>
       <groupId>org.glassfish.jersey.core</groupId>
       <artifactId>jersey-client</artifactId>
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminBuilderImpl.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminBuilderImpl.java
index 75985c5b516cc..70463b7fb4e9a 100644
--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminBuilderImpl.java
+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminBuilderImpl.java
@@ -32,10 +32,10 @@
 public class PulsarAdminBuilderImpl implements PulsarAdminBuilder {
 
     protected final ClientConfigurationData conf;
-    private int connectTimeout = PulsarAdmin.DEFAULT_CONNECT_TIMEOUT_SECONDS;
-    private int readTimeout = PulsarAdmin.DEFAULT_READ_TIMEOUT_SECONDS;
-    private int requestTimeout = PulsarAdmin.DEFAULT_REQUEST_TIMEOUT_SECONDS;
-    private int autoCertRefreshTime = PulsarAdmin.DEFAULT_CERT_REFRESH_SECONDS;
+    private int connectTimeout = PulsarAdminImpl.DEFAULT_CONNECT_TIMEOUT_SECONDS;
+    private int readTimeout = PulsarAdminImpl.DEFAULT_READ_TIMEOUT_SECONDS;
+    private int requestTimeout = PulsarAdminImpl.DEFAULT_REQUEST_TIMEOUT_SECONDS;
+    private int autoCertRefreshTime = PulsarAdminImpl.DEFAULT_CERT_REFRESH_SECONDS;
     private TimeUnit connectTimeoutUnit = TimeUnit.SECONDS;
     private TimeUnit readTimeoutUnit = TimeUnit.SECONDS;
     private TimeUnit requestTimeoutUnit = TimeUnit.SECONDS;
@@ -44,7 +44,7 @@ public class PulsarAdminBuilderImpl implements PulsarAdminBuilder {
 
     @Override
     public PulsarAdmin build() throws PulsarClientException {
-        return new PulsarAdmin(conf.getServiceUrl(), conf, connectTimeout, connectTimeoutUnit, readTimeout,
+        return new PulsarAdminImpl(conf.getServiceUrl(), conf, connectTimeout, connectTimeoutUnit, readTimeout,
                 readTimeoutUnit, requestTimeout, requestTimeoutUnit, autoCertRefreshTime,
                 autoCertRefreshTimeUnit, clientBuilderClassLoader);
     }
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminImpl.java
similarity index 88%
rename from pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java
rename to pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminImpl.java
index 7695e3208b001..f3ae1510a77b5 100644
--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/PulsarAdmin.java
+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/PulsarAdminImpl.java
@@ -16,9 +16,8 @@
  * specific language governing permissions and limitations
  * under the License.
  */
-package org.apache.pulsar.client.admin;
+package org.apache.pulsar.client.admin.internal;
 
-import java.io.Closeable;
 import java.io.IOException;
 import java.net.URL;
 import java.util.Map;
@@ -28,25 +27,27 @@
 import javax.ws.rs.client.ClientBuilder;
 import javax.ws.rs.client.WebTarget;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.pulsar.client.admin.internal.BookiesImpl;
-import org.apache.pulsar.client.admin.internal.BrokerStatsImpl;
-import org.apache.pulsar.client.admin.internal.BrokersImpl;
-import org.apache.pulsar.client.admin.internal.ClustersImpl;
-import org.apache.pulsar.client.admin.internal.FunctionsImpl;
-import org.apache.pulsar.client.admin.internal.JacksonConfigurator;
-import org.apache.pulsar.client.admin.internal.LookupImpl;
-import org.apache.pulsar.client.admin.internal.NamespacesImpl;
-import org.apache.pulsar.client.admin.internal.NonPersistentTopicsImpl;
-import org.apache.pulsar.client.admin.internal.PackagesImpl;
-import org.apache.pulsar.client.admin.internal.ProxyStatsImpl;
-import org.apache.pulsar.client.admin.internal.PulsarAdminBuilderImpl;
-import org.apache.pulsar.client.admin.internal.ResourceQuotasImpl;
-import org.apache.pulsar.client.admin.internal.SchemasImpl;
-import org.apache.pulsar.client.admin.internal.SinksImpl;
-import org.apache.pulsar.client.admin.internal.SourcesImpl;
-import org.apache.pulsar.client.admin.internal.TenantsImpl;
-import org.apache.pulsar.client.admin.internal.TopicsImpl;
-import org.apache.pulsar.client.admin.internal.WorkerImpl;
+import org.apache.pulsar.client.admin.Bookies;
+import org.apache.pulsar.client.admin.BrokerStats;
+import org.apache.pulsar.client.admin.Brokers;
+import org.apache.pulsar.client.admin.Clusters;
+import org.apache.pulsar.client.admin.Functions;
+import org.apache.pulsar.client.admin.Lookup;
+import org.apache.pulsar.client.admin.Namespaces;
+import org.apache.pulsar.client.admin.NonPersistentTopics;
+import org.apache.pulsar.client.admin.Packages;
+import org.apache.pulsar.client.admin.Properties;
+import org.apache.pulsar.client.admin.ProxyStats;
+import org.apache.pulsar.client.admin.PulsarAdmin;
+import org.apache.pulsar.client.admin.ResourceQuotas;
+import org.apache.pulsar.client.admin.Schemas;
+import org.apache.pulsar.client.admin.Sink;
+import org.apache.pulsar.client.admin.Sinks;
+import org.apache.pulsar.client.admin.Source;
+import org.apache.pulsar.client.admin.Sources;
+import org.apache.pulsar.client.admin.Tenants;
+import org.apache.pulsar.client.admin.Topics;
+import org.apache.pulsar.client.admin.Worker;
 import org.apache.pulsar.client.admin.internal.http.AsyncHttpConnector;
 import org.apache.pulsar.client.admin.internal.http.AsyncHttpConnectorProvider;
 import org.apache.pulsar.client.api.Authentication;
@@ -67,7 +68,7 @@
  * Pulsar client admin API client.
  */
 @SuppressWarnings("deprecation")
-public class PulsarAdmin implements Closeable {
+public class PulsarAdminImpl implements PulsarAdmin {
     private static final Logger LOG = LoggerFactory.getLogger(PulsarAdmin.class);
 
     public static final int DEFAULT_CONNECT_TIMEOUT_SECONDS = 60;
@@ -124,21 +125,13 @@ public class PulsarAdmin implements Closeable {
         }
     }
 
-    /**
-     * Creates a builder to construct an instance of {@link PulsarAdmin}.
-     */
-    public static PulsarAdminBuilder builder() {
-        return new PulsarAdminBuilderImpl();
-    }
-
-
-    public PulsarAdmin(String serviceUrl, ClientConfigurationData clientConfigData) throws PulsarClientException {
+    public PulsarAdminImpl(String serviceUrl, ClientConfigurationData clientConfigData) throws PulsarClientException {
         this(serviceUrl, clientConfigData, DEFAULT_CONNECT_TIMEOUT_SECONDS, TimeUnit.SECONDS,
                 DEFAULT_READ_TIMEOUT_SECONDS, TimeUnit.SECONDS, DEFAULT_REQUEST_TIMEOUT_SECONDS, TimeUnit.SECONDS,
                 DEFAULT_CERT_REFRESH_SECONDS, TimeUnit.SECONDS, null);
     }
 
-    public PulsarAdmin(String serviceUrl,
+    public PulsarAdminImpl(String serviceUrl,
                        ClientConfigurationData clientConfigData,
                        int connectTimeout,
                        TimeUnit connectTimeoutUnit,
@@ -164,7 +157,7 @@ public PulsarAdmin(String serviceUrl,
             auth.start();
         }
 
-        if (StringUtils.isBlank(clientConfigData.getServiceUrl())) {
+        if (clientConfigData != null && StringUtils.isBlank(clientConfigData.getServiceUrl())) {
             clientConfigData.setServiceUrl(serviceUrl);
         }
 
@@ -243,7 +236,7 @@ public PulsarAdmin(String serviceUrl,
      * @deprecated Since 2.0. Use {@link #builder()} to construct a new {@link PulsarAdmin} instance.
      */
     @Deprecated
-    public PulsarAdmin(URL serviceUrl, Authentication auth) throws PulsarClientException {
+    public PulsarAdminImpl(URL serviceUrl, Authentication auth) throws PulsarClientException {
         this(serviceUrl.toString(), getConfigData(auth));
     }
 
@@ -267,7 +260,7 @@ private static ClientConfigurationData getConfigData(Authentication auth) {
      * @deprecated Since 2.0. Use {@link #builder()} to construct a new {@link PulsarAdmin} instance.
      */
     @Deprecated
-    public PulsarAdmin(URL serviceUrl, String authPluginClassName, String authParamsString)
+    public PulsarAdminImpl(URL serviceUrl, String authPluginClassName, String authParamsString)
             throws PulsarClientException {
         this(serviceUrl, AuthenticationFactory.create(authPluginClassName, authParamsString));
     }
@@ -286,7 +279,7 @@ public PulsarAdmin(URL serviceUrl, String authPluginClassName, String authParams
      * @deprecated Since 2.0. Use {@link #builder()} to construct a new {@link PulsarAdmin} instance.
      */
     @Deprecated
-    public PulsarAdmin(URL serviceUrl, String authPluginClassName, Map<String, String> authParams)
+    public PulsarAdminImpl(URL serviceUrl, String authPluginClassName, Map<String, String> authParams)
             throws PulsarClientException {
         this(serviceUrl, AuthenticationFactory.create(authPluginClassName, authParams));
     }
@@ -400,11 +393,11 @@ public Sinks sinks() {
     }
 
     /**
-    * @return the Worker stats
-    */
-   public Worker worker() {
-       return worker;
-   }
+     * @return the Worker stats
+     */
+    public Worker worker() {
+        return worker;
+    }
 
     /**
      * @return the broker statics
diff --git a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/http/AsyncHttpConnector.java b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/http/AsyncHttpConnector.java
index bc15f24a854c1..bdd5920f0767f 100644
--- a/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/http/AsyncHttpConnector.java
+++ b/pulsar-client-admin/src/main/java/org/apache/pulsar/client/admin/internal/http/AsyncHttpConnector.java
@@ -45,7 +45,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.pulsar.PulsarVersion;
-import org.apache.pulsar.client.admin.PulsarAdmin;
+import org.apache.pulsar.client.admin.internal.PulsarAdminImpl;
 import org.apache.pulsar.client.api.AuthenticationDataProvider;
 import org.apache.pulsar.client.api.KeyStoreParams;
 import org.apache.pulsar.client.impl.PulsarServiceNameResolver;
@@ -83,7 +83,7 @@ public class AsyncHttpConnector implements Connector {
     public AsyncHttpConnector(Client client, ClientConfigurationData conf, int autoCertRefreshTimeSeconds) {
         this((int) client.getConfiguration().getProperty(ClientProperties.CONNECT_TIMEOUT),
                 (int) client.getConfiguration().getProperty(ClientProperties.READ_TIMEOUT),
-                PulsarAdmin.DEFAULT_REQUEST_TIMEOUT_SECONDS * 1000,
+                PulsarAdminImpl.DEFAULT_REQUEST_TIMEOUT_SECONDS * 1000,
                 autoCertRefreshTimeSeconds,
                 conf);
     }
diff --git a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java
index ab1f0e41643f2..0feaef5dd8e99 100644
--- a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java
+++ b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/CmdFunctions.java
@@ -618,6 +618,8 @@ class LocalRunner extends FunctionDetailsCommand {
         protected String DEPRECATED_brokerServiceUrl;
         @Parameter(names = "--broker-service-url", description = "The URL for Pulsar broker")
         protected String brokerServiceUrl;
+        @Parameter(names = "--web-service-url", description = "The URL for Pulsar web service")
+        protected String webServiceUrl = null;
         // for backwards compatibility purposes
         @Parameter(names = "--clientAuthPlugin", description = "Client authentication plugin using which function-process can connect to broker", hidden = true)
         protected String DEPRECATED_clientAuthPlugin;
diff --git a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/PulsarAdminTool.java b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/PulsarAdminTool.java
index 0aab647c67b31..165936746008d 100644
--- a/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/PulsarAdminTool.java
+++ b/pulsar-client-tools/src/main/java/org/apache/pulsar/admin/cli/PulsarAdminTool.java
@@ -35,6 +35,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.admin.PulsarAdminBuilder;
+import org.apache.pulsar.client.admin.internal.PulsarAdminImpl;
 
 public class PulsarAdminTool {
 
@@ -54,7 +55,7 @@ public class PulsarAdminTool {
 
     @Parameter(names = { "--request-timeout" }, description = "Request time out in seconds for "
             + "the pulsar admin client for any request")
-    int requestTimeout = PulsarAdmin.DEFAULT_REQUEST_TIMEOUT_SECONDS;
+    int requestTimeout = PulsarAdminImpl.DEFAULT_REQUEST_TIMEOUT_SECONDS;
 
     @Parameter(
         names = { "--auth-params" },
diff --git a/pulsar-common/src/main/java/org/apache/pulsar/common/functions/ExternalPulsarConfig.java b/pulsar-common/src/main/java/org/apache/pulsar/common/functions/ExternalPulsarConfig.java
index fc16d4881abc5..d6be5df0479ec 100644
--- a/pulsar-common/src/main/java/org/apache/pulsar/common/functions/ExternalPulsarConfig.java
+++ b/pulsar-common/src/main/java/org/apache/pulsar/common/functions/ExternalPulsarConfig.java
@@ -36,6 +36,7 @@
 public class ExternalPulsarConfig {
     private String name;
     private String serviceURL;
+    private String webServiceURL;
     private AuthenticationConfig authConfig;
     private ProducerConfig producerConfig;
 }
diff --git a/pulsar-common/src/main/java/org/apache/pulsar/common/functions/FunctionConfig.java b/pulsar-common/src/main/java/org/apache/pulsar/common/functions/FunctionConfig.java
index 26c31da2155f9..1df42b935b1ec 100644
--- a/pulsar-common/src/main/java/org/apache/pulsar/common/functions/FunctionConfig.java
+++ b/pulsar-common/src/main/java/org/apache/pulsar/common/functions/FunctionConfig.java
@@ -126,6 +126,8 @@ public enum Runtime {
     // Max pending async requests per instance to avoid large number of concurrent requests.
     // Only used in AsyncFunction. Default: 1000.
     private Integer maxPendingAsyncRequests;
+    // Whether the pulsar admin client exposed to function context, default is disabled.
+    private Boolean exposePulsarAdminClientEnabled;
 
     private SubscriptionInitialPosition subscriptionPosition;
 }
diff --git a/pulsar-functions/api-java/pom.xml b/pulsar-functions/api-java/pom.xml
index 45974d7108441..7f2c605bab100 100644
--- a/pulsar-functions/api-java/pom.xml
+++ b/pulsar-functions/api-java/pom.xml
@@ -49,6 +49,13 @@
       <scope>compile</scope>
     </dependency>
 
+    <dependency>
+      <groupId>${project.groupId}</groupId>
+      <artifactId>pulsar-client-admin-api</artifactId>
+      <version>${project.version}</version>
+      <scope>compile</scope>
+    </dependency>
+
   </dependencies>
 
   <build>
diff --git a/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/Context.java b/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/Context.java
index f697f63efc96c..856b1b0ca44f3 100644
--- a/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/Context.java
+++ b/pulsar-functions/api-java/src/main/java/org/apache/pulsar/functions/api/Context.java
@@ -23,6 +23,8 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.ConsumerBuilder;
 import org.apache.pulsar.client.api.PulsarClientException;
 import org.apache.pulsar.client.api.Schema;
@@ -262,6 +264,21 @@ public interface Context {
      */
     String getSecret(String secretName);
 
+    /**
+     * Get the pulsar admin client.
+     *
+     * @return The instance of pulsar admin client
+     */
+    PulsarAdmin getPulsarAdmin();
+
+    /**
+     * Get the pulsar admin client by cluster name.
+     *
+     * @param clusterName The name of the cluster name for pulsar admin client
+     * @return The instance of pulsar admin client
+     */
+    PulsarAdmin getPulsarAdmin(String clusterName);
+
     /**
      * Record a user defined metric.
      *
@@ -306,7 +323,7 @@ public interface Context {
     /**
      * New output message using schema for serializing to the topic in the cluster
      *
-     * @parem clusterName the name of the cluster for topic
+     * @param clusterName the name of the cluster for topic
      * @param topicName The name of the topic for output message
      * @param schema provide a way to convert between serialized data and domain objects
      * @param <O>
diff --git a/pulsar-functions/instance/pom.xml b/pulsar-functions/instance/pom.xml
index 35102b8ab1fa9..1eaef7f147ca8 100644
--- a/pulsar-functions/instance/pom.xml
+++ b/pulsar-functions/instance/pom.xml
@@ -71,6 +71,12 @@
       <version>${project.version}</version>
     </dependency>
 
+     <dependency>
+      <groupId>${project.groupId}</groupId>
+      <artifactId>pulsar-client-admin-original</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
      <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>pulsar-client-original</artifactId>
diff --git a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java
index 85051f53ff1a4..e927332538661 100644
--- a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java
+++ b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/ContextImpl.java
@@ -36,6 +36,7 @@
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.CompressionType;
 import org.apache.pulsar.client.api.ConsumerBuilder;
 import org.apache.pulsar.client.api.HashingScheme;
@@ -80,7 +81,9 @@ class ContextImpl implements Context, SinkContext, SourceContext, AutoCloseable
     // Per Message related
     private Record<?> record;
 
+    @VisibleForTesting
     private String defaultPulsarCluster;
+    @VisibleForTesting
     private Map<String, PulsarCluster> externalPulsarClusters;
 
     private final SecretsProvider secretsProvider;
@@ -101,6 +104,8 @@ class ContextImpl implements Context, SinkContext, SourceContext, AutoCloseable
 
     private final static String[] userMetricsLabelNames;
 
+    private boolean exposePulsarAdminClientEnabled;
+
     static {
         // add label to indicate user metric
         userMetricsLabelNames = Arrays.copyOf(ComponentStatsManager.metricsLabelNames, ComponentStatsManager.metricsLabelNames.length + 1);
@@ -112,7 +117,7 @@ class ContextImpl implements Context, SinkContext, SourceContext, AutoCloseable
     public ContextImpl(InstanceConfig config, Logger logger, PulsarClient client,
                        SecretsProvider secretsProvider, CollectorRegistry collectorRegistry, String[] metricsLabels,
                        Function.FunctionDetails.ComponentType componentType, ComponentStatsManager statsManager,
-                       StateManager stateManager) {
+                       StateManager stateManager, PulsarAdmin pulsarAdmin) {
         this.config = config;
         this.logger = logger;
         this.statsManager = statsManager;
@@ -126,6 +131,7 @@ public ContextImpl(InstanceConfig config, Logger logger, PulsarClient client,
                 try {
                     this.externalPulsarClusters.put(entry.getKey(),
                             new PulsarCluster(InstanceUtils.createPulsarClient(entry.getValue().getServiceURL(), entry.getValue().getAuthConfig()),
+                                    config.isExposePulsarAdminClientEnabled() ? InstanceUtils.createPulsarAdminClient(entry.getValue().getWebServiceURL(), entry.getValue().getAuthConfig()) : null,
                                     ProducerConfigUtils.convert(entry.getValue().getProducerConfig())));
                 } catch (PulsarClientException ex) {
                     throw new RuntimeException("failed to create pulsar client for external cluster: " + entry.getKey(), ex);
@@ -133,7 +139,7 @@ public ContextImpl(InstanceConfig config, Logger logger, PulsarClient client,
             }
         }
         this.defaultPulsarCluster = "default-" + UUID.randomUUID();
-        this.externalPulsarClusters.put(defaultPulsarCluster, new PulsarCluster(client, config.getFunctionDetails().getSink().getProducerSpec()));
+        this.externalPulsarClusters.put(defaultPulsarCluster, new PulsarCluster(client, config.isExposePulsarAdminClientEnabled() ? pulsarAdmin : null, config.getFunctionDetails().getSink().getProducerSpec()));
 
         if (config.getFunctionDetails().getUserConfig().isEmpty()) {
             userConfigs = new HashMap<>();
@@ -182,6 +188,7 @@ public ContextImpl(InstanceConfig config, Logger logger, PulsarClient client,
             config.getFunctionDetails().getNamespace(),
             config.getFunctionDetails().getName()
         );
+        this.exposePulsarAdminClientEnabled = config.isExposePulsarAdminClientEnabled();
     }
 
     public void setCurrentMessageContext(Record<?> record) {
@@ -300,6 +307,26 @@ public String getSecret(String secretName) {
         }
     }
 
+    @Override
+    public PulsarAdmin getPulsarAdmin() {
+        return getPulsarAdmin(defaultPulsarCluster);
+    }
+
+    @Override
+    public PulsarAdmin getPulsarAdmin(String clusterName) {
+        if (exposePulsarAdminClientEnabled) {
+            PulsarCluster pulsarCluster = externalPulsarClusters.get(clusterName);
+            if (pulsarCluster != null) {
+                return pulsarCluster.getAdminClient();
+            } else {
+                throw new IllegalArgumentException("PulsarAdmin for cluster " + clusterName + " is not available, only "
+                        + externalPulsarClusters.keySet());
+            }
+        } else {
+            throw new IllegalStateException("PulsarAdmin is not enabled in function worker");
+        }
+    }
+
     @Override
     public <S extends StateStore> S getStateStore(String name) {
         return getStateStore(
@@ -640,6 +667,10 @@ public void close() {
                     futures.add(producer.closeAsync());
                 }
             }
+
+            if (exposePulsarAdminClientEnabled && pulsar.getAdminClient() != null) {
+                pulsar.getAdminClient().close();
+            }
         }
 
         try {
diff --git a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceConfig.java b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceConfig.java
index 1f030109e40f5..c70c103402893 100644
--- a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceConfig.java
+++ b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceConfig.java
@@ -19,6 +19,7 @@
 package org.apache.pulsar.functions.instance;
 
 import lombok.Data;
+import lombok.Getter;
 import org.apache.pulsar.functions.proto.Function;
 import org.apache.pulsar.functions.proto.Function.FunctionDetails;
 
@@ -39,6 +40,9 @@ public class InstanceConfig {
     // Max pending async requests per instance to avoid large number of concurrent requests.
     // Only used in AsyncFunction. Default: 1000
     private int maxPendingAsyncRequests = 1000;
+    // Whether the pulsar admin client exposed to function context, default is disabled.
+    @Getter
+    private boolean exposePulsarAdminClientEnabled = false;
 
     /**
      * Get the string representation of {@link #getInstanceId()}.
diff --git a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceUtils.java b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceUtils.java
index e855013ab2aeb..9c16bba05fe27 100644
--- a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceUtils.java
+++ b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/InstanceUtils.java
@@ -26,6 +26,8 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.pulsar.client.admin.PulsarAdmin;
+import org.apache.pulsar.client.admin.PulsarAdminBuilder;
 import org.apache.pulsar.client.api.ClientBuilder;
 import org.apache.pulsar.client.api.PulsarClient;
 import org.apache.pulsar.client.api.PulsarClientException;
@@ -171,6 +173,28 @@ && isNotBlank(authConfig.getClientAuthenticationParameters())) {
             clientBuilder.ioThreads(Runtime.getRuntime().availableProcessors());
             return clientBuilder.build();
         }
+        log.warn("pulsarServiceUrl cannot be null");
         return null;
     }
+
+    public static PulsarAdmin createPulsarAdminClient(String pulsarWebServiceUrl, AuthenticationConfig authConfig) throws PulsarClientException {
+        PulsarAdminBuilder pulsarAdminBuilder = null;
+        if (isNotBlank(pulsarWebServiceUrl)) {
+            pulsarAdminBuilder = PulsarAdmin.builder().serviceHttpUrl(pulsarWebServiceUrl);
+            if (authConfig != null) {
+                if (isNotBlank(authConfig.getClientAuthenticationPlugin())
+                        && isNotBlank(authConfig.getClientAuthenticationParameters())) {
+                    pulsarAdminBuilder.authentication(authConfig.getClientAuthenticationPlugin(),
+                            authConfig.getClientAuthenticationParameters());
+                }
+                if (isNotBlank(authConfig.getTlsTrustCertsFilePath())) {
+                    pulsarAdminBuilder.tlsTrustCertsFilePath(authConfig.getTlsTrustCertsFilePath());
+                }
+                pulsarAdminBuilder.allowTlsInsecureConnection(authConfig.isTlsAllowInsecureConnection());
+                pulsarAdminBuilder.enableTlsHostnameVerification(authConfig.isTlsHostnameVerificationEnable());
+            }
+            return pulsarAdminBuilder.build();
+        }
+        throw new PulsarClientException("pulsarWebServiceUrl cannot be null");
+    }
 }
diff --git a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java
index b5f55c0d4e194..c542f05956784 100644
--- a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java
+++ b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/JavaInstanceRunnable.java
@@ -40,6 +40,7 @@
 import org.apache.logging.log4j.core.LoggerContext;
 import org.apache.logging.log4j.core.config.Configuration;
 import org.apache.logging.log4j.core.config.LoggerConfig;
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.PulsarClient;
 import org.apache.pulsar.client.api.SubscriptionInitialPosition;
 import org.apache.pulsar.client.api.SubscriptionType;
@@ -89,6 +90,7 @@ public class JavaInstanceRunnable implements AutoCloseable, Runnable {
 
     // input topic consumer & output topic producer
     private final PulsarClientImpl client;
+    private final PulsarAdmin pulsarAdmin;
 
     private LogAppender logAppender;
 
@@ -135,6 +137,7 @@ public JavaInstanceRunnable(InstanceConfig instanceConfig,
                                 FunctionCacheManager fnCache,
                                 String jarFile,
                                 PulsarClient pulsarClient,
+                                PulsarAdmin pulsarAdmin,
                                 String stateStorageServiceUrl,
                                 SecretsProvider secretsProvider,
                                 CollectorRegistry collectorRegistry,
@@ -143,6 +146,7 @@ public JavaInstanceRunnable(InstanceConfig instanceConfig,
         this.fnCache = fnCache;
         this.jarFile = jarFile;
         this.client = (PulsarClientImpl) pulsarClient;
+        this.pulsarAdmin = pulsarAdmin;
         this.stateStorageServiceUrl = stateStorageServiceUrl;
         this.secretsProvider = secretsProvider;
         this.collectorRegistry = collectorRegistry;
@@ -234,7 +238,8 @@ ContextImpl setupContext() {
         Logger instanceLog = LoggerFactory.getILoggerFactory().getLogger(
                 "function-" + instanceConfig.getFunctionDetails().getName());
         return new ContextImpl(instanceConfig, instanceLog, client, secretsProvider,
-                collectorRegistry, metricsLabels, this.componentType, this.stats, stateManager);
+                collectorRegistry, metricsLabels, this.componentType, this.stats, stateManager,
+                pulsarAdmin);
     }
 
     /**
diff --git a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/PulsarCluster.java b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/PulsarCluster.java
index 58d879f98724e..41496f0ee872d 100644
--- a/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/PulsarCluster.java
+++ b/pulsar-functions/instance/src/main/java/org/apache/pulsar/functions/instance/PulsarCluster.java
@@ -20,6 +20,7 @@
 package org.apache.pulsar.functions.instance;
 
 import lombok.Getter;
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.BatcherBuilder;
 import org.apache.pulsar.client.api.Producer;
 import org.apache.pulsar.client.api.PulsarClient;
@@ -36,6 +37,9 @@ public class PulsarCluster {
     @Getter
     private PulsarClient client;
 
+    @Getter
+    private PulsarAdmin adminClient;
+
     @Getter
     private final TopicSchema topicSchema;
 
@@ -48,8 +52,9 @@ public class PulsarCluster {
     @Getter
     private ThreadLocal<Map<String, Producer<?>>> tlPublishProducers;
 
-    public PulsarCluster(PulsarClient client, ProducerSpec producerSpec) {
+    public PulsarCluster(PulsarClient client, PulsarAdmin adminClient, ProducerSpec producerSpec) {
         this.client = client;
+        this.adminClient = adminClient;
         this.topicSchema = new TopicSchema(client);
         this.producerBuilder = (ProducerBuilderImpl<?>) client.newProducer().blockIfQueueFull(true).enableBatching(true)
                 .batchingMaxPublishDelay(1, TimeUnit.MILLISECONDS);
diff --git a/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/ContextImplTest.java b/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/ContextImplTest.java
index 0305c2fa310f1..ceb87c3197387 100644
--- a/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/ContextImplTest.java
+++ b/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/ContextImplTest.java
@@ -29,6 +29,8 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertNull;
 
 import io.prometheus.client.CollectorRegistry;
 
@@ -36,6 +38,7 @@
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.Producer;
 import org.apache.pulsar.client.api.Schema;
 import org.apache.pulsar.client.api.TypedMessageBuilder;
@@ -61,18 +64,21 @@ public class ContextImplTest {
     private InstanceConfig config;
     private Logger logger;
     private PulsarClientImpl client;
+    private PulsarAdmin pulsarAdmin;
     private ContextImpl context;
     private Producer producer = mock(Producer.class);
 
     @BeforeMethod
     public void setup() {
         config = new InstanceConfig();
+        config.setExposePulsarAdminClientEnabled(true);
         FunctionDetails functionDetails = FunctionDetails.newBuilder()
             .setUserConfig("")
             .build();
         config.setFunctionDetails(functionDetails);
         logger = mock(Logger.class);
         client = mock(PulsarClientImpl.class);
+        pulsarAdmin = mock(PulsarAdmin.class);
         when(client.newProducer()).thenReturn(new ProducerBuilderImpl(client, Schema.BYTES));
         when(client.createProducerAsync(any(ProducerConfigurationData.class), any(), any()))
                 .thenReturn(CompletableFuture.completedFuture(producer));
@@ -87,7 +93,8 @@ public void setup() {
             logger,
             client,
             new EnvironmentBasedSecretsProvider(), new CollectorRegistry(), new String[0],
-                FunctionDetails.ComponentType.FUNCTION, null, new InstanceStateManager());
+                FunctionDetails.ComponentType.FUNCTION, null, new InstanceStateManager(),
+                pulsarAdmin);
         context.setCurrentMessageContext((Record<String>) () -> null);
     }
 
@@ -157,4 +164,27 @@ public void testGetStateStateEnabled() throws Exception {
     public void testPublishUsingDefaultSchema() throws Exception {
         context.newOutputMessage("sometopic", null).value("Somevalue").sendAsync();
     }
+
+    @Test
+    public void testGetPulsarAdmin() throws Exception {
+        assertEquals(context.getPulsarAdmin(), pulsarAdmin);
+    }
+
+    @Test(expectedExceptions = IllegalArgumentException.class)
+    public void testGetPulsarAdminWithNonExistClusterName() {
+        assertNull(context.getPulsarAdmin("foo"));
+    }
+
+    @Test(expectedExceptions = IllegalStateException.class)
+    public void testGetPulsarAdminWithExposePulsarAdminDisabled() {
+        config.setExposePulsarAdminClientEnabled(false);
+        context = new ContextImpl(
+                config,
+                logger,
+                client,
+                new EnvironmentBasedSecretsProvider(), new CollectorRegistry(), new String[0],
+                FunctionDetails.ComponentType.FUNCTION, null, new InstanceStateManager(),
+                pulsarAdmin);
+        context.getPulsarAdmin();
+    }
  }
diff --git a/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java b/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java
index 691b1fe64ed1a..9286b94e00be9 100644
--- a/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java
+++ b/pulsar-functions/instance/src/test/java/org/apache/pulsar/functions/instance/JavaInstanceRunnableTest.java
@@ -59,7 +59,7 @@ private static InstanceConfig createInstanceConfig(String outputSerde) {
     private JavaInstanceRunnable createRunnable(String outputSerde) throws Exception {
         InstanceConfig config = createInstanceConfig(outputSerde);
         JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(
-                config, null, null, null, null, null, null, null);
+                config, null, null, null, null, null, null, null, null);
         return javaInstanceRunnable;
     }
 
diff --git a/pulsar-functions/java-examples/pom.xml b/pulsar-functions/java-examples/pom.xml
index 104f5b79a0125..5e56a92462c9f 100644
--- a/pulsar-functions/java-examples/pom.xml
+++ b/pulsar-functions/java-examples/pom.xml
@@ -46,6 +46,11 @@
       <artifactId>pulsar-client-api</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>${project.groupId}</groupId>
+      <artifactId>pulsar-client-admin-api</artifactId>
+      <version>${project.version}</version>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/CursorManagementFunction.java b/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/CursorManagementFunction.java
new file mode 100644
index 0000000000000..5999b2ca08fe5
--- /dev/null
+++ b/pulsar-functions/java-examples/src/main/java/org/apache/pulsar/functions/api/examples/CursorManagementFunction.java
@@ -0,0 +1,48 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.pulsar.functions.api.examples;
+
+import org.apache.pulsar.client.admin.PulsarAdmin;
+import org.apache.pulsar.functions.api.Context;
+import org.apache.pulsar.functions.api.Function;
+
+/**
+ * A function that demonstrates how to use pulsar admin client exposed from
+ * Function Context. In this particular example, for every input message,
+ * the function do reset cursor of current function's subscription to a
+ * specified timestamp.
+ */
+public class CursorManagementFunction implements Function<String, String> {
+
+    @Override
+    public String process(String input, Context context) throws Exception {
+        PulsarAdmin adminClient = context.getPulsarAdmin();
+        if (adminClient != null) {
+            String topic = context.getCurrentRecord().getTopicName().isPresent() ?
+                    context.getCurrentRecord().getTopicName().get() : null;
+            String subName = context.getTenant() + "/" + context.getNamespace() + "/" + context.getFunctionName();
+            if (topic != null) {
+                // 1578188166 below is a random-pick timestamp
+                adminClient.topics().resetCursor(topic, subName, 1578188166);
+                return "reset cursor successfully";
+            }
+        }
+        return null;
+    }
+}
diff --git a/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java b/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java
index d4c67790a38b8..d9cd5c9c5eb1c 100644
--- a/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java
+++ b/pulsar-functions/localrun/src/main/java/org/apache/pulsar/functions/LocalRunner.java
@@ -135,6 +135,8 @@ public RuntimeEnv convert(String value) {
     protected String stateStorageServiceUrl;
     @Parameter(names = "--brokerServiceUrl", description = "The URL for the Pulsar broker", hidden = true)
     protected String brokerServiceUrl;
+    @Parameter(names = "--webServiceUrl", description = "The URL for the Pulsar web service", hidden = true)
+    protected String webServiceUrl = null;
     @Parameter(names = "--clientAuthPlugin", description = "Client authentication plugin using which function-process can connect to broker", hidden = true)
     protected String clientAuthPlugin;
     @Parameter(names = "--clientAuthParams", description = "Client authentication param", hidden = true)
@@ -157,6 +159,7 @@ public RuntimeEnv convert(String value) {
     protected String secretsProviderConfig;
 
     private static final String DEFAULT_SERVICE_URL = "pulsar://localhost:6650";
+    private static final String DEFAULT_WEB_SERVICE_URL = "http://localhost:8080";
 
     public static void main(String[] args) throws Exception {
         LocalRunner localRunner = LocalRunner.builder().build();
@@ -341,6 +344,9 @@ public void start(boolean blocking) throws Exception {
             if (brokerServiceUrl != null) {
                 serviceUrl = brokerServiceUrl;
             }
+            if (webServiceUrl == null) {
+                webServiceUrl = DEFAULT_WEB_SERVICE_URL;
+            }
 
             if ((sourceConfig != null || sinkConfig != null || functionConfig.getRuntime() == FunctionConfig.Runtime.JAVA)
                     && (runtimeEnv == null || runtimeEnv == RuntimeEnv.THREAD)) {
@@ -369,6 +375,7 @@ private void startProcessMode(org.apache.pulsar.functions.proto.Function.Functio
         SecretsProviderConfigurator secretsProviderConfigurator = getSecretsProviderConfigurator();
         try (ProcessRuntimeFactory containerFactory = new ProcessRuntimeFactory(
                 serviceUrl,
+                webServiceUrl,
                 stateStorageServiceUrl,
                 authConfig,
                 null, /* java instance jar file */
@@ -391,6 +398,9 @@ private void startProcessMode(org.apache.pulsar.functions.proto.Function.Functio
                 instanceConfig.setClusterName("local");
                 if (functionConfig != null) {
                     instanceConfig.setMaxPendingAsyncRequests(functionConfig.getMaxPendingAsyncRequests());
+                    if (functionConfig.getExposePulsarAdminClientEnabled() != null) {
+                        instanceConfig.setExposePulsarAdminClientEnabled(functionConfig.getExposePulsarAdminClientEnabled());
+                    }
                 }
                 RuntimeSpawner runtimeSpawner = new RuntimeSpawner(
                         instanceConfig,
@@ -447,12 +457,17 @@ private void startThreadedMode(org.apache.pulsar.functions.proto.Function.Functi
         } else {
             secretsProvider = new ClearTextSecretsProvider();
         }
+        boolean exposePulsarAdminClientEnabled = false;
+        if (functionConfig != null && functionConfig.getExposePulsarAdminClientEnabled() != null) {
+            exposePulsarAdminClientEnabled = functionConfig.getExposePulsarAdminClientEnabled();
+        }
         ThreadRuntimeFactory threadRuntimeFactory = new ThreadRuntimeFactory("LocalRunnerThreadGroup",
                 serviceUrl,
                 stateStorageServiceUrl,
                 authConfig,
                 secretsProvider,
-                null, narExtractionDirectory, null);
+                null, narExtractionDirectory, null,
+                exposePulsarAdminClientEnabled, webServiceUrl);
         for (int i = 0; i < parallelism; ++i) {
             InstanceConfig instanceConfig = new InstanceConfig();
             instanceConfig.setFunctionDetails(functionDetails);
@@ -465,6 +480,9 @@ private void startThreadedMode(org.apache.pulsar.functions.proto.Function.Functi
             instanceConfig.setClusterName("local");
             if (functionConfig != null) {
                 instanceConfig.setMaxPendingAsyncRequests(functionConfig.getMaxPendingAsyncRequests());
+                if (functionConfig.getExposePulsarAdminClientEnabled() != null) {
+                    instanceConfig.setExposePulsarAdminClientEnabled(functionConfig.getExposePulsarAdminClientEnabled());
+                }
             }
             RuntimeSpawner runtimeSpawner = new RuntimeSpawner(
                     instanceConfig,
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceStarter.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceStarter.java
index 6b342216a4436..77441980c60d6 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceStarter.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/JavaInstanceStarter.java
@@ -132,6 +132,12 @@ public class JavaInstanceStarter implements AutoCloseable {
     @Parameter(names = "--pending_async_requests", description = "Max pending async requests per instance", required = false)
     public int maxPendingAsyncRequests = 1000;
 
+    @Parameter(names = "--web_serviceurl", description = "Pulsar Web Service Url", required = false)
+    public String webServiceUrl = null;
+
+    @Parameter(names = "--expose_pulsaradmin", description = "Whether the pulsar admin client exposed to function context, default is disabled.", required = false)
+    public Boolean exposePulsarAdminClientEnabled = false;
+
     private Server server;
     private RuntimeSpawner runtimeSpawner;
     private ThreadRuntimeFactory containerFactory;
@@ -155,6 +161,7 @@ public void start(String[] args, ClassLoader functionInstanceClassLoader, ClassL
         instanceConfig.setMaxBufferedTuples(maxBufferedTuples);
         instanceConfig.setClusterName(clusterName);
         instanceConfig.setMaxPendingAsyncRequests(maxPendingAsyncRequests);
+        instanceConfig.setExposePulsarAdminClientEnabled(exposePulsarAdminClientEnabled);
         Function.FunctionDetails.Builder functionDetailsBuilder = Function.FunctionDetails.newBuilder();
         if (functionDetailsJsonString.charAt(0) == '\'') {
             functionDetailsJsonString = functionDetailsJsonString.substring(1);
@@ -202,7 +209,8 @@ public void start(String[] args, ClassLoader functionInstanceClassLoader, ClassL
                         .tlsAllowInsecureConnection(isTrue(tlsAllowInsecureConnection))
                         .tlsHostnameVerificationEnable(isTrue(tlsHostNameVerificationEnabled))
                         .tlsTrustCertsFilePath(tlsTrustCertFilePath).build(),
-                secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader);
+                secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader,
+                exposePulsarAdminClientEnabled, webServiceUrl);
         runtimeSpawner = new RuntimeSpawner(
                 instanceConfig,
                 jarFile,
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java
index db41eb6f61d56..0c7db6ef83a6e 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/RuntimeUtils.java
@@ -72,7 +72,8 @@ public static List<String> composeCmd(InstanceConfig instanceConfig,
                                           String pythonExtraDependencyRepository,
                                           int metricsPort,
                                           String narExtractionDirectory,
-                                          String functionInstanceClassPath) throws Exception {
+                                          String functionInstanceClassPath,
+                                          String pulsarWebServiceUrl) throws Exception {
 
         final List<String> cmd = getArgsBeforeCmd(instanceConfig, extraDependenciesDir);
 
@@ -82,7 +83,7 @@ public static List<String> composeCmd(InstanceConfig instanceConfig,
                 logConfigFile, secretsProviderClassName, secretsProviderConfig,
                 installUserCodeDependencies, pythonDependencyRepository,
                 pythonExtraDependencyRepository, metricsPort, narExtractionDirectory,
-                functionInstanceClassPath, false));
+                functionInstanceClassPath, false, pulsarWebServiceUrl));
         return cmd;
     }
 
@@ -262,7 +263,8 @@ public static List<String> getCmd(InstanceConfig instanceConfig,
                                       int metricsPort,
                                       String narExtractionDirectory,
                                       String functionInstanceClassPath,
-                                      boolean k8sRuntime) throws Exception {
+                                      boolean k8sRuntime,
+                                      String pulsarWebServiceUrl) throws Exception {
         final List<String> args = new LinkedList<>();
 
         if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.GO) {
@@ -360,6 +362,16 @@ public static List<String> getCmd(InstanceConfig instanceConfig,
 
         args.add("--pulsar_serviceurl");
         args.add(pulsarServiceUrl);
+        if (instanceConfig.getFunctionDetails().getRuntime() == Function.FunctionDetails.Runtime.JAVA) {
+            // TODO: for now only Java function context exposed pulsar admin, so python/go no need to pass this argument
+            // until pulsar admin client enabled in python/go function context.
+            // For backward compatibility, pass `--web_serviceurl` parameter only if
+            // exposed pulsar admin client enabled.
+            if (instanceConfig.isExposePulsarAdminClientEnabled() && StringUtils.isNotBlank(pulsarWebServiceUrl)) {
+                args.add("--web_serviceurl");
+                args.add(pulsarWebServiceUrl);
+            }
+        }
         if (authConfig != null) {
             if (isNotBlank(authConfig.getClientAuthenticationPlugin())
                     && isNotBlank(authConfig.getClientAuthenticationParameters())) {
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntime.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntime.java
index d0d03bc192146..5dafbf2d7ac27 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntime.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntime.java
@@ -271,7 +271,8 @@ public class KubernetesRuntime implements Runtime {
                         metricsPort,
                         narExtractionDirectory,
                         functinoInstanceClassPath,
-                        true));
+                        true,
+                        pulsarAdminUrl));
 
         doChecks(instanceConfig.getFunctionDetails(), this.jobName);
     }
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntime.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntime.java
index 0b75f3d54e098..b6fcb0057e81d 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntime.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntime.java
@@ -87,7 +87,8 @@ class ProcessRuntime implements Runtime {
                    String stateStorageServiceUrl,
                    AuthenticationConfig authConfig,
                    SecretsProviderConfigurator secretsProviderConfigurator,
-                   Long expectedHealthCheckInterval) throws Exception {
+                   Long expectedHealthCheckInterval,
+                   String pulsarWebServiceUrl) throws Exception {
         this.instanceConfig = instanceConfig;
         this.instancePort = instanceConfig.getPort();
         this.metricsPort = FunctionCommon.findAvailablePort();
@@ -135,7 +136,8 @@ class ProcessRuntime implements Runtime {
             null,
                 this.metricsPort,
                 narExtractionDirectory,
-                null);
+                null,
+                pulsarWebServiceUrl);
     }
 
     /**
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeFactory.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeFactory.java
index 0606afc372b1e..04b871cb8b1fe 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeFactory.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeFactory.java
@@ -50,6 +50,7 @@
 public class ProcessRuntimeFactory implements RuntimeFactory {
 
     private String pulsarServiceUrl;
+    private String pulsarWebServiceUrl;
     private String stateStorageServiceUrl;
     private boolean authenticationEnabled;
     private AuthenticationConfig authConfig;
@@ -72,6 +73,7 @@ public class ProcessRuntimeFactory implements RuntimeFactory {
 
     @VisibleForTesting
     public ProcessRuntimeFactory(String pulsarServiceUrl,
+                                 String pulsarWebServiceUrl,
                                  String stateStorageServiceUrl,
                                  AuthenticationConfig authConfig,
                                  String javaInstanceJarFile,
@@ -84,7 +86,7 @@ public ProcessRuntimeFactory(String pulsarServiceUrl,
                                  Optional<FunctionAuthProvider> functionAuthProvider,
                                  Optional<RuntimeCustomizer> runtimeCustomizer) {
 
-        initialize(pulsarServiceUrl, stateStorageServiceUrl, authConfig, javaInstanceJarFile,
+        initialize(pulsarServiceUrl, pulsarWebServiceUrl, stateStorageServiceUrl, authConfig, javaInstanceJarFile,
                 pythonInstanceFile, logDirectory, extraDependenciesDir, narExtractionDirectory,
                 secretsProviderConfigurator, authenticationEnabled, functionAuthProvider, runtimeCustomizer);
     }
@@ -98,6 +100,7 @@ public void initialize(WorkerConfig workerConfig, AuthenticationConfig authentic
                 workerConfig.getFunctionRuntimeFactoryConfigs(), ProcessRuntimeFactoryConfig.class);
 
         initialize(workerConfig.getPulsarServiceUrl(),
+                workerConfig.getPulsarWebServiceUrl(),
                 workerConfig.getStateStorageServiceUrl(),
                 authenticationConfig,
                 factoryConfig.getJavaInstanceJarLocation(),
@@ -112,6 +115,7 @@ public void initialize(WorkerConfig workerConfig, AuthenticationConfig authentic
     }
 
     private void initialize(String pulsarServiceUrl,
+                            String pulsarWebServiceUrl,
                             String stateStorageServiceUrl,
                             AuthenticationConfig authConfig,
                             String javaInstanceJarFile,
@@ -124,6 +128,7 @@ private void initialize(String pulsarServiceUrl,
                             Optional<FunctionAuthProvider> functionAuthProvider,
                             Optional<RuntimeCustomizer> runtimeCustomizer) {
         this.pulsarServiceUrl = pulsarServiceUrl;
+        this.pulsarWebServiceUrl = pulsarWebServiceUrl;
         this.stateStorageServiceUrl = stateStorageServiceUrl;
         this.authConfig = authConfig;
         this.secretsProviderConfigurator = secretsProviderConfigurator;
@@ -220,7 +225,8 @@ public ProcessRuntime createContainer(InstanceConfig instanceConfig, String code
             stateStorageServiceUrl,
             authConfig,
             secretsProviderConfigurator,
-            expectedHealthCheckInterval);
+            expectedHealthCheckInterval,
+            pulsarWebServiceUrl);
     }
 
     @Override
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntime.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntime.java
index d053b208e38f0..f8b0a347fac53 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntime.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntime.java
@@ -25,6 +25,7 @@
 import io.prometheus.client.CollectorRegistry;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.PulsarClient;
 import org.apache.pulsar.functions.instance.InstanceConfig;
 import org.apache.pulsar.functions.proto.Function;
@@ -54,6 +55,7 @@ public class ThreadRuntime implements Runtime {
     private FunctionCacheManager fnCache;
     private String jarFile;
     private PulsarClient pulsarClient;
+    private PulsarAdmin pulsarAdmin;
     private String stateStorageServiceUrl;
     private SecretsProvider secretsProvider;
     private CollectorRegistry collectorRegistry;
@@ -63,6 +65,7 @@ public class ThreadRuntime implements Runtime {
                   ThreadGroup threadGroup,
                   String jarFile,
                   PulsarClient pulsarClient,
+                  PulsarAdmin pulsarAdmin,
                   String stateStorageServiceUrl,
                   SecretsProvider secretsProvider,
                   CollectorRegistry collectorRegistry,
@@ -76,6 +79,7 @@ public class ThreadRuntime implements Runtime {
         this.fnCache = fnCache;
         this.jarFile = jarFile;
         this.pulsarClient = pulsarClient;
+        this.pulsarAdmin = pulsarAdmin;
         this.stateStorageServiceUrl = stateStorageServiceUrl;
         this.secretsProvider = secretsProvider;
         this.collectorRegistry = collectorRegistry;
@@ -85,6 +89,7 @@ public class ThreadRuntime implements Runtime {
                 fnCache,
                 jarFile,
                 pulsarClient,
+                pulsarAdmin,
                 stateStorageServiceUrl,
                 secretsProvider,
                 collectorRegistry,
@@ -102,6 +107,7 @@ public void start() {
                 fnCache,
                 jarFile,
                 pulsarClient,
+                pulsarAdmin,
                 stateStorageServiceUrl,
                 secretsProvider,
                 collectorRegistry,
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntimeFactory.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntimeFactory.java
index 7601dfa76d452..b34d7a85d6240 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntimeFactory.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/runtime/thread/ThreadRuntimeFactory.java
@@ -24,6 +24,7 @@
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.pulsar.client.admin.PulsarAdmin;
 import org.apache.pulsar.client.api.PulsarClient;
 import org.apache.pulsar.client.api.PulsarClientException;
 import org.apache.pulsar.functions.auth.FunctionAuthProvider;
@@ -54,6 +55,7 @@ public class ThreadRuntimeFactory implements RuntimeFactory {
     private ThreadGroup threadGroup;
     private FunctionCacheManager fnCache;
     private PulsarClient pulsarClient;
+    private PulsarAdmin pulsarAdmin;
     private String storageServiceUrl;
     private SecretsProvider defaultSecretsProvider;
     private CollectorRegistry collectorRegistry;
@@ -69,23 +71,26 @@ public class ThreadRuntimeFactory implements RuntimeFactory {
     public ThreadRuntimeFactory(String threadGroupName, String pulsarServiceUrl, String storageServiceUrl,
                                 AuthenticationConfig authConfig, SecretsProvider secretsProvider,
                                 CollectorRegistry collectorRegistry, String narExtractionDirectory,
-                                ClassLoader rootClassLoader) throws Exception {
+                                ClassLoader rootClassLoader, boolean exposePulsarAdminClientEnabled,
+                                String pulsarWebServiceUrl) throws Exception {
         initialize(threadGroupName, InstanceUtils.createPulsarClient(pulsarServiceUrl, authConfig),
-                storageServiceUrl, null, secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader);
+                storageServiceUrl, null, secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader,
+                exposePulsarAdminClientEnabled ? InstanceUtils.createPulsarAdminClient(pulsarWebServiceUrl, authConfig) : null);
     }
 
     @VisibleForTesting
     public ThreadRuntimeFactory(String threadGroupName, PulsarClient pulsarClient, String storageServiceUrl,
                                 SecretsProvider secretsProvider, CollectorRegistry collectorRegistry,
-                                String narExtractionDirectory, ClassLoader rootClassLoader) {
+                                String narExtractionDirectory, ClassLoader rootClassLoader, PulsarAdmin pulsarAdmin) {
 
         initialize(threadGroupName, pulsarClient, storageServiceUrl,
-                null, secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader);
+                null, secretsProvider, collectorRegistry, narExtractionDirectory, rootClassLoader, pulsarAdmin);
     }
 
     private void initialize(String threadGroupName, PulsarClient pulsarClient, String storageServiceUrl,
                             SecretsProviderConfigurator secretsProviderConfigurator, SecretsProvider secretsProvider,
-                            CollectorRegistry collectorRegistry,  String narExtractionDirectory, ClassLoader rootClassLoader) {
+                            CollectorRegistry collectorRegistry,  String narExtractionDirectory, ClassLoader rootClassLoader,
+                            PulsarAdmin pulsarAdmin) {
         if (rootClassLoader == null) {
             rootClassLoader = Thread.currentThread().getContextClassLoader();
         }
@@ -96,6 +101,7 @@ private void initialize(String threadGroupName, PulsarClient pulsarClient, Strin
         this.fnCache = new FunctionCacheManagerImpl(rootClassLoader);
         this.threadGroup = new ThreadGroup(threadGroupName);
         this.pulsarClient = pulsarClient;
+        this.pulsarAdmin = pulsarAdmin;
         this.storageServiceUrl = storageServiceUrl;
         this.collectorRegistry = collectorRegistry;
         this.narExtractionDirectory = narExtractionDirectory;
@@ -112,7 +118,10 @@ public void initialize(WorkerConfig workerConfig, AuthenticationConfig authentic
         initialize(factoryConfig.getThreadGroupName(),
                 InstanceUtils.createPulsarClient(workerConfig.getPulsarServiceUrl(), authenticationConfig),
                 workerConfig.getStateStorageServiceUrl(), secretsProviderConfigurator, null,
-                null, workerConfig.getNarExtractionDirectory(), null);
+                null, workerConfig.getNarExtractionDirectory(), null,
+                workerConfig.isExposeAdminClientEnabled() ?
+                        InstanceUtils.createPulsarAdminClient(workerConfig.getPulsarWebServiceUrl(),
+                                authenticationConfig) : null);
     }
 
     @Override
@@ -134,6 +143,7 @@ public ThreadRuntime createContainer(InstanceConfig instanceConfig, String jarFi
             threadGroup,
             jarFile,
             pulsarClient,
+            pulsarAdmin,
             storageServiceUrl,
             secretsProvider,
             collectorRegistry,
@@ -154,6 +164,7 @@ public void close() {
         } catch (PulsarClientException e) {
             log.warn("Failed to close pulsar client when closing function container factory", e);
         }
+        pulsarAdmin.close();
 
         // Shutdown instance cache
         InstanceCache.shutdown();
diff --git a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
index 1bde75d4fc6c1..08715ddfca81e 100644
--- a/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
+++ b/pulsar-functions/runtime/src/main/java/org/apache/pulsar/functions/worker/WorkerConfig.java
@@ -527,6 +527,12 @@ public String getFunctionAssignmentTopic() {
     )
     private String functionsWorkerServiceNarPackage = "";
 
+    @FieldContext(
+            category = CATEGORY_WORKER,
+            doc = "Enable to expose Pulsar Admin Client from Function Context, default is disabled"
+    )
+    private boolean exposeAdminClientEnabled = false;
+
     public static WorkerConfig load(String yamlFile) throws IOException {
         if (isBlank(yamlFile)) {
             return new WorkerConfig();
diff --git a/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntimeTest.java b/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntimeTest.java
index 8605ef19f448f..ebc48789e448f 100644
--- a/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntimeTest.java
+++ b/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/kubernetes/KubernetesRuntimeTest.java
@@ -255,6 +255,13 @@ FunctionDetails createFunctionDetails(FunctionDetails.Runtime runtime, boolean a
         return customize.apply(functionDetailsBuilder).build();
     }
 
+    InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime, boolean addSecrets,
+                                            boolean exposePulsarAdminClientEnabled) {
+        InstanceConfig config = createJavaInstanceConfig(runtime, addSecrets);
+        config.setExposePulsarAdminClientEnabled(exposePulsarAdminClientEnabled);
+        return config;
+    }
+
     InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime, boolean addSecrets) {
         InstanceConfig config = new InstanceConfig();
 
@@ -376,10 +383,17 @@ private void verifyJavaInstance(InstanceConfig config, String depsDir, boolean s
         if (secretsAttached) {
             totalArgs += 4;
         }
+        if (config.isExposePulsarAdminClientEnabled()) {
+            totalArgs += 2;
+            portArg += 2;
+            metricsPortArg += 2;
+        }
 
         assertEquals(args.size(), totalArgs,
                 "Actual args : " + StringUtils.join(args, " "));
 
+        String pulsarAdminArg = config.isExposePulsarAdminClientEnabled() ? " --web_serviceurl " + pulsarAdminUrl : "";
+
         String expectedArgs = "exec java -cp " + classpath
                 + extraDepsEnv
                 + " -Dpulsar.functions.instance.classpath=/pulsar/lib/*"
@@ -393,6 +407,7 @@ private void verifyJavaInstance(InstanceConfig config, String depsDir, boolean s
                 + " --function_version " + config.getFunctionVersion()
                 + " --function_details '" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())
                 + "' --pulsar_serviceurl " + pulsarServiceUrl
+                + pulsarAdminArg
                 + " --max_buffered_tuples 1024 --port " + args.get(portArg) + " --metrics_port " + args.get(metricsPortArg)
                 + " --state_storage_serviceurl " + stateStorageServiceUrl
                 + " --expected_healthcheck_interval -1";
@@ -861,4 +876,21 @@ private void verifyGolangInstance(InstanceConfig config) throws Exception {
         assertEquals(containerSpec.getResources().getLimits().get("cpu").getNumber().doubleValue(), RESOURCES.getCpu());
     }
 
+    @Test
+    public void testKubernetesRuntimeWithExposeAdminClientEnabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, false, true);
+
+        factory = createKubernetesRuntimeFactory(null, 10, 1.0, 1.0);
+
+        verifyJavaInstance(config, pulsarRootDir + "/instances/deps", false);
+    }
+
+    @Test
+    public void testKubernetesRuntimeWithExposeAdminClientDisabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, false, false);
+
+        factory = createKubernetesRuntimeFactory(null, 10, 1.0, 1.0);
+
+        verifyJavaInstance(config, pulsarRootDir + "/instances/deps", false);
+    }
 }
diff --git a/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeTest.java b/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeTest.java
index 8a71a7c622551..66090f5c2e81f 100644
--- a/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeTest.java
+++ b/pulsar-functions/runtime/src/test/java/org/apache/pulsar/functions/runtime/process/ProcessRuntimeTest.java
@@ -59,6 +59,7 @@
  */
 public class ProcessRuntimeTest {
     private String narExtractionDirectory = "/tmp/foo";
+    private String defaultWebServiceUrl = "http://localhost:8080";
 
     class TestSecretsProviderConfigurator implements SecretsProviderConfigurator {
 
@@ -143,6 +144,11 @@ public void tearDown() {
     }
 
     private ProcessRuntimeFactory createProcessRuntimeFactory(String extraDependenciesDir) {
+        return createProcessRuntimeFactory(extraDependenciesDir, null, false);
+    }
+
+    private ProcessRuntimeFactory createProcessRuntimeFactory(String extraDependenciesDir, String webServiceUrl,
+                                                              boolean exposePulsarAdminClientEnabled) {
         ProcessRuntimeFactory processRuntimeFactory = new ProcessRuntimeFactory();
 
         WorkerConfig workerConfig = new WorkerConfig();
@@ -150,6 +156,10 @@ private ProcessRuntimeFactory createProcessRuntimeFactory(String extraDependenci
         workerConfig.setStateStorageServiceUrl(stateStorageServiceUrl);
         workerConfig.setAuthenticationEnabled(false);
         workerConfig.setNarExtractionDirectory(narExtractionDirectory);
+        if (webServiceUrl != null) {
+            workerConfig.setPulsarWebServiceUrl(webServiceUrl);
+        }
+        workerConfig.setExposeAdminClientEnabled(exposePulsarAdminClientEnabled);
 
         ProcessRuntimeFactoryConfig processRuntimeFactoryConfig = new ProcessRuntimeFactoryConfig();
         processRuntimeFactoryConfig.setJavaInstanceJarLocation(javaInstanceJarFile);
@@ -200,6 +210,12 @@ InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime) {
         return config;
     }
 
+    InstanceConfig createJavaInstanceConfig(FunctionDetails.Runtime runtime, boolean exposePulsarAdminClientEnabled) {
+        InstanceConfig config = createJavaInstanceConfig(runtime);
+        config.setExposePulsarAdminClientEnabled(exposePulsarAdminClientEnabled);
+        return config;
+    }
+
     @Test
     public void testJavaConstructor() throws Exception {
         InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA);
@@ -264,10 +280,14 @@ public void testJavaConstructorWithDeps() throws Exception {
     }
 
     private void verifyJavaInstance(InstanceConfig config) throws Exception {
-        verifyJavaInstance(config, null);
+        verifyJavaInstance(config, null, null);
     }
 
     private void verifyJavaInstance(InstanceConfig config, Path depsDir) throws Exception {
+        verifyJavaInstance(config, depsDir, null);
+    }
+
+    private void verifyJavaInstance(InstanceConfig config, Path depsDir, String webServiceUrl) throws Exception {
         ProcessRuntime container = factory.createContainer(config, userJarFile, null, 30l);
         List<String> args = container.getProcessArgs();
 
@@ -275,18 +295,29 @@ private void verifyJavaInstance(InstanceConfig config, Path depsDir) throws Exce
         String extraDepsEnv;
         int portArg;
         int metricsPortArg;
+        int totalArgCount = 39;
+        if (webServiceUrl != null && config.isExposePulsarAdminClientEnabled()) {
+            totalArgCount += 2;
+        }
         if (null != depsDir) {
-            assertEquals(args.size(), 39);
+            assertEquals(args.size(), totalArgCount);
             extraDepsEnv = " -Dpulsar.functions.extra.dependencies.dir=" + depsDir.toString();
             classpath = classpath + ":" + depsDir + "/*";
             portArg = 24;
             metricsPortArg = 26;
         } else {
-            assertEquals(args.size(), 38);
+            assertEquals(args.size(), totalArgCount-1);
             extraDepsEnv = "";
             portArg = 23;
             metricsPortArg = 25;
         }
+        if (webServiceUrl != null && config.isExposePulsarAdminClientEnabled()) {
+            portArg += 2;
+            metricsPortArg += 2;
+        }
+
+        String pulsarAdminArg = webServiceUrl != null && config.isExposePulsarAdminClientEnabled() ?
+                " --web_serviceurl " + webServiceUrl : "";
 
         String expectedArgs = "java -cp " + classpath
                 + extraDepsEnv
@@ -300,6 +331,7 @@ private void verifyJavaInstance(InstanceConfig config, Path depsDir) throws Exce
                 + " --function_version " + config.getFunctionVersion()
                 + " --function_details '" + JsonFormat.printer().omittingInsignificantWhitespace().print(config.getFunctionDetails())
                 + "' --pulsar_serviceurl " + pulsarServiceUrl
+                + pulsarAdminArg
                 + " --max_buffered_tuples 1024 --port " + args.get(portArg) + " --metrics_port " + args.get(metricsPortArg)
                 + " --state_storage_serviceurl " + stateStorageServiceUrl
                 + " --expected_healthcheck_interval 30"
@@ -358,4 +390,40 @@ private void verifyPythonInstance(InstanceConfig config, String extraDepsDir) th
         assertEquals(String.join(" ", args), expectedArgs);
     }
 
+    @Test
+    public void testJavaConstructorWithWebServiceUrlAndExposePulsarAdminClientEnabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, true);
+
+        factory = createProcessRuntimeFactory(null, defaultWebServiceUrl, true);
+
+        verifyJavaInstance(config, null, defaultWebServiceUrl);
+    }
+
+    @Test
+    public void testJavaConstructorWithWebServiceUrlAndExposePulsarAdminClientDisabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, false);
+
+        factory = createProcessRuntimeFactory(null, defaultWebServiceUrl, false);
+
+        verifyJavaInstance(config, null, defaultWebServiceUrl);
+    }
+
+    @Test
+    public void testJavaConstructorWithoutWebServiceUrlAndExposePulsarAdminClientEnabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, true);
+
+        factory = createProcessRuntimeFactory(null, null, true);
+
+        verifyJavaInstance(config, null, null);
+    }
+
+    @Test
+    public void testJavaConstructorWithoutWebServiceUrlAndExposePulsarAdminClientDisabled() throws Exception {
+        InstanceConfig config = createJavaInstanceConfig(FunctionDetails.Runtime.JAVA, false);
+
+        factory = createProcessRuntimeFactory(null, null, false);
+
+        verifyJavaInstance(config, null, null);
+    }
+
 }
diff --git a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java
index 437091ed51c8b..c6c2440f47a7a 100644
--- a/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java
+++ b/pulsar-functions/worker/src/main/java/org/apache/pulsar/functions/worker/FunctionActioner.java
@@ -188,6 +188,7 @@ InstanceConfig createInstanceConfig(FunctionDetails functionDetails, Function.Fu
         instanceConfig.setClusterName(clusterName);
         instanceConfig.setFunctionAuthenticationSpec(functionAuthSpec);
         instanceConfig.setMaxPendingAsyncRequests(workerConfig.getMaxPendingAsyncRequests());
+        instanceConfig.setExposePulsarAdminClientEnabled(workerConfig.isExposeAdminClientEnabled());
         return instanceConfig;
     }
 
diff --git a/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java
index 3b048dd95e87a..299d1b6e9d8a1 100644
--- a/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java
+++ b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/SchedulerManagerTest.java
@@ -154,7 +154,7 @@ public void testSchedule() throws Exception {
         functionMetaDataList.add(function1);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -201,7 +201,7 @@ public void testNothingNewToSchedule() throws Exception {
         functionMetaDataList.add(function1);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -249,7 +249,7 @@ public void testAddingFunctions() throws Exception {
         functionMetaDataList.add(function2);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -311,7 +311,7 @@ public void testDeletingFunctions() throws Exception {
         functionMetaDataList.add(function1);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -378,7 +378,7 @@ public void testScalingUp() throws Exception {
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
         ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider
-                (), new CollectorRegistry(), null, null);
+                (), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -489,7 +489,7 @@ public void testScalingDown() throws Exception {
         functionMetaDataList.add(function2);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -638,7 +638,8 @@ public void testHeartbeatFunction() throws Exception {
         functionMetaDataList.add(function2);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(),
+                new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         Map<String, Map<String, Function.Assignment>> currentAssignments = new HashMap<>();
@@ -692,7 +693,8 @@ public void testUpdate() throws Exception {
         functionMetaDataList.add(function2);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(),
+                new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
@@ -837,7 +839,8 @@ public void testAssignmentWorkerDoesNotExist() throws InterruptedException, NoSu
         functionMetaDataList.add(function2);
         doReturn(functionMetaDataList).when(functionMetaDataManager).getAllFunctionMetaData();
 
-        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(), new CollectorRegistry(), null, null);
+        ThreadRuntimeFactory factory = new ThreadRuntimeFactory("dummy", null, "dummy", new ClearTextSecretsProvider(),
+                new CollectorRegistry(), null, null, null);
         doReturn(factory).when(functionRuntimeManager).getRuntimeFactory();
 
         // set assignments
diff --git a/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java
index beb0cf93de0fe..8e026d90d84b9 100644
--- a/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java
+++ b/pulsar-functions/worker/src/test/java/org/apache/pulsar/functions/worker/rest/api/FunctionsImplTest.java
@@ -163,7 +163,7 @@ public void setup() throws Exception {
         instanceConfig.setMaxBufferedTuples(1024);
 
         JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(
-                instanceConfig, null, null, null, null, null, null, null);
+                instanceConfig, null, null, null, null, null, null, null, null);
         CompletableFuture<InstanceCommunication.MetricsData> metricsDataCompletableFuture = new CompletableFuture<InstanceCommunication.MetricsData>();
         metricsDataCompletableFuture.complete(javaInstanceRunnable.getMetrics());
         Runtime runtime = mock(Runtime.class);
@@ -209,7 +209,7 @@ public void testMetricsEmpty() {
         instanceConfig.setMaxBufferedTuples(1024);
 
         JavaInstanceRunnable javaInstanceRunnable = new JavaInstanceRunnable(
-                instanceConfig, null, null, null, null, null, null, null);
+                instanceConfig, null, null, null, null, null, null, null, null);
         CompletableFuture<InstanceCommunication.MetricsData> completableFuture = new CompletableFuture<InstanceCommunication.MetricsData>();
         completableFuture.complete(javaInstanceRunnable.getMetrics());
         Runtime runtime = mock(Runtime.class);
diff --git a/tests/docker-images/java-test-functions/pom.xml b/tests/docker-images/java-test-functions/pom.xml
index dc094a90650cf..3dee6a755c04b 100644
--- a/tests/docker-images/java-test-functions/pom.xml
+++ b/tests/docker-images/java-test-functions/pom.xml
@@ -75,6 +75,26 @@
                                         implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                 </transformer>
                             </transformers>
+                            <artifactSet>
+                                <includes>
+                                    <include>org.apache.pulsar:pulsar-client-original</include>
+                                    <include>org.apache.pulsar:pulsar-client-api</include>
+                                    <include>org.apache.pulsar:pulsar-client-admin-api</include>
+                                    <include>org.apache.pulsar:pulsar-functions-api-examples</include>
+                                </includes>
+                            </artifactSet>
+                            <filters>
+                                <filter>
+                                    <artifact>org.apache.pulsar:pulsar-client-original</artifact>
+                                    <includes>
+                                        <include>**</include>
+                                    </includes>
+                                    <excludes>
+                                        <!-- bouncycastle jars could not be shaded, or the signatures will be wrong-->
+                                        <exclude>org/bouncycastle/**</exclude>
+                                    </excludes>
+                                </filter>
+                            </filters>
                         </configuration>
                     </execution>
                 </executions>
diff --git a/tests/pulsar-client-admin-shade-test/pom.xml b/tests/pulsar-client-admin-shade-test/pom.xml
index 865f86bb43d3b..7aba34a00cfd8 100644
--- a/tests/pulsar-client-admin-shade-test/pom.xml
+++ b/tests/pulsar-client-admin-shade-test/pom.xml
@@ -42,6 +42,13 @@
             <scope>test</scope>
         </dependency>
 
+        <dependency>
+            <groupId>org.apache.pulsar</groupId>
+            <artifactId>pulsar-client-admin-api</artifactId>
+            <version>${project.version}</version>
+            <scope>test</scope>
+        </dependency>
+
         <dependency>
             <groupId>org.testcontainers</groupId>
             <artifactId>testcontainers</artifactId>
