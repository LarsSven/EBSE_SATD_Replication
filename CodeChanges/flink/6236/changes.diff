diff --git a/flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraConnectorITCase.java b/flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraConnectorITCase.java
index c001ef6087a9a..e150daaa1353b 100644
--- a/flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraConnectorITCase.java
+++ b/flink-connectors/flink-connector-cassandra/src/test/java/org/apache/flink/streaming/connectors/cassandra/CassandraConnectorITCase.java
@@ -458,7 +458,7 @@ public void testCassandraTableSink() throws Exception {
 
 		DataStreamSource<Row> source = env.fromCollection(rowCollection);
 
-		tEnv.registerDataStreamInternal("testFlinkTable", source);
+		tEnv.registerDataStreamInternal("testFlinkTable", source, false);
 		tEnv.registerTableSink(
 			"cassandraTable",
 			new String[]{"f0", "f1", "f2"},
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/BatchTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/BatchTableEnvironment.scala
index 99e9d7e6d011b..86ef77c3786ad 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/BatchTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/BatchTableEnvironment.scala
@@ -96,10 +96,12 @@ abstract class BatchTableEnvironment(
     *
     * @param name        The name under which the [[TableSource]] is registered.
     * @param tableSource The [[TableSource]] to register.
+    * @param replace     Whether to replace the registered table.
     */
   override protected def registerTableSourceInternal(
       name: String,
-      tableSource: TableSource[_])
+      tableSource: TableSource[_],
+      replace: Boolean = false)
     : Unit = {
 
     tableSource match {
@@ -113,7 +115,7 @@ abstract class BatchTableEnvironment(
           case Some(table: TableSourceSinkTable[_, _]) => table.tableSourceTable match {
 
             // wrapper contains source
-            case Some(_: TableSourceTable[_]) =>
+            case Some(_: TableSourceTable[_]) if !replace =>
               throw new TableException(s"Table '$name' already exists. " +
                 s"Please choose a different name.")
 
@@ -197,13 +199,15 @@ abstract class BatchTableEnvironment(
     * @param fieldNames The field names to register with the [[TableSink]].
     * @param fieldTypes The field types to register with the [[TableSink]].
     * @param tableSink  The [[TableSink]] to register.
+    * @param replace    Whether to replace the registered table.
     */
-  def registerTableSink(
+  protected def registerTableSinkInternal(
       name: String,
       fieldNames: Array[String],
       fieldTypes: Array[TypeInformation[_]],
-      tableSink: TableSink[_]): Unit = {
-    // validate
+      tableSink: TableSink[_],
+      replace: Boolean): Unit = {
+
     checkValidTableName(name)
     if (fieldNames == null) throw new TableException("fieldNames must not be null.")
     if (fieldTypes == null) throw new TableException("fieldTypes must not be null.")
@@ -214,22 +218,12 @@ abstract class BatchTableEnvironment(
 
     // configure and register
     val configuredSink = tableSink.configure(fieldNames, fieldTypes)
-    registerTableSinkInternal(name, configuredSink)
-  }
-
-  /**
-    * Registers an external [[TableSink]] with already configured field names and field types in
-    * this [[TableEnvironment]]'s catalog.
-    * Registered sink tables can be referenced in SQL DML statements.
-    *
-    * @param name The name under which the [[TableSink]] is registered.
-    * @param configuredSink The configured [[TableSink]] to register.
-    */
-  def registerTableSink(name: String, configuredSink: TableSink[_]): Unit = {
-    registerTableSinkInternal(name, configuredSink)
+    registerTableSinkInternal(name, configuredSink, replace)
   }
 
-  private def registerTableSinkInternal(name: String, configuredSink: TableSink[_]): Unit = {
+  protected def registerTableSinkInternal(name: String,
+                                          configuredSink: TableSink[_],
+                                          replace: Boolean): Unit = {
     // validate
     checkValidTableName(name)
     if (configuredSink.getFieldNames == null || configuredSink.getFieldTypes == null) {
@@ -255,7 +249,7 @@ abstract class BatchTableEnvironment(
           case Some(table: TableSourceSinkTable[_, _]) => table.tableSinkTable match {
 
             // wrapper contains sink
-            case Some(_: TableSinkTable[_]) =>
+            case Some(_: TableSinkTable[_]) if !replace =>
               throw new TableException(s"Table '$name' already exists. " +
                 s"Please choose a different name.")
 
@@ -387,21 +381,24 @@ abstract class BatchTableEnvironment(
   def explain(table: Table): String = explain(table: Table, extended = false)
 
   /**
-    * Registers a [[DataSet]] as a table under a given name in the [[TableEnvironment]]'s catalog.
+    * Registers or replace a [[DataSet]] as a table under a given name in the
+    * [[TableEnvironment]]'s catalog.
     *
     * @param name The name under which the table is registered in the catalog.
     * @param dataSet The [[DataSet]] to register as table in the catalog.
     * @tparam T the type of the [[DataSet]].
+    * @param replace Whether to replace the registered table.
     */
-  protected def registerDataSetInternal[T](name: String, dataSet: DataSet[T]): Unit = {
-
+  protected def registerDataSetInternal[T](name: String,
+                                           dataSet: DataSet[T],
+                                           replace: Boolean): Unit = {
     val (fieldNames, fieldIndexes) = getFieldInfo[T](dataSet.getType)
     val dataSetTable = new DataSetTable[T](
       dataSet,
       fieldIndexes,
       fieldNames
     )
-    registerTableInternal(name, dataSetTable)
+    registerTableInternal(name, dataSetTable, replace)
   }
 
   /**
@@ -412,9 +409,10 @@ abstract class BatchTableEnvironment(
     * @param dataSet The [[DataSet]] to register as table in the catalog.
     * @param fields The field expressions to define the field names of the table.
     * @tparam T The type of the [[DataSet]].
+    * @param replace Whether to replace the registered table.
     */
   protected def registerDataSetInternal[T](
-      name: String, dataSet: DataSet[T], fields: Array[Expression]): Unit = {
+      name: String, dataSet: DataSet[T], fields: Array[Expression], replace: Boolean): Unit = {
 
     val inputType = dataSet.getType
 
@@ -428,7 +426,7 @@ abstract class BatchTableEnvironment(
     }
 
     val dataSetTable = new DataSetTable[T](dataSet, fieldIndexes, fieldNames)
-    registerTableInternal(name, dataSetTable)
+    registerTableInternal(name, dataSetTable, replace)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/StreamTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/StreamTableEnvironment.scala
index 8c6a1e0a04bf4..dbf176507bfea 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/StreamTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/StreamTableEnvironment.scala
@@ -110,7 +110,8 @@ abstract class StreamTableEnvironment(
     */
   override protected def registerTableSourceInternal(
       name: String,
-      tableSource: TableSource[_])
+      tableSource: TableSource[_],
+      replace: Boolean = false)
     : Unit = {
 
     tableSource match {
@@ -132,7 +133,7 @@ abstract class StreamTableEnvironment(
           case Some(table: TableSourceSinkTable[_, _]) => table.tableSourceTable match {
 
             // wrapper contains source
-            case Some(_: TableSourceTable[_]) =>
+            case Some(_: TableSourceTable[_]) if !replace =>
               throw new TableException(s"Table '$name' already exists. " +
                 s"Please choose a different name.")
 
@@ -222,12 +223,14 @@ abstract class StreamTableEnvironment(
     * @param fieldNames The field names to register with the [[TableSink]].
     * @param fieldTypes The field types to register with the [[TableSink]].
     * @param tableSink The [[TableSink]] to register.
+    * @param replace  Whether to replace the registered table.
     */
-  def registerTableSink(
+  protected def registerTableSinkInternal(
       name: String,
       fieldNames: Array[String],
       fieldTypes: Array[TypeInformation[_]],
-      tableSink: TableSink[_]): Unit = {
+      tableSink: TableSink[_],
+      replace: Boolean): Unit = {
 
     checkValidTableName(name)
     if (fieldNames == null) throw new TableException("fieldNames must not be null.")
@@ -238,22 +241,12 @@ abstract class StreamTableEnvironment(
     }
 
     val configuredSink = tableSink.configure(fieldNames, fieldTypes)
-    registerTableSinkInternal(name, configuredSink)
+    registerTableSinkInternal(name, configuredSink, replace)
   }
 
-  /**
-    * Registers an external [[TableSink]] with already configured field names and field types in
-    * this [[TableEnvironment]]'s catalog.
-    * Registered sink tables can be referenced in SQL DML statements.
-    *
-    * @param name The name under which the [[TableSink]] is registered.
-    * @param configuredSink The configured [[TableSink]] to register.
-    */
-  def registerTableSink(name: String, configuredSink: TableSink[_]): Unit = {
-    registerTableSinkInternal(name, configuredSink)
-  }
-
-  private def registerTableSinkInternal(name: String, configuredSink: TableSink[_]): Unit = {
+  protected def registerTableSinkInternal(name: String,
+                                          configuredSink: TableSink[_],
+                                          replace: Boolean): Unit = {
     // validate
     checkValidTableName(name)
     if (configuredSink.getFieldNames == null || configuredSink.getFieldTypes == null) {
@@ -279,7 +272,7 @@ abstract class StreamTableEnvironment(
           case Some(table: TableSourceSinkTable[_, _]) => table.tableSinkTable match {
 
             // wrapper contains sink
-            case Some(_: TableSinkTable[_]) =>
+            case Some(_: TableSinkTable[_]) if !replace =>
               throw new TableException(s"Table '$name' already exists. " +
                 s"Please choose a different name.")
 
@@ -514,7 +507,8 @@ abstract class StreamTableEnvironment(
     */
   protected def registerDataStreamInternal[T](
     name: String,
-    dataStream: DataStream[T]): Unit = {
+    dataStream: DataStream[T],
+    replace: Boolean): Unit = {
 
     val (fieldNames, fieldIndexes) = getFieldInfo[T](dataStream.getType)
     val dataStreamTable = new DataStreamTable[T](
@@ -522,7 +516,7 @@ abstract class StreamTableEnvironment(
       fieldIndexes,
       fieldNames
     )
-    registerTableInternal(name, dataStreamTable)
+    registerTableInternal(name, dataStreamTable, replace)
   }
 
   /**
@@ -537,7 +531,8 @@ abstract class StreamTableEnvironment(
   protected def registerDataStreamInternal[T](
       name: String,
       dataStream: DataStream[T],
-      fields: Array[Expression])
+      fields: Array[Expression],
+      replace: Boolean)
     : Unit = {
 
     val streamType = dataStream.getType
@@ -564,7 +559,7 @@ abstract class StreamTableEnvironment(
       indexesWithIndicatorFields,
       namesWithIndicatorFields
     )
-    registerTableInternal(name, dataStreamTable)
+    registerTableInternal(name, dataStreamTable, replace)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/TableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/TableEnvironment.scala
index e28a471681d2c..38e1f07d3684a 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/TableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/TableEnvironment.scala
@@ -395,11 +395,12 @@ abstract class TableEnvironment(val config: TableConfig) {
   /**
     * Creates a table from a table source.
     *
-    * @param source table source used as table
+    * @param source table source used as table.
+    * @param replace Whether to replace the registered table.
     */
-  def fromTableSource(source: TableSource[_]): Table = {
+  def fromTableSource(source: TableSource[_], replace: Boolean = false): Table = {
     val name = createUniqueTableName()
-    registerTableSourceInternal(name, source)
+    registerTableSourceInternal(name, source, replace)
     scan(name)
   }
 
@@ -517,7 +518,25 @@ abstract class TableEnvironment(val config: TableConfig) {
     * @param table The table to register.
     */
   def registerTable(name: String, table: Table): Unit = {
+    // check that table belongs to this table environment
+    if (table.tableEnv != this) {
+      throw new TableException(
+        "Only tables that belong to this TableEnvironment can be registered.")
+    }
+
+    checkValidTableName(name)
+    val tableTable = new RelTable(table.getRelNode)
+    registerTableInternal(name, tableTable, false)
+  }
 
+  /**
+    * Registers or replace a [[Table]] under a unique name in the TableEnvironment's catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * @param name The name under which the table will be registered.
+    * @param table The table to register.
+    */
+  def registerOrReplaceTable(name: String, table: Table): Unit = {
     // check that table belongs to this table environment
     if (table.tableEnv != this) {
       throw new TableException(
@@ -526,9 +545,10 @@ abstract class TableEnvironment(val config: TableConfig) {
 
     checkValidTableName(name)
     val tableTable = new RelTable(table.getRelNode)
-    registerTableInternal(name, tableTable)
+    registerTableInternal(name, tableTable, true)
   }
 
+
   /**
     * Registers an external [[TableSource]] in this [[TableEnvironment]]'s catalog.
     * Registered tables can be referenced in SQL queries.
@@ -536,9 +556,23 @@ abstract class TableEnvironment(val config: TableConfig) {
     * @param name        The name under which the [[TableSource]] is registered.
     * @param tableSource The [[TableSource]] to register.
     */
-  def registerTableSource(name: String, tableSource: TableSource[_]): Unit = {
+  def registerTableSource(name: String,
+                          tableSource: TableSource[_]): Unit = {
     checkValidTableName(name)
-    registerTableSourceInternal(name, tableSource)
+    registerTableSourceInternal(name, tableSource, false)
+  }
+
+  /**
+    * Registers or replace an external [[TableSource]] in this [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * @param name        The name under which the [[TableSource]] is registered.
+    * @param tableSource The [[TableSource]] to register.
+    */
+  def registerOrReplaceTableSource(name: String,
+                          tableSource: TableSource[_]): Unit = {
+    checkValidTableName(name)
+    registerTableSourceInternal(name, tableSource, true)
   }
 
   /**
@@ -547,8 +581,11 @@ abstract class TableEnvironment(val config: TableConfig) {
     *
     * @param name        The name under which the [[TableSource]] is registered.
     * @param tableSource The [[TableSource]] to register.
+    * @param replace     Whether to replace this [[TableSource]]
     */
-  protected def registerTableSourceInternal(name: String, tableSource: TableSource[_]): Unit
+  protected def registerTableSourceInternal(name: String,
+                                            tableSource: TableSource[_],
+                                            replace: Boolean): Unit
 
   /**
     * Registers an external [[TableSink]] with given field names and types in this
@@ -564,7 +601,70 @@ abstract class TableEnvironment(val config: TableConfig) {
       name: String,
       fieldNames: Array[String],
       fieldTypes: Array[TypeInformation[_]],
-      tableSink: TableSink[_]): Unit
+      tableSink: TableSink[_]): Unit = {
+    registerTableSinkInternal(name, fieldNames, fieldTypes, tableSink, false)
+  }
+
+  /**
+    * Registers or replace an external [[TableSink]] with given field names and types in this
+    * [[TableEnvironment]]'s catalog.
+    * Registered sink tables can be referenced in SQL DML statements.
+    *
+    * @param name The name under which the [[TableSink]] is registered.
+    * @param fieldNames The field names to register with the [[TableSink]].
+    * @param fieldTypes The field types to register with the [[TableSink]].
+    * @param tableSink The [[TableSink]] to register.
+    */
+  def registerOrReplaceTableSink(
+                         name: String,
+                         fieldNames: Array[String],
+                         fieldTypes: Array[TypeInformation[_]],
+                         tableSink: TableSink[_]): Unit = {
+    registerTableSinkInternal(name, fieldNames, fieldTypes, tableSink, true)
+  }
+
+  /**
+    * Registers or replace an external [[TableSink]] with given field names and types in this
+    * [[TableEnvironment]]'s catalog.
+    * Registered sink tables can be referenced in SQL DML statements.
+    *
+    * @param name The name under which the [[TableSink]] is registered.
+    * @param fieldNames The field names to register with the [[TableSink]].
+    * @param fieldTypes The field types to register with the [[TableSink]].
+    * @param tableSink The [[TableSink]] to register.
+    * @param replace Whether replace this [[TableSink]].
+    */
+  protected def registerTableSinkInternal(
+       name: String,
+       fieldNames: Array[String],
+       fieldTypes: Array[TypeInformation[_]],
+       tableSink: TableSink[_],
+       replace: Boolean): Unit
+
+  /**
+    * Registers an external [[TableSink]] with already configured field names and field types in
+    * this [[TableEnvironment]]'s catalog.
+    * Registered sink tables can be referenced in SQL DML statements.
+    *
+    * @param name The name under which the [[TableSink]] is registered.
+    * @param configuredSink The configured [[TableSink]] to register.
+    */
+  def registerTableSink(name: String, configuredSink: TableSink[_]): Unit = {
+    registerTableSinkInternal(name, configuredSink, false)
+  }
+
+  /**
+    * Registers or replace an external [[TableSink]] with already configured field names and
+    * field types in this [[TableEnvironment]]'s catalog.
+    * Registered sink tables can be referenced in SQL DML statements.
+    *
+    * @param name The name under which the [[TableSink]] is registered.
+    * @param configuredSink The configured [[TableSink]] to register.
+    */
+  def registerOrReplaceTableSink(name: String, configuredSink: TableSink[_]): Unit = {
+    registerTableSinkInternal(name, configuredSink, true)
+  }
+
 
   /**
     * Registers an external [[TableSink]] with already configured field names and field types in
@@ -574,7 +674,10 @@ abstract class TableEnvironment(val config: TableConfig) {
     * @param name The name under which the [[TableSink]] is registered.
     * @param configuredSink The configured [[TableSink]] to register.
     */
-  def registerTableSink(name: String, configuredSink: TableSink[_]): Unit
+  protected def registerTableSinkInternal(name: String,
+                                          configuredSink: TableSink[_],
+                                          replace: Boolean): Unit
+
 
   /**
     * Replaces a registered Table with another Table under the same name.
@@ -888,13 +991,15 @@ abstract class TableEnvironment(val config: TableConfig) {
     * Registers a Calcite [[AbstractTable]] in the TableEnvironment's catalog.
     *
     * @param name The name under which the table will be registered.
-    * @param table The table to register in the catalog
+    * @param table The table to register in the catalog.
+    * @param replace Whether to replace the registered table.
     * @throws TableException if another table is registered under the provided name.
     */
   @throws[TableException]
-  protected def registerTableInternal(name: String, table: AbstractTable): Unit = {
-
-    if (isRegistered(name)) {
+  protected def registerTableInternal(name: String,
+                                      table: AbstractTable,
+                                      replace: Boolean = false): Unit = {
+    if (!replace && isRegistered(name)) {
       throw new TableException(s"Table \'$name\' already exists. " +
         s"Please, choose a different name.")
     } else {
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/BatchTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/BatchTableEnvironment.scala
index f8f35eb5c745a..10b23e9079440 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/BatchTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/BatchTableEnvironment.scala
@@ -55,9 +55,22 @@ class BatchTableEnvironment(
     * @return The converted [[Table]].
     */
   def fromDataSet[T](dataSet: DataSet[T]): Table = {
+    fromDataSet(dataSet, false)
+  }
 
+  /**
+    * Converts the given [[DataSet]] into a [[Table]].
+    *
+    * The field names of the [[Table]] are automatically derived from the type of the [[DataSet]].
+    *
+    * @param dataSet The [[DataSet]] to be converted.
+    * @tparam T The type of the [[DataSet]].
+    * @param replace Whether to replace the registered table.
+    * @return The converted [[Table]].
+    */
+  def fromDataSet[T](dataSet: DataSet[T], replace: Boolean): Table = {
     val name = createUniqueTableName()
-    registerDataSetInternal(name, dataSet)
+    registerDataSetInternal(name, dataSet, replace)
     scan(name)
   }
 
@@ -77,15 +90,38 @@ class BatchTableEnvironment(
     * @return The converted [[Table]].
     */
   def fromDataSet[T](dataSet: DataSet[T], fields: String): Table = {
+
+    fromDataSet(dataSet, fields, false)
+  }
+
+  /**
+    * Converts the given [[DataSet]] into a [[Table]] with specified field names. And could
+    * also replace the existing table if it is already registered.
+    *
+    * Example:
+    *
+    * {{{
+    *   DataSet<Tuple2<String, Long>> set = ...
+    *   Table tab = tableEnv.fromDataSet(set, "a, b", true)
+    * }}}
+    *
+    * @param dataSet The [[DataSet]] to be converted.
+    * @param fields The field names of the resulting [[Table]].
+    * @tparam T The type of the [[DataSet]].
+    * @param replace Whether to replace the registered table.
+    * @return The converted [[Table]].
+    */
+  def fromDataSet[T](dataSet: DataSet[T], fields: String, replace: Boolean): Table = {
     val exprs = ExpressionParser
       .parseExpressionList(fields)
       .toArray
 
     val name = createUniqueTableName()
-    registerDataSetInternal(name, dataSet, exprs)
+    registerDataSetInternal(name, dataSet, exprs, replace)
     scan(name)
   }
 
+
   /**
     * Registers the given [[DataSet]] as table in the
     * [[TableEnvironment]]'s catalog.
@@ -98,9 +134,22 @@ class BatchTableEnvironment(
     * @tparam T The type of the [[DataSet]] to register.
     */
   def registerDataSet[T](name: String, dataSet: DataSet[T]): Unit = {
+    registerDataSetInternal(name, dataSet, false)
+  }
 
-    checkValidTableName(name)
-    registerDataSetInternal(name, dataSet)
+  /**
+    * Registers or replace the given [[DataSet]] as table in the
+    * [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * The field names of the [[Table]] are automatically derived from the type of the [[DataSet]].
+    *
+    * @param name The name under which the [[DataSet]] is registered in the catalog.
+    * @param dataSet The [[DataSet]] to register.
+    * @tparam T The type of the [[DataSet]] to register.
+    */
+  def registerOrReplaceDataSet[T](name: String, dataSet: DataSet[T]): Unit = {
+    registerDataSetInternal(name, dataSet, false)
   }
 
   /**
@@ -120,13 +169,44 @@ class BatchTableEnvironment(
     * @param fields The field names of the registered table.
     * @tparam T The type of the [[DataSet]] to register.
     */
-  def registerDataSet[T](name: String, dataSet: DataSet[T], fields: String): Unit = {
+  def registerDataSet[T](name: String,
+                         dataSet: DataSet[T],
+                         fields: String): Unit = {
+    val exprs = ExpressionParser
+      .parseExpressionList(fields)
+      .toArray
+
+    checkValidTableName(name)
+    registerDataSetInternal(name, dataSet, exprs, false)
+  }
+
+  /**
+    * Registers the given [[DataSet]] as table with specified field names in the
+    * [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * Example:
+    *
+    * {{{
+    *   DataSet<Tuple2<String, Long>> set = ...
+    *   tableEnv.registerOrReplaceDataSet("myTable", set, "a, b")
+    * }}}
+    *
+    * @param name The name under which the [[DataSet]] is registered in the catalog.
+    * @param dataSet The [[DataSet]] to register.
+    * @param fields The field names of the registered table.
+    * @param replace Whether to replace the registered table.
+    * @tparam T The type of the [[DataSet]] to register.
+    */
+  def registerOrReplaceDataSet[T](name: String,
+                         dataSet: DataSet[T],
+                         fields: String): Unit = {
     val exprs = ExpressionParser
       .parseExpressionList(fields)
       .toArray
 
     checkValidTableName(name)
-    registerDataSetInternal(name, dataSet, exprs)
+    registerDataSetInternal(name, dataSet, exprs, true)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/StreamTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/StreamTableEnvironment.scala
index 53fb7a08d474b..94e420102bca6 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/StreamTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/java/StreamTableEnvironment.scala
@@ -60,7 +60,7 @@ class StreamTableEnvironment(
   def fromDataStream[T](dataStream: DataStream[T]): Table = {
 
     val name = createUniqueTableName()
-    registerDataStreamInternal(name, dataStream)
+    registerDataStreamInternal(name, dataStream, false)
     scan(name)
   }
 
@@ -85,7 +85,7 @@ class StreamTableEnvironment(
       .toArray
 
     val name = createUniqueTableName()
-    registerDataStreamInternal(name, dataStream, exprs)
+    registerDataStreamInternal(name, dataStream, exprs, false)
     scan(name)
   }
 
@@ -104,7 +104,25 @@ class StreamTableEnvironment(
   def registerDataStream[T](name: String, dataStream: DataStream[T]): Unit = {
 
     checkValidTableName(name)
-    registerDataStreamInternal(name, dataStream)
+    registerDataStreamInternal(name, dataStream, false)
+  }
+
+  /**
+    * Registers or replace the given [[DataStream]] as table in the
+    * [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * The field names of the [[Table]] are automatically derived
+    * from the type of the [[DataStream]].
+    *
+    * @param name The name under which the [[DataStream]] is registered in the catalog.
+    * @param dataStream The [[DataStream]] to register.
+    * @tparam T The type of the [[DataStream]] to register.
+    */
+  def registerOrReplaceDataStream[T](name: String, dataStream: DataStream[T]): Unit = {
+
+    checkValidTableName(name)
+    registerDataStreamInternal(name, dataStream, true)
   }
 
   /**
@@ -130,7 +148,18 @@ class StreamTableEnvironment(
       .toArray
 
     checkValidTableName(name)
-    registerDataStreamInternal(name, dataStream, exprs)
+    registerDataStreamInternal(name, dataStream, exprs, false)
+  }
+
+  def registerOrReplaceDataStream[T](name: String,
+                                     dataStream: DataStream[T],
+                                     fields: String): Unit = {
+    val exprs = ExpressionParser
+      .parseExpressionList(fields)
+      .toArray
+
+    checkValidTableName(name)
+    registerDataStreamInternal(name, dataStream, exprs, true)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/BatchTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/BatchTableEnvironment.scala
index 0692fd2f1b962..be14723d81fe8 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/BatchTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/BatchTableEnvironment.scala
@@ -53,12 +53,13 @@ class BatchTableEnvironment(
     *
     * @param dataSet The [[DataSet]] to be converted.
     * @tparam T The type of the [[DataSet]].
+    * @param replace whether to replace the registered table
     * @return The converted [[Table]].
     */
   def fromDataSet[T](dataSet: DataSet[T]): Table = {
 
     val name = createUniqueTableName()
-    registerDataSetInternal(name, dataSet.javaSet)
+    registerDataSetInternal(name, dataSet.javaSet, false)
     scan(name)
   }
 
@@ -80,7 +81,7 @@ class BatchTableEnvironment(
   def fromDataSet[T](dataSet: DataSet[T], fields: Expression*): Table = {
 
     val name = createUniqueTableName()
-    registerDataSetInternal(name, dataSet.javaSet, fields.toArray)
+    registerDataSetInternal(name, dataSet.javaSet, fields.toArray, false)
     scan(name)
   }
 
@@ -94,11 +95,30 @@ class BatchTableEnvironment(
     * @param name The name under which the [[DataSet]] is registered in the catalog.
     * @param dataSet The [[DataSet]] to register.
     * @tparam T The type of the [[DataSet]] to register.
+    * @param replace whether to replace the registered table
     */
   def registerDataSet[T](name: String, dataSet: DataSet[T]): Unit = {
 
     checkValidTableName(name)
-    registerDataSetInternal(name, dataSet.javaSet)
+    registerDataSetInternal(name, dataSet.javaSet, false)
+  }
+
+  /**
+    * Registers or replace the given [[DataSet]] as table in the
+    * [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * The field names of the [[Table]] are automatically derived from the type of the [[DataSet]].
+    *
+    * @param name The name under which the [[DataSet]] is registered in the catalog.
+    * @param dataSet The [[DataSet]] to register.
+    * @tparam T The type of the [[DataSet]] to register.
+    * @param replace whether to replace the registered table
+    */
+  def registerOrReplaceDataSet[T](name: String, dataSet: DataSet[T]): Unit = {
+
+    checkValidTableName(name)
+    registerDataSetInternal(name, dataSet.javaSet, true)
   }
 
   /**
@@ -121,7 +141,30 @@ class BatchTableEnvironment(
   def registerDataSet[T](name: String, dataSet: DataSet[T], fields: Expression*): Unit = {
 
     checkValidTableName(name)
-    registerDataSetInternal(name, dataSet.javaSet, fields.toArray)
+    registerDataSetInternal(name, dataSet.javaSet, fields.toArray, false)
+  }
+
+  /**
+    * Registers the given [[DataSet]] as table with specified field names in the
+    * [[TableEnvironment]]'s catalog.
+    * Registered tables can be referenced in SQL queries.
+    *
+    * Example:
+    *
+    * {{{
+    *   val set: DataSet[(String, Long)] = ...
+    *   tableEnv.registerOrReplaceDataSet("myTable", set, 'a, 'b)
+    * }}}
+    *
+    * @param name The name under which the [[DataSet]] is registered in the catalog.
+    * @param dataSet The [[DataSet]] to register.
+    * @param fields The field names of the registered table.
+    * @tparam T The type of the [[DataSet]] to register.
+    */
+  def registerOrReplaceDataSet[T](name: String, dataSet: DataSet[T], fields: Expression*): Unit = {
+
+    checkValidTableName(name)
+    registerDataSetInternal(name, dataSet.javaSet, fields.toArray, true)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/StreamTableEnvironment.scala b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/StreamTableEnvironment.scala
index c8d520c6bc0f8..9c15b9e92e4d2 100644
--- a/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/StreamTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/main/scala/org/apache/flink/table/api/scala/StreamTableEnvironment.scala
@@ -60,7 +60,7 @@ class StreamTableEnvironment(
   def fromDataStream[T](dataStream: DataStream[T]): Table = {
 
     val name = createUniqueTableName()
-    registerDataStreamInternal(name, dataStream.javaStream)
+    registerDataStreamInternal(name, dataStream.javaStream, false)
     scan(name)
   }
 
@@ -82,7 +82,7 @@ class StreamTableEnvironment(
   def fromDataStream[T](dataStream: DataStream[T], fields: Expression*): Table = {
 
     val name = createUniqueTableName()
-    registerDataStreamInternal(name, dataStream.javaStream, fields.toArray)
+    registerDataStreamInternal(name, dataStream.javaStream, fields.toArray, false)
     scan(name)
   }
 
@@ -101,7 +101,7 @@ class StreamTableEnvironment(
   def registerDataStream[T](name: String, dataStream: DataStream[T]): Unit = {
 
     checkValidTableName(name)
-    registerDataStreamInternal(name, dataStream.javaStream)
+    registerDataStreamInternal(name, dataStream.javaStream, false)
   }
 
   /**
@@ -124,7 +124,15 @@ class StreamTableEnvironment(
   def registerDataStream[T](name: String, dataStream: DataStream[T], fields: Expression*): Unit = {
 
     checkValidTableName(name)
-    registerDataStreamInternal(name, dataStream.javaStream, fields.toArray)
+    registerDataStreamInternal(name, dataStream.javaStream, fields.toArray, false)
+  }
+
+  def registerOrReplaceDataStream[T](name: String,
+                                     dataStream: DataStream[T],
+                                     fields: Expression*): Unit = {
+
+    checkValidTableName(name)
+    registerDataStreamInternal(name, dataStream.javaStream, fields.toArray, true)
   }
 
   /**
diff --git a/flink-libraries/flink-table/src/test/java/org/apache/flink/table/runtime/batch/sql/JavaSqlITCase.java b/flink-libraries/flink-table/src/test/java/org/apache/flink/table/runtime/batch/sql/JavaSqlITCase.java
index f9693fdd0a214..74a32d8b8e97c 100644
--- a/flink-libraries/flink-table/src/test/java/org/apache/flink/table/runtime/batch/sql/JavaSqlITCase.java
+++ b/flink-libraries/flink-table/src/test/java/org/apache/flink/table/runtime/batch/sql/JavaSqlITCase.java
@@ -71,6 +71,7 @@ public void testValues() throws Exception {
 			// Calcite converts to decimals and strings with equal length
 			"1,Test ,true,1944-02-24,12.4444444444444445\n";
 		compareResultAsText(results, expected);
+
 	}
 
 	@Test
@@ -95,6 +96,17 @@ public void testSelectFromTable() throws Exception {
 			"17,Comment#11\n" + "18,Comment#12\n" + "19,Comment#13\n" +
 			"20,Comment#14\n" + "21,Comment#15\n";
 		compareResultAsText(results, expected);
+
+		// replace table
+		ds = CollectionDataSets.getSmall3TupleDataSet(env);
+		in = tableEnv.fromDataSet(ds, "a,b,c");
+		tableEnv.registerOrReplaceTable("T", in);
+
+		result = tableEnv.sqlQuery(sqlQuery);
+		resultSet = tableEnv.toDataSet(result, Row.class);
+		results = resultSet.collect();
+		expected = "1,Hi\n" + "2,Hello\n" + "3,Hello world\n";
+		compareResultAsText(results, expected);
 	}
 
 	@Test
diff --git a/flink-libraries/flink-table/src/test/scala/org/apache/flink/table/utils/MockTableEnvironment.scala b/flink-libraries/flink-table/src/test/scala/org/apache/flink/table/utils/MockTableEnvironment.scala
index f35e0d473d7b6..b801713786e03 100644
--- a/flink-libraries/flink-table/src/test/scala/org/apache/flink/table/utils/MockTableEnvironment.scala
+++ b/flink-libraries/flink-table/src/test/scala/org/apache/flink/table/utils/MockTableEnvironment.scala
@@ -40,20 +40,26 @@ class MockTableEnvironment extends TableEnvironment(new TableConfig) {
 
   override protected def getBuiltInPhysicalOptRuleSet: RuleSet = ???
 
-  override def registerTableSink(
+  override def registerTableSinkInternal(
       name: String,
       fieldNames: Array[String],
       fieldTypes: Array[TypeInformation[_]],
-      tableSink: TableSink[_]): Unit = ???
+      tableSink: TableSink[_],
+      replace: Boolean): Unit = ???
 
-  override def registerTableSink(name: String, tableSink: TableSink[_]): Unit = ???
+  override def registerTableSinkInternal(name: String,
+                                         tableSink: TableSink[_],
+                                         replace: Boolean): Unit = ???
 
   override protected def createUniqueTableName(): String = ???
 
-  override protected def registerTableSourceInternal(name: String, tableSource: TableSource[_])
+  override protected def registerTableSourceInternal(name: String,
+                                                     tableSource: TableSource[_],
+                                                     replace: Boolean = false)
     : Unit = ???
 
   override def explain(table: Table): String = ???
 
   override def connect(connectorDescriptor: ConnectorDescriptor): TableDescriptor = ???
+
 }
