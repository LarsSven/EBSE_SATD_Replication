diff --git a/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/AggFunctionFactory.scala b/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/AggFunctionFactory.scala
index 798e2566cf8e6..302fa4cd0f4fb 100644
--- a/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/AggFunctionFactory.scala
+++ b/flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/AggFunctionFactory.scala
@@ -480,7 +480,9 @@ class AggFunctionFactory(
     val valueType = argTypes(0)
     if (needRetraction(index)) {
       valueType.getTypeRoot match {
-        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL =>
+        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL |
+             TIME_WITHOUT_TIME_ZONE | DATE | TIMESTAMP_WITHOUT_TIME_ZONE |
+             TIMESTAMP_WITH_LOCAL_TIME_ZONE =>
           new FirstValueWithRetractAggFunction(valueType)
         case t =>
           throw new TableException(s"FIRST_VALUE with retract aggregate function does not " +
@@ -488,7 +490,9 @@ class AggFunctionFactory(
       }
     } else {
       valueType.getTypeRoot match {
-        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL =>
+        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL |
+             TIME_WITHOUT_TIME_ZONE | DATE | TIMESTAMP_WITHOUT_TIME_ZONE |
+             TIMESTAMP_WITH_LOCAL_TIME_ZONE =>
           new FirstValueAggFunction(valueType)
         case t =>
           throw new TableException(s"FIRST_VALUE aggregate function does not support " +
@@ -504,7 +508,9 @@ class AggFunctionFactory(
     val valueType = argTypes(0)
     if (needRetraction(index)) {
       valueType.getTypeRoot match {
-        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL =>
+        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL |
+             TIME_WITHOUT_TIME_ZONE | DATE | TIMESTAMP_WITHOUT_TIME_ZONE |
+             TIMESTAMP_WITH_LOCAL_TIME_ZONE =>
           new LastValueWithRetractAggFunction(valueType)
         case t =>
           throw new TableException(s"LAST_VALUE with retract aggregate function does not " +
@@ -512,7 +518,9 @@ class AggFunctionFactory(
       }
     } else {
       valueType.getTypeRoot match {
-        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL =>
+        case TINYINT | SMALLINT | INTEGER | BIGINT | FLOAT | DOUBLE | BOOLEAN | VARCHAR | DECIMAL |
+             TIME_WITHOUT_TIME_ZONE | DATE | TIMESTAMP_WITHOUT_TIME_ZONE |
+             TIMESTAMP_WITH_LOCAL_TIME_ZONE =>
           new LastValueAggFunction(valueType)
         case t =>
           throw new TableException(s"LAST_VALUE aggregate function does not support " +
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithOrderTest.java
index 975574df95f9f..9608015388199 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithOrderTest.java
@@ -23,13 +23,18 @@
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.RowData;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -37,6 +42,9 @@
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -405,6 +413,370 @@ protected AggregateFunction<StringData, RowData> getAggregator() {
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateFirstValueAggFunctionWithOrderTest
+		extends FirstValueAggFunctionWithOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-11"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeFirstValueAggFunctionWithOrderTest
+		extends FirstValueAggFunctionWithOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:45:00.345"),
+					LocalTime.parse("18:00:00.123"),
+					LocalTime.parse("12:45:00.345"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampFirstValueAggFunctionWithOrderTest
+		extends FirstValueAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampFirstValueAggFunctionWithOrderTest
+		extends FirstValueAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide:
 	//  - common inputs
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithoutOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithoutOrderTest.java
index 0e0d05a1e0a0b..2ae5753f2f536 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithoutOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueAggFunctionWithoutOrderTest.java
@@ -23,13 +23,18 @@
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.RowData;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -37,6 +42,9 @@
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -314,6 +322,234 @@ protected AggregateFunction<StringData, RowData> getAggregator() {
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateFirstValueAggFunctionWithoutOrderTest
+		extends FirstValueAggFunctionWithoutOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-11"),
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-12"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeFirstValueAggFunctionWithoutOrderTest
+		extends FirstValueAggFunctionWithoutOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:00:00.123"),
+					LocalTime.parse("18:00:00.123"),
+					LocalTime.parse("12:00:00.123"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampFirstValueAggFunctionWithoutOrderTest
+		extends FirstValueAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampFirstValueAggFunctionWithoutOrderTest
+		extends FirstValueAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new FirstValueAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide:
 	//  - common inputs
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithOrderTest.java
index 9d0cf59b878c5..5fb7e0266a27f 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithOrderTest.java
@@ -22,14 +22,19 @@
 import org.apache.flink.table.data.DecimalData;
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.planner.functions.aggfunctions.FirstValueWithRetractAggFunction.FirstValueWithRetractAccumulator;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -38,6 +43,9 @@
 import org.junit.runner.RunWith;
 
 import java.lang.reflect.Method;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -406,6 +414,370 @@ protected AggregateFunction<StringData, FirstValueWithRetractAccumulator<StringD
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateFirstValueWithRetractAggFunctionWithOrderTest
+		extends FirstValueWithRetractAggFunctionWithOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-11"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, FirstValueWithRetractAccumulator<LocalDate>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeFirstValueWithRetractAggFunctionWithOrderTest
+		extends FirstValueWithRetractAggFunctionWithOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:45:00.345"),
+					LocalTime.parse("18:00:00.123"),
+					LocalTime.parse("12:45:00.345"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, FirstValueWithRetractAccumulator<LocalTime>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampFirstValueWithRetractAggFunctionWithOrderTest
+		extends FirstValueWithRetractAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, FirstValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampFirstValueWithRetractAggFunctionWithOrderTest
+		extends FirstValueWithRetractAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, FirstValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide common inputs for tests declared above.
 	// --------------------------------------------------------------------------------------------
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithoutOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithoutOrderTest.java
index 3eddb472fde53..a69c6707ebd8c 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithoutOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/FirstValueWithRetractAggFunctionWithoutOrderTest.java
@@ -22,14 +22,19 @@
 import org.apache.flink.table.data.DecimalData;
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.planner.functions.aggfunctions.FirstValueWithRetractAggFunction.FirstValueWithRetractAccumulator;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -38,6 +43,9 @@
 import org.junit.runner.RunWith;
 
 import java.lang.reflect.Method;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -315,6 +323,235 @@ protected AggregateFunction<StringData, FirstValueWithRetractAccumulator<StringD
 		}
 	}
 
+
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateFirstValueWithRetractAggFunctionWithoutOrderTest
+		extends FirstValueWithRetractAggFunctionWithoutOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-11"),
+					LocalDate.parse("2020-11-12"),
+					LocalDate.parse("2020-11-12"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, FirstValueWithRetractAccumulator<LocalDate>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeFirstValueWithRetractAggFunctionWithoutOrderTest
+		extends FirstValueWithRetractAggFunctionWithoutOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:00:00.123"),
+					LocalTime.parse("18:00:00.123"),
+					LocalTime.parse("12:00:00.123"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, FirstValueWithRetractAccumulator<LocalTime>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampFirstValueWithRetractAggFunctionWithoutOrderTest
+		extends FirstValueWithRetractAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, FirstValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampFirstValueWithRetractAggFunctionWithoutOrderTest
+		extends FirstValueWithRetractAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, FirstValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new FirstValueWithRetractAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide common:
 	//  - inputs
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithOrderTest.java
index b05f83c75197b..b73a21071a19f 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithOrderTest.java
@@ -23,13 +23,18 @@
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.RowData;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -37,6 +42,9 @@
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -405,6 +413,370 @@ protected AggregateFunction<StringData, RowData> getAggregator() {
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateLastValueAggFunctionWithOrderTest
+		extends LastValueAggFunctionWithOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-11"),
+					LocalDate.parse("2020-11-14"),
+					LocalDate.parse("2020-11-10"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeLastValueAggFunctionWithOrderTest
+		extends LastValueAggFunctionWithOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:00:00.123"),
+					LocalTime.parse("20:30:15.678"),
+					LocalTime.parse("18:45:00.345"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampLastValueAggFunctionWithOrderTest
+		extends LastValueAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampLastValueAggFunctionWithOrderTest
+		extends LastValueAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide common inputs for tests declared above.
 	// --------------------------------------------------------------------------------------------
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithoutOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithoutOrderTest.java
index 73d7f057fd215..c57b39c76ca4e 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithoutOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueAggFunctionWithoutOrderTest.java
@@ -23,13 +23,18 @@
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.RowData;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -37,6 +42,9 @@
 import org.junit.experimental.runners.Enclosed;
 import org.junit.runner.RunWith;
 
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -315,6 +323,208 @@ protected AggregateFunction<StringData, RowData> getAggregator() {
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateLastValueAggFunctionWithoutOrderTest
+		extends LastValueAggFunctionWithoutOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-13"),
+					LocalDate.parse("2020-11-09"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeLastValueAggFunctionWithoutOrderTest
+		extends LastValueAggFunctionWithoutOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("18:30:15.678"),
+					LocalTime.parse("20:30:15.678"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampLastValueAggFunctionWithoutOrderTest
+		extends LastValueAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampLastValueAggFunctionWithoutOrderTest
+		extends LastValueAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, RowData> getAggregator() {
+			return new LastValueAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide common inputs and declare the accumulator
 	// class type for tests declared above.
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithOrderTest.java
index a706c531ebeff..6d580976530d7 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithOrderTest.java
@@ -22,14 +22,19 @@
 import org.apache.flink.table.data.DecimalData;
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.planner.functions.aggfunctions.LastValueWithRetractAggFunction.LastValueWithRetractAccumulator;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -38,6 +43,9 @@
 import org.junit.runner.RunWith;
 
 import java.lang.reflect.Method;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -412,6 +420,370 @@ protected AggregateFunction<StringData, LastValueWithRetractAccumulator<StringDa
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateLastValueWithRetractAggFunctionWithOrderTest
+		extends LastValueWithRetractAggFunctionWithOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13"),
+							LocalDate.parse("2020-11-14")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-11"),
+					LocalDate.parse("2020-11-14"),
+					LocalDate.parse("2020-11-10"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, LastValueWithRetractAccumulator<LocalDate>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeLastValueWithRetractAggFunctionWithOrderTest
+		extends LastValueWithRetractAggFunctionWithOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("12:00:00.123"),
+					LocalTime.parse("20:30:15.678"),
+					LocalTime.parse("18:45:00.345"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, LastValueWithRetractAccumulator<LocalTime>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampLastValueWithRetractAggFunctionWithOrderTest
+		extends LastValueWithRetractAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, LastValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampLastValueWithRetractAggFunctionWithOrderTest
+		extends LastValueWithRetractAggFunctionWithOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<List<Long>> getInputOrderSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							6L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							1L,
+							2L,
+							3L
+					),
+					Arrays.asList(
+							10L,
+							2L,
+							5L,
+							3L,
+							11L,
+							7L,
+							5L
+					),
+					Arrays.asList(
+							6L,
+							9L,
+							5L
+					),
+					Arrays.asList(
+							4L,
+							3L
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-14T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, LastValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide common inputs and accessor for retract function
 	// for tests declared above.
diff --git a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithoutOrderTest.java b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithoutOrderTest.java
index 5d509942001f2..0070c2e5c7e8c 100644
--- a/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithoutOrderTest.java
+++ b/flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/functions/aggfunctions/LastValueWithRetractAggFunctionWithoutOrderTest.java
@@ -22,14 +22,19 @@
 import org.apache.flink.table.data.DecimalData;
 import org.apache.flink.table.data.DecimalDataUtils;
 import org.apache.flink.table.data.StringData;
+import org.apache.flink.table.data.TimestampData;
 import org.apache.flink.table.functions.AggregateFunction;
 import org.apache.flink.table.planner.functions.aggfunctions.LastValueWithRetractAggFunction.LastValueWithRetractAccumulator;
 import org.apache.flink.table.types.logical.BigIntType;
 import org.apache.flink.table.types.logical.BooleanType;
+import org.apache.flink.table.types.logical.DateType;
 import org.apache.flink.table.types.logical.DecimalType;
 import org.apache.flink.table.types.logical.DoubleType;
 import org.apache.flink.table.types.logical.FloatType;
 import org.apache.flink.table.types.logical.IntType;
+import org.apache.flink.table.types.logical.LocalZonedTimestampType;
+import org.apache.flink.table.types.logical.TimeType;
+import org.apache.flink.table.types.logical.TimestampType;
 import org.apache.flink.table.types.logical.TinyIntType;
 import org.apache.flink.table.types.logical.VarCharType;
 import org.apache.flink.testutils.serialization.types.ShortType;
@@ -38,6 +43,9 @@
 import org.junit.runner.RunWith;
 
 import java.lang.reflect.Method;
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.time.LocalTime;
 import java.util.Arrays;
 import java.util.List;
 
@@ -315,6 +323,208 @@ protected AggregateFunction<StringData, LastValueWithRetractAccumulator<StringDa
 		}
 	}
 
+	/**
+	 * Test for {@link DateType}.
+	 */
+	public static final class DateLastValueWithRetractAggFunctionWithoutOrderTest
+		extends LastValueWithRetractAggFunctionWithoutOrderTestBase<LocalDate> {
+
+		@Override
+		protected List<List<LocalDate>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalDate.parse("2020-11-11"),
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-13")
+					),
+					Arrays.asList(
+							LocalDate.parse("2020-11-12"),
+							LocalDate.parse("2020-11-11"),
+							null,
+							LocalDate.parse("2020-11-15"),
+							LocalDate.parse("2020-11-10"),
+							LocalDate.parse("2020-11-09"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalDate.parse("2020-11-12")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalDate> getExpectedResults() {
+			return Arrays.asList(
+					LocalDate.parse("2020-11-13"),
+					LocalDate.parse("2020-11-09"),
+					null,
+					LocalDate.parse("2020-11-12")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalDate, LastValueWithRetractAccumulator<LocalDate>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.DATE().getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimeType}.
+	 */
+	public static final class TimeLastValueWithRetractAggFunctionWithoutOrderTest
+		extends LastValueWithRetractAggFunctionWithoutOrderTestBase<LocalTime> {
+
+		@Override
+		protected List<List<LocalTime>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							LocalTime.parse("18:30:15.678")
+					),
+					Arrays.asList(
+							LocalTime.parse("12:00:00.123"),
+							LocalTime.parse("12:45:00.345"),
+							null,
+							LocalTime.parse("18:00:00.123"),
+							LocalTime.parse("18:45:00.345"),
+							LocalTime.parse("20:30:15.678"),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							LocalTime.parse("18:00:00.345")
+					)
+			);
+		}
+
+		@Override
+		protected List<LocalTime> getExpectedResults() {
+			return Arrays.asList(
+					LocalTime.parse("18:30:15.678"),
+					LocalTime.parse("20:30:15.678"),
+					null,
+					LocalTime.parse("18:00:00.345")
+			);
+		}
+
+		@Override
+		protected AggregateFunction<LocalTime, LastValueWithRetractAccumulator<LocalTime>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIME(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link TimestampType}.
+	 */
+	public static final class TimestampLastValueWithRetractAggFunctionWithoutOrderTest
+		extends LastValueWithRetractAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, LastValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIMESTAMP(3).getLogicalType());
+		}
+	}
+
+	/**
+	 * Test for {@link LocalZonedTimestampType}.
+	 */
+	public static final class LocalZonedTimestampLastValueWithRetractAggFunctionWithoutOrderTest
+		extends LastValueWithRetractAggFunctionWithoutOrderTestBase<TimestampData> {
+
+		@Override
+		protected List<List<TimestampData>> getInputValueSets() {
+			return Arrays.asList(
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678"))
+					),
+					Arrays.asList(
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-11T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T15:30:00.345")),
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T12:00:00.123")),
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+							null
+					),
+					Arrays.asList(
+							null,
+							null,
+							null
+					),
+					Arrays.asList(
+							null,
+							TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+					)
+			);
+		}
+
+		@Override
+		protected List<TimestampData> getExpectedResults() {
+			return Arrays.asList(
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T18:45:00.678")),
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-13T15:30:00.345")),
+					null,
+					TimestampData.fromLocalDateTime(LocalDateTime.parse("2020-11-12T18:00:00.345"))
+			);
+		}
+
+		@Override
+		protected AggregateFunction<TimestampData, LastValueWithRetractAccumulator<TimestampData>> getAggregator() {
+			return new LastValueWithRetractAggFunction<>(DataTypes.TIMESTAMP_WITH_LOCAL_TIME_ZONE(3).getLogicalType());
+		}
+	}
+
 	// --------------------------------------------------------------------------------------------
 	// This section contain base classes that provide:
 	//  - common inputs
