diff --git a/stack/core/src/main/java/org/apache/usergrid/persistence/exceptions/DuplicateUniquePropertyExistsException.java b/stack/core/src/main/java/org/apache/usergrid/persistence/exceptions/DuplicateUniquePropertyExistsException.java
index 94c697604d..1c9f4c5112 100644
--- a/stack/core/src/main/java/org/apache/usergrid/persistence/exceptions/DuplicateUniquePropertyExistsException.java
+++ b/stack/core/src/main/java/org/apache/usergrid/persistence/exceptions/DuplicateUniquePropertyExistsException.java
@@ -29,7 +29,7 @@ public class DuplicateUniquePropertyExistsException extends PersistenceException
 
 
     public DuplicateUniquePropertyExistsException( String entityType, String propertyName, Object propertyValue ) {
-        super( "Entity " + entityType + " requires that property named " + propertyName + " be unique, value of "
+        super( "Entity \"" + entityType + "\" requires that property named \"" + propertyName + "\" be unique, value of "
                 + propertyValue + " exists" );
         this.entityType = entityType;
         this.propertyName = propertyName;
diff --git a/stack/services/src/main/java/org/apache/usergrid/services/AbstractCollectionService.java b/stack/services/src/main/java/org/apache/usergrid/services/AbstractCollectionService.java
index c3be45f476..1bdd2f145d 100644
--- a/stack/services/src/main/java/org/apache/usergrid/services/AbstractCollectionService.java
+++ b/stack/services/src/main/java/org/apache/usergrid/services/AbstractCollectionService.java
@@ -178,7 +178,7 @@ public ServiceResults getItemByName( ServiceContext context, String name ) throw
     /*
      * Level level = Level.REFS; if (isEmpty(parameters)) {
      * level = Level.ALL_PROPERTIES; }
-     * 
+     *
      * Results results = em.searchCollectionForProperty(owner,
      * getCollectionName(), null, nameProperty, name, null, null, 1, level);
      * EntityRef entity = results.getRef();
@@ -248,9 +248,9 @@ public ServiceResults getCollection( ServiceContext context ) throws Exception {
         }
 
         logger.debug("Limiting collection to " + Query.DEFAULT_LIMIT);
-        int count = Query.DEFAULT_LIMIT; 
+        int count = Query.DEFAULT_LIMIT;
 
-        Results r = em.getCollection( context.getOwner(), context.getCollectionName(), 
+        Results r = em.getCollection( context.getOwner(), context.getCollectionName(),
             null, count, Level.ALL_PROPERTIES, isCollectionReversed( context ) );
 
         importEntities( context, r );
@@ -370,7 +370,7 @@ public ServiceResults postCollection( ServiceContext context ) throws Exception
                             p );
                 }
                 catch ( Exception e ) {
-                    logger.error( "Entity " + i + " unable to be created in collection " + context.getCollectionName(),
+                    logger.debug( "Entity " + i + " unable to be created in collection " + context.getCollectionName(),
                             e );
 
                     i++;
