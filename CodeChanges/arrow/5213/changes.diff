diff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java
index 4fce022ee94b..d7dba5afd4c7 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java
+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java
@@ -17,6 +17,8 @@
 
 package org.apache.arrow.vector;
 
+import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;
+
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -889,4 +891,93 @@ public <OUT, IN> OUT accept(VectorVisitor<OUT, IN> visitor, IN value) {
     return visitor.visit(this, value);
   }
 
+  /*----------------------------------------------------------------*
+   |                                                                              |
+   |          vector value setter/getter methods             |
+   |                                                                              |
+   *----------------------------------------------------------------*/
+
+  protected long getLong(int index) throws IllegalStateException {
+    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
+      throw new IllegalStateException("Value at index is null");
+    }
+    return valueBuffer.getLong(index * BigIntVector.TYPE_WIDTH);
+  }
+
+  protected void setLong(int index, long value) {
+    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
+    setLongValue(index, value);
+  }
+
+  protected void setLongValue(int index, long value) {
+    valueBuffer.setLong(index * BigIntVector.TYPE_WIDTH, value);
+  }
+
+  protected void setLongSafe(int index, long value) {
+    handleSafe(index);
+    setLong(index, value);
+  }
+
+  protected void setLong(int index, int isSet, long value) {
+    if (isSet > 0) {
+      setLong(index, value);
+    } else {
+      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
+    }
+  }
+
+  protected void setLongSafe(int index, int isSet, long value) {
+    handleSafe(index);
+    setLong(index, isSet, value);
+  }
+
+  protected Long getLongObject(int index) {
+    if (isSet(index) == 0) {
+      return null;
+    } else {
+      return valueBuffer.getLong(index * BigIntVector.TYPE_WIDTH);
+    }
+  }
+
+  protected int getInt(int index) throws IllegalStateException {
+    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
+      throw new IllegalStateException("Value at index is null");
+    }
+    return valueBuffer.getInt(index * IntVector.TYPE_WIDTH);
+  }
+
+  protected void setIntValue(int index, int value) {
+    valueBuffer.setInt(index * IntVector.TYPE_WIDTH, value);
+  }
+
+  protected void setInt(int index, int value) {
+    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
+    setIntValue(index, value);
+  }
+
+  protected void setIntSafe(int index, int value) {
+    handleSafe(index);
+    setInt(index, value);
+  }
+
+  protected void setInt(int index, int isSet, int value) {
+    if (isSet > 0) {
+      setInt(index, value);
+    } else {
+      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
+    }
+  }
+
+  protected void setIntSafe(int index, int isSet, int value) {
+    handleSafe(index);
+    setInt(index, isSet, value);
+  }
+
+  protected Integer getIntObject(int index) {
+    if (isSet(index) == 0) {
+      return null;
+    } else {
+      return valueBuffer.getInt(index * IntVector.TYPE_WIDTH);
+    }
+  }
 }
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java
index b1644e29cadb..db1141e4d9be 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java
+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java
@@ -17,8 +17,6 @@
 
 package org.apache.arrow.vector;
 
-import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;
-
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.vector.complex.impl.TimeMicroReaderImpl;
 import org.apache.arrow.vector.complex.reader.FieldReader;
@@ -111,10 +109,7 @@ public MinorType getMinorType() {
    * @return element at given index
    */
   public long get(int index) throws IllegalStateException {
-    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
-      throw new IllegalStateException("Value at index is null");
-    }
-    return valueBuffer.getLong(index * TYPE_WIDTH);
+    return getLong(index);
   }
 
   /**
@@ -140,11 +135,7 @@ public void get(int index, NullableTimeMicroHolder holder) {
    * @return element at given index
    */
   public Long getObject(int index) {
-    if (isSet(index) == 0) {
-      return null;
-    } else {
-      return valueBuffer.getLong(index * TYPE_WIDTH);
-    }
+    return getLongObject(index);
   }
 
   /*----------------------------------------------------------------*
@@ -153,11 +144,6 @@ public Long getObject(int index) {
    |                                                                |
    *----------------------------------------------------------------*/
 
-
-  private void setValue(int index, long value) {
-    valueBuffer.setLong(index * TYPE_WIDTH, value);
-  }
-
   /**
    * Set the element at the given index to the given value.
    *
@@ -165,8 +151,7 @@ private void setValue(int index, long value) {
    * @param value   value of element
    */
   public void set(int index, long value) {
-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, value);
+    setLong(index, value);
   }
 
   /**
@@ -182,7 +167,7 @@ public void set(int index, NullableTimeMicroHolder holder) throws IllegalArgumen
       throw new IllegalArgumentException();
     } else if (holder.isSet > 0) {
       BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-      setValue(index, holder.value);
+      setLongValue(index, holder.value);
     } else {
       BitVectorHelper.setValidityBit(validityBuffer, index, 0);
     }
@@ -196,7 +181,7 @@ public void set(int index, NullableTimeMicroHolder holder) throws IllegalArgumen
    */
   public void set(int index, TimeMicroHolder holder) {
     BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, holder.value);
+    setLongValue(index, holder.value);
   }
 
   /**
@@ -208,8 +193,7 @@ public void set(int index, TimeMicroHolder holder) {
    * @param value   value of element
    */
   public void setSafe(int index, long value) {
-    handleSafe(index);
-    set(index, value);
+    setLongSafe(index, value);
   }
 
   /**
@@ -247,11 +231,7 @@ public void setSafe(int index, TimeMicroHolder holder) {
    * @param value element value
    */
   public void set(int index, int isSet, long value) {
-    if (isSet > 0) {
-      set(index, value);
-    } else {
-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
-    }
+    setLong(index, isSet, value);
   }
 
   /**
@@ -264,8 +244,7 @@ public void set(int index, int isSet, long value) {
    * @param value element value
    */
   public void setSafe(int index, int isSet, long value) {
-    handleSafe(index);
-    set(index, isSet, value);
+    setLongSafe(index, isSet, value);
   }
 
   /**
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java
index d91ed5c1bed2..4bd063bb0ff2 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java
+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java
@@ -17,8 +17,6 @@
 
 package org.apache.arrow.vector;
 
-import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;
-
 import java.time.LocalDateTime;
 
 import org.apache.arrow.memory.BufferAllocator;
@@ -113,10 +111,7 @@ public MinorType getMinorType() {
    * @return element at given index
    */
   public int get(int index) throws IllegalStateException {
-    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
-      throw new IllegalStateException("Value at index is null");
-    }
-    return valueBuffer.getInt(index * TYPE_WIDTH);
+    return getInt(index);
   }
 
   /**
@@ -158,10 +153,6 @@ public LocalDateTime getObject(int index) {
    *----------------------------------------------------------------*/
 
 
-  private void setValue(int index, int value) {
-    valueBuffer.setInt(index * TYPE_WIDTH, value);
-  }
-
   /**
    * Set the element at the given index to the given value.
    *
@@ -169,8 +160,7 @@ private void setValue(int index, int value) {
    * @param value   value of element
    */
   public void set(int index, int value) {
-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, value);
+    setInt(index, value);
   }
 
   /**
@@ -186,7 +176,7 @@ public void set(int index, NullableTimeMilliHolder holder) throws IllegalArgumen
       throw new IllegalArgumentException();
     } else if (holder.isSet > 0) {
       BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-      setValue(index, holder.value);
+      setIntValue(index, holder.value);
     } else {
       BitVectorHelper.setValidityBit(validityBuffer, index, 0);
     }
@@ -200,7 +190,7 @@ public void set(int index, NullableTimeMilliHolder holder) throws IllegalArgumen
    */
   public void set(int index, TimeMilliHolder holder) {
     BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, holder.value);
+    setIntValue(index, holder.value);
   }
 
   /**
@@ -212,8 +202,7 @@ public void set(int index, TimeMilliHolder holder) {
    * @param value   value of element
    */
   public void setSafe(int index, int value) {
-    handleSafe(index);
-    set(index, value);
+    setIntSafe(index, value);
   }
 
   /**
@@ -251,11 +240,7 @@ public void setSafe(int index, TimeMilliHolder holder) {
    * @param value element value
    */
   public void set(int index, int isSet, int value) {
-    if (isSet > 0) {
-      set(index, value);
-    } else {
-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
-    }
+    setInt(index, isSet, value);
   }
 
   /**
@@ -268,8 +253,7 @@ public void set(int index, int isSet, int value) {
    * @param value element value
    */
   public void setSafe(int index, int isSet, int value) {
-    handleSafe(index);
-    set(index, isSet, value);
+    setIntSafe(index, isSet, value);
   }
 
 
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java
index 9793c344b6d2..9b08305fa260 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java
+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java
@@ -17,8 +17,6 @@
 
 package org.apache.arrow.vector;
 
-import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;
-
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.vector.complex.impl.TimeNanoReaderImpl;
 import org.apache.arrow.vector.complex.reader.FieldReader;
@@ -111,10 +109,7 @@ public MinorType getMinorType() {
    * @return element at given index
    */
   public long get(int index) throws IllegalStateException {
-    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
-      throw new IllegalStateException("Value at index is null");
-    }
-    return valueBuffer.getLong(index * TYPE_WIDTH);
+    return getLong(index);
   }
 
   /**
@@ -140,11 +135,7 @@ public void get(int index, NullableTimeNanoHolder holder) {
    * @return element at given index
    */
   public Long getObject(int index) {
-    if (isSet(index) == 0) {
-      return null;
-    } else {
-      return valueBuffer.getLong(index * TYPE_WIDTH);
-    }
+    return getLongObject(index);
   }
 
 
@@ -155,10 +146,6 @@ public Long getObject(int index) {
    *----------------------------------------------------------------*/
 
 
-  private void setValue(int index, long value) {
-    valueBuffer.setLong(index * TYPE_WIDTH, value);
-  }
-
   /**
    * Set the element at the given index to the given value.
    *
@@ -166,8 +153,7 @@ private void setValue(int index, long value) {
    * @param value   value of element
    */
   public void set(int index, long value) {
-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, value);
+    setLong(index, value);
   }
 
   /**
@@ -183,7 +169,7 @@ public void set(int index, NullableTimeNanoHolder holder) throws IllegalArgument
       throw new IllegalArgumentException();
     } else if (holder.isSet > 0) {
       BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-      setValue(index, holder.value);
+      setLongValue(index, holder.value);
     } else {
       BitVectorHelper.setValidityBit(validityBuffer, index, 0);
     }
@@ -197,7 +183,7 @@ public void set(int index, NullableTimeNanoHolder holder) throws IllegalArgument
    */
   public void set(int index, TimeNanoHolder holder) {
     BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, holder.value);
+    setLongValue(index, holder.value);
   }
 
   /**
@@ -209,8 +195,7 @@ public void set(int index, TimeNanoHolder holder) {
    * @param value   value of element
    */
   public void setSafe(int index, long value) {
-    handleSafe(index);
-    set(index, value);
+    setLongSafe(index, value);
   }
 
   /**
@@ -248,11 +233,7 @@ public void setSafe(int index, TimeNanoHolder holder) {
    * @param value element value
    */
   public void set(int index, int isSet, long value) {
-    if (isSet > 0) {
-      set(index, value);
-    } else {
-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
-    }
+    setLong(index, isSet, value);
   }
 
   /**
@@ -265,8 +246,7 @@ public void set(int index, int isSet, long value) {
    * @param value element value
    */
   public void setSafe(int index, int isSet, long value) {
-    handleSafe(index);
-    set(index, isSet, value);
+    setLongSafe(index, isSet, value);
   }
 
   /**
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java
index 0c7061e4676e..66a8696021f3 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java
+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java
@@ -17,8 +17,6 @@
 
 package org.apache.arrow.vector;
 
-import static org.apache.arrow.vector.NullCheckingForGet.NULL_CHECKING_ENABLED;
-
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.vector.complex.impl.TimeSecReaderImpl;
 import org.apache.arrow.vector.complex.reader.FieldReader;
@@ -111,10 +109,7 @@ public MinorType getMinorType() {
    * @return element at given index
    */
   public int get(int index) throws IllegalStateException {
-    if (NULL_CHECKING_ENABLED && isSet(index) == 0) {
-      throw new IllegalStateException("Value at index is null");
-    }
-    return valueBuffer.getInt(index * TYPE_WIDTH);
+    return getInt(index);
   }
 
   /**
@@ -140,11 +135,7 @@ public void get(int index, NullableTimeSecHolder holder) {
    * @return element at given index
    */
   public Integer getObject(int index) {
-    if (isSet(index) == 0) {
-      return null;
-    } else {
-      return valueBuffer.getInt(index * TYPE_WIDTH);
-    }
+    return getIntObject(index);
   }
 
 
@@ -155,10 +146,6 @@ public Integer getObject(int index) {
    *----------------------------------------------------------------*/
 
 
-  private void setValue(int index, int value) {
-    valueBuffer.setInt(index * TYPE_WIDTH, value);
-  }
-
   /**
    * Set the element at the given index to the given value.
    *
@@ -166,8 +153,7 @@ private void setValue(int index, int value) {
    * @param value   value of element
    */
   public void set(int index, int value) {
-    BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, value);
+    setInt(index, value);
   }
 
   /**
@@ -183,7 +169,7 @@ public void set(int index, NullableTimeSecHolder holder) throws IllegalArgumentE
       throw new IllegalArgumentException();
     } else if (holder.isSet > 0) {
       BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-      setValue(index, holder.value);
+      setIntValue(index, holder.value);
     } else {
       BitVectorHelper.setValidityBit(validityBuffer, index, 0);
     }
@@ -197,7 +183,7 @@ public void set(int index, NullableTimeSecHolder holder) throws IllegalArgumentE
    */
   public void set(int index, TimeSecHolder holder) {
     BitVectorHelper.setValidityBitToOne(validityBuffer, index);
-    setValue(index, holder.value);
+    setIntValue(index, holder.value);
   }
 
   /**
@@ -209,8 +195,7 @@ public void set(int index, TimeSecHolder holder) {
    * @param value   value of element
    */
   public void setSafe(int index, int value) {
-    handleSafe(index);
-    set(index, value);
+    setIntSafe(index, value);
   }
 
   /**
@@ -248,11 +233,7 @@ public void setSafe(int index, TimeSecHolder holder) {
    * @param value element value
    */
   public void set(int index, int isSet, int value) {
-    if (isSet > 0) {
-      set(index, value);
-    } else {
-      BitVectorHelper.setValidityBit(validityBuffer, index, 0);
-    }
+    setInt(index, isSet, value);
   }
 
   /**
@@ -265,8 +246,7 @@ public void set(int index, int isSet, int value) {
    * @param value element value
    */
   public void setSafe(int index, int isSet, int value) {
-    handleSafe(index);
-    set(index, isSet, value);
+    setIntSafe(index, isSet, value);
   }
 
   /**
