diff --git a/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java b/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java
index a1a6e97407d3..bbf7ff34dc96 100644
--- a/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java
+++ b/java/memory/src/main/java/org/apache/arrow/memory/BoundsChecking.java
@@ -20,9 +20,13 @@
 /**
  * Configuration class to determine if bounds checking should be turned on or off.
  *
- * <p>Bounds checking is on by default.  To disable it you must set the system properties
- * "arrow.enable_unsafe_memory_access" and "drill.enable_unsafe_memory_access" to "true"
- * and disable java assertions.
+ * <p>
+ * Bounds checking is on by default.  You can disable it by setting either the system property or
+ * the environmental variable to "true". The system property can be "arrow.enable_unsafe_memory_access"
+ * or "drill.enable_unsafe_memory_access". The latter is deprecated. The environmental variable is named
+ * "ARROW_ENABLE_UNSAFE_MEMORY_ACCESS".
+ * When both the system property and the environmental variable are set, the system property takes precedence.
+ * </p>
  */
 public class BoundsChecking {
 
@@ -30,17 +34,27 @@ public class BoundsChecking {
   static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(BoundsChecking.class);
 
   static {
+    String envProperty = System.getenv("ARROW_ENABLE_UNSAFE_MEMORY_ACCESS");
     String oldProperty = System.getProperty("drill.enable_unsafe_memory_access");
     if (oldProperty != null) {
       logger.warn("\"drill.enable_unsafe_memory_access\" has been renamed to \"arrow.enable_unsafe_memory_access\"");
       logger.warn("\"arrow.enable_unsafe_memory_access\" can be set to: " +
               " true (to not check) or false (to check, default)");
     }
-    boolean isAssertEnabled = false;
-    assert isAssertEnabled = true;
-    BOUNDS_CHECKING_ENABLED = isAssertEnabled ||
-      !"true".equals(System.getProperty("arrow.enable_unsafe_memory_access")) ||
-      !"true".equals(oldProperty);
+    String newProperty = System.getProperty("arrow.enable_unsafe_memory_access");
+
+    // The priority of determining the unsafe flag:
+    // 1. The system properties take precedence over the environmental variable.
+    // 2. The new system property takes precedence over the new system property.
+    String unsafeFlagValue = newProperty;
+    if (unsafeFlagValue == null) {
+      unsafeFlagValue = oldProperty;
+    }
+    if (unsafeFlagValue == null) {
+      unsafeFlagValue = envProperty;
+    }
+
+    BOUNDS_CHECKING_ENABLED = !"true".equals(unsafeFlagValue);
   }
 
   private BoundsChecking() {
diff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestBoundaryChecking.java b/java/memory/src/test/java/org/apache/arrow/memory/TestBoundaryChecking.java
new file mode 100644
index 000000000000..5b86bed406b3
--- /dev/null
+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestBoundaryChecking.java
@@ -0,0 +1,150 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.arrow.memory;
+
+import java.lang.reflect.Field;
+import java.net.URLClassLoader;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+/**
+ * Test cases for evaluating the value of {@link BoundsChecking#BOUNDS_CHECKING_ENABLED}.
+ */
+public class TestBoundaryChecking {
+
+  /**
+   * Get a copy of the current class loader.
+   * @return the newly created class loader.
+   */
+  private ClassLoader copyClassLoader() {
+    ClassLoader curClassLoader = this.getClass().getClassLoader();
+    if (curClassLoader instanceof URLClassLoader) {
+      // for Java 1.8
+      return new URLClassLoader(((URLClassLoader) curClassLoader).getURLs(), null);
+    }
+
+    // for Java 1.9 and Java 11.
+    return null;
+  }
+
+  /**
+   * Get the value of flag  {@link BoundsChecking#BOUNDS_CHECKING_ENABLED}.
+   * @param classLoader the class loader from which to get the flag value.
+   * @return value of the flag.
+   */
+  private boolean getFlagValue(ClassLoader classLoader) throws Exception {
+    Class<?> clazz = classLoader.loadClass("org.apache.arrow.memory.BoundsChecking");
+    Field field = clazz.getField("BOUNDS_CHECKING_ENABLED");
+    return (Boolean) field.get(null);
+  }
+
+  /**
+   * Ensure the flag for bounds checking is enabled by default.
+   * This will protect users from JVM crashes.
+   */
+  @Test
+  public void testDefaultValue() throws Exception {
+    ClassLoader classLoader = copyClassLoader();
+    if (classLoader != null) {
+      boolean boundsCheckingEnabled = getFlagValue(classLoader);
+      Assert.assertTrue(boundsCheckingEnabled);
+    }
+  }
+
+  /**
+   * Test setting the bounds checking flag by the old property.
+   * @throws Exception if loading class {@link BoundsChecking#BOUNDS_CHECKING_ENABLED} fails.
+   */
+  @Test
+  public void testEnableOldProperty() throws Exception {
+    String savedOldProperty = System.getProperty("drill.enable_unsafe_memory_access");
+    System.setProperty("drill.enable_unsafe_memory_access", "true");
+
+    ClassLoader classLoader = copyClassLoader();
+    if (classLoader != null) {
+      boolean boundsCheckingEnabled = getFlagValue(classLoader);
+      Assert.assertFalse(boundsCheckingEnabled);
+    }
+
+    // restore system property
+    if (savedOldProperty != null) {
+      System.setProperty("drill.enable_unsafe_memory_access", savedOldProperty);
+    } else {
+      System.clearProperty("drill.enable_unsafe_memory_access");
+    }
+  }
+
+  /**
+   * Test setting the bounds checking flag by the new property.
+   * @throws Exception if loading class {@link BoundsChecking#BOUNDS_CHECKING_ENABLED} fails.
+   */
+  @Test
+  public void testEnableNewProperty() throws Exception {
+    String savedNewProperty = System.getProperty("arrow.enable_unsafe_memory_access");
+
+    System.setProperty("arrow.enable_unsafe_memory_access", "true");
+
+    ClassLoader classLoader = copyClassLoader();
+    if (classLoader != null) {
+      boolean boundsCheckingEnabled = getFlagValue(classLoader);
+      Assert.assertFalse(boundsCheckingEnabled);
+    }
+
+    // restore system property
+    if (savedNewProperty != null) {
+      System.setProperty("arrow.enable_unsafe_memory_access", savedNewProperty);
+    } else {
+      System.clearProperty("arrow.enable_unsafe_memory_access");
+    }
+  }
+
+  /**
+   * Test setting the bounds checking flag by both old and new properties.
+   * In this case, the new property should take precedence.
+   * @throws Exception if loading class {@link BoundsChecking#BOUNDS_CHECKING_ENABLED} fails.
+   */
+  @Test
+  public void testEnableBothProperties() throws Exception {
+    String savedOldProperty = System.getProperty("drill.enable_unsafe_memory_access");
+    String savedNewProperty = System.getProperty("arrow.enable_unsafe_memory_access");
+
+    System.setProperty("drill.enable_unsafe_memory_access", "false");
+    System.setProperty("arrow.enable_unsafe_memory_access", "true");
+
+    // new property takes precedence.
+    ClassLoader classLoader = copyClassLoader();
+    if (classLoader != null) {
+      boolean boundsCheckingEnabled = getFlagValue(classLoader);
+      Assert.assertFalse(boundsCheckingEnabled);
+    }
+
+    // restore system property
+    if (savedOldProperty != null) {
+      System.setProperty("drill.enable_unsafe_memory_access", savedOldProperty);
+    } else {
+      System.clearProperty("drill.enable_unsafe_memory_access");
+    }
+
+    if (savedNewProperty != null) {
+      System.setProperty("arrow.enable_unsafe_memory_access", savedNewProperty);
+    } else {
+      System.clearProperty("arrow.enable_unsafe_memory_access");
+    }
+  }
+}
