diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java
new file mode 100644
index 000000000000..8bb17f10ca28
--- /dev/null
+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIO.java
@@ -0,0 +1,199 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.sdk.io.gcp.healthcare;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Map;
+import org.apache.beam.sdk.Pipeline;
+import org.apache.beam.sdk.transforms.DoFn;
+import org.apache.beam.sdk.transforms.PTransform;
+import org.apache.beam.sdk.transforms.ParDo;
+import org.apache.beam.sdk.values.PCollection;
+import org.apache.beam.sdk.values.PCollectionTuple;
+import org.apache.beam.sdk.values.PInput;
+import org.apache.beam.sdk.values.POutput;
+import org.apache.beam.sdk.values.PValue;
+import org.apache.beam.sdk.values.TupleTag;
+import org.apache.beam.sdk.values.TupleTagList;
+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;
+
+/**
+ * The DicomIO connectors allows Beam pipelines to make calls to the Dicom API of the Google Cloud
+ * Healthcare API (https://cloud.google.com/healthcare/docs/how-tos#dicom-guide).
+ *
+ * <h3>Reading Study-Level Metadata</h3>
+ *
+ * The study-level metadata for a dicom instance can be read with {@link ReadStudyMetadata}.
+ * Retrieve the metadata of a dicom instance given its store path as a string. This will return a
+ * {@link ReadStudyMetadata.Result}. You can fetch the successful calls using getReadResponse(), and
+ * any failed reads using getFailedReads().
+ *
+ * <h3>Example</h3>
+ *
+ * {@code Pipeline p = ... String webPath = ... DicomIO.ReadStudyMetadata.Result readMetadataResult
+ * = p .apply(Create.of(webPath)) PCollection<String> goodRead =
+ * readMetadataResult.getReadResponse() PCollection<String> failRead =
+ * readMetadataResult.getFailedReads() }
+ */
+public class DicomIO {
+
+  public static ReadStudyMetadata readStudyMetadata() {
+    return new ReadStudyMetadata();
+  }
+
+  /**
+   * This class makes a call to the retrieve metadata endpoint
+   * (https://cloud.google.com/healthcare/docs/how-tos/dicomweb#retrieving_metadata). It defines a
+   * function that can be used to process a Pubsub message from a DICOM store, read the DICOM study
+   * path and get the metadata of the specified study. You can learn how to configure PubSub
+   * messages to be published when an instance is stored by following:
+   * https://cloud.google.com/healthcare/docs/how-tos/pubsub. The connector will output a {@link
+   * ReadStudyMetadata.Result} which will contain metadata of the study encoded as a json array.
+   */
+  public static class ReadStudyMetadata
+      extends PTransform<PCollection<String>, ReadStudyMetadata.Result> {
+
+    private ReadStudyMetadata() {}
+
+    /** TupleTag for the main output. */
+    public static final TupleTag<String> METADATA = new TupleTag<String>() {};
+    /** TupleTag for any error response. */
+    public static final TupleTag<String> ERROR_MESSAGE = new TupleTag<String>() {};
+
+    public static class Result implements POutput, PInput {
+      private PCollection<String> readResponse;
+
+      private PCollection<String> failedReads;
+
+      /** Contains both the response and error outputs from the transformation. */
+      PCollectionTuple pct;
+
+      /**
+       * Create DicomIO.ReadStudyMetadata.Result from PCollectionTuple which contains the response
+       * (with METADATA and ERROR_MESSAGE tags).
+       *
+       * @param pct the pct
+       * @return the read result
+       * @throws IllegalArgumentException the illegal argument exception
+       */
+      static ReadStudyMetadata.Result of(PCollectionTuple pct) throws IllegalArgumentException {
+        if (pct.getAll()
+            .keySet()
+            .containsAll((Collection<?>) TupleTagList.of(METADATA).and(ERROR_MESSAGE))) {
+          return new ReadStudyMetadata.Result(pct);
+        } else {
+          throw new IllegalArgumentException(
+              "The PCollection tuple must have the DicomIO.ReadStudyMetadata.METADATA "
+                  + "and DicomIO.ReadStudyMetadata.ERROR_MESSAGE tuple tags");
+        }
+      }
+
+      private Result(PCollectionTuple pct) {
+        this.pct = pct;
+        this.readResponse = pct.get(METADATA);
+        this.failedReads = pct.get(ERROR_MESSAGE);
+      }
+
+      /**
+       * Gets failed reads.
+       *
+       * @return the failed reads
+       */
+      public PCollection<String> getFailedReads() {
+        return failedReads;
+      }
+
+      /**
+       * Gets resources.
+       *
+       * @return the resources
+       */
+      public PCollection<String> getReadResponse() {
+        return readResponse;
+      }
+
+      @Override
+      public Pipeline getPipeline() {
+        return this.pct.getPipeline();
+      }
+
+      @Override
+      public Map<TupleTag<?>, PValue> expand() {
+        return ImmutableMap.of(METADATA, readResponse);
+      }
+
+      @Override
+      public void finishSpecifyingOutput(
+          String transformName, PInput input, PTransform<?, ?> transform) {}
+    }
+
+    /**
+     * DoFn to fetch the metadata of a study from a Dicom store based on it's location and study id.
+     */
+    @SuppressWarnings({"nullness", "rawtypes"})
+    static class FetchStudyMetadataFn extends DoFn<String, String> {
+
+      private HealthcareApiClient dicomStore;
+
+      FetchStudyMetadataFn() {}
+
+      /**
+       * Instantiate the healthcare client.
+       *
+       * @throws IOException
+       */
+      @Setup
+      public void instantiateHealthcareClient() throws IOException {
+        if (dicomStore == null) {
+          this.dicomStore = new HttpHealthcareApiClient();
+        }
+      }
+
+      /**
+       * Process The Pub/Sub message.
+       *
+       * @param context The input containing the pub/sub message
+       */
+      @ProcessElement
+      public void processElement(ProcessContext context) {
+        String dicomWebPath = context.element();
+        try {
+          // TODO [BEAM-11259] Change to non-blocking async calls
+          String responseData = dicomStore.retrieveDicomStudyMetadata(dicomWebPath);
+          context.output(METADATA, responseData);
+        } catch (IOException e) {
+          String errorMessage = e.getMessage();
+          if (errorMessage != null) {
+            context.output(ERROR_MESSAGE, errorMessage);
+          }
+        }
+      }
+    }
+
+    @Override
+    public ReadStudyMetadata.Result expand(PCollection<String> input) {
+      return new Result(
+          input.apply(
+              ParDo.of(new FetchStudyMetadataFn())
+                  .withOutputTags(
+                      ReadStudyMetadata.METADATA,
+                      TupleTagList.of(ReadStudyMetadata.ERROR_MESSAGE))));
+    }
+  }
+}
diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HealthcareApiClient.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HealthcareApiClient.java
index 013440a909cf..78a53ece7b17 100644
--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HealthcareApiClient.java
+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HealthcareApiClient.java
@@ -18,6 +18,7 @@
 package org.apache.beam.sdk.io.gcp.healthcare;
 
 import com.google.api.services.healthcare.v1beta1.model.DeidentifyConfig;
+import com.google.api.services.healthcare.v1beta1.model.DicomStore;
 import com.google.api.services.healthcare.v1beta1.model.Empty;
 import com.google.api.services.healthcare.v1beta1.model.FhirStore;
 import com.google.api.services.healthcare.v1beta1.model.Hl7V2Store;
@@ -27,6 +28,7 @@
 import com.google.api.services.healthcare.v1beta1.model.Message;
 import com.google.api.services.healthcare.v1beta1.model.Operation;
 import java.io.IOException;
+import java.net.URISyntaxException;
 import java.text.ParseException;
 import java.util.List;
 import org.apache.beam.sdk.io.gcp.healthcare.HttpHealthcareApiClient.HealthcareHttpException;
@@ -202,4 +204,14 @@ FhirStore createFhirStore(String dataset, String name, String version, String pu
   Empty deleteHL7v2Store(String store) throws IOException;
 
   Empty deleteFhirStore(String store) throws IOException;
+
+  String retrieveDicomStudyMetadata(String dicomWebPath) throws IOException;
+
+  DicomStore createDicomStore(String dataset, String name) throws IOException;
+
+  DicomStore createDicomStore(String dataset, String name, String pubsubTopic) throws IOException;
+
+  Empty deleteDicomStore(String name) throws IOException;
+
+  Empty uploadToDicomStore(String webPath, String filePath) throws IOException, URISyntaxException;
 }
diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java
index 2b6fe6477a44..79c75010ab49 100644
--- a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java
+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/HttpHealthcareApiClient.java
@@ -29,6 +29,7 @@
 import com.google.api.services.healthcare.v1beta1.model.CreateMessageRequest;
 import com.google.api.services.healthcare.v1beta1.model.DeidentifyConfig;
 import com.google.api.services.healthcare.v1beta1.model.DeidentifyFhirStoreRequest;
+import com.google.api.services.healthcare.v1beta1.model.DicomStore;
 import com.google.api.services.healthcare.v1beta1.model.Empty;
 import com.google.api.services.healthcare.v1beta1.model.ExportResourcesRequest;
 import com.google.api.services.healthcare.v1beta1.model.FhirStore;
@@ -50,6 +51,8 @@
 import java.io.Serializable;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.text.ParseException;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -66,6 +69,7 @@
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.client.methods.RequestBuilder;
 import org.apache.http.client.utils.URIBuilder;
+import org.apache.http.entity.ByteArrayEntity;
 import org.apache.http.entity.ContentType;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
@@ -199,6 +203,81 @@ public Empty deleteFhirStore(String name) throws IOException {
     return client.projects().locations().datasets().fhirStores().delete(name).execute();
   }
 
+  @Override
+  public String retrieveDicomStudyMetadata(String dicomWebPath) throws IOException {
+    WebPathParser parser = new WebPathParser();
+    WebPathParser.DicomWebPath parsedDicomWebPath = parser.parseDicomWebpath(dicomWebPath);
+
+    String searchQuery = String.format("studies/%s/metadata", parsedDicomWebPath.studyId);
+
+    return makeRetrieveStudyMetadataRequest(parsedDicomWebPath.dicomStorePath, searchQuery);
+  }
+
+  @Override
+  public DicomStore createDicomStore(String dataset, String name) throws IOException {
+    return createDicomStore(dataset, name, null);
+  }
+
+  @Override
+  public Empty deleteDicomStore(String name) throws IOException {
+    return client.projects().locations().datasets().dicomStores().delete(name).execute();
+  }
+
+  @Override
+  public Empty uploadToDicomStore(String webPath, String filePath)
+      throws IOException, URISyntaxException {
+    byte[] dcmFile = Files.readAllBytes(Paths.get(filePath));
+    ByteArrayEntity requestEntity = new ByteArrayEntity(dcmFile);
+
+    String uri = String.format("%sv1/%s/dicomWeb/studies", client.getRootUrl(), webPath);
+    URIBuilder uriBuilder =
+        new URIBuilder(uri)
+            .setParameter("access_token", credentials.getAccessToken().getTokenValue());
+    HttpUriRequest request =
+        RequestBuilder.post(uriBuilder.build())
+            .setEntity(requestEntity)
+            .addHeader("Content-Type", "application/dicom")
+            .build();
+    HttpResponse response = httpClient.execute(request);
+    return new Empty();
+  }
+
+  @Override
+  public DicomStore createDicomStore(String dataset, String name, @Nullable String pubsubTopic)
+      throws IOException {
+    DicomStore store = new DicomStore();
+
+    if (pubsubTopic != null) {
+      NotificationConfig notificationConfig = new NotificationConfig();
+      notificationConfig.setPubsubTopic(pubsubTopic);
+      store.setNotificationConfig(notificationConfig);
+    }
+
+    return client
+        .projects()
+        .locations()
+        .datasets()
+        .dicomStores()
+        .create(dataset, store)
+        .setDicomStoreId(name)
+        .execute();
+  }
+
+  private String makeRetrieveStudyMetadataRequest(String dicomStorePath, String searchQuery)
+      throws IOException {
+    CloudHealthcare.Projects.Locations.Datasets.DicomStores.Studies.RetrieveMetadata request =
+        this.client
+            .projects()
+            .locations()
+            .datasets()
+            .dicomStores()
+            .studies()
+            .retrieveMetadata(dicomStorePath, searchQuery);
+    com.google.api.client.http.HttpResponse response = request.executeUnparsed();
+
+    return response.parseAsString();
+  }
+
   @Override
   public Instant getEarliestHL7v2SendTime(String hl7v2Store, @Nullable String filter)
       throws IOException {
diff --git a/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParser.java b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParser.java
new file mode 100644
index 000000000000..07fa6857f208
--- /dev/null
+++ b/sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParser.java
@@ -0,0 +1,63 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.sdk.io.gcp.healthcare;
+
+import java.io.IOException;
+
+@SuppressWarnings({"StringSplitter"})
+public class WebPathParser {
+
+  public static class DicomWebPath {
+    public String studyId = "";
+    public String seriesId = "";
+    public String instanceId = "";
+    public String dicomStorePath = "";
+    public String project = "";
+    public String location = "";
+    public String dataset = "";
+    public String storeId = "";
+  }
+
+  public DicomWebPath parseDicomWebpath(String unparsedWebpath) throws IOException {
+    String[] webPathSplit = unparsedWebpath.split("/dicomWeb/");
+
+    if (webPathSplit.length != 2) {
+      throw new IOException("Invalid DICOM web path");
+    }
+
+    DicomWebPath dicomWebPath = new DicomWebPath();
+
+    dicomWebPath.dicomStorePath = webPathSplit[0];
+    String[] storePathElements = dicomWebPath.dicomStorePath.split("/");
+    dicomWebPath.project = storePathElements[1];
+    dicomWebPath.location = storePathElements[3];
+    dicomWebPath.dataset = storePathElements[5];
+    dicomWebPath.storeId = storePathElements[7];
+
+    String[] searchParameters;
+    searchParameters = webPathSplit[1].split("/");
+    if (searchParameters.length < 2) {
+      throw new IOException("Invalid DICOM web path");
+    }
+    dicomWebPath.studyId = searchParameters[1];
+    dicomWebPath.seriesId = searchParameters[3];
+    dicomWebPath.instanceId = searchParameters[5];
+
+    return dicomWebPath;
+  }
+}
diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOReadIT.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOReadIT.java
new file mode 100644
index 000000000000..36fdb57af2af
--- /dev/null
+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOReadIT.java
@@ -0,0 +1,91 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.sdk.io.gcp.healthcare;
+
+import static org.apache.beam.sdk.io.gcp.healthcare.HL7v2IOTestUtil.HEALTHCARE_DATASET_TEMPLATE;
+
+import java.io.IOException;
+import java.net.URISyntaxException;
+import org.apache.beam.sdk.PipelineResult;
+import org.apache.beam.sdk.testing.PAssert;
+import org.apache.beam.sdk.testing.TestPipeline;
+import org.apache.beam.sdk.transforms.Create;
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+
+@SuppressWarnings({"nullness", "rawtypes", "uninitialized"})
+public class DicomIOReadIT {
+  private static final String TEST_FILE_PATH = "src/test/resources/DICOM/testDicomFile.dcm";
+  private static final String TEST_FILE_STUDY_ID = "study_000000000";
+  @Rule public transient TestPipeline pipeline = TestPipeline.create();
+
+  private String healthcareDataset;
+  private String project;
+  private HealthcareApiClient client;
+  private String storeName = "foo";
+
+  @Before
+  public void setup() throws IOException, URISyntaxException {
+    project =
+        TestPipeline.testingPipelineOptions()
+            .as(HealthcareStoreTestPipelineOptions.class)
+            .getStoreProjectId();
+    healthcareDataset = String.format(HEALTHCARE_DATASET_TEMPLATE, project);
+    client = new HttpHealthcareApiClient();
+
+    client.createDicomStore(healthcareDataset, storeName);
+    client.uploadToDicomStore(healthcareDataset + "/dicomStores/" + storeName, TEST_FILE_PATH);
+  }
+
+  @After
+  public void deleteDicomStore() throws IOException {
+    client.deleteDicomStore(healthcareDataset + "/dicomStores/" + storeName);
+  }
+
+  @Test
+  public void testDicomMetadataRead() throws IOException {
+    String webPath =
+        String.format(
+            "%s/dicomStores/%s/dicomWeb/studies/%s",
+            healthcareDataset, storeName, TEST_FILE_STUDY_ID);
+
+    DicomIO.ReadStudyMetadata.Result result =
+        pipeline.apply(Create.of(webPath)).apply(DicomIO.readStudyMetadata());
+
+    PAssert.that(result.getFailedReads()).empty();
+    PAssert.that(result.getReadResponse())
+        .satisfies(
+            input -> {
+              for (String resp : input) {
+                Assert.assertTrue(resp.contains(TEST_FILE_STUDY_ID));
+              }
+              return null;
+            });
+
+    PipelineResult job = pipeline.run();
+
+    try {
+      job.cancel();
+    } catch (UnsupportedOperationException exc) {
+      // noop - if runner does not support job.cancel()
+    }
+  }
+}
diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOTest.java
new file mode 100644
index 000000000000..7e565d1bac1b
--- /dev/null
+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/DicomIOTest.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.sdk.io.gcp.healthcare;
+
+import static java.nio.charset.StandardCharsets.UTF_8;
+
+import org.apache.beam.sdk.io.gcp.pubsub.PubsubMessage;
+import org.apache.beam.sdk.testing.PAssert;
+import org.apache.beam.sdk.testing.TestPipeline;
+import org.apache.beam.sdk.transforms.Create;
+import org.junit.Assert;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class DicomIOTest {
+  @Rule public final transient TestPipeline pipeline = TestPipeline.create();
+
+  @Test
+  public void test_Dicom_failedMetadataRead() {
+    String badWebPath = "foo";
+
+    DicomIO.ReadStudyMetadata.Result retrievedData;
+    retrievedData = pipeline.apply(Create.of(badWebPath)).apply(DicomIO.readStudyMetadata());
+
+    PAssert.that(retrievedData.getReadResponse()).empty();
+
+    PAssert.that(retrievedData.getFailedReads())
+        .satisfies(
+            (errors) -> {
+              Assert.assertTrue(errors.iterator().hasNext());
+              return null;
+            });
+
+    pipeline.run();
+  }
+
+  private PubsubMessage createPubSubMessage(String webpath) {
+    byte[] badMessageBody;
+    badMessageBody = webpath.getBytes(UTF_8);
+    return new PubsubMessage(badMessageBody, null);
+  }
+}
diff --git a/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParserTest.java b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParserTest.java
new file mode 100644
index 000000000000..40e40f008e08
--- /dev/null
+++ b/sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/healthcare/WebPathParserTest.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.beam.sdk.io.gcp.healthcare;
+
+import java.io.IOException;
+import org.junit.Assert;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
+
+@RunWith(JUnit4.class)
+public class WebPathParserTest {
+
+  @Test
+  public void test_parsedAllElements() throws IOException {
+    String webpathStr =
+        "projects/foo/location/earth/datasets/bar/dicomStores/fee/dicomWeb/studies/abc/series/xyz/instances/123";
+
+    WebPathParser parser = new WebPathParser();
+    WebPathParser.DicomWebPath dicomWebPath = parser.parseDicomWebpath(webpathStr);
+
+    Assert.assertNotNull(dicomWebPath);
+    Assert.assertEquals("foo", dicomWebPath.project);
+    Assert.assertEquals("earth", dicomWebPath.location);
+    Assert.assertEquals("bar", dicomWebPath.dataset);
+    Assert.assertEquals("fee", dicomWebPath.storeId);
+    Assert.assertEquals("abc", dicomWebPath.studyId);
+    Assert.assertEquals("xyz", dicomWebPath.seriesId);
+    Assert.assertEquals("123", dicomWebPath.instanceId);
+    Assert.assertEquals(
+        "projects/foo/location/earth/datasets/bar/dicomStores/fee", dicomWebPath.dicomStorePath);
+  }
+}
diff --git a/sdks/java/io/google-cloud-platform/src/test/resources/DICOM/testDicomFile.dcm b/sdks/java/io/google-cloud-platform/src/test/resources/DICOM/testDicomFile.dcm
new file mode 100644
index 000000000000..9c4a1520d948
Binary files /dev/null and b/sdks/java/io/google-cloud-platform/src/test/resources/DICOM/testDicomFile.dcm differ
