diff --git a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java
index b4cc5ae7bdad..e8e5fa7b8e79 100644
--- a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java
+++ b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/Monitor.java
@@ -39,20 +39,15 @@
   private class MonitorDoFn extends DoFn<T, T> {
     final Counter elementCounter = Metrics.counter(name, prefix + ".elements");
     final Counter bytesCounter = Metrics.counter(name, prefix + ".bytes");
-    final Distribution startTime = Metrics.distribution(name, prefix + ".startTime");
-    final Distribution endTime = Metrics.distribution(name, prefix + ".endTime");
-    final Distribution startTimestamp = Metrics.distribution(name, prefix + ".startTimestamp");
-    final Distribution endTimestamp = Metrics.distribution(name, prefix + ".endTimestamp");
+    final Distribution processingTime = Metrics.distribution(name, prefix + ".processingTime");
+    final Distribution eventTimestamp = Metrics.distribution(name, prefix + ".eventTimestamp");
 
     @ProcessElement
     public void processElement(ProcessContext c) {
       elementCounter.inc();
       bytesCounter.inc(c.element().sizeInBytes());
-      long now = System.currentTimeMillis();
-      startTime.update(now);
-      endTime.update(now);
-      startTimestamp.update(c.timestamp().getMillis());
-      endTimestamp.update(c.timestamp().getMillis());
+      processingTime.update(System.currentTimeMillis());
+      eventTimestamp.update(c.timestamp().getMillis());
       c.output(c.element());
     }
   }
diff --git a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java
index fd2044f652e9..8624757adaeb 100644
--- a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java
+++ b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/NexmarkLauncher.java
@@ -275,18 +275,18 @@ private NexmarkPerf currentPerf(
 
     long numEvents = eventMetrics.getCounterMetric(eventMonitor.prefix + ".elements");
     long numEventBytes = eventMetrics.getCounterMetric(eventMonitor.prefix + ".bytes");
-    long eventStart = eventMetrics.getStartTimeMetric(eventMonitor.prefix + ".startTime");
-    long eventEnd = eventMetrics.getEndTimeMetric(eventMonitor.prefix + ".endTime");
+    long eventStart = eventMetrics.getStartTimeMetric(eventMonitor.prefix + ".processingTime");
+    long eventEnd = eventMetrics.getEndTimeMetric(eventMonitor.prefix + ".processingTime");
 
     MetricsReader resultMetrics = new MetricsReader(result, resultMonitor.name);
 
     long numResults = resultMetrics.getCounterMetric(resultMonitor.prefix + ".elements");
     long numResultBytes = resultMetrics.getCounterMetric(resultMonitor.prefix + ".bytes");
-    long resultStart = resultMetrics.getStartTimeMetric(resultMonitor.prefix + ".startTime");
-    long resultEnd = resultMetrics.getEndTimeMetric(resultMonitor.prefix + ".endTime");
+    long resultStart = resultMetrics.getStartTimeMetric(resultMonitor.prefix + ".processingTime");
+    long resultEnd = resultMetrics.getEndTimeMetric(resultMonitor.prefix + ".processingTime");
     long timestampStart =
-        resultMetrics.getStartTimeMetric(resultMonitor.prefix + ".startTimestamp");
-    long timestampEnd = resultMetrics.getEndTimeMetric(resultMonitor.prefix + ".endTimestamp");
+        resultMetrics.getStartTimeMetric(resultMonitor.prefix + ".eventTimestamp");
+    long timestampEnd = resultMetrics.getEndTimeMetric(resultMonitor.prefix + ".eventTimestamp");
 
     long effectiveEnd = -1;
     if (eventEnd >= 0 && resultEnd >= 0) {
diff --git a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java
index 7ae1523b1206..13947e9a25e8 100644
--- a/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java
+++ b/sdks/java/testing/nexmark/src/main/java/org/apache/beam/sdk/nexmark/queries/NexmarkQuery.java
@@ -39,7 +39,6 @@
   final NexmarkConfiguration configuration;
   public final Monitor<Event> eventMonitor;
   public final Monitor<T> resultMonitor;
-  private final Monitor<Event> endOfStreamMonitor;
   private final Counter fatalCounter;
   private final NexmarkQueryTransform<T> transform;
   private transient PCollection<KV<Long, String>> sideInput = null;
@@ -51,12 +50,10 @@ public NexmarkQuery(NexmarkConfiguration configuration, NexmarkQueryTransform<T>
     if (configuration.debug) {
       eventMonitor = new Monitor<>(name + ".Events", "event");
       resultMonitor = new Monitor<>(name + ".Results", "result");
-      endOfStreamMonitor = new Monitor<>(name + ".EndOfStream", "end");
       fatalCounter = Metrics.counter(name, "fatal");
     } else {
       eventMonitor = null;
       resultMonitor = null;
-      endOfStreamMonitor = null;
       fatalCounter = null;
     }
   }
