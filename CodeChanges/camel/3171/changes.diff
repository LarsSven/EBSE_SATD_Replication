diff --git a/examples/camel-example-debezium/.gitignore b/examples/camel-example-debezium/.gitignore
new file mode 100644
index 000000000000..a2937132fffd
--- /dev/null
+++ b/examples/camel-example-debezium/.gitignore
@@ -0,0 +1 @@
+*.data
\ No newline at end of file
diff --git a/examples/camel-example-debezium/README.adoc b/examples/camel-example-debezium/README.adoc
new file mode 100644
index 000000000000..62c43c1afea3
--- /dev/null
+++ b/examples/camel-example-debezium/README.adoc
@@ -0,0 +1,91 @@
+= Camel Debezium example
+
+=== Introduction
+
+An example which shows how to integrate Camel with Debezium and sink everything into a target database.
+
+This project consists of the following examples:
+
+  1. Send events using Debezium component to Kinesis .
+  2. Example how data can be sinked into Cassandra that produced by Debezium.
+
+== Prerequisites
+=== MySQL
+In order to stream changes from MySQL, you will need to have https://debezium.io/documentation/reference/0.9/connectors/mysql.html#enabling-the-binlog[_row-level_] binary binlog enabled. However,
+for the sake of this example, we will use the following docker image which is setup with row enabled binary logs and some sample data:
+```
+docker run -it --rm --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=debezium -e MYSQL_USER=mysqluser -e MYSQL_PASSWORD=mysqlpw debezium/example-mysql:0.9
+```
+The above docker image will start a MySQL server exposed to port `3306` with root password set.
+
+=== Amazon Kinesis
+Since we will use Kinesis to stream changes from Debezium as an example, you need to create a stream called `camel-debezium-example` in `eu-central-1`. As well, you will need to create AWS access and secret keys, once you are done from creating the keys, update the following properties in `src/main/resources/application.properties`:
+```
+kinesis.accessKey ={{generated-access-key}}
+kinesis.secretKey = {{generated-secret-key}}
+```
+
+
+=== Cassandra
+In this example, we will use Cassandra to sink the events into, you will need to either to download and run Cassandra on your machine or you can simply use the following docker image that exposes a Cassandra instance on port 9042:
+```
+docker run -p 9042:9042 --rm --name cassandra -d cassandra
+```
+Once you have your Cassandra instance, using your favorite CQL gui or even https://docs.datastax.com/en/archived/cql/3.3/cql/cql_reference/cqlsh.html[cqlsh], you will need to execute the following CQL commands to prepare the necessary keyspace and table for our example:
+```
+CREATE KEYSPACE dbzSink WITH replication = {'class':'SimpleStrategy', 'replication_factor' : 1};
+
+USE dbzSink;
+
+ CREATE TABLE products (
+  id int PRIMARY KEY,
+  name varchar,
+  description varchar,
+  weight float
+);
+```
+*Note:* We will stream a table called `product` from MySQL docker image which is already set. Most of the configurations that will get you started with this example are already set in `application.properties`.
+
+
+=== Build
+
+You will need to compile this example first:
+
+    $ mvn clean compile
+
+=== Run
+
+Run the Kinesis producer first
+
+    $ mvn compile exec:java -Pkinesis-producer
+
+Run the Debezium consumer in the seperate shell
+
+    $ mvn compile exec:java -Pdebezium-consumer
+
+Initially, you will Debezium will perform a snapshot of the whitelisted tables per `application.properties`, hence you should expect
+the data to be replicated into Cassandra. Once the snapshot mode is done, you can try to insert a new row, update fields, delete .. etc on  MySQL whitelisted table(s), you should see
+the changes reflecting on Cassandra as well, you can verify that by running the following query on cqlsh:
+```
+select * from dbzSink.products;
+```
+
+
+=== Configuration
+
+You can configure the details in the file:
+  `src/main/resources/application.properties`
+
+You can enable verbose logging by adjusting the `src/main/resources/log4j2.properties`
+  file as documented in the file.
+
+=== Forum, Help, etc
+
+If you hit an problems please let us know on the Camel Forums
+	<http://camel.apache.org/discussion-forums.html>
+
+Please help us make Apache Camel better - we appreciate any feedback you may
+have.  Enjoy!
+
+
+The Camel riders!
diff --git a/examples/camel-example-debezium/pom.xml b/examples/camel-example-debezium/pom.xml
new file mode 100644
index 000000000000..95abed66220e
--- /dev/null
+++ b/examples/camel-example-debezium/pom.xml
@@ -0,0 +1,117 @@
+<?xml version="1.0"?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the "License"); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.camel.example</groupId>
+        <artifactId>examples</artifactId>
+        <version>3.0.0-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>camel-example-debezium</artifactId>
+    <name>Camel :: Example :: Debezium</name>
+    <description>An example for Debezium Component</description>
+
+    <properties>
+        <category>Database</category>
+    </properties>
+
+    <dependencies>
+
+        <!-- camel -->
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-main</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-debezium</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-jackson</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-aws-kinesis</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-cassandraql</artifactId>
+        </dependency>
+
+        <!-- logging -->
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+            <version>2.7</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <version>2.7</version>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-slf4j-impl</artifactId>
+            <version>2.7</version>
+        </dependency>
+    </dependencies>
+
+    <profiles>
+
+        <profile>
+            <id>kinesis-producer</id>
+            <properties>
+                <target.main.class>org.apache.camel.example.debezium.KinesisProducerToCassandra</target.main.class>
+            </properties>
+        </profile>
+
+        <profile>
+            <id>debezium-consumer</id>
+            <properties>
+                <target.main.class>org.apache.camel.example.debezium.DebeziumMySqlConsumerToKinesis</target.main.class>
+            </properties>
+        </profile>
+
+    </profiles>
+
+    <build>
+        <plugins>
+            <!-- Allows the example to be run via 'mvn compile exec:java' -->
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>exec-maven-plugin</artifactId>
+                <configuration>
+                    <mainClass>${target.main.class}</mainClass>
+                    <includePluginDependencies>false</includePluginDependencies>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+
+</project>
diff --git a/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/DebeziumMySqlConsumerToKinesis.java b/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/DebeziumMySqlConsumerToKinesis.java
new file mode 100644
index 000000000000..86335ea4f515
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/DebeziumMySqlConsumerToKinesis.java
@@ -0,0 +1,108 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example.debezium;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.aws.kinesis.KinesisConstants;
+import org.apache.camel.component.debezium.DebeziumConstants;
+import org.apache.camel.component.properties.PropertiesComponent;
+import org.apache.camel.main.Main;
+import org.apache.camel.model.dataformat.JsonLibrary;
+import org.apache.kafka.connect.data.Struct;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A simple example to consume data from Debezium and send it to Kinesis
+ */
+public final class DebeziumMySqlConsumerToKinesis {
+
+    private static final Logger LOG = LoggerFactory.getLogger(DebeziumMySqlConsumerToKinesis.class);
+
+    // use Camel Main to setup and run Camel
+    private static Main main = new Main();
+
+    private DebeziumMySqlConsumerToKinesis() {
+    }
+
+    public static void main(String[] args) throws Exception {
+
+        LOG.debug("About to run Debezium integration...");
+
+        // add route
+        main.addRouteBuilder(new RouteBuilder() {
+            public void configure() {
+                // Initial Debezium route that will run and listens to the changes,
+                // first it will perform an initial snapshot using (select * from) in case there are no offsets
+                // exists for the connector and then it will listens to MySQL binlogs for any DB events such as (UPDATE, INSERT and DELETE)
+                from("debezium:mysql?name={{debezium.mysql.name}}"
+                        + "&databaseServerId={{debezium.mysql.databaseServerId}}"
+                        + "&databaseHostName={{debezium.mysql.databaseHostName}}"
+                        + "&databaseUser={{debezium.mysql.databaseUser}}"
+                        + "&databasePassword={{debezium.mysql.databasePassword}}"
+                        + "&databaseServerName={{debezium.mysql.databaseServerName}}"
+                        + "&databaseHistoryFileName={{debezium.mysql.databaseHistoryFileName}}"
+                        + "&databaseWhitelist={{debezium.mysql.databaseWhitelist}}"
+                        + "&tableWhitelist={{debezium.mysql.tableWhitelist}}"
+                        + "&offsetStorageFileName={{debezium.mysql.offsetStorageFileName}}")
+                        .routeId("FromDebeziumMySql")
+                        // We will need to prepare the data for Kinesis, however we need to mention here is that Kinesis is bit different from Kafka in terms
+                        // of the key partition which only limited to 256 byte length, depending on the size of your key, that may not be optimal. Therefore, the safer option is to hash the key
+                        // and convert it to string, but that means we need to preserve the key information into the message body in order not to lose these information downstream.
+                        // Note: If you'd use Kafka, most probably you will not need these transformations as you can send the key as an object and Kafka will do
+                        // the rest to hash it in the broker in order to place it in the correct topic's partition.
+                        .setBody(exchange -> {
+                            // Using Camel Data Format, we can retrieve our data in Map since Debezium component has a Type Converter from Struct to Map, you need to specify the Map.class
+                            // in order to convert the data from Struct to Map
+                            final Map key = exchange.getMessage().getHeader(DebeziumConstants.HEADER_KEY, Map.class);
+                            final Map value = exchange.getMessage().getBody(Map.class);
+                            // Also, we need the operation in order to determine when an INSERT, UPDATE or DELETE happens
+                            final String operation = (String) exchange.getMessage().getHeader(DebeziumConstants.HEADER_OPERATION);
+                            // We we will put everything as nested Map in order to utilize Camel's Type Format
+                            final Map<String, Object> kinesisBody = new HashMap<>();
+
+                            kinesisBody.put("key", key);
+                            kinesisBody.put("value", value);
+                            kinesisBody.put("operation", operation);
+
+                            return kinesisBody;
+                        })
+                        // As we mentioned above, we will need to hash the key partition and set it into the headers
+                        .process(exchange -> {
+                            final Struct key = (Struct) exchange.getMessage().getHeader(DebeziumConstants.HEADER_KEY);
+                            final String hash = String.valueOf(key.hashCode());
+
+                            exchange.getMessage().setHeader(KinesisConstants.PARTITION_KEY, hash);
+                        })
+                        // Marshal everything to JSON, you can use any other data format such as Avro, Protobuf..etc, but in this example we will keep it to JSON for simplicity
+                        .marshal().json(JsonLibrary.Jackson)
+                        // Send our data to kinesis
+                        .to("aws-kinesis:{{kinesis.streamName}}?accessKey=RAW({{kinesis.accessKey}})"
+                                + "&secretKey=RAW({{kinesis.secretKey}})"
+                                + "&region={{kinesis.region}}")
+                        .end();
+            }
+        });
+
+        // start and run Camel (block)
+        main.run();
+    }
+
+}
diff --git a/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/KinesisProducerToCassandra.java b/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/KinesisProducerToCassandra.java
new file mode 100644
index 000000000000..a31b0930d730
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/java/org/apache/camel/example/debezium/KinesisProducerToCassandra.java
@@ -0,0 +1,107 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.example.debezium;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Map;
+
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.properties.PropertiesComponent;
+import org.apache.camel.main.Main;
+import org.apache.camel.model.dataformat.JsonLibrary;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * A simple example to sink data from Kinesis that produced by Debezium into Cassandra
+ */
+public final class KinesisProducerToCassandra {
+
+    private static final Logger LOG = LoggerFactory.getLogger(KinesisProducerToCassandra.class);
+
+    // use Camel Main to setup and run Camel
+    private static Main main = new Main();
+
+    private KinesisProducerToCassandra() {
+    }
+
+    public static void main(String[] args) throws Exception {
+
+        LOG.debug("About to run Kinesis to Cassandra integration...");
+
+        // add route
+        main.addRouteBuilder(new RouteBuilder() {
+            public void configure() {
+                // We set the CQL templates we need, note that an UPDATE in Cassandra means an UPSERT which is what we need
+                final String cqlUpdate = "update products set name = ?, description = ?, weight = ? where id = ?";
+                final String cqlDelete = "delete from products where id = ?";
+
+                from("aws-kinesis:{{kinesis.streamName}}?accessKey=RAW({{kinesis.accessKey}})"
+                        + "&secretKey=RAW({{kinesis.secretKey}})"
+                        + "&region={{kinesis.region}}")
+                        // Since we expect the data of the body to be ByteArr, we convert it to String using Kinesis
+                        // Type Converter, in order to unmarshal later from JSON to Map
+                        .convertBodyTo(String.class)
+                        // Unmarshal our body, it will convert it from JSON to Map
+                        .unmarshal().json(JsonLibrary.Jackson)
+                        // In order not to lose the operation that we set in Debezium, we set it as a property or you can as
+                        // as well set it to a header
+                        .setProperty("DBOperation", simple("${body[operation]}"))
+                        .choice()
+                            // If we have a INSERT or UPDATE, we will need to set the body with with the CQL query parameters since we are using
+                            // camel-cassandraql component
+                            .when(exchangeProperty("DBOperation").in("c", "u"))
+                                .setBody(exchange -> {
+                                    final Map body = (Map) exchange.getMessage().getBody();
+                                    final Map value = (Map) body.get("value");
+                                    final Map key = (Map) body.get("key");
+
+                                    // We as well check for nulls
+                                    final String name = value.get("name") != null ? value.get("name").toString() : "";
+                                    final String description = value.get("description") != null ? value.get("description").toString() : "";
+                                    final float weight = value.get("weight") != null ? Float.parseFloat(value.get("weight").toString()) : 0;
+
+                                    return Arrays.asList(name, description, weight, key.get("id"));
+                                })
+                                // We set the appropriate query in the header so we don't run the same route twice
+                                .setHeader("CQLQuery", constant(cqlUpdate))
+                            // If we have a DELETE, then we just set the id as a query parameter in the body
+                            .when(exchangeProperty("DBOperation").isEqualTo("d"))
+                                .setBody(exchange -> {
+                                    final Map body = (Map) exchange.getMessage().getBody();
+                                    final Map key = (Map) body.get("key");
+
+                                    return Collections.singletonList(key.get("id"));
+                                })
+                                // We set the appropriate query in the header so we don't run the same route twice
+                                .setHeader("CQLQuery", constant(cqlDelete))
+                        .end()
+                        .choice()
+                            // We just make sure we ONLY handle INSERT, UPDATE and DELETE and nothing else
+                            .when(exchangeProperty("DBOperation").in("c", "u", "d"))
+                                // Send query to Cassandra
+                                .recipientList(simple("cql:{{cassandra.host}}/{{cassandra.keyspace}}?cql=RAW(${header.CQLQuery})"))
+                        .end();
+            }
+        });
+
+        // start and run Camel (block)
+        main.run();
+    }
+
+}
diff --git a/examples/camel-example-debezium/src/main/resources/META-INF/LICENSE.txt b/examples/camel-example-debezium/src/main/resources/META-INF/LICENSE.txt
new file mode 100644
index 000000000000..6b0b1270ff0c
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/resources/META-INF/LICENSE.txt
@@ -0,0 +1,203 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/examples/camel-example-debezium/src/main/resources/META-INF/NOTICE.txt b/examples/camel-example-debezium/src/main/resources/META-INF/NOTICE.txt
new file mode 100644
index 000000000000..2e215bf2e6b1
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/resources/META-INF/NOTICE.txt
@@ -0,0 +1,11 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Camel distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Please read the different LICENSE files present in the licenses directory of
+   this distribution.
diff --git a/examples/camel-example-debezium/src/main/resources/application.properties b/examples/camel-example-debezium/src/main/resources/application.properties
new file mode 100644
index 000000000000..75ef43df667c
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/resources/application.properties
@@ -0,0 +1,38 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the "License"); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+
+debezium.mysql.name = debezium-mysql-example-01
+
+debezium.mysql.databaseHostName = localhost
+debezium.mysql.databaseServerId = 8445698
+debezium.mysql.databaseUser = debezium
+debezium.mysql.databasePassword = dbz
+debezium.mysql.databaseServerName = debezium-connector-mysql-01
+debezium.mysql.databaseHistoryFileName = dbhistory-01.data
+debezium.mysql.databaseWhitelist = inventory
+
+debezium.mysql.tableWhitelist = inventory.products
+
+debezium.mysql.offsetStorageFileName = offset-01.data
+
+kinesis.streamName = camel-debezium-example
+kinesis.accessKey = {{generated-access-key}}
+kinesis.secretKey = {{generated-secret-key}}
+kinesis.region = EU_CENTRAL_1
+
+cassandra.host = localhost:9042
+cassandra.keyspace = dbzSink
\ No newline at end of file
diff --git a/examples/camel-example-debezium/src/main/resources/log4j2.properties b/examples/camel-example-debezium/src/main/resources/log4j2.properties
new file mode 100644
index 000000000000..d406a9f62ba0
--- /dev/null
+++ b/examples/camel-example-debezium/src/main/resources/log4j2.properties
@@ -0,0 +1,23 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the "License"); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an "AS IS" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+
+appender.out.type = Console
+appender.out.name = out
+appender.out.layout.type = PatternLayout
+appender.out.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
+rootLogger.level = INFO
+rootLogger.appenderRef.out.ref = out
diff --git a/examples/pom.xml b/examples/pom.xml
index b9b8b04b7b9c..53254b2ebe5c 100644
--- a/examples/pom.xml
+++ b/examples/pom.xml
@@ -67,6 +67,7 @@
         <module>camel-example-cxf-tomcat</module>
         <module>camel-example-cxf-ws-security-signature</module>
         <module>camel-example-console</module>
+        <module>camel-example-debezium</module>
         <module>camel-example-ehcache-blueprint</module>
         <module>camel-example-ftp</module>
         <module>camel-example-google-pubsub</module>
