diff --git a/3rdparty/commons/BUILD b/3rdparty/commons/BUILD
index a1f01e08a32..0ca16c974fd 100644
--- a/3rdparty/commons/BUILD
+++ b/3rdparty/commons/BUILD
@@ -6,3 +6,10 @@ java_import(
     name = "commons-io-java",
     jars = ["commons-io-2.4.jar"],
 )
+
+java_import(
+    name = "commons-cli-java",
+    jars = [
+        "commons-cli-1.3.1.jar"
+    ],
+)
diff --git a/3rdparty/commons/commons-cli-1.3.1.jar b/3rdparty/commons/commons-cli-1.3.1.jar
new file mode 100644
index 00000000000..c3e7a1f47f8
Binary files /dev/null and b/3rdparty/commons/commons-cli-1.3.1.jar differ
diff --git a/heron/newscheduler/src/java/BUILD b/heron/newscheduler/src/java/BUILD
index 43445e83827..48ea41ff337 100644
--- a/heron/newscheduler/src/java/BUILD
+++ b/heron/newscheduler/src/java/BUILD
@@ -4,6 +4,7 @@ load("/tools/rules/heron_deps", "heron_java_proto_files")
 
 common_deps_files = [
    "//heron/common/src/java:common-java",
+   "//3rdparty/commons:commons-cli-java",
    "//3rdparty/guava:guava-java",
 ]
 
diff --git a/heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java b/heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
index 8dc7e1632a4..4a2ed9a3285 100644
--- a/heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
+++ b/heron/newscheduler/src/java/com/twitter/heron/scheduler/SchedulerMain.java
@@ -25,6 +25,14 @@
 import com.twitter.heron.spi.utils.Shutdown;
 import com.twitter.heron.spi.utils.TopologyUtils;
 
+import org.apache.commons.cli.DefaultParser;
+import org.apache.commons.cli.CommandLine;
+import org.apache.commons.cli.CommandLineParser;
+import org.apache.commons.cli.Options;
+import org.apache.commons.cli.Option;
+import org.apache.commons.cli.ParseException;
+import org.apache.commons.cli.HelpFormatter;
+
 /**
  * Main class of scheduler.
  */
@@ -86,15 +94,115 @@ protected static Config commandLineConfigs(String cluster, String role, String e
     return config;
   }
 
+  // Print usage options
+  private static void usage(Options options) {
+    HelpFormatter formatter = new HelpFormatter();
+    formatter.printHelp( "SchedulerMain", options );
+  }
+
+  // Construct all required command line options
+  private static Options constructOptions() {
+    Options options = new Options();
+
+    Option cluster = Option.builder("c")
+        .desc("Cluster name in which the topology needs to run on")
+        .longOpt("cluster")
+        .hasArgs()
+        .argName("cluster")
+        .required()
+        .build();
+
+    Option role = Option.builder("r")
+        .desc("Role under which the topology needs to run")
+        .longOpt("role")
+        .hasArgs()
+        .argName("role")
+        .required()
+        .build();
+
+    Option environment = Option.builder("e")
+        .desc("Environment under which the topology needs to run")
+        .longOpt("environment")
+        .hasArgs()
+        .argName("environment")
+        .required()
+        .build();
+
+    Option topologyName = Option.builder("n")
+        .desc("Name of the topology")
+        .longOpt("topology_name")
+        .hasArgs()
+        .argName("topology name")
+        .required()
+        .build();
+
+    Option topologyJar = Option.builder("f")
+        .desc("Topology jar file path")
+        .longOpt("topology_jar")
+        .hasArgs()
+        .argName("topology jar file")
+        .required()
+        .build();
+
+    Option schedulerHTTPPort = Option.builder("p")
+        .desc("Http Port number on which the scheduler listens for requests")
+        .longOpt("http_port")
+        .hasArgs()
+        .argName("http port")
+        .required()
+        .build();
+
+    options.addOption(cluster);
+    options.addOption(role);
+    options.addOption(environment);
+    options.addOption(topologyName);
+    options.addOption(topologyJar);
+    options.addOption(schedulerHTTPPort);
+
+    return options;
+  }
+
+  // construct command line help options
+  private static Options constructHelpOptions() {
+    Options options = new Options();
+    Option help = Option.builder("h")
+        .desc("List all options and their description")
+        .longOpt("help")
+        .build();
+
+    options.addOption(help);
+    return options;
+  }
+
   public static void main(String[] args) throws
-      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException, ParseException {
+
+    Options options = constructOptions();
+    Options helpOptions = constructHelpOptions();
+    CommandLineParser parser = new DefaultParser();
+    // parse the help options first.
+    CommandLine cmd = parser.parse(helpOptions, args, true);;
+
+    if(cmd.hasOption("h")) {
+      usage(options);
+      return;
+    }
+
+    try {
+      // Now parse the required options
+      cmd = parser.parse(options, args);
+    } catch(ParseException e) {
+      LOG.severe("Error parsing command line options: " + e.getMessage());
+      usage(options);
+      System.exit(1);
+    }
 
-    String cluster = args[0];
-    String role = args[1];
-    String environ = args[2];
-    String topologyName = args[3];
-    String topologyJarFile = args[4];
-    int schedulerServerPort = Integer.parseInt(args[5]);
+    String cluster = cmd.getOptionValue("cluster");
+    String role = cmd.getOptionValue("role");
+    String environ = cmd.getOptionValue("environment");
+    String topologyName = cmd.getOptionValue("topology_name");
+    String topologyJarFile = cmd.getOptionValue("topology_jar");
+    int schedulerServerPort = Integer.parseInt(cmd.getOptionValue("http_port"));
 
     // locate the topology definition file in the sandbox/working directory
     String topologyDefnFile = TopologyUtils.lookUpTopologyDefnFile(".", topologyName);
@@ -152,7 +260,7 @@ public static void runScheduler(
     String statemgrClass = Context.stateManagerClass(config);
     IStateManager statemgr = (IStateManager) Class.forName(statemgrClass).newInstance();
 
-    // create an instance of the packing class 
+    // create an instance of the packing class
     String packingClass = Context.packingClass(config);
     IPacking packing = (IPacking) Class.forName(packingClass).newInstance();
 
diff --git a/heron/scheduler/src/java/com/twitter/heron/scheduler/service/SubmitterMain.java b/heron/scheduler/src/java/com/twitter/heron/scheduler/service/SubmitterMain.java
index 455b434900c..2b99bc32ea3 100644
--- a/heron/scheduler/src/java/com/twitter/heron/scheduler/service/SubmitterMain.java
+++ b/heron/scheduler/src/java/com/twitter/heron/scheduler/service/SubmitterMain.java
@@ -49,8 +49,8 @@ public static String getOriginalPackageFile() {
   }
 
   public static void main(String[] args) throws
-      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException 
-  {
+      ClassNotFoundException, InstantiationException, IllegalAccessException, IOException {
+
     String topologyPackage = args[0];
     String submitterConfigLoader = args[1];
     String submitterConfigFile = args[2];
diff --git a/heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java b/heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
index ec4d12c0345..8e8334af2c6 100644
--- a/heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
+++ b/heron/schedulers/src/java/com/twitter/heron/scheduler/local/LocalLauncher.java
@@ -49,7 +49,7 @@ public void initialize(Config config, Config runtime) {
     // get the topology working directory
     this.topologyWorkingDirectory = LocalContext.workingDirectory(config);
 
-    // get the path of core release URI 
+    // get the path of core release URI
     this.coreReleasePackage = LocalContext.corePackageUri(config);
 
     // form the target dest core release file name
@@ -121,17 +121,17 @@ public boolean launch(PackingPlan packing) {
         .append(LocalContext.stateManagerClassPath(sandboxConfig))
         .toString();
 
-    String schedulerCmd = String.format("%s %s %s %s %s %s %s %s %s %d",
+    String schedulerCmd = String.format("%s %s %s %s %s %s %s %s %s %s",
         "java",
         "-cp",
         schedulerClassPath,
         "com.twitter.heron.scheduler.SchedulerMain",
-        LocalContext.cluster(config),
-        LocalContext.role(config),
-        LocalContext.environ(config),
-        topology.getName(),
-        LocalContext.topologyJarFile(config),
-        NetworkUtils.getFreePort()
+        "--cluster " + LocalContext.cluster(config),
+        "--role " + LocalContext.role(config),
+        "--environment " + LocalContext.environ(config),
+        "--topology_name " + topology.getName(),
+        "--topology_jar " + LocalContext.topologyJarFile(config),
+        "--http_port " + NetworkUtils.getFreePort()
     );
 
     LOG.info("Scheduler command line: " + schedulerCmd.toString());
