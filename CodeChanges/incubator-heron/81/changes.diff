diff --git a/heron/common/src/python/topology.py b/heron/common/src/python/topology.py
index c50468033bd..d3690381c3b 100644
--- a/heron/common/src/python/topology.py
+++ b/heron/common/src/python/topology.py
@@ -28,7 +28,7 @@ def __init__(self, name, state_manager_name):
     self.physical_plan = None
     self.execution_state = None
     self.id = None
-    self.dc = None
+    self.cluster = None
     self.environ = None
     self.tmaster = None
 
@@ -109,26 +109,30 @@ def set_physical_plan(self, physical_plan):
   def get_execution_state_dc_environ(self, execution_state):
     """
     Helper function to extract dc and environ from execution_state.
-    Returns a tuple (dc, environ).
+    Returns a tuple (cluster, environ).
     """
     # TODO: This should be removed when old version of execution_state is no
     # longer in use.
     if execution_state.HasField('aurora'):
       return (execution_state.aurora.jobs[0].dc, execution_state.aurora.jobs[0].environ)
     else:
-      return (execution_state.dc, execution_state.environ)
+      # TODO: remove dc altogether - later
+      if execution_state.HasField('cluster'):
+        return (execution_state.cluster, execution_state.environ)
+      else:
+        return (execution_state.dc, execution_state.environ)
 
   def set_execution_state(self, execution_state):
     if not execution_state:
       self.execution_state = None
-      self.dc = None
+      self.cluster = None
       self.environ = None
     else:
       self.execution_state = execution_state
-      dc, environ = self.get_execution_state_dc_environ(execution_state)
-      self.dc = dc
+      cluster, environ = self.get_execution_state_dc_environ(execution_state)
+      self.cluster = cluster
       self.environ = environ
-      self.zone = dc
+      self.zone = cluster
     self.trigger_watches()
 
   def set_tmaster(self, tmaster):
diff --git a/heron/proto/execution_state.proto b/heron/proto/execution_state.proto
index eb15b6d6083..8d2d59d2ab1 100644
--- a/heron/proto/execution_state.proto
+++ b/heron/proto/execution_state.proto
@@ -46,4 +46,5 @@ message ExecutionState {
   optional string environ = 7;
   optional string role = 8;
   optional HeronReleaseState release_state = 9;
+  optional string cluster = 10;
 }
diff --git a/heron/tracker/src/python/constants.py b/heron/tracker/src/python/constants.py
index 97d37ef6c5e..06ab682f961 100644
--- a/heron/tracker/src/python/constants.py
+++ b/heron/tracker/src/python/constants.py
@@ -10,7 +10,7 @@
 
 # Parameter Names
 
-PARAM_DC = "dc"
+PARAM_CLUSTER = "cluster"
 PARAM_ENVIRON = "environ"
 PARAM_TOPOLOGY = "topology"
 PARAM_COMPONENT = "component"
diff --git a/heron/tracker/src/python/handlers/basehandler.py b/heron/tracker/src/python/handlers/basehandler.py
index 8d212c4abb4..847784566a1 100644
--- a/heron/tracker/src/python/handlers/basehandler.py
+++ b/heron/tracker/src/python/handlers/basehandler.py
@@ -85,14 +85,14 @@ def make_error_response(self, message):
     response[constants.RESPONSE_KEY_MESSAGE] = message
     return response
 
-  def get_argument_dc(self):
+  def get_argument_cluster(self):
     """
     Helper function to get request argument.
     Raises exception if argument is missing.
-    Returns the dc argument.
+    Returns the cluster argument.
     """
     try:
-      return self.get_argument(constants.PARAM_DC)
+      return self.get_argument(constants.PARAM_CLUSTER)
     except tornado.web.MissingArgumentError as e:
       raise Exception(e.log_message)
 
diff --git a/heron/tracker/src/python/handlers/exceptionhandler.py b/heron/tracker/src/python/handlers/exceptionhandler.py
index 03109a5629a..804a442a68f 100644
--- a/heron/tracker/src/python/handlers/exceptionhandler.py
+++ b/heron/tracker/src/python/handlers/exceptionhandler.py
@@ -28,11 +28,11 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
       topName = self.get_argument_topology()
       component = self.get_argument_component()
-      topology = self.tracker.getTopologyByDcEnvironAndName(dc, environ, topName)
+      topology = self.tracker.getTopologyByDcEnvironAndName(cluster, environ, topName)
       instances = self.get_arguments(constants.PARAM_INSTANCE)
       exceptions_logs = yield tornado.gen.Task(self.getComponentException,
                                                topology.tmaster, component, instances)
diff --git a/heron/tracker/src/python/handlers/exceptionsummaryhandler.py b/heron/tracker/src/python/handlers/exceptionsummaryhandler.py
index 52cdc44485a..7a8686e9771 100644
--- a/heron/tracker/src/python/handlers/exceptionsummaryhandler.py
+++ b/heron/tracker/src/python/handlers/exceptionsummaryhandler.py
@@ -30,11 +30,11 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
       topology_name = self.get_argument_topology()
       component = self.get_argument_component()
-      topology = self.tracker.getTopologyByDcEnvironAndName(dc, environ, topology_name)
+      topology = self.tracker.getTopologyByDcEnvironAndName(cluster, environ, topology_name)
       instances = self.get_arguments(constants.PARAM_INSTANCE)
       exceptions_summary = yield tornado.gen.Task(self.getComponentExceptionSummary,
                                                   topology.tmaster, component, instances)
diff --git a/heron/tracker/src/python/handlers/executionstatehandler.py b/heron/tracker/src/python/handlers/executionstatehandler.py
index b6376f63c95..4754c405066 100644
--- a/heron/tracker/src/python/handlers/executionstatehandler.py
+++ b/heron/tracker/src/python/handlers/executionstatehandler.py
@@ -22,12 +22,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      dc = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
-      topologyInfo = self.tracker.getTopologyInfo(topName, dc, environ)
-      executionState = topologyInfo["execution_state"]
-      self.write_success_response(executionState)
+      topology_name = self.get_argument_topology()
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
+      execution_state = topology_info["execution_state"]
+      self.write_success_response(execution_state)
     except Exception as e:
       self.write_error_response(e)
 
diff --git a/heron/tracker/src/python/handlers/jmaphandler.py b/heron/tracker/src/python/handlers/jmaphandler.py
index 69f39335f8c..67d62a24d82 100644
--- a/heron/tracker/src/python/handlers/jmaphandler.py
+++ b/heron/tracker/src/python/handlers/jmaphandler.py
@@ -35,12 +35,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topology = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       instance = self.get_argument_instance()
-      topologyInfo = self.tracker.getTopologyInfo(topology, dc, environ)
-      ret = yield self.runInstanceJmap(topologyInfo, instance)
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
+      ret = yield self.runInstanceJmap(topology_info, instance)
       self.write_success_response(ret)
     except Exception as e:
       self.write_error_response(e)
diff --git a/heron/tracker/src/python/handlers/jstackhandler.py b/heron/tracker/src/python/handlers/jstackhandler.py
index e08614e5c70..f57332d665f 100644
--- a/heron/tracker/src/python/handlers/jstackhandler.py
+++ b/heron/tracker/src/python/handlers/jstackhandler.py
@@ -34,22 +34,22 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topology = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       instance = self.get_argument_instance()
-      topologyInfo = self.tracker.getTopologyInfo(topology, dc, environ)
-      ret = yield self.getInstanceJstack(topologyInfo, instance)
+      topology_info = self.tracker.getTopologyInfo(topology, cluster, environ)
+      ret = yield self.getInstanceJstack(topology_info, instance)
       self.write_success_response(ret)
     except Exception as e:
       self.write_error_response(e)
 
   @tornado.gen.coroutine
-  def getInstanceJstack(self, topologyInfo, instance_id):
+  def getInstanceJstack(self, topology_info, instance_id):
     """
     Fetches Instance jstack from heron-shell.
     """
-    pid_response = yield getInstancePid(topologyInfo, instance_id)
+    pid_response = yield getInstancePid(topology_info, instance_id)
     try:
       http_client = tornado.httpclient.AsyncHTTPClient()
       component_id = instance_id.split('_')[1] # Format: container_<id>_<instance_id>
@@ -57,7 +57,7 @@ def getInstanceJstack(self, topologyInfo, instance_id):
       pid = pid_json['stdout'].strip()
       if pid == '':
         raise Exception('Failed to get pid')
-      endpoint = utils.make_shell_endpoint(topologyInfo, instance_id)
+      endpoint = utils.make_shell_endpoint(topology_info, instance_id)
       url = "%s/jstack/%s" % (endpoint, pid)
       response = yield http_client.fetch(url)
       LOG.debug("HTTP call for url: %s" % url)
diff --git a/heron/tracker/src/python/handlers/logicalplanhandler.py b/heron/tracker/src/python/handlers/logicalplanhandler.py
index e4cb4e3963c..f90e48c6c35 100644
--- a/heron/tracker/src/python/handlers/logicalplanhandler.py
+++ b/heron/tracker/src/python/handlers/logicalplanhandler.py
@@ -8,7 +8,7 @@ class LogicalPlanHandler(BaseHandler):
   """
   URL - /topologies/logicalplan
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
 
@@ -21,12 +21,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
-      topologyInfo = self.tracker.getTopologyInfo(topName, dc, environ)
-      logicalPlan = topologyInfo["logical_plan"]
-      self.write_success_response(logicalPlan)
+      topology_name = self.get_argument_topology()
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
+      logical_plan = topologyInfo["logical_plan"]
+      self.write_success_response(logical_plan)
     except Exception as e:
       self.write_error_response(e)
 
diff --git a/heron/tracker/src/python/handlers/machineshandler.py b/heron/tracker/src/python/handlers/machineshandler.py
index 310b8ae6b66..ee4a64c9981 100644
--- a/heron/tracker/src/python/handlers/machineshandler.py
+++ b/heron/tracker/src/python/handlers/machineshandler.py
@@ -7,15 +7,15 @@ class MachinesHandler(BaseHandler):
   """
   URL - /machines
   Parameters:
-   - dc (optional)
+   - cluster (optional)
    - environ (optional)
    - topology (optional, repeated
-               both 'dc' and 'environ' are required
+               both 'cluster' and 'environ' are required
                if topology is present)
 
   The response JSON is a dict with following format:
   {
-    <dc1>: {
+    <cluster1>: {
       <environ1>: {
         <top1>: [machine1, machine2,..],
         <top2>: [...],
@@ -24,7 +24,7 @@ class MachinesHandler(BaseHandler):
       <environ2>: {...},
       ...
     },
-    <dc2>: {...}
+    <cluster2>: {...}
   }
   """
 
@@ -33,15 +33,15 @@ def initialize(self, tracker):
 
   @tornado.gen.coroutine
   def get(self):
-    dcs = self.get_arguments(constants.PARAM_DC)
+    clusters = self.get_arguments(constants.PARAM_CLUSTER)
     environs = self.get_arguments(constants.PARAM_ENVIRON)
-    topNames = self.get_arguments(constants.PARAM_TOPOLOGY)
+    topology_names = self.get_arguments(constants.PARAM_TOPOLOGY)
 
     ret = {}
 
-    if len(topNames) > 1:
+    if len(topology_names) > 1:
       if not dcs:
-        message = "Missing argument" + constants.PARAM_DC
+        message = "Missing argument" + constants.PARAM_CLUSTER
         self.write_error_response(message)
         return
 
@@ -53,28 +53,28 @@ def get(self):
     ret = {}
     topologies = self.tracker.topologies
     for topology in topologies:
-      dc = topology.dc
+      cluster = topology.cluster
       environ = topology.environ
-      topName = topology.name
-      if not dc or not environ:
+      topology_name = topology.name
+      if not cluster or not environ:
         continue
 
-      # This DC is not asked for.
-      if dcs and dc not in dcs:
+      # This cluster is not asked for.
+      if clusters and cluster not in clusters:
         continue
 
       # This environ is not asked for.
       if environs and environ not in environs:
         continue
 
-      if topNames and topName not in topNames:
+      if topology_names and topology_name not in topology_names:
         continue
 
-      if dc not in ret:
-        ret[dc] = {}
-      if environ not in ret[dc]:
-        ret[dc][environ] = {}
-      ret[dc][environ][topName] = topology.get_machines()
+      if cluster not in ret:
+        ret[cluster] = {}
+      if environ not in ret[cluster]:
+        ret[cluster][environ] = {}
+      ret[cluster][environ][topology_name] = topology.get_machines()
 
     self.write_success_response(ret)
 
diff --git a/heron/tracker/src/python/handlers/memoryhistogramhandler.py b/heron/tracker/src/python/handlers/memoryhistogramhandler.py
index 4af36e94963..551e1cdc287 100644
--- a/heron/tracker/src/python/handlers/memoryhistogramhandler.py
+++ b/heron/tracker/src/python/handlers/memoryhistogramhandler.py
@@ -10,10 +10,10 @@
 
 class MemoryHistogramHandler(BaseHandler):
   """
-  URL - /topologies/histo?dc=<dc>&topology=<topology> \
+  URL - /topologies/histo?cluster=<cluster>&topology=<topology> \
         &environ=<environment>&instance=<instance>
   Parameters:
-   - dc - Name of dc.
+   - cluster - Name of the cluster.
    - environ - Running environment.
    - topology - Name of topology (Note: Case sensitive. Can only
                 include [a-zA-Z0-9-_]+)
@@ -34,12 +34,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topology = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       instance = self.get_argument_instance()
-      topologyInfo = self.tracker.getTopologyInfo(topology, dc, environ)
-      ret = yield self.getInstanceMemoryHistogram(topologyInfo, instance)
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
+      ret = yield self.getInstanceMemoryHistogram(topology_info, instance)
       self.write_success_response(ret)
     except Exception as e:
       self.write_error_response(e)
diff --git a/heron/tracker/src/python/handlers/metricshandler.py b/heron/tracker/src/python/handlers/metricshandler.py
index 93ba3047f97..7f0555eb08e 100644
--- a/heron/tracker/src/python/handlers/metricshandler.py
+++ b/heron/tracker/src/python/handlers/metricshandler.py
@@ -12,7 +12,7 @@ class MetricsHandler(BaseHandler):
   """
   URL - /topologies/metrics
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
    - component (required)
@@ -32,19 +32,19 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       component = self.get_argument_component()
-      metricNames = self.get_required_arguments_metricnames()
+      metric_names = self.get_required_arguments_metricnames()
 
-      topology = self.tracker.getTopologyByDcEnvironAndName(dc, environ, topName)
+      topology = self.tracker.getTopologyByDcEnvironAndName(cluster, environ, topology_name)
 
       interval = int(self.get_argument(constants.PARAM_INTERVAL, default=-1))
       instances = self.get_arguments(constants.PARAM_INSTANCE)
 
       metrics = yield tornado.gen.Task(self.getComponentMetrics,
-        topology.tmaster, component, metricNames, instances, interval)
+        topology.tmaster, component, metric_names, instances, interval)
 
       self.write_success_response(metrics)
     except Exception as e:
diff --git a/heron/tracker/src/python/handlers/metricsqueryhandler.py b/heron/tracker/src/python/handlers/metricsqueryhandler.py
index 4ee6c4e0df4..c89f77d88dd 100644
--- a/heron/tracker/src/python/handlers/metricsqueryhandler.py
+++ b/heron/tracker/src/python/handlers/metricsqueryhandler.py
@@ -9,7 +9,7 @@ class MetricsQueryHandler(BaseHandler):
   """
   URL - /topologies/metricsquery
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
    - starttime (required)
@@ -26,18 +26,18 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
-      topology = self.tracker.getTopologyByDcEnvironAndName(dc, environ, topName)
+      topology_name = self.get_argument_topology()
+      topology = self.tracker.getTopologyByDcEnvironAndName(cluster, environ, topology_name)
 
-      startTime = self.get_argument_starttime()
-      endTime = self.get_argument_endtime()
-      self.validateInterval(startTime, endTime)
+      start_time = self.get_argument_starttime()
+      end_time = self.get_argument_endtime()
+      self.validateInterval(start_time, end_time)
 
       query = self.get_argument_query()
       metrics = yield tornado.gen.Task(self.executeMetricsQuery,
-                                       topology.tmaster, query, int(startTime), int(endTime))
+                                       topology.tmaster, query, int(start_time), int(end_time))
       self.write_success_response(metrics)
     except Exception as e:
       self.write_error_response(e)
@@ -46,8 +46,8 @@ def get(self):
   def executeMetricsQuery(self,
                          tmaster,
                          queryString,
-                         startTime,
-                         endTime,
+                         start_time,
+                         end_time,
                          callback=None):
     """
     Get the specified metrics for the given query in this topology.
@@ -74,12 +74,12 @@ def executeMetricsQuery(self,
     """
 
     query = Query(self.tracker)
-    metrics = yield query.execute_query(tmaster, queryString, startTime, endTime)
+    metrics = yield query.execute_query(tmaster, queryString, start_time, end_time)
 
     # Parse the response
     ret = {}
-    ret["starttime"] = startTime
-    ret["endtime"] = endTime
+    ret["starttime"] = start_time
+    ret["endtime"] = end_time
     ret["timeline"] = []
 
     if not metrics:
diff --git a/heron/tracker/src/python/handlers/metricstimelinehandler.py b/heron/tracker/src/python/handlers/metricstimelinehandler.py
index 9c67f9247db..fc97d7b8890 100644
--- a/heron/tracker/src/python/handlers/metricstimelinehandler.py
+++ b/heron/tracker/src/python/handlers/metricstimelinehandler.py
@@ -12,7 +12,7 @@ class MetricsTimelineHandler(BaseHandler):
   """
   URL - /topologies/metricstimeline
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
    - component (required)
@@ -33,20 +33,20 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       component = self.get_argument_component()
-      metricNames = self.get_required_arguments_metricnames()
-      startTime = self.get_argument_starttime()
-      endTime = self.get_argument_endtime()
-      self.validateInterval(startTime, endTime)
+      metric_names = self.get_required_arguments_metricnames()
+      start_time = self.get_argument_starttime()
+      end_time = self.get_argument_endtime()
+      self.validateInterval(start_time, end_time)
       instances = self.get_arguments(constants.PARAM_INSTANCE)
 
-      topology = self.tracker.getTopologyByDcEnvironAndName(dc, environ, topName)
+      topology = self.tracker.getTopologyByDcEnvironAndName(cluster, environ, topology_name)
       metrics = yield tornado.gen.Task(self.getMetricsTimeline,
-                                       topology.tmaster, component, metricNames,
-                                       instances, int(startTime), int(endTime))
+                                       topology.tmaster, component, metric_names,
+                                       instances, int(start_time), int(end_time))
       self.write_success_response(metrics)
     except Exception as e:
       self.write_error_response(e)
@@ -54,11 +54,11 @@ def get(self):
   @tornado.gen.coroutine
   def getMetricsTimeline(self,
                          tmaster,
-                         componentName,
-                         metricNames,
+                         component_name,
+                         metric_names,
                          instances,
-                         startTime,
-                         endTime,
+                         start_time,
+                         end_time,
                          callback=None):
     """
     Get the specified metrics for the given component name of this topology.
@@ -91,14 +91,14 @@ def getMetricsTimeline(self,
     port = tmaster.stats_port
 
     metricRequest = tmaster_pb2.MetricRequest()
-    metricRequest.component_name = componentName
+    metricRequest.component_name = component_name
     if len(instances) > 0:
       for instance in instances:
         metricRequest.instance_id.append(instance)
-    for metricName in metricNames:
+    for metricName in metric_names:
       metricRequest.metric.append(metricName)
-    metricRequest.explicit_interval.start = startTime
-    metricRequest.explicit_interval.end = endTime
+    metricRequest.explicit_interval.start = start_time
+    metricRequest.explicit_interval.end = end_time
     metricRequest.minutely = True
 
     # Serialize the metricRequest to send as a payload
@@ -139,9 +139,9 @@ def getMetricsTimeline(self,
 
     # Form the response.
     ret = {}
-    ret["starttime"] = startTime
-    ret["endtime"] = endTime
-    ret["component"] = componentName
+    ret["starttime"] = start_time
+    ret["endtime"] = end_time
+    ret["component"] = component_name
     ret["timeline"] = {}
     for metric in metricResponse.metric:
       instance = metric.instance_id
diff --git a/heron/tracker/src/python/handlers/physicalplanhandler.py b/heron/tracker/src/python/handlers/physicalplanhandler.py
index 917919d769a..231162d09f2 100644
--- a/heron/tracker/src/python/handlers/physicalplanhandler.py
+++ b/heron/tracker/src/python/handlers/physicalplanhandler.py
@@ -8,7 +8,7 @@ class PhysicalPlanHandler(BaseHandler):
   """
   URL - /topologies/physicalplan
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
 
@@ -22,12 +22,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
-      topologyInfo = self.tracker.getTopologyInfo(topName, dc, environ)
-      physicalPlan = topologyInfo["physical_plan"]
-      self.write_success_response(physicalPlan)
+      topology_name = self.get_argument_topology()
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
+      physical_plan = topologyInfo["physical_plan"]
+      self.write_success_response(physical_plan)
     except Exception as e:
       self.write_error_response(e)
 
diff --git a/heron/tracker/src/python/handlers/pidhandler.py b/heron/tracker/src/python/handlers/pidhandler.py
index ffb1014b6e1..8db6dcf4bf8 100644
--- a/heron/tracker/src/python/handlers/pidhandler.py
+++ b/heron/tracker/src/python/handlers/pidhandler.py
@@ -7,7 +7,7 @@
 from heron.tracker.src.python.log import Log as LOG
 
 @tornado.gen.coroutine
-def getInstancePid(topologyInfo, instance_id):
+def getInstancePid(topology_info, instance_id):
   """
   This method is used by other modules, and so it
   is not a part of the class.
@@ -15,7 +15,7 @@ def getInstancePid(topologyInfo, instance_id):
   """
   try:
     http_client = tornado.httpclient.AsyncHTTPClient()
-    endpoint = utils.make_shell_endpoint(topologyInfo, instance_id)
+    endpoint = utils.make_shell_endpoint(topology_info, instance_id)
     url = "%s/pid/%s" % (endpoint, instance_id)
     LOG.debug("HTTP call for url: %s" % url)
     response = yield http_client.fetch(url)
@@ -25,10 +25,10 @@ def getInstancePid(topologyInfo, instance_id):
 
 class PidHandler(BaseHandler):
   """
-  URL - /topologies/jmap?dc=<dc>&topology=<topology> \
+  URL - /topologies/jmap?cluster=<cluster>&topology=<topology> \
         &environ=<environment>&instance=<instance>
   Parameters:
-   - dc - Name of dc.
+   - cluster - Name of the cluster.
    - environ - Running environment.
    - topology - Name of topology (Note: Case sensitive. Can only
                 include [a-zA-Z0-9-_]+)
@@ -50,12 +50,12 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topology = self.get_argument_topology()
+      topology_name = self.get_argument_topology()
       instance = self.get_argument_instance()
-      topologyInfo = self.tracker.getTopologyInfo(topology, dc, environ)
-      result = yield getInstancePid(topologyInfo, instance)
+      topology_info = self.tracker.getTopologyInfo(topology, cluster, environ)
+      result = yield getInstancePid(topology_info, instance)
       self.write_success_response(result)
     except Exception as e:
       self.write_error_response(e)
diff --git a/heron/tracker/src/python/handlers/stateshandler.py b/heron/tracker/src/python/handlers/stateshandler.py
index c885f596673..669083ab6cd 100644
--- a/heron/tracker/src/python/handlers/stateshandler.py
+++ b/heron/tracker/src/python/handlers/stateshandler.py
@@ -7,12 +7,12 @@ class StatesHandler(BaseHandler):
   """
   URL - /topologies/states
   Parameters:
-   - dc (optional)
+   - cluster (optional)
    - environ (optional)
 
   The response JSON is a dict with following format:
   {
-    <dc1>: {
+    <cluster1>: {
       <environ1>: {
         <top1>: {
           <the executionstate of the topology>
@@ -23,7 +23,7 @@ class StatesHandler(BaseHandler):
       <environ2>: {...},
       ...
     },
-    <dc2>: {...}
+    <cluster2>: {...}
   }
   """
   def initialize(self, tracker):
@@ -32,22 +32,23 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     # Get all the values for parameter "dc".
-    dcs = self.get_arguments(constants.PARAM_DC)
+    clusters = self.get_arguments(constants.PARAM_CLUSTER)
+
     # Get all the values for parameter "environ".
     environs = self.get_arguments(constants.PARAM_ENVIRON)
 
     ret = {}
     topologies = self.tracker.topologies
     for topology in topologies:
-      dc = topology.dc
+      cluster = topology.cluster
       environ = topology.environ
-      if not dc or not environ:
+      if not cluster or not environ:
         continue
 
-      # This DC is not asked for.
-      # Note that "if not dcs", then
-      # we show for all the dcs.
-      if dcs and dc not in dcs:
+      # This cluster is not asked for.
+      # Note that "if not clusters", then
+      # we show for all the clusters.
+      if clusters and cluster not in clusters:
         continue
 
       # This environ is not asked for.
@@ -56,14 +57,14 @@ def get(self):
       if environs and environ not in environs:
         continue
 
-      if dc not in ret:
-        ret[dc] = {}
-      if environ not in ret[dc]:
-        ret[dc][environ] = {}
+      if cluster not in ret:
+        ret[cluster] = {}
+      if environ not in ret[cluster]:
+        ret[cluster][environ] = {}
       try:
-        topologyInfo = self.tracker.getTopologyInfo(topology.name, dc, environ)
-        if topologyInfo and "execution_state" in topologyInfo:
-          ret[dc][environ][topology.name] = topologyInfo["execution_state"]
+        topology_info = self.tracker.getTopologyInfo(topology.name, cluster, environ)
+        if topology_info and "execution_state" in topology_info:
+          ret[cluster][environ][topology.name] = topology_info["execution_state"]
       except Exception as e:
         # Do nothing
         pass
diff --git a/heron/tracker/src/python/handlers/topologieshandler.py b/heron/tracker/src/python/handlers/topologieshandler.py
index a7380519464..7690c8aa709 100644
--- a/heron/tracker/src/python/handlers/topologieshandler.py
+++ b/heron/tracker/src/python/handlers/topologieshandler.py
@@ -7,12 +7,17 @@ class TopologiesHandler(BaseHandler):
   """
   URL - /topologies
   Parameters:
-   - dc (optional)
-   - environ (optional)
+   - cluster (optional)
+   - tag (optional)
 
   The response JSON is a dict with following format:
   {
-    <dc1>: {
+    <cluster1>: {
+      <default>: [
+        top1,
+        top2,
+        ...
+      ],
       <environ1>: [
         top1,
         top2,
@@ -21,7 +26,7 @@ class TopologiesHandler(BaseHandler):
       <environ2>: [...],
       ...
     },
-    <dc2>: {...}
+    <cluster2>: {...}
   }
   """
   def initialize(self, tracker):
@@ -29,23 +34,23 @@ def initialize(self, tracker):
 
   @tornado.gen.coroutine
   def get(self):
-    # Get all the values for parameter "dc".
-    dcs = self.get_arguments(constants.PARAM_DC)
+    # Get all the values for parameter "cluster".
+    clusters = self.get_arguments(constants.PARAM_CLUSTER)
     # Get all the values for parameter "environ".
     environs = self.get_arguments(constants.PARAM_ENVIRON)
 
     ret = {}
     topologies = self.tracker.topologies
     for topology in topologies:
-      dc = topology.dc
+      cluster = topology.cluster 
       environ = topology.environ
-      if not dc or not environ:
+      if not cluster or not environ:
         continue
 
-      # This DC is not asked for.
-      # Note that "if not dcs", then
-      # we show for all the dcs.
-      if dcs and dc not in dcs:
+      # This cluster is not asked for.
+      # Note that "if not clusters", then
+      # we show for all the clusters.
+      if clusters and cluster not in clusters:
         continue
 
       # This environ is not asked for.
@@ -54,10 +59,10 @@ def get(self):
       if environs and environ not in environs:
         continue
 
-      if dc not in ret:
-        ret[dc] = {}
-      if environ not in ret[dc]:
-        ret[dc][environ] = []
-      ret[dc][environ].append(topology.name)
+      if cluster not in ret:
+        ret[cluster] = {}
+      if environ not in ret[cluster]:
+        ret[cluster][environ] = []
+      ret[cluster][environ].append(topology.name)
     self.write_success_response(ret)
 
diff --git a/heron/tracker/src/python/handlers/topologyhandler.py b/heron/tracker/src/python/handlers/topologyhandler.py
index 7cf7afd8150..65b622df16e 100644
--- a/heron/tracker/src/python/handlers/topologyhandler.py
+++ b/heron/tracker/src/python/handlers/topologyhandler.py
@@ -8,7 +8,7 @@ class TopologyHandler(BaseHandler):
   """
   url - /topologies/info
   Parameters:
-   - dc (required)
+   - cluster (required)
    - environ (required)
    - topology (required) name of the requested topology
 
@@ -22,10 +22,10 @@ def initialize(self, tracker):
   @tornado.gen.coroutine
   def get(self):
     try:
-      dc = self.get_argument_dc()
+      cluster = self.get_argument_cluster()
       environ = self.get_argument_environ()
-      topName = self.get_argument_topology()
-      topologyInfo = self.tracker.getTopologyInfo(topName, dc, environ)
+      topology_name = self.get_argument_topology()
+      topology_info = self.tracker.getTopologyInfo(topology_name, cluster, environ)
       self.write_success_response(topologyInfo)
     except Exception as e:
       self.write_error_response(e)
diff --git a/heron/tracker/src/python/tracker.py b/heron/tracker/src/python/tracker.py
index 1fd003fccb4..6d1a5fed0bb 100644
--- a/heron/tracker/src/python/tracker.py
+++ b/heron/tracker/src/python/tracker.py
@@ -98,19 +98,19 @@ def addNewTopology(self, state_manager, topologyName):
     topology.register_watch(self.setTopologyInfo)
 
     def on_topology_pplan(data):
-      LOG.info("Watch trigerred for topology pplan: " + topologyName)
+      LOG.info("Watch triggered for topology pplan: " + topologyName)
       topology.set_physical_plan(data)
       if not data:
         LOG.debug("No data to be set")
 
     def on_topology_execution_state(data):
-      LOG.info("Watch trigerred for topology execution state: " + topologyName)
+      LOG.info("Watch triggered for topology execution state: " + topologyName)
       topology.set_execution_state(data)
       if not data:
         LOG.debug("No data to be set")
 
     def on_topology_tmaster(data):
-      LOG.info("Watch trigerred for topology tmaster: " + topologyName)
+      LOG.info("Watch triggered for topology tmaster: " + topologyName)
       topology.set_tmaster(data)
       if not data:
         LOG.debug("No data to be set")
