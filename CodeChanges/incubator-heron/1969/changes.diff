diff --git a/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java b/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
index 78c6167e004..a68826aec95 100644
--- a/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
+++ b/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java
@@ -192,9 +192,8 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue
       int nValues = topologyContext.getComponentOutputFields(
           stream.getComponentName(), stream.getId()).size();
 
-      // We would reuse the System.nanoTime()
-      long currentTime = startOfCycle;
       for (HeronTuples.HeronDataTuple dataTuple : tuples.getData().getTuplesList()) {
+        long startExecuteTuple = System.nanoTime();
         // Create the value list and fill the value
         List<Object> values = new ArrayList<>(nValues);
         for (int i = 0; i < nValues; i++) {
@@ -203,16 +202,15 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue
 
         // Decode the tuple
         TupleImpl t = new TupleImpl(topologyContext, stream, dataTuple.getKey(),
-            dataTuple.getRootsList(), values, currentTime, false);
+            dataTuple.getRootsList(), values, startExecuteTuple, false);
 
         // Delegate to the use defined bolt
         bolt.execute(t);
 
-        // Swap
-        long startTime = currentTime;
-        currentTime = System.nanoTime();
+        // record the end of a tuple execution
+        long endExecuteTuple = System.nanoTime();
 
-        long executeLatency = currentTime - startTime;
+        long executeLatency = endExecuteTuple - startExecuteTuple;
 
         // Invoke user-defined execute task hook
         topologyContext.invokeHookBoltExecute(t, Duration.ofNanos(executeLatency));
@@ -222,6 +220,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue
       }
 
       // To avoid spending too much time
+      long currentTime = System.nanoTime();
       if (currentTime - startOfCycle - instanceExecuteBatchTime.toNanos() > 0) {
         break;
       }
