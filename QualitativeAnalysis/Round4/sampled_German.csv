project,pull_number,pull_type,id,text,classification,indicator
cloudstack,2578,review,225156473,"This message looks a little bit misleading, or am I mistaken?",code_debt,low_quality_code
flink,12042,review,422441179,"in fact, the table qualified name may be long. in addition, we may need to add catalog name and database name to distinguish between tables with the same name.",code_debt,low_quality_code
daffodil,291,review,348540375,"These ``_fileOS == null`` checks are kindof ugly. Thoughts on making this so this class just extends OutputStream instead of ByteArrayOutputStream, and then make it a wrapper for an output stream, which might change from ByteArrayOutputStream to FileOutputStream? I'm thinking something like:
Makes it so all the overrirde functions are basically just stream.whatever(), except for write which just calls the switch thing. Another benefit is once the switch happens, the old ByteArrayOutputStream can be garbage collected, whereas before it couldn't.",code_debt,low_quality_code
cloudstack,2058,review,139283005,"Fix indentations if you want to remove try-catch, also add a test?",code_debt,low_quality_code
spark,6959,review,33198256,"AFAIK we don't have a style guide for Java code, but I think we should put spaces after the casts.",code_debt,low_quality_code
spark,22960,review,231413853,I think we can just get rid of it. I can't imagine both functions are specifically broken alone in `selectExpr`.,code_debt,complex_code
arrow,9356,review,580411319,This cast is unnecessary since the `Sum` method already returns a `double`.,code_debt,complex_code
incubator-mxnet,3781,comment,260116824,@sxjscience Yeah this will cut out a lot of code in our framework that were just there to redundantly track tensor dims for the purposes of feeding them to Reshape layer. I'm very excited about this. A small increase in (optional) complexity in Reshape layer pays off with a large decrease in complexity in our framework code.,design_debt,non-optimal_design
flink,14084,review,554882968,"Just not supported yet, the type TIME_STAMP_WITH_LOCAL_TIME_ZONE is rarely used. But I think we should both support them in this version.",requirement_debt,requirement_partially_implemented
activemq-artemis,2427,review,232558150,"It may have them from legacy someone put it there, but if you were designing a collections class, you'd design it in a fashion so it focussed just on the logic it needs to have. And any interaction needed is supplied generically, e.g. for your case, you;d need generic method: remove(Predicate<SimpleString> predicate). This is a collection class in reality so i apply the same rules of engagement..
If anything that field, the flag and the method check hasInternalProperties really should move up to CoreMessage, as its only used there. Doing that would mean you can still get your benefit as then the check stays in CoreMessage. 
This would really clean up TypedProperties to just having fields it really should only care for, keeping it clean.",design_debt,non-optimal_design
superset,8867,review,360617020,"It's not super clear here what this does or why you'd want to use this config element. I had to read a bit of code to understand it.
Then add a proper example with type annotation",documentation_debt,low_quality_documentation
hive,2111,review,607667423,"Since it's a new interface method, can you add some javadoc please?",documentation_debt,outdated_documentation
spark,4533,comment,73925690,"Sounds correct. The subsequent tries do try in parallel. So, I suppose that's pretty good evidence it's parallelized. Unless anyone else speaks up I think this sentence can be removed.",code_debt,complex_code
dubbo,2520,summary,0, typo: leastIndexs->leastIndexes,documentation_debt,low_quality_documentation
spark,28163,description,0,"In the PR, I propose to optimise the `DateTimeUtils`.`rebaseJulianToGregorianMicros()` and `rebaseGregorianToJulianMicros()` functions, and make them faster by using pre-calculated rebasing tables. This approach allows to avoid expensive conversions via local timestamps. For example, the `America/Los_Angeles` time zone has just a few time points when difference between Proleptic Gregorian calendar and the hybrid calendar (Julian + Gregorian since 1582-10-15) is changed in the time interval 0001-01-01 .. 2100-01-01:
The difference in microseconds between Proleptic and hybrid calendars for any local timestamp in time intervals `[local timestamp(i), local timestamp(i+1))`, and for any microseconds in the time interval `[Gregorian micros(i), Gregorian micros(i+1))` is the same. In this way, we can rebase an input micros by following the steps:
1. Look at the table, and find the time interval where the micros falls to
2. Take the difference between 2 calendars for this time interval
3. Add the difference to the input micros. The result is rebased microseconds that has the same local timestamp representation.
Here are details of the implementation:
- Pre-calculated tables are stored to JSON files `gregorian-julian-rebase-micros.json` and `julian-gregorian-rebase-micros.json` in the resource folder of `sql/catalyst`. The diffs and switch time points are stored as seconds, for example:
  The JSON files are generated by 2 tests in `RebaseDateTimeSuite` - `generate 'gregorian-julian-rebase-micros.json'` and `generate 'julian-gregorian-rebase-micros.json'`. Both tests are disabled by default. 
  The `switches` time points are ordered from old to recent timestamps. This condition is checked by the test `validate rebase records in JSON files` in `RebaseDateTimeSuite`. Also sizes of the `switches` and `diffs` arrays are the same (this is checked by the same test).
The hash maps store the switch time points and diffs in microseconds precision to avoid conversions from microseconds to seconds in the runtime.
- I moved the code related to days and microseconds rebasing to the separate object `RebaseDateTime` to do not pollute `DateTimeUtils`. Tests related to date-time rebasing are moved to `RebaseDateTimeSuite` for the same reason.
- I placed rebasing via local timestamp to separate methods that require zone id as the first parameter assuming that the caller has zone id already. This allows to void unnecessary retrieving the default time zone. The methods are marked as `private[sql]` because they are used in `RebaseDateTimeSuite` as reference implementation.
- Modified the `rebaseGregorianToJulianMicros()` and `rebaseJulianToGregorianMicros()` methods in `RebaseDateTime` to look up the rebase tables first of all. If hash maps don't contain rebasing info for the given time zone id, the methods falls back to the implementation via local timestamps. This allows to support time zones specified as zone offsets like '-08:00'.
To make timestamps rebasing faster:
- Saving timestamps to parquet files is ~ **x3.8 faster**
- Loading timestamps from parquet files is ~**x2.8 faster**.
- Loading timestamps by Vectorized reader ~**x4.6 faster**.
No
- Added the test `validate rebase records in JSON files` to `RebaseDateTimeSuite`. The test validates 2 json files from the resource folder - `gregorian-julian-rebase-micros.json` and `julian-gregorian-rebase-micros.json`, and it checks per each time zone records that
  - the number of switch points is equal to the number of diffs between calendars. If the numbers are different, this will violate the assumption made in `RebaseDateTime.rebaseMicros`.
  - swith points are ordered from old to recent timestamps. This pre-condition is required for linear search in the `rebaseMicros` function.
- Added the test `optimization of micros rebasing - Gregorian to Julian` to `RebaseDateTimeSuite` which iterates over timestamps from 0001-01-01 to 2100-01-01 with the steps 1 Â± 0.5 months, and checks that optimised function `RebaseDateTime`.`rebaseGregorianToJulianMicros()` returns the same result as non-optimised one. The check is performed for the UTC, PST, CET, Africa/Dakar, America/Los_Angeles, Antarctica/Vostok, Asia/Hong_Kong, Europe/Amsterdam time zones.
- Added the test `optimization of micros rebasing - Julian to Gregorian` to `RebaseDateTimeSuite` which does similar checks as the test above but for rebasing from the hybrid calendar (Julian + Gregorian) to Proleptic Gregorian calendar.
- Re-run `DateTimeRebaseBenchmark` at the America/Los_Angeles time zone (it is set explicitly in the PR #28127):",code_debt,slow_algorithm
guacamole-client,511,review,602658052,"Sure, makes sense. I've got the changes almost done - just need to clean up the unit tests.",test_debt,expensive_tests
spark,18986,comment,323618879,"Yea, since this topic is important for some users, I mean we better move the doc into `./docs/` ( I feel novices dont seem to check the code documents).",architecture_debt,violation_of_modularity
