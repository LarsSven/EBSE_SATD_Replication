diff --git a/libminifi/test/archive-tests/CompressContentTests.cpp b/libminifi/test/archive-tests/CompressContentTests.cpp
index 72856aeef9..c6f4cb5395 100644
--- a/libminifi/test/archive-tests/CompressContentTests.cpp
+++ b/libminifi/test/archive-tests/CompressContentTests.cpp
@@ -48,6 +48,7 @@ class ReadCallback: public org::apache::nifi::minifi::InputStreamCallback {
     buffer_size_ = size;
     buffer_ = new uint8_t[buffer_size_];
     archive_buffer_ = nullptr;
+    archive_buffer_size_ = 0;
   }
   ~ReadCallback() {
     if (buffer_)
@@ -56,13 +57,16 @@ class ReadCallback: public org::apache::nifi::minifi::InputStreamCallback {
       delete[] archive_buffer_;
   }
   int64_t process(std::shared_ptr<org::apache::nifi::minifi::io::BaseStream> stream) {
+    int64_t total_read = 0;
     int64_t ret = 0;
-    ret = stream->read(buffer_, buffer_size_);
-    if (stream)
-      read_size_ = stream->getSize();
-    else
-      read_size_ = buffer_size_;
-    return ret;
+    do {
+      ret = stream->read(buffer_ + read_size_, buffer_size_ - read_size_);
+      if (ret == 0) break;
+      if (ret < 0) return ret;
+      read_size_ += ret;
+      total_read += ret;
+    } while (buffer_size_ != read_size_);
+    return total_read;
   }
   void archive_read() {
     struct archive *a;
@@ -72,12 +76,11 @@ class ReadCallback: public org::apache::nifi::minifi::InputStreamCallback {
     archive_read_open_memory(a, buffer_, read_size_);
     struct archive_entry *ae;
 
-    if (archive_read_next_header(a, &ae) == ARCHIVE_OK) {
-      int size = archive_entry_size(ae);
-      archive_buffer_ = new char[size];
-      archive_buffer_size_ = size;
-      archive_read_data(a, archive_buffer_, size);
-    }
+    REQUIRE(archive_read_next_header(a, &ae) == ARCHIVE_OK);
+    int size = archive_entry_size(ae);
+    archive_buffer_ = new char[size];
+    archive_buffer_size_ = size;
+    archive_read_data(a, archive_buffer_, size);
     archive_read_free(a);
   }
 
@@ -89,17 +92,21 @@ class ReadCallback: public org::apache::nifi::minifi::InputStreamCallback {
 };
 
 class CompressDecompressionTestController : public TestController{
-protected:
+ protected:
   static std::string tempDir;
   static std::string raw_content_path;
   static std::string compressed_content_path;
-  static TestController global_controller;
-public:
+  static TestController& get_global_controller() {
+    static TestController controller;
+    return controller;
+  }
+
+ public:
   class RawContent{
     std::string content_;
-    RawContent(std::string&& content_): content_(std::move(content_)) {}
+    explicit RawContent(std::string&& content_): content_(std::move(content_)) {}
     friend class CompressDecompressionTestController;
-  public:
+   public:
     bool operator==(const std::string& actual) const noexcept {
       return content_ == actual;
     }
@@ -116,39 +123,38 @@ class CompressDecompressionTestController : public TestController{
     return compressed_content_path;
   }
 
-  RawContent getRawContent() const {;
+  RawContent getRawContent() const {
     std::ifstream file;
-    file.open(raw_content_path, std::ios::in);
+    file.open(raw_content_path, std::ios::binary);
     std::string contents((std::istreambuf_iterator<char>(file)), std::istreambuf_iterator<char>());
-    file.close();
-    return {std::move(contents)};
+    return RawContent{std::move(contents)};
   }
 
   virtual ~CompressDecompressionTestController() = 0;
 };
 
-CompressDecompressionTestController::~CompressDecompressionTestController() {}
+CompressDecompressionTestController::~CompressDecompressionTestController() = default;
 
-std::string CompressDecompressionTestController::tempDir = "";
-std::string CompressDecompressionTestController::raw_content_path = "";
-std::string CompressDecompressionTestController::compressed_content_path = "";
-TestController CompressDecompressionTestController::global_controller = {};
+std::string CompressDecompressionTestController::tempDir;
+std::string CompressDecompressionTestController::raw_content_path;
+std::string CompressDecompressionTestController::compressed_content_path;
 
-class CompressTestController : public CompressDecompressionTestController{
-  void initContentWithRandomData(){
+class CompressTestController : public CompressDecompressionTestController {
+  void initContentWithRandomData() {
+    int random_seed = 0x454;
     std::ofstream file;
-    file.open(raw_content_path);
+    file.open(raw_content_path, std::ios::binary);
 
-    std::mt19937 gen(std::random_device { }());
+    std::mt19937 gen(random_seed);
     for (int i = 0; i < 100000; i++) {
       file << std::to_string(gen() % 100);
     }
-    file.close();
   }
-public:
-  CompressTestController(){
+
+ public:
+  CompressTestController() {
     char format[] = "/tmp/test.XXXXXX";
-    tempDir = global_controller.createTempDirectory(format);
+    tempDir = get_global_controller().createTempDirectory(format);
     REQUIRE(!tempDir.empty());
     raw_content_path = utils::file::FileUtils::concat_path(tempDir, "minifi-expect-compresscontent.txt");
     compressed_content_path = utils::file::FileUtils::concat_path(tempDir, "minifi-compresscontent");
@@ -157,14 +163,13 @@ class CompressTestController : public CompressDecompressionTestController{
 
   template<class ...Args>
   void writeCompressed(Args&& ...args){
-    std::ofstream file(compressed_content_path);
+    std::ofstream file(compressed_content_path, std::ios::binary);
     file.write(std::forward<Args>(args)...);
-    file.close();
   }
 };
 
 class DecompressTestController : public CompressDecompressionTestController{
-public:
+ public:
   ~DecompressTestController(){
     tempDir = "";
     raw_content_path = "";
@@ -991,10 +996,11 @@ TEST_CASE("RawGzipCompressionDecompression", "[compressfiletest8]") {
     content = content_ss.str();
   }
 
-  std::fstream file;
-  file.open(src_file, std::ios::out);
-  file << content;
-  file.close();
+  {
+    std::fstream file;
+    file.open(src_file, std::ios::out);
+    file << content;
+  }
 
   // Run flow
   testController.runSession(plan, true);
