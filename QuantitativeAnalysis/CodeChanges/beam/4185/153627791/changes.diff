diff --git a/sdks/java/core/src/main/java/org/apache/beam/sdk/Pipeline.java b/sdks/java/core/src/main/java/org/apache/beam/sdk/Pipeline.java
index 58966a9cf3eb..384485f0eb99 100644
--- a/sdks/java/core/src/main/java/org/apache/beam/sdk/Pipeline.java
+++ b/sdks/java/core/src/main/java/org/apache/beam/sdk/Pipeline.java
@@ -19,13 +19,13 @@
 
 import static com.google.common.base.Preconditions.checkNotNull;
 import static com.google.common.base.Preconditions.checkState;
+import static com.google.common.collect.Iterables.transform;
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.HashMultimap;
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.SetMultimap;
 import java.util.ArrayList;
@@ -593,44 +593,10 @@ void validate(PipelineOptions options) {
                       + " because the following transforms do not have stable unique names: %s.",
                   Joiner.on(", ").join(unstableNames)) + "\n\n"
                       + "Conflicting instances:\n"
-                      + Joiner.on("\n").join(Iterables.transform(unstableNames,
-                      new Function<String, String>() {
-                        @Override
-                        public String apply(final String input) {
-                          Collection<PTransform<?, ?>> values = null;
-                          String currentName = input;
-                          // strip the counter appended to the name
-                          while (values == null && !currentName.isEmpty()) {
-                            currentName = currentName.substring(0, currentName.length() - 1);
-                            values = instancePerName.keySet().contains(currentName)
-                                    ? instancePerName.get(currentName) : null;
-                          }
-                          if (values == null) {
-                            throw new IllegalStateException(
-                                    "Didn't find the conflict for input="
-                                            + input + ", this is likely a bug");
-                          }
-                          return "- name=" + currentName + ":\n" + Joiner.on("\n")
-                              .join(Iterables.transform(values,
-                                new Function<PTransform<?, ?>, String>() {
-                                  @Override
-                                  public String apply(final PTransform<?, ?> transform) {
-                                    final Object representant;
-                                    if (ParDo.SingleOutput.class.isInstance(transform)) {
-                                      representant = ParDo.SingleOutput.class.cast(
-                                              transform).getFn();
-                                    } else if (ParDo.MultiOutput.class.isInstance(transform)) {
-                                      representant = ParDo.MultiOutput.class.cast(
-                                              transform).getFn();
-                                    } else {
-                                      representant = transform;
-                                    }
-                                    return "    - " + representant;
-                                  }
-                                }));
-                        }
-                      })) + "\n\nYou can fix it adding a name when you call apply(): "
-                          + "pipeline.apply(<name>, <transform>).");
+                      + Joiner.on("\n").join(
+                              transform(unstableNames, new UnstableNameToMessage(instancePerName)))
+                      + "\n\nYou can fix it adding a name when you call apply(): "
+                      + "pipeline.apply(<name>, <transform>).");
         default:
           throw new IllegalArgumentException(
               "Unrecognized value for stable unique names: " + options.getStableUniqueNames());
@@ -683,4 +649,49 @@ public void visitPrimitiveTransform(Node node) {
       node.getTransform().validate(options);
     }
   }
+
+  private static class TransformToMessage implements Function<PTransform<?, ?>, String> {
+    @Override
+    public String apply(final PTransform<?, ?> transform) {
+      final Object representant;
+      if (ParDo.SingleOutput.class.isInstance(transform)) {
+        representant = ParDo.SingleOutput.class.cast(
+                transform).getFn();
+      } else if (ParDo.MultiOutput.class.isInstance(transform)) {
+        representant = ParDo.MultiOutput.class.cast(
+                transform).getFn();
+      } else {
+        representant = transform;
+      }
+      return "    - " + representant;
+    }
+  }
+
+  private static class UnstableNameToMessage implements Function<String, String> {
+    private final Multimap<String, PTransform<?, ?>> instances;
+
+    private UnstableNameToMessage(final Multimap<String, PTransform<?, ?>> instancePerName) {
+      this.instances = instancePerName;
+    }
+
+    @Override
+    public String apply(final String input) {
+      Collection<PTransform<?, ?>> values = null;
+      String currentName = input;
+      // strip the counter appended to the name,
+      // see uniquifyInternal().
+      // common example: ParDo(Anonymous) becoming ParDo(Anonymous)2
+      while (values == null && !currentName.isEmpty()) {
+        currentName = currentName.substring(0, currentName.length() - 1);
+        values = instances.keySet().contains(currentName) ? instances.get(currentName) : null;
+      }
+      if (values == null) {
+        throw new IllegalStateException(
+                "Didn't find the conflict for input="
+                        + input + ", this is likely a bug");
+      }
+      return "- name=" + currentName + ":\n"
+              + Joiner.on("\n").join(transform(values, new TransformToMessage()));
+    }
+  }
 }
diff --git a/sdks/java/core/src/test/java/org/apache/beam/sdk/PipelineTest.java b/sdks/java/core/src/test/java/org/apache/beam/sdk/PipelineTest.java
index 17fa599f9f7b..af0f34c778ef 100644
--- a/sdks/java/core/src/test/java/org/apache/beam/sdk/PipelineTest.java
+++ b/sdks/java/core/src/test/java/org/apache/beam/sdk/PipelineTest.java
@@ -137,6 +137,19 @@ public void describeTo(final Description description) {
 
       @Override
       public boolean matches(final Object o) {
+        /*
+          example value (first 2 lines are a single one):
+
+          Pipeline update will not be possible because the following transforms do not have stable
+          unique names: ParDo(Anonymous)2.
+
+          Conflicting instances:
+          - name=ParDo(Anonymous):
+              - org.apache.beam.sdk.PipelineTest$3@75d2da2d
+              - org.apache.beam.sdk.PipelineTest$2@4278284b
+
+          You can fix it adding a name when you call apply(): pipeline.apply(<name>, <transform>).
+         */
         final String sanitized = String.class.cast(o)
                                      .replaceAll("\\$[\\p{Alnum}]+@[\\p{Alnum}]+", "\\$x@y");
         return sanitized.contains(
