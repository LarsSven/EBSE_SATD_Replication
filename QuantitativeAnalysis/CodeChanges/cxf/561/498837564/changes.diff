diff --git a/core/src/main/java/org/apache/cxf/databinding/stax/StaxDataBindingFeature.java b/core/src/main/java/org/apache/cxf/databinding/stax/StaxDataBindingFeature.java
index 84de57304f3..2eff9f10fbd 100644
--- a/core/src/main/java/org/apache/cxf/databinding/stax/StaxDataBindingFeature.java
+++ b/core/src/main/java/org/apache/cxf/databinding/stax/StaxDataBindingFeature.java
@@ -24,34 +24,16 @@
 import org.apache.cxf.Bus;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.AbstractInDatabindingInterceptor;
 import org.apache.cxf.interceptor.Interceptor;
-import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.message.Message;
 
-public class StaxDataBindingFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class StaxDataBindingFeature extends DelegatingFeature<StaxDataBindingFeature.Portable> {
 
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public StaxDataBindingFeature() {
+        super(new Portable());
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/core/src/main/java/org/apache/cxf/feature/DelegatingFeature.java b/core/src/main/java/org/apache/cxf/feature/DelegatingFeature.java
new file mode 100644
index 00000000000..be721181c21
--- /dev/null
+++ b/core/src/main/java/org/apache/cxf/feature/DelegatingFeature.java
@@ -0,0 +1,70 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+package org.apache.cxf.feature;
+
+import org.apache.cxf.Bus;
+import org.apache.cxf.endpoint.Client;
+import org.apache.cxf.endpoint.Server;
+import org.apache.cxf.interceptor.InterceptorProvider;
+
+/**
+ * Enable to convert a {@link AbstractPortableFeature} to a {@link AbstractFeature}.
+ *
+ * @param <T> the "portable" feature.
+ */
+public class DelegatingFeature<T extends AbstractPortableFeature> extends AbstractFeature {
+    protected T delegate;
+
+    protected DelegatingFeature(final T d) {
+        delegate = d == null ? getDelegate() : d;
+    }
+
+    protected T getDelegate() { // useful for inheritance
+        return delegate;
+    }
+
+    public void setDelegate(T delegate) {
+        this.delegate = delegate;
+    }
+
+    @Override
+    public void initialize(final Server server, final Bus bus) {
+        delegate.initialize(server, bus);
+    }
+
+    @Override
+    public void initialize(final Client client, final Bus bus) {
+        delegate.initialize(client, bus);
+    }
+
+    @Override
+    public void initialize(final InterceptorProvider interceptorProvider, final Bus bus) {
+        delegate.initialize(interceptorProvider, bus);
+    }
+
+    @Override
+    public void initialize(final Bus bus) {
+        delegate.initialize(bus);
+    }
+
+    @Override
+    protected void initializeProvider(final InterceptorProvider interceptorProvider, final Bus bus) {
+        delegate.doInitializeProvider(interceptorProvider, bus);
+    }
+}
diff --git a/core/src/main/java/org/apache/cxf/feature/FastInfosetFeature.java b/core/src/main/java/org/apache/cxf/feature/FastInfosetFeature.java
index 44826723d83..d6af0158215 100644
--- a/core/src/main/java/org/apache/cxf/feature/FastInfosetFeature.java
+++ b/core/src/main/java/org/apache/cxf/feature/FastInfosetFeature.java
@@ -20,8 +20,6 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
 import org.apache.cxf.interceptor.FIStaxInInterceptor;
 import org.apache.cxf.interceptor.FIStaxOutInterceptor;
 import org.apache.cxf.interceptor.InterceptorProvider;
@@ -39,32 +37,9 @@
   </pre>
  */
 @NoJSR250Annotations
-public class FastInfosetFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
-
-    @Override
-    public void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+public class FastInfosetFeature extends DelegatingFeature<FastInfosetFeature.Portable> {
+    public FastInfosetFeature() {
+        super(new Portable());
     }
 
     public void setForce(boolean b) {
diff --git a/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java b/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java
index 44c7c6f77aa..738ab885e36 100644
--- a/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java
+++ b/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java
@@ -23,8 +23,6 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
 import org.apache.cxf.interceptor.AbstractLoggingInterceptor;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.interceptor.LoggingInInterceptor;
@@ -51,37 +49,30 @@
 @NoJSR250Annotations
 @Deprecated
 @Provider(value = Type.Feature)
-public class LoggingFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class LoggingFeature extends DelegatingFeature<LoggingFeature.Portable> {
     public LoggingFeature() {
-        delegate = new Portable();
+        super(new Portable());
     }
     public LoggingFeature(int lim) {
-        delegate = new Portable(lim);
+        super(new Portable(lim));
     }
     public LoggingFeature(String in, String out) {
-        delegate = new Portable(in, out);
+        super(new Portable(in, out));
     }
     public LoggingFeature(String in, String out, int lim) {
-        delegate = new Portable(in, out, lim);
+        super(new Portable(in, out, lim));
     }
 
     public LoggingFeature(String in, String out, int lim, boolean p) {
-        delegate = new Portable(in, out, lim, p);
+        super(new Portable(in, out, lim, p));
     }
 
     public LoggingFeature(String in, String out, int lim, boolean p, boolean showBinary) {
-        delegate = new Portable(in, out, lim, p, showBinary);
+        super(new Portable(in, out, lim, p, showBinary));
     }
 
     public LoggingFeature(Logging annotation) {
-        delegate = new Portable(annotation);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
+        super(new Portable(annotation));
     }
 
     public void setLimit(int lim) {
@@ -100,26 +91,6 @@ public void setPrettyLogging(boolean prettyLogging) {
         delegate.setPrettyLogging(prettyLogging);
     }
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     @Provider(Type.Feature)
     public static class Portable implements AbstractPortableFeature {
         private static final int DEFAULT_LIMIT = AbstractLoggingInterceptor.DEFAULT_LIMIT;
diff --git a/core/src/main/java/org/apache/cxf/feature/StaxTransformFeature.java b/core/src/main/java/org/apache/cxf/feature/StaxTransformFeature.java
index a6ea0499517..30641101b5b 100644
--- a/core/src/main/java/org/apache/cxf/feature/StaxTransformFeature.java
+++ b/core/src/main/java/org/apache/cxf/feature/StaxTransformFeature.java
@@ -23,8 +23,6 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.interceptor.transform.TransformInInterceptor;
 import org.apache.cxf.interceptor.transform.TransformOutInterceptor;
@@ -41,8 +39,11 @@
   </pre>
  */
 @NoJSR250Annotations
-public class StaxTransformFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class StaxTransformFeature extends DelegatingFeature<StaxTransformFeature.Portable> {
+
+    public StaxTransformFeature() {
+        super(new Portable());
+    }
 
     public void setOutTransformElements(Map<String, String> outElements) {
         delegate.setOutTransformElements(outElements);
@@ -92,31 +93,6 @@ public void setContextPropertyName(String propertyName) {
         delegate.setContextPropertyName(propertyName);
     }
 
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     public static class Portable implements AbstractPortableFeature {
         private TransformInInterceptor in = new TransformInInterceptor();
         private TransformOutInterceptor out = new TransformOutInterceptor();
diff --git a/core/src/main/java/org/apache/cxf/feature/transform/XSLTFeature.java b/core/src/main/java/org/apache/cxf/feature/transform/XSLTFeature.java
index 1ad376b7e1f..1d3b62b2da2 100644
--- a/core/src/main/java/org/apache/cxf/feature/transform/XSLTFeature.java
+++ b/core/src/main/java/org/apache/cxf/feature/transform/XSLTFeature.java
@@ -20,10 +20,8 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
@@ -34,8 +32,10 @@
  * (can be fixed in further versions when XSLT engine supports XML stream).
  */
 @NoJSR250Annotations
-public class XSLTFeature extends AbstractFeature {
-    private final Portable delegate = new Portable();
+public class XSLTFeature extends DelegatingFeature<XSLTFeature.Portable> {
+    public XSLTFeature() {
+        super(new Portable());
+    }
 
     public void setInXSLTPath(String inXSLTPath) {
         delegate.setInXSLTPath(inXSLTPath);
@@ -45,31 +45,6 @@ public void setOutXSLTPath(String outXSLTPath) {
         delegate.setOutXSLTPath(outXSLTPath);
     }
 
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     public static class Portable implements AbstractPortableFeature {
         private String inXSLTPath;
         private String outXSLTPath;
diff --git a/core/src/main/java/org/apache/cxf/feature/validation/SchemaValidationFeature.java b/core/src/main/java/org/apache/cxf/feature/validation/SchemaValidationFeature.java
index 538e4015b6b..e8ca6bba2d3 100644
--- a/core/src/main/java/org/apache/cxf/feature/validation/SchemaValidationFeature.java
+++ b/core/src/main/java/org/apache/cxf/feature/validation/SchemaValidationFeature.java
@@ -24,8 +24,8 @@
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Endpoint;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.message.Message;
 import org.apache.cxf.service.model.BindingOperationInfo;
@@ -34,33 +34,9 @@
  * A feature to configure schema validation at the operation level, as an alternative to
  * using the @SchemaValidation annotation.
  */
-public class SchemaValidationFeature extends AbstractFeature {
-    private final Portable delegate;
-
+public class SchemaValidationFeature extends DelegatingFeature<SchemaValidationFeature.Portable> {
     public SchemaValidationFeature(final SchemaValidationTypeProvider provider) {
-        this.delegate = new Portable(provider);
-    }
-
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    public void initialise(Endpoint endpoint) {
-        delegate.initialise(endpoint);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(provider));
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/core/src/main/java/org/apache/cxf/interceptor/security/JAASAuthenticationFeature.java b/core/src/main/java/org/apache/cxf/interceptor/security/JAASAuthenticationFeature.java
index 78fcef5a64b..42c0dafad66 100644
--- a/core/src/main/java/org/apache/cxf/interceptor/security/JAASAuthenticationFeature.java
+++ b/core/src/main/java/org/apache/cxf/interceptor/security/JAASAuthenticationFeature.java
@@ -19,43 +19,18 @@
 package org.apache.cxf.interceptor.security;
 
 import org.apache.cxf.Bus;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
  * Feature to do JAAS authentication with defaults for karaf integration
  */
-public class JAASAuthenticationFeature extends AbstractFeature {
+public class JAASAuthenticationFeature extends DelegatingFeature<JAASAuthenticationFeature.Portable> {
     public static final String ID = "jaas";
 
-    private Portable delegate = new Portable();
-
-    @Override
-    public void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public JAASAuthenticationFeature() {
+        super(new Portable());
     }
 
     public void setContextName(String contextName) {
@@ -71,7 +46,6 @@ public String getID() {
         return ID;
     }
 
-
     public static class Portable implements AbstractPortableFeature {
         private String contextName = "karaf";
         private boolean reportFault;
diff --git a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
index 4c5e22bb799..9b7d53c81df 100644
--- a/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
+++ b/core/src/main/java/org/apache/cxf/transport/common/gzip/GZIPFeature.java
@@ -23,10 +23,8 @@
 import org.apache.cxf.Bus;
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.Interceptor;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.message.Message;
@@ -53,8 +51,11 @@
  */
 @NoJSR250Annotations
 @Provider(value = Provider.Type.Feature)
-public class GZIPFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class GZIPFeature extends DelegatingFeature<GZIPFeature.Portable> {
+
+    public GZIPFeature() {
+        super(new Portable());
+    }
 
     public void remove(List<Interceptor<? extends Message>> outInterceptors) {
         delegate.remove(outInterceptors);
@@ -76,31 +77,6 @@ public boolean getForce() {
         return delegate.getForce();
     }
 
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     @Provider(value = Provider.Type.Feature)
     public static class Portable implements AbstractPortableFeature {
         private static final GZIPInInterceptor IN = new GZIPInInterceptor();
diff --git a/core/src/main/java/org/apache/cxf/validation/BeanValidationFeature.java b/core/src/main/java/org/apache/cxf/validation/BeanValidationFeature.java
index 87dfc721b1b..d5da2a309b7 100644
--- a/core/src/main/java/org/apache/cxf/validation/BeanValidationFeature.java
+++ b/core/src/main/java/org/apache/cxf/validation/BeanValidationFeature.java
@@ -22,40 +22,15 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class BeanValidationFeature extends AbstractFeature {
+public class BeanValidationFeature extends DelegatingFeature<BeanValidationFeature.Portable> {
 
-    private Portable delegate = new Portable();
-
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public BeanValidationFeature() {
+        super(new Portable());
     }
 
     public void setProvider(BeanValidationProvider provider) {
diff --git a/core/src/main/java/org/apache/cxf/validation/ClientBeanValidationFeature.java b/core/src/main/java/org/apache/cxf/validation/ClientBeanValidationFeature.java
index 6c4ec230444..31b01b5c6c5 100644
--- a/core/src/main/java/org/apache/cxf/validation/ClientBeanValidationFeature.java
+++ b/core/src/main/java/org/apache/cxf/validation/ClientBeanValidationFeature.java
@@ -22,18 +22,18 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @Provider(value = Type.Feature, scope = Scope.Client)
-public class ClientBeanValidationFeature extends AbstractFeature {
-    private final Portable delegate = getDelegate();
+public class ClientBeanValidationFeature extends DelegatingFeature<ClientBeanValidationFeature.Portable> {
+    public ClientBeanValidationFeature() {
+        super(new Portable());
+    }
 
-    protected Portable getDelegate() {
-        return new Portable();
+    protected ClientBeanValidationFeature(final Portable d) {
+        super(d);
     }
 
     public void addInterceptor(InterceptorProvider interceptorProvider, ClientBeanValidationOutInterceptor out) {
@@ -44,31 +44,6 @@ public void setProvider(BeanValidationProvider provider) {
         delegate.setProvider(provider);
     }
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
     @Provider(value = Type.Feature, scope = Scope.Client)
     public static class Portable implements AbstractPortableFeature {
         private BeanValidationProvider validationProvider;
diff --git a/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveClientFeature.java b/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveClientFeature.java
index 1a7616644df..17d83904eb3 100644
--- a/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveClientFeature.java
+++ b/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveClientFeature.java
@@ -25,48 +25,19 @@
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @NoJSR250Annotations
 @Provider(value = Type.Feature, scope = Scope.Client)
-public class BraveClientFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class BraveClientFeature extends DelegatingFeature<BraveClientFeature.Portable> {
     public BraveClientFeature(final Tracing tracing) {
-        delegate = new Portable(tracing);
+        super(new Portable(tracing));
     }
 
     public BraveClientFeature(HttpTracing brave) {
-        delegate = new Portable(brave);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(brave));
     }
 
     @Provider(value = Type.Feature, scope = Scope.Client)
diff --git a/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveFeature.java b/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveFeature.java
index ebbdf3098a9..74147396f10 100644
--- a/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveFeature.java
+++ b/integration/tracing/tracing-brave/src/main/java/org/apache/cxf/tracing/brave/BraveFeature.java
@@ -27,17 +27,13 @@
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @NoJSR250Annotations
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class BraveFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class BraveFeature extends DelegatingFeature<BraveFeature.Portable> {
     public BraveFeature() {
         this("cxf-svc-" + UUID.randomUUID().toString());
     }
@@ -51,32 +47,7 @@ public BraveFeature(final String name) {
     }
 
     public BraveFeature(HttpTracing brave) {
-        delegate = new Portable(brave);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(brave));
     }
 
     @Provider(value = Type.Feature, scope = Scope.Server)
diff --git a/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingClientFeature.java b/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingClientFeature.java
index 268deb1de23..e2b010e6117 100644
--- a/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingClientFeature.java
+++ b/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingClientFeature.java
@@ -23,46 +23,17 @@
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 import io.opentracing.Tracer;
 
 @NoJSR250Annotations
 @Provider(value = Type.Feature, scope = Scope.Client)
-public class OpenTracingClientFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class OpenTracingClientFeature extends DelegatingFeature<OpenTracingClientFeature.Portable> {
     public OpenTracingClientFeature(Tracer tracer) {
-        this.delegate = new Portable(tracer);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(tracer));
     }
 
     @Provider(value = Type.Feature, scope = Scope.Client)
diff --git a/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingFeature.java b/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingFeature.java
index 15748023b59..9b91918cb0f 100644
--- a/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingFeature.java
+++ b/integration/tracing/tracing-opentracing/src/main/java/org/apache/cxf/tracing/opentracing/OpenTracingFeature.java
@@ -23,10 +23,8 @@
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 import io.opentracing.Tracer;
@@ -34,40 +32,13 @@
 
 @NoJSR250Annotations
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class OpenTracingFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class OpenTracingFeature extends DelegatingFeature<OpenTracingFeature.Portable> {
     public OpenTracingFeature() {
-        delegate = new Portable();
+        super(new Portable());
     }
 
     public OpenTracingFeature(final Tracer tracer) {
-        delegate = new Portable(tracer);
-    }
-
-    @Override
-    public void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(tracer));
     }
 
     @Provider(value = Type.Feature, scope = Scope.Server)
diff --git a/rt/bindings/coloc/src/main/java/org/apache/cxf/binding/coloc/feature/ColocFeature.java b/rt/bindings/coloc/src/main/java/org/apache/cxf/binding/coloc/feature/ColocFeature.java
index 746c7bbbbc6..9f98832480e 100644
--- a/rt/bindings/coloc/src/main/java/org/apache/cxf/binding/coloc/feature/ColocFeature.java
+++ b/rt/bindings/coloc/src/main/java/org/apache/cxf/binding/coloc/feature/ColocFeature.java
@@ -25,38 +25,15 @@
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.ConduitSelector;
 import org.apache.cxf.endpoint.DeferredConduitSelector;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @NoJSR250Annotations
-public class ColocFeature extends AbstractFeature {
-    private final Portable delegate = new Portable();
+public class ColocFeature extends DelegatingFeature<ColocFeature.Portable> {
 
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public ColocFeature() {
+        super(new Portable());
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/rt/features/clustering/src/main/java/org/apache/cxf/clustering/FailoverFeature.java b/rt/features/clustering/src/main/java/org/apache/cxf/clustering/FailoverFeature.java
index 3c986bee372..76f4816348e 100644
--- a/rt/features/clustering/src/main/java/org/apache/cxf/clustering/FailoverFeature.java
+++ b/rt/features/clustering/src/main/java/org/apache/cxf/clustering/FailoverFeature.java
@@ -28,9 +28,8 @@
 import org.apache.cxf.endpoint.ConduitSelector;
 import org.apache.cxf.endpoint.ConduitSelectorHolder;
 import org.apache.cxf.endpoint.Endpoint;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
@@ -41,42 +40,15 @@
 @NoJSR250Annotations
 @EvaluateAllEndpoints
 @Provider(value = Type.Feature, scope = Scope.Client)
-public class FailoverFeature extends AbstractFeature {
-    protected Portable delegate;
-
+public class FailoverFeature extends DelegatingFeature<FailoverFeature.Portable> {
     protected FailoverFeature(Portable portable) {
-        delegate = portable;
+        super(portable);
     }
     public FailoverFeature() {
-        delegate = new Portable();
+        super(new Portable());
     }
     public FailoverFeature(String clientBootstrapAddress) {
-        delegate = new Portable(clientBootstrapAddress);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
+        super(new Portable(clientBootstrapAddress));
     }
 
     public ConduitSelector initTargetSelector(Endpoint endpoint) {
diff --git a/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java b/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java
index 715f0d02d41..25851ccc6d5 100644
--- a/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java
+++ b/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/LoggingFeature.java
@@ -22,14 +22,12 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
 import org.apache.cxf.ext.logging.event.LogEventSender;
 import org.apache.cxf.ext.logging.event.PrettyLoggingFilter;
 import org.apache.cxf.ext.logging.slf4j.Slf4jEventSender;
 import org.apache.cxf.ext.logging.slf4j.Slf4jVerboseEventSender;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
@@ -49,8 +47,10 @@
  */
 @NoJSR250Annotations
 @Provider(value = Type.Feature)
-public class LoggingFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class LoggingFeature extends DelegatingFeature<LoggingFeature.Portable> {
+    public LoggingFeature() {
+        super(new Portable());
+    }
 
     public void setLimit(int limit) {
         delegate.setLimit(limit);
@@ -88,31 +88,6 @@ public void setVerbose(boolean verbose) {
         delegate.setVerbose(verbose);
     }
 
-    @Override
-    public void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     public void addInBinaryContentMediaTypes(String mediaTypes) {
         delegate.addInBinaryContentMediaTypes(mediaTypes);
     }
diff --git a/rt/features/metrics/src/main/java/org/apache/cxf/metrics/MetricsFeature.java b/rt/features/metrics/src/main/java/org/apache/cxf/metrics/MetricsFeature.java
index c67162963dc..15ab37258ac 100644
--- a/rt/features/metrics/src/main/java/org/apache/cxf/metrics/MetricsFeature.java
+++ b/rt/features/metrics/src/main/java/org/apache/cxf/metrics/MetricsFeature.java
@@ -31,8 +31,8 @@
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Endpoint;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.metrics.interceptors.CountingOutInterceptor;
 import org.apache.cxf.metrics.interceptors.MetricsMessageClientOutInterceptor;
@@ -47,42 +47,15 @@
  */
 @NoJSR250Annotations
 @Provider(Type.Feature)
-public class MetricsFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class MetricsFeature extends DelegatingFeature<MetricsFeature.Portable> {
     public MetricsFeature() {
-        delegate = new Portable();
+        super(new Portable());
     }
     public MetricsFeature(MetricsProvider provider) {
-        delegate = new Portable(provider);
+        super(new Portable(provider));
     }
     public MetricsFeature(MetricsProvider ... providers) {
-        delegate = new Portable(providers);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(providers));
     }
 
     @Provider(Type.Feature)
diff --git a/rt/features/throttling/src/main/java/org/apache/cxf/throttling/ThrottlingFeature.java b/rt/features/throttling/src/main/java/org/apache/cxf/throttling/ThrottlingFeature.java
index dd2d60142cc..7f773f97d91 100644
--- a/rt/features/throttling/src/main/java/org/apache/cxf/throttling/ThrottlingFeature.java
+++ b/rt/features/throttling/src/main/java/org/apache/cxf/throttling/ThrottlingFeature.java
@@ -20,49 +20,20 @@
 package org.apache.cxf.throttling;
 
 import org.apache.cxf.Bus;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
  *
  */
-public class ThrottlingFeature extends AbstractFeature {
-    private final Portable delegate;
-
+public class ThrottlingFeature extends DelegatingFeature<ThrottlingFeature.Portable> {
     public ThrottlingFeature() {
-        delegate = new Portable();
+        super(new Portable());
     }
 
     public ThrottlingFeature(ThrottlingManager manager) {
-        delegate = new Portable(manager);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(manager));
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/JAXRSBeanValidationFeature.java b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/JAXRSBeanValidationFeature.java
index b5238ac146b..49ef1a83092 100644
--- a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/JAXRSBeanValidationFeature.java
+++ b/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/validation/JAXRSBeanValidationFeature.java
@@ -22,42 +22,17 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.validation.BeanValidationInInterceptor;
 import org.apache.cxf.validation.BeanValidationProvider;
 
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class JAXRSBeanValidationFeature extends AbstractFeature {
+public class JAXRSBeanValidationFeature extends DelegatingFeature<JAXRSBeanValidationFeature.Portable> {
 
-    private Portable delegate = new Portable();
-
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.doInitializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public JAXRSBeanValidationFeature() {
+        super(new Portable());
     }
 
     public void setProvider(BeanValidationProvider provider) {
diff --git a/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/JavascriptOptionsFeature.java b/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/JavascriptOptionsFeature.java
index 2e07239488d..f433b21364a 100644
--- a/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/JavascriptOptionsFeature.java
+++ b/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/JavascriptOptionsFeature.java
@@ -23,11 +23,9 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 
 /**
  * This class provides configuration options to the JavaScript client generator.
@@ -45,8 +43,11 @@
   * At this time, there is no corresponding WSDL extension for this information.
  */
 @NoJSR250Annotations
-public class JavascriptOptionsFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class JavascriptOptionsFeature extends DelegatingFeature<JavascriptOptionsFeature.Portable> {
+
+    public JavascriptOptionsFeature() {
+        super(new Portable());
+    }
 
     public Map<String, String> getNamespacePrefixMap() {
         return delegate.getNamespacePrefixMap();
@@ -56,26 +57,6 @@ public void setNamespacePrefixMap(Map<String, String> namespacePrefixMap) {
         delegate.setNamespacePrefixMap(namespacePrefixMap);
     }
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
     public static class Portable implements AbstractPortableFeature {
         private Map<String, String> namespacePrefixMap;
 
diff --git a/rt/management/src/main/java/org/apache/cxf/management/interceptor/ResponseTimeFeature.java b/rt/management/src/main/java/org/apache/cxf/management/interceptor/ResponseTimeFeature.java
index 506a7652c56..fc67a0d1271 100644
--- a/rt/management/src/main/java/org/apache/cxf/management/interceptor/ResponseTimeFeature.java
+++ b/rt/management/src/main/java/org/apache/cxf/management/interceptor/ResponseTimeFeature.java
@@ -20,39 +20,14 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.injection.NoJSR250Annotations;
-import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 @NoJSR250Annotations
-public class ResponseTimeFeature extends AbstractFeature {
-    private final Portable delegate = new Portable();
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+public class ResponseTimeFeature extends DelegatingFeature<ResponseTimeFeature.Portable> {
+    public ResponseTimeFeature() {
+        super(new Portable());
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/validation/JAXRSClientBeanValidationFeature.java b/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/validation/JAXRSClientBeanValidationFeature.java
index 722f943584b..320e88b906d 100644
--- a/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/validation/JAXRSClientBeanValidationFeature.java
+++ b/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/validation/JAXRSClientBeanValidationFeature.java
@@ -27,14 +27,8 @@
 
 @Provider(value = Type.Feature, scope = Scope.Client)
 public class JAXRSClientBeanValidationFeature extends ClientBeanValidationFeature {
-    @Override
-    protected void initializeProvider(InterceptorProvider interceptorProvider, Bus bus) {
-        super.initializeProvider(interceptorProvider, bus);
-    }
-
-    @Override
-    protected ClientBeanValidationFeature.Portable getDelegate() {
-        return new Portable();
+    public JAXRSClientBeanValidationFeature() {
+        super(new Portable());
     }
 
     public void setWrapInProcessingException(boolean wrapInProcessingException) {
diff --git a/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiFeature.java b/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiFeature.java
index 0169fc20864..dae1bdb968a 100644
--- a/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiFeature.java
+++ b/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiFeature.java
@@ -37,11 +37,9 @@
 import org.apache.cxf.annotations.Provider.Type;
 import org.apache.cxf.common.util.PropertyUtils;
 import org.apache.cxf.common.util.StringUtils;
-import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.jaxrs.JAXRSServiceFactoryBean;
 import org.apache.cxf.jaxrs.common.openapi.DefaultApplicationFactory;
 import org.apache.cxf.jaxrs.common.openapi.SwaggerProperties;
@@ -64,27 +62,11 @@
 import io.swagger.v3.oas.models.security.SecurityScheme;
 
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class OpenApiFeature extends AbstractFeature implements SwaggerUiSupport, SwaggerProperties {
-    private Portable delegate = new Portable();
+public class OpenApiFeature extends DelegatingFeature<OpenApiFeature.Portable>
+        implements SwaggerUiSupport, SwaggerProperties {
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public OpenApiFeature() {
+        super(new Portable());
     }
 
     public boolean isScan() {
diff --git a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/AbstractSwaggerFeature.java b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/AbstractSwaggerFeature.java
index fbb33e2edf8..c403242eb15 100644
--- a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/AbstractSwaggerFeature.java
+++ b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/AbstractSwaggerFeature.java
@@ -24,41 +24,22 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.cxf.Bus;
 import org.apache.cxf.common.util.PackageUtils;
-import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.jaxrs.JAXRSServiceFactoryBean;
 import org.apache.cxf.jaxrs.model.ClassResourceInfo;
 
-public abstract class AbstractSwaggerFeature extends AbstractFeature {
-    protected abstract Portable getDelegate();
+public abstract class AbstractSwaggerFeature<T extends AbstractSwaggerFeature.Portable>
+        extends DelegatingFeature<T> {
+    protected AbstractSwaggerFeature(final T d) {
+        super(d);
+    }
 
     public static boolean isSwaggerJaxRsAvailable() {
         return Portable.isSwaggerJaxRsAvailable();
     }
 
-    @Override
-    public void initialize(Client client, Bus bus) {
-        getDelegate().initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        getDelegate().initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        getDelegate().initialize(bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        getDelegate().initialize(server, bus);
-    }
-
     public void addSwaggerResource(Server server, Bus bus) {
         getDelegate().addSwaggerResource(server, bus);
     }
@@ -217,7 +198,7 @@ public void initialize(Server server, Bus bus) {
 
         protected abstract void setBasePathByAddress(String address);
 
-        private void calculateDefaultResourcePackage(Server server) {
+        void calculateDefaultResourcePackage(Server server) {
             if (!StringUtils.isEmpty(getResourcePackage())) {
                 return;
             }
diff --git a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
index 7b9fa3eaae4..46b5ead68a6 100644
--- a/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
+++ b/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java
@@ -70,11 +70,14 @@
 import io.swagger.models.auth.SecuritySchemeDefinition;
 
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class Swagger2Feature extends AbstractSwaggerFeature implements SwaggerUiSupport, SwaggerProperties {
-    private Portable delegate = new Portable();
+public class Swagger2Feature extends AbstractSwaggerFeature<Swagger2Feature.Portable>
+        implements SwaggerUiSupport, SwaggerProperties {
+    public Swagger2Feature() {
+        super(new Portable());
+    }
 
     @Override
-    protected AbstractSwaggerFeature.Portable getDelegate() {
+    protected Portable getDelegate() {
         return delegate;
     }
 
diff --git a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
index c4db0d5bf7e..92c85fe4ff5 100644
--- a/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
+++ b/rt/rs/sse/src/main/java/org/apache/cxf/jaxrs/sse/SseFeature.java
@@ -25,35 +25,16 @@
 import org.apache.cxf.annotations.Provider;
 import org.apache.cxf.annotations.Provider.Scope;
 import org.apache.cxf.annotations.Provider.Type;
-import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.jaxrs.provider.ServerProviderFactory;
 
 @Provider(value = Type.Feature, scope = Scope.Server)
-public class SseFeature extends AbstractFeature {
-    private final Portable delegate = new Portable();
+public class SseFeature extends DelegatingFeature<SseFeature.Portable> {
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+    public SseFeature() {
+        super(new Portable());
     }
 
     @Provider(value = Type.Feature, scope = Scope.Server)
diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpConduitFeature.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpConduitFeature.java
index 8e9aafe1267..e58fe5cd48d 100644
--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpConduitFeature.java
+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpConduitFeature.java
@@ -20,37 +20,17 @@
 
 import org.apache.cxf.Bus;
 import org.apache.cxf.endpoint.Client;
-import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.transport.Conduit;
 
 /**
  * Programmatically configure a http conduit. This can also be used as a DOSGi
  * intent.
  */
-public class HttpConduitFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+public class HttpConduitFeature extends DelegatingFeature<HttpConduitFeature.Portable> {
+    public HttpConduitFeature() {
+        super(new Portable());
     }
 
     public void setConduitConfig(HttpConduitConfig conduitConfig) {
diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpDestinationFeature.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpDestinationFeature.java
index 27b69720dc9..91268f950c1 100644
--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpDestinationFeature.java
+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HttpDestinationFeature.java
@@ -19,38 +19,18 @@
 package org.apache.cxf.transport.http;
 
 import org.apache.cxf.Bus;
-import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.transport.Destination;
 
 /**
  * Programmatically configure a http destination. This can also be used as a DOSGi
  * intent.
  */
-public class HttpDestinationFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+public class HttpDestinationFeature extends DelegatingFeature<HttpDestinationFeature.Portable> {
+    public HttpDestinationFeature() {
+        super(new Portable());
     }
 
     public void setDestinationConfig(HttpDestinationConfig destinationConfig) {
diff --git a/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsFeature.java b/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsFeature.java
index c58afb1f072..18e91995682 100644
--- a/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsFeature.java
+++ b/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsFeature.java
@@ -24,8 +24,8 @@
 import org.apache.cxf.configuration.security.CertificateConstraintsType;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.InterceptorProvider;
 
 /**
@@ -56,27 +56,10 @@
   </pre>
  */
 @NoJSR250Annotations
-public class CertConstraintsFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
+public class CertConstraintsFeature extends DelegatingFeature<CertConstraintsFeature.Portable> {
 
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
-    }
-
-    @Override
-    protected void initializeProvider(InterceptorProvider provider, Bus bus) {
-        delegate.doInitializeProvider(provider, bus);
+    public CertConstraintsFeature() {
+        super(new Portable());
     }
 
     public void setCertificateConstraints(CertificateConstraintsType c) {
diff --git a/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/ConnectionFactoryFeature.java b/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/ConnectionFactoryFeature.java
index 30b6c8be202..a332e12c299 100644
--- a/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/ConnectionFactoryFeature.java
+++ b/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/ConnectionFactoryFeature.java
@@ -24,8 +24,8 @@
 import org.apache.cxf.common.injection.NoJSR250Annotations;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.interceptor.Fault;
 import org.apache.cxf.interceptor.InterceptorProvider;
 import org.apache.cxf.message.Message;
@@ -40,31 +40,9 @@
  * configuration that is generated from the old configuration style.
  */
 @NoJSR250Annotations
-public class ConnectionFactoryFeature extends AbstractFeature {
-    private Portable delegate;
-
+public class ConnectionFactoryFeature extends DelegatingFeature<ConnectionFactoryFeature.Portable> {
     public ConnectionFactoryFeature(ConnectionFactory cf) {
-        delegate = new Portable(cf);
-    }
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider provider, Bus bus) {
-        delegate.initialize(provider, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+        super(new Portable(cf));
     }
 
     public static class Portable implements AbstractPortableFeature {
diff --git a/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConfigFeature.java b/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConfigFeature.java
index 2361706b73d..668ca0f4090 100644
--- a/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConfigFeature.java
+++ b/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConfigFeature.java
@@ -27,9 +27,8 @@
 import org.apache.cxf.configuration.ConfigurationException;
 import org.apache.cxf.endpoint.Client;
 import org.apache.cxf.endpoint.Server;
-import org.apache.cxf.feature.AbstractFeature;
 import org.apache.cxf.feature.AbstractPortableFeature;
-import org.apache.cxf.interceptor.InterceptorProvider;
+import org.apache.cxf.feature.DelegatingFeature;
 import org.apache.cxf.transport.Conduit;
 import org.apache.cxf.transport.Destination;
 
@@ -39,27 +38,9 @@
  * configuration that is generated from the old configuration style.
  */
 @NoJSR250Annotations
-public class JMSConfigFeature extends AbstractFeature {
-    private Portable delegate = new Portable();
-
-    @Override
-    public void initialize(Client client, Bus bus) {
-        delegate.initialize(client, bus);
-    }
-
-    @Override
-    public void initialize(Server server, Bus bus) {
-        delegate.initialize(server, bus);
-    }
-
-    @Override
-    public void initialize(InterceptorProvider interceptorProvider, Bus bus) {
-        delegate.initialize(interceptorProvider, bus);
-    }
-
-    @Override
-    public void initialize(Bus bus) {
-        delegate.initialize(bus);
+public class JMSConfigFeature extends DelegatingFeature<JMSConfigFeature.Portable> {
+    public JMSConfigFeature() {
+        super(new Portable());
     }
 
     public JMSConfiguration getJmsConfig() {
diff --git a/systests/uncategorized/src/test/java/org/apache/cxf/systest/schema_validation/ValidationClientServerTest.java b/systests/uncategorized/src/test/java/org/apache/cxf/systest/schema_validation/ValidationClientServerTest.java
index 4520ec4e9b0..f79101e72f5 100644
--- a/systests/uncategorized/src/test/java/org/apache/cxf/systest/schema_validation/ValidationClientServerTest.java
+++ b/systests/uncategorized/src/test/java/org/apache/cxf/systest/schema_validation/ValidationClientServerTest.java
@@ -23,6 +23,7 @@
 import java.io.StringReader;
 import java.net.URL;
 import java.util.List;
+import java.util.Locale;
 
 import javax.xml.namespace.QName;
 import javax.xml.transform.Source;
@@ -45,6 +46,7 @@
 import org.apache.schema_validation.types.SomeRequest;
 import org.apache.schema_validation.types.SomeResponse;
 
+import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 
@@ -60,12 +62,20 @@ public class ValidationClientServerTest extends AbstractBusClientServerTestBase
                                                 "SchemaValidationService");
     private final QName portName = new QName("http://apache.org/schema_validation", "SoapPort");
 
+    private static Locale oldLocale;
 
     @BeforeClass
     public static void startservers() throws Exception {
+        oldLocale = Locale.getDefault();
+        Locale.setDefault(Locale.ENGLISH);
         assertTrue("server did not launch correctly", launchServer(ValidationServer.class, true));
     }
 
+    @AfterClass
+    public static void resetLocale() {
+        Locale.setDefault(oldLocale);
+    }
+
     @Test
     public void testSchemaValidationProviderPayload() throws Exception {
         doProviderTest("PProvider");
