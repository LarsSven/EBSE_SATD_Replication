diff --git a/docs/zookeeperAdmin.html b/docs/zookeeperAdmin.html
index d4bb21a897f..1396fdc64be 100644
--- a/docs/zookeeperAdmin.html
+++ b/docs/zookeeperAdmin.html
@@ -1236,6 +1236,24 @@ <h4>Advanced Configuration</h4>
 </dd>
 
           
+<dt>
+<term>txnLogSizeLimitInKb</term>
+</dt>
+<dd>
+<p>(Java system property: <strong>zookeeper.txnLogSizeLimitInKb</strong>)</p>
+<p>Zookeeper transaction log file can also be controlled more
+              directly using txnLogSizeLimitInKb. Larger txn logs can lead to
+              slower follower syncs when sync is done using transaction log.
+              This is because leader has to scan through the appropriate log
+              file on disk to find the transaction to start sync from.
+              This feature is turned off by this default and snapCount is the
+              only value that limits transaction log size. When enabled
+              Zookeeper will roll the log when either of the limit is hit.
+              Please note that actual log size can exceed this value by the size
+              of the serialized transaction.</p>
+</dd>
+
+          
 <dt>
 <term>maxClientCnxns</term>
 </dt>
diff --git a/docs/zookeeperAdmin.pdf b/docs/zookeeperAdmin.pdf
index 54460c86e07..15b202ab8f9 100644
Binary files a/docs/zookeeperAdmin.pdf and b/docs/zookeeperAdmin.pdf differ
diff --git a/src/java/test/org/apache/zookeeper/test/TxnLogSizeLimitTest.java b/src/java/test/org/apache/zookeeper/test/TxnLogSizeLimitTest.java
deleted file mode 100644
index 2d40cc1f7e9..00000000000
--- a/src/java/test/org/apache/zookeeper/test/TxnLogSizeLimitTest.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.zookeeper.test;
-
-import java.io.File;
-import java.util.HashSet;
-import java.util.Random;
-
-import org.apache.log4j.Logger;
-import org.apache.zookeeper.CreateMode;
-import org.apache.zookeeper.PortAssignment;
-import org.apache.zookeeper.WatchedEvent;
-import org.apache.zookeeper.Watcher;
-import org.apache.zookeeper.ZKTestCase;
-import org.apache.zookeeper.ZooDefs.Ids;
-import org.apache.zookeeper.ZooKeeper;
-import org.apache.zookeeper.data.Stat;
-import org.apache.zookeeper.proto.CreateRequest;
-import org.apache.zookeeper.server.ServerCnxnFactory;
-import org.apache.zookeeper.server.ZKDatabase;
-import org.apache.zookeeper.server.ZooKeeperServer;
-import org.apache.zookeeper.server.persistence.FileTxnLog;
-import org.apache.zookeeper.server.persistence.FileTxnSnapLog;
-import org.apache.zookeeper.txn.TxnHeader;
-import org.junit.Assert;
-import org.junit.Test;
-
-/**
- * Test loading committed proposal from txnlog. Learner uses these proposals to
- * catch-up with leader
- */
-public class TxnLogSizeLimitTest extends ZKTestCase implements Watcher {
-    private static final Logger LOG = Logger
-            .getLogger(TxnLogSizeLimitTest.class);
-    private static String HOSTPORT = "127.0.0.1:" + PortAssignment.unique();
-    private static final int CONNECTION_TIMEOUT = 3000;
-
-    // Overhead is about 150 bytes for txn created in this test
-    private static final int NODE_SIZE = 1024;
-    private final long PREALLOCATE = 512;
-    private final long LOG_SIZE_LIMIT = 1024 * 4;
-
-    /**
-     * Tested that log size get update correctly
-     */
-    @Test
-    public void testGetCurrentLogSize() throws Exception {
-        FileTxnLog.setLogSizeLimit(-1);
-        File tmpDir = ClientBase.createTmpDir();
-        FileTxnLog log = new FileTxnLog(tmpDir);
-        FileTxnLog.setPreallocSize(PREALLOCATE);
-        CreateRequest record = new CreateRequest(null, new byte[NODE_SIZE],
-                Ids.OPEN_ACL_UNSAFE, 0);
-        int zxid = 1;
-        for (int i = 0; i < 4; i++) {
-            log.append(new TxnHeader(0, 0, zxid++, 0, 0), record);
-            LOG.debug("Current log size: " + log.getCurrentLogSize());
-        }
-        log.commit();
-        LOG.info("Current log size: " + log.getCurrentLogSize());
-        Assert.assertTrue(log.getCurrentLogSize() > (zxid - 1) * NODE_SIZE);
-        for (int i = 0; i < 4; i++) {
-            log.append(new TxnHeader(0, 0, zxid++, 0, 0), record);
-            LOG.debug("Current log size: " + log.getCurrentLogSize());
-        }
-        log.commit();
-        LOG.info("Current log size: " + log.getCurrentLogSize());
-        Assert.assertTrue(log.getCurrentLogSize() > (zxid - 1) * NODE_SIZE);
-    }
-
-    /**
-     * Test that the server can correctly load the data when there are multiple
-     * txnlogs per snapshot
-     */
-    @Test
-    public void testLogSizeLimit() throws Exception {
-        File tmpDir = ClientBase.createTmpDir();
-        ClientBase.setupTestEnv();
-
-        // Need to override preallocate set by setupTestEnv()
-        // We don't need to unset these values since each unit test run in
-        // a separate JVM instance
-        FileTxnLog.setPreallocSize(PREALLOCATE);
-        FileTxnLog.setLogSizeLimit(LOG_SIZE_LIMIT);
-
-        ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-        final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
-        ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);
-        f.startup(zks);
-        Assert.assertTrue("waiting for server being up ",
-                ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));
-        ZooKeeper zk = new ZooKeeper(HOSTPORT, CONNECTION_TIMEOUT, this);
-
-        // Generate transactions
-        HashSet<Long> zxids = new HashSet<Long>();
-        byte[] bytes = new byte[NODE_SIZE];
-        Random random = new Random();
-        random.nextBytes(bytes);
-
-        // We will create enough txn to generate 3 logs
-        long txnCount = LOG_SIZE_LIMIT / NODE_SIZE / 2 * 5;
-
-        LOG.info("Creating " + txnCount + " txns");
-
-        try {
-            for (long i = 0; i < txnCount; i++) {
-                Stat stat = new Stat();
-                zk.create("/node-" + i, bytes, Ids.OPEN_ACL_UNSAFE,
-                        CreateMode.PERSISTENT);
-                zk.getData("/node-" + i, null, stat);
-                zxids.add(stat.getCzxid());
-            }
-
-        } finally {
-            zk.close();
-        }
-
-        // shutdown
-        f.shutdown();
-        Assert.assertTrue("waiting for server to shutdown",
-                ClientBase.waitForServerDown(HOSTPORT, CONNECTION_TIMEOUT));
-
-        File logDir = new File(tmpDir, FileTxnSnapLog.version + FileTxnSnapLog.VERSION);
-        File[] txnLogs = FileTxnLog.getLogFiles(logDir.listFiles(), 0);
-
-        Assert.assertEquals("Unexpected number of logs", 3, txnLogs.length);
-
-        // Log size should not exceed limit by more than one node size;
-        long threshold = LOG_SIZE_LIMIT + NODE_SIZE;
-        LOG.info(txnLogs[0].getAbsolutePath());
-        Assert.assertTrue(
-                "Exceed log size limit: " + txnLogs[0].length(),
-                threshold > txnLogs[0].length());
-        LOG.info(txnLogs[1].getAbsolutePath());
-        Assert.assertTrue(
-                "Exceed log size limit " + txnLogs[1].length(),
-                threshold > txnLogs[1].length());
-
-        // Start database only
-        zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
-        zks.startdata();
-
-        ZKDatabase db = zks.getZKDatabase();
-
-        for (long i = 0; i < txnCount; i++) {
-            Stat stat = new Stat();
-            byte[] data = db.getData("/node-" + i, stat, null);
-            Assert.assertArrayEquals("Missmatch data", bytes, data);
-            Assert.assertTrue("Unknown zxid ", zxids.contains(stat.getMzxid()));
-        }
-    }
-
-    public void process(WatchedEvent event) {
-        // do nothing
-    }
-
-}
diff --git a/zookeeper-docs/src/documentation/content/xdocs/zookeeperAdmin.xml b/zookeeper-docs/src/documentation/content/xdocs/zookeeperAdmin.xml
index 4f52164dc65..1d696d841c9 100644
--- a/zookeeper-docs/src/documentation/content/xdocs/zookeeperAdmin.xml
+++ b/zookeeper-docs/src/documentation/content/xdocs/zookeeperAdmin.xml
@@ -880,6 +880,26 @@ server.3=zoo3:2888:3888</programlisting>
             </listitem>
           </varlistentry>
 
+          <varlistentry>
+            <term>txnLogSizeLimitInKb</term>
+
+            <listitem>
+              <para>(Java system property: <emphasis
+              role="bold">zookeeper.txnLogSizeLimitInKb</emphasis>)</para>
+
+              <para>Zookeeper transaction log file can also be controlled more
+              directly using txnLogSizeLimitInKb. Larger txn logs can lead to
+              slower follower syncs when sync is done using transaction log.
+              This is because leader has to scan through the appropriate log
+              file on disk to find the transaction to start sync from.
+              This feature is turned off by this default and snapCount is the
+              only value that limits transaction log size. When enabled
+              Zookeeper will roll the log when either of the limit is hit.
+              Please note that actual log size can exceed this value by the size
+              of the serialized transaction.</para>
+            </listitem>
+          </varlistentry>
+
           <varlistentry>
             <term>maxClientCnxns</term>
             <listitem>
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
index 771f7a26d0d..d95dac84644 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java
@@ -114,12 +114,12 @@ public class FileTxnLog implements TxnLog {
      * this limit by the maximum size of a serialized transaction.
      * The feature is disabled by default (-1)
      */
-    public static final String LOG_SIZE_LIMIT = "zookeeper.txnlogSizeLimitInKb";
+    private static final String txnLogSizeLimitSetting = "zookeeper.txnLogSizeLimitInKb";
 
     /**
      * The actual txnlog size limit in bytes.
      */
-    public static long logSizeLimit = -1;
+    private static long txnLogSizeLimit = -1;
 
     static {
         LOG = LoggerFactory.getLogger(FileTxnLog.class);
@@ -130,13 +130,13 @@ public class FileTxnLog implements TxnLog {
             fsyncWarningThreshold = Long.getLong(FSYNC_WARNING_THRESHOLD_MS_PROPERTY, 1000);
         fsyncWarningThresholdMS = fsyncWarningThreshold;
 
-        Long logSize = Long.getLong(LOG_SIZE_LIMIT, -1);
+        Long logSize = Long.getLong(txnLogSizeLimitSetting, -1);
         if (logSize > 0) {
-            LOG.info("{} = {}", LOG_SIZE_LIMIT, logSize);
+            LOG.info("{} = {}", txnLogSizeLimitSetting, logSize);
 
             // Convert to bytes
             logSize = logSize * 1024;
-            logSizeLimit = logSize;
+            txnLogSizeLimit = logSize;
         }
     }
 
@@ -150,12 +150,6 @@ public class FileTxnLog implements TxnLog {
     long dbId;
     private LinkedList<FileOutputStream> streamsToFlush =
         new LinkedList<FileOutputStream>();
-
-    /**
-     * The current file size including the padding.
-     */
-    private long currentSize;
-
     File logFileWrite = null;
     private FilePadding filePadding = new FilePadding();
 
@@ -193,8 +187,8 @@ public void setServerStats(ServerStats serverStats) {
     /**
      * Set log size limit
      */
-    public static void setLogSizeLimit(long size) {
-        logSizeLimit = size;
+    public static void setTxnLogSizeLimit(long size) {
+        txnLogSizeLimit = size;
     }
 
     /**
@@ -402,10 +396,10 @@ public synchronized void commit() throws IOException {
         }
 
         // Roll the log file if we exceed the size limit
-        if(logSizeLimit > 0) {
+        if(txnLogSizeLimit > 0) {
             long logSize = getCurrentLogSize();
 
-            if (logSize > logSizeLimit) {
+            if (logSize > txnLogSizeLimit) {
                 LOG.debug("Log size limit reached: {}", logSize);
                 rollLog();
             }
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java
index 77b72109a45..e0d34abe2d3 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java
@@ -17,9 +17,13 @@
  */
 package org.apache.zookeeper.server.persistence;
 
-import org.apache.zookeeper.ZKTestCase;
-import org.apache.zookeeper.ZooDefs;
+import org.apache.zookeeper.*;
+import org.apache.zookeeper.data.Stat;
+import org.apache.zookeeper.proto.CreateRequest;
+import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.ServerStats;
+import org.apache.zookeeper.server.ZKDatabase;
+import org.apache.zookeeper.server.ZooKeeperServer;
 import org.apache.zookeeper.test.ClientBase;
 import org.apache.zookeeper.txn.CreateTxn;
 import org.apache.zookeeper.txn.TxnHeader;
@@ -31,6 +35,8 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Random;
 
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsEqual.equalTo;
@@ -135,4 +141,122 @@ public void testSyncThresholdExceedCount() throws IOException {
       Assert.assertEquals((long) i + 1 , serverStats.getFsyncThresholdExceedCount());
     }
   }
+
+  private static String HOSTPORT = "127.0.0.1:" + PortAssignment.unique();
+  private static final int CONNECTION_TIMEOUT = 3000;
+
+  // Overhead is about 150 bytes for txn created in this test
+  private static final int NODE_SIZE = 1024;
+  private final long PREALLOCATE = 512;
+  private final long LOG_SIZE_LIMIT = 1024 * 4;
+
+  /**
+   * Test that log size get update correctly
+   */
+  @Test
+  public void testGetCurrentLogSize() throws Exception {
+    FileTxnLog.setTxnLogSizeLimit(-1);
+    File tmpDir = ClientBase.createTmpDir();
+    FileTxnLog log = new FileTxnLog(tmpDir);
+    FileTxnLog.setPreallocSize(PREALLOCATE);
+    CreateRequest record = new CreateRequest(null, new byte[NODE_SIZE],
+            ZooDefs.Ids.OPEN_ACL_UNSAFE, 0);
+    int zxid = 1;
+    for (int i = 0; i < 4; i++) {
+      log.append(new TxnHeader(0, 0, zxid++, 0, 0), record);
+      LOG.debug("Current log size: " + log.getCurrentLogSize());
+    }
+    log.commit();
+    LOG.info("Current log size: " + log.getCurrentLogSize());
+    Assert.assertTrue(log.getCurrentLogSize() > (zxid - 1) * NODE_SIZE);
+    for (int i = 0; i < 4; i++) {
+      log.append(new TxnHeader(0, 0, zxid++, 0, 0), record);
+      LOG.debug("Current log size: " + log.getCurrentLogSize());
+    }
+    log.commit();
+    LOG.info("Current log size: " + log.getCurrentLogSize());
+    Assert.assertTrue(log.getCurrentLogSize() > (zxid - 1) * NODE_SIZE);
+  }
+
+  /**
+   * Test that the server can correctly load the data when there are multiple
+   * txnlogs per snapshot
+   */
+  @Test
+  public void testLogSizeLimit() throws Exception {
+    File tmpDir = ClientBase.createTmpDir();
+    ClientBase.setupTestEnv();
+
+    // Need to override preallocate set by setupTestEnv()
+    // We don't need to unset these values since each unit test run in
+    // a separate JVM instance
+    FileTxnLog.setPreallocSize(PREALLOCATE);
+    FileTxnLog.setTxnLogSizeLimit(LOG_SIZE_LIMIT);
+
+    ZooKeeperServer zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
+    final int PORT = Integer.parseInt(HOSTPORT.split(":")[1]);
+    ServerCnxnFactory f = ServerCnxnFactory.createFactory(PORT, -1);
+    f.startup(zks);
+    Assert.assertTrue("waiting for server being up ",
+            ClientBase.waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT));
+    ZooKeeper zk = new ZooKeeper(HOSTPORT, CONNECTION_TIMEOUT, event -> { });
+
+    // Generate transactions
+    HashSet<Long> zxids = new HashSet<Long>();
+    byte[] bytes = new byte[NODE_SIZE];
+    Random random = new Random();
+    random.nextBytes(bytes);
+
+    // We will create enough txn to generate 3 logs
+    long txnCount = LOG_SIZE_LIMIT / NODE_SIZE / 2 * 5;
+
+    LOG.info("Creating " + txnCount + " txns");
+
+    try {
+      for (long i = 0; i < txnCount; i++) {
+        Stat stat = new Stat();
+        zk.create("/node-" + i, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE,
+                CreateMode.PERSISTENT);
+        zk.getData("/node-" + i, null, stat);
+        zxids.add(stat.getCzxid());
+      }
+
+    } finally {
+      zk.close();
+    }
+
+    // shutdown
+    f.shutdown();
+    Assert.assertTrue("waiting for server to shutdown",
+            ClientBase.waitForServerDown(HOSTPORT, CONNECTION_TIMEOUT));
+
+    File logDir = new File(tmpDir, FileTxnSnapLog.version + FileTxnSnapLog.VERSION);
+    File[] txnLogs = FileTxnLog.getLogFiles(logDir.listFiles(), 0);
+
+    Assert.assertEquals("Unexpected number of logs", 3, txnLogs.length);
+
+    // Log size should not exceed limit by more than one node size;
+    long threshold = LOG_SIZE_LIMIT + NODE_SIZE;
+    LOG.info(txnLogs[0].getAbsolutePath());
+    Assert.assertTrue(
+            "Exceed log size limit: " + txnLogs[0].length(),
+            threshold > txnLogs[0].length());
+    LOG.info(txnLogs[1].getAbsolutePath());
+    Assert.assertTrue(
+            "Exceed log size limit " + txnLogs[1].length(),
+            threshold > txnLogs[1].length());
+
+    // Start database only
+    zks = new ZooKeeperServer(tmpDir, tmpDir, 3000);
+    zks.startdata();
+
+    ZKDatabase db = zks.getZKDatabase();
+
+    for (long i = 0; i < txnCount; i++) {
+      Stat stat = new Stat();
+      byte[] data = db.getData("/node-" + i, stat, null);
+      Assert.assertArrayEquals("Missmatch data", bytes, data);
+      Assert.assertTrue("Unknown zxid ", zxids.contains(stat.getMzxid()));
+    }
+  }
 }
