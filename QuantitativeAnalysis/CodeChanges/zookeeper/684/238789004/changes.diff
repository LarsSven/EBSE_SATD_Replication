diff --git a/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md b/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md
index 2b68e38268e..d808b612a99 100644
--- a/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md
+++ b/zookeeper-docs/src/main/resources/markdown/zookeeperAdmin.md
@@ -685,6 +685,17 @@ property, when available, is noted below.
     defaults to 1000. This value can only be set as a
     system property.
 
+* *maxResponseCacheSize* :
+    (Java system property: **zookeeper.maxResponseCacheSize**)
+    When set to a positive integer, it determines the size
+    of the cache that stores the serialized form of recently
+    read records. Helps save the serialization cost on
+    popular znodes. The metrics **response_packet_cache_hits**
+    and **response_packet_cache_misses** can be used to tune
+    this value to a given workload. The feature is turned on
+    by default with a value of 400, set to 0 or a negative
+    integer to turn the feature off.
+
 * *autopurge.snapRetainCount* :
     (No Java system property)
     **New in 3.4.0:**
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java
index dc0489ce6cb..73db7d58026 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java
@@ -22,11 +22,11 @@
 import java.util.LinkedHashMap;
 import java.util.Map;
 
-import org.apache.jute.Record;
 import org.apache.zookeeper.data.Stat;
 
 @SuppressWarnings("serial")
 public class ResponseCache {
+    // Magic number chosen to be "big enough but not too big"
     private static final int DEFAULT_RESPONSE_CACHE_SIZE = 400;
 
     private static class Entry {
@@ -62,18 +62,18 @@ public byte[] get(String key, Stat stat) {
     }
 
     private static int getResponseCacheSize() {
-        String value = System.getProperty("zookeeper.maxResponseCacheSize");
-        return value == null ? DEFAULT_RESPONSE_CACHE_SIZE : Integer.parseInt(value);
+        return Integer.getInteger("zookeeper.maxResponseCacheSize", DEFAULT_RESPONSE_CACHE_SIZE);
     }
 
     public static boolean isEnabled() {
-        return getResponseCacheSize() != 0;
+        return getResponseCacheSize() > 0;
     }
 
     private static class LRUCache<K, V> extends LinkedHashMap<K, V> {
         private int cacheSize;
 
-        public LRUCache(int cacheSize) {
+        LRUCache(int cacheSize) {
+            super(cacheSize/4);
             this.cacheSize = cacheSize;
         }
 
