diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
index bf611422881..02adfed5580 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java
@@ -657,6 +657,9 @@ public synchronized void shutdown(boolean fullyShutDown) {
         if (firstProcessor != null) {
             firstProcessor.shutdown();
         }
+        if(jvmPauseMonitor != null) {
+            jvmPauseMonitor.serviceStop();
+        }
 
         if (zkDb != null) {
             if (fullyShutDown) {
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
index e1d81e02fb2..07e45dc0612 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java
@@ -1355,6 +1355,9 @@ public void shutdown() {
         if(udpSocket != null) {
             udpSocket.close();
         }
+        if(jvmPauseMonitor != null) {
+            jvmPauseMonitor.serviceStop();
+        }
 
         try {
             adminServer.shutdown();
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java
index a8b7234d758..0ce617fe8e8 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java
@@ -131,9 +131,9 @@ private String formatMessage(long extraSleepTime,
             }
         }
 
-        String ret = "Detected pause in JVM or host machine (eg GC): pause of approximately " + extraSleepTime
-                + "ms, total pause: info level: " + numGcInfoThresholdExceeded
-                + ", warn level: " + numGcWarnThresholdExceeded + "\n";
+        String ret = String.format("Detected pause in JVM or host machine (eg GC): pause of approximately %d ms, " +
+                "total pause: info level: %d, warn level: %d %n",
+                extraSleepTime, numGcInfoThresholdExceeded, numGcWarnThresholdExceeded);
         if (gcDiffs.isEmpty()) {
             ret += ("No GCs detected");
         } else {
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java
index 02e2cf3d0f7..0bfb17dc522 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java
@@ -153,7 +153,7 @@ public void testJvmPauseMonitorConfigured()
         final Long warnTH = 5555L;
         final Long infoTH = 555L;
 
-        QuorumPeerConfig quorumPeerConfig = new MockQuorumPeerConfig(1);
+        QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig();
         Properties zkProp = getDefaultZKProperties();
         zkProp.setProperty("dataDir", new File("myDataDir").getAbsolutePath());
         zkProp.setProperty("jvm.pause.monitor", "true");
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java
index fba65f483e4..4e701b83d07 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java
@@ -19,6 +19,7 @@
 package org.apache.zookeeper.server.util;
 
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
+import org.junit.After;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -27,28 +28,48 @@
 
 public class JvmPauseMonitorTest {
 
+    private final Long sleepTime = 100L;
+    private final Long infoTH = -1L;
+    private final Long warnTH = -1L;
+    private JvmPauseMonitor pauseMonitor;
+
     @Test(timeout=5000)
-    public void testJvmPauseMonitorExceedThreshold() throws InterruptedException {
-        final Long sleepTime = 100L;
-        final Long warnTH = -1L;
-        final Long infoTH = -1L;
+    public void testJvmPauseMonitorExceedInfoThreshold() throws InterruptedException {
+        QuorumPeerConfig qpConfig = mock(QuorumPeerConfig.class);
+        when(qpConfig.getJvmPauseSleepTimeMs()).thenReturn(sleepTime);
+        when(qpConfig.getJvmPauseInfoThresholdMs()).thenReturn(infoTH);
+
+        pauseMonitor = new JvmPauseMonitor(qpConfig);
+        pauseMonitor.serviceStart();
+
+        Assert.assertEquals(sleepTime, Long.valueOf(pauseMonitor.sleepTimeMs));
+        Assert.assertEquals(infoTH, Long.valueOf(pauseMonitor.infoThresholdMs));
 
+        while(pauseMonitor.getNumGcInfoThresholdExceeded() == 0) {
+            Thread.sleep(200);
+        }
+    }
+
+    @Test(timeout=5000)
+    public void testJvmPauseMonitorExceedWarnThreshold() throws InterruptedException {
         QuorumPeerConfig qpConfig = mock(QuorumPeerConfig.class);
         when(qpConfig.getJvmPauseSleepTimeMs()).thenReturn(sleepTime);
         when(qpConfig.getJvmPauseWarnThresholdMs()).thenReturn(warnTH);
-        when(qpConfig.getJvmPauseInfoThresholdMs()).thenReturn(infoTH);
 
-        JvmPauseMonitor pauseMonitor = new JvmPauseMonitor(qpConfig);
+        pauseMonitor = new JvmPauseMonitor(qpConfig);
         pauseMonitor.serviceStart();
 
         Assert.assertEquals(sleepTime, Long.valueOf(pauseMonitor.sleepTimeMs));
         Assert.assertEquals(warnTH, Long.valueOf(pauseMonitor.warnThresholdMs));
-        Assert.assertEquals(infoTH, Long.valueOf(pauseMonitor.infoThresholdMs));
 
-        while(pauseMonitor.getNumGcInfoThresholdExceeded() == 0 && pauseMonitor.getNumGcWarnThresholdExceeded() == 0) {
+        while(pauseMonitor.getNumGcWarnThresholdExceeded() == 0) {
             Thread.sleep(200);
         }
 
+    }
+
+    @After
+    public void teardown() {
         pauseMonitor.serviceStop();
     }
 }
