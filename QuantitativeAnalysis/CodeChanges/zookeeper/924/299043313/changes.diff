diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java b/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java
index 004446aa057..7202d0228b8 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java
@@ -398,6 +398,40 @@ public SSLContextAndOptions createSSLContextAndOptionsFromConfig(ZKConfig config
         }
     }
 
+    public static KeyStore loadKeyStore(
+            String keyStoreLocation,
+            String keyStorePassword,
+            String keyStoreTypeProp)
+            throws IOException, GeneralSecurityException {
+        LOG.info("yee: " + keyStoreLocation + keyStorePassword + keyStoreTypeProp);
+        KeyStoreFileType storeFileType =
+                KeyStoreFileType.fromPropertyValueOrFileName(
+                        keyStoreTypeProp, keyStoreLocation);
+        LOG.info("here");
+        return FileKeyStoreLoaderBuilderProvider
+                .getBuilderForKeyStoreFileType(storeFileType)
+                .setKeyStorePath(keyStoreLocation)
+                .setKeyStorePassword(keyStorePassword)
+                .build()
+                .loadKeyStore();
+    }
+
+    public static KeyStore loadTrustStore(
+            String trustStoreLocation,
+            String trustStorePassword,
+            String trustStoreTypeProp)
+            throws IOException, GeneralSecurityException {
+        KeyStoreFileType storeFileType =
+                KeyStoreFileType.fromPropertyValueOrFileName(
+                        trustStoreTypeProp, trustStoreLocation);
+        return FileKeyStoreLoaderBuilderProvider
+                .getBuilderForKeyStoreFileType(storeFileType)
+                .setTrustStorePath(trustStoreLocation)
+                .setTrustStorePassword(trustStorePassword)
+                .build()
+                .loadTrustStore();
+    }
+
     /**
      * Creates a key manager by loading the key store from the given file of
      * the given type, optionally decrypting it using the given password.
@@ -419,15 +453,7 @@ public static X509KeyManager createKeyManager(
             keyStorePassword = "";
         }
         try {
-            KeyStoreFileType storeFileType =
-                    KeyStoreFileType.fromPropertyValueOrFileName(
-                            keyStoreTypeProp, keyStoreLocation);
-            KeyStore ks = FileKeyStoreLoaderBuilderProvider
-                    .getBuilderForKeyStoreFileType(storeFileType)
-                    .setKeyStorePath(keyStoreLocation)
-                    .setKeyStorePassword(keyStorePassword)
-                    .build()
-                    .loadKeyStore();
+            KeyStore ks = loadKeyStore(keyStoreLocation, keyStorePassword, keyStoreTypeProp);
             KeyManagerFactory kmf = KeyManagerFactory.getInstance("PKIX");
             kmf.init(ks, keyStorePassword.toCharArray());
 
@@ -480,15 +506,7 @@ public static X509TrustManager createTrustManager(
             trustStorePassword = "";
         }
         try {
-            KeyStoreFileType storeFileType =
-                    KeyStoreFileType.fromPropertyValueOrFileName(
-                            trustStoreTypeProp, trustStoreLocation);
-            KeyStore ts = FileKeyStoreLoaderBuilderProvider
-                    .getBuilderForKeyStoreFileType(storeFileType)
-                    .setTrustStorePath(trustStoreLocation)
-                    .setTrustStorePassword(trustStorePassword)
-                    .build()
-                    .loadTrustStore();
+            KeyStore ts = loadTrustStore(trustStoreLocation, trustStorePassword, trustStoreTypeProp);
             PKIXBuilderParameters pbParams = new PKIXBuilderParameters(ts, new X509CertSelector());
             if (crlEnabled || ocspEnabled) {
                 pbParams.setRevocationEnabled(true);
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java
index 6a9efdaf8f5..63841797678 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java
@@ -19,13 +19,7 @@
 package org.apache.zookeeper.server.admin;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.io.File;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Optional;
+import java.util.*;
 import java.security.GeneralSecurityException;
 import java.security.KeyStore;
 
@@ -34,8 +28,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.zookeeper.common.QuorumX509Util;
-import org.apache.zookeeper.util.PemReader;
+import org.apache.zookeeper.common.*;
 import org.apache.zookeeper.server.ZooKeeperServer;
 import org.eclipse.jetty.server.HttpConfiguration;
 import org.eclipse.jetty.server.HttpConnectionFactory;
@@ -115,17 +108,17 @@ public JettyAdminServer(String address,
             config.addCustomizer(customizer);
 
             try (QuorumX509Util x509Util = new QuorumX509Util()) {
+                String privateKeyType = System.getProperty(x509Util.getSslKeystoreTypeProperty(), "");
                 String privateKeyPath = System.getProperty(x509Util.getSslKeystoreLocationProperty(), "");
                 String privateKeyPassword = System.getProperty(x509Util.getSslKeystorePasswdProperty(), "");
+                String certAuthType = System.getProperty(x509Util.getSslTruststoreTypeProperty(), "");
                 String certAuthPath = System.getProperty(x509Util.getSslTruststoreLocationProperty(), "");
                 String certAuthPassword = System.getProperty(x509Util.getSslTruststorePasswdProperty(), "");
-                File privateKey = new File(privateKeyPath);
-                File certAuth = new File(certAuthPath);
                 KeyStore keyStore = null, trustStore = null;
 
                 try {
-                    keyStore = PemReader.loadKeyStore(privateKey, privateKey, Optional.empty());
-                    trustStore = PemReader.loadTrustStore(certAuth);
+                    keyStore = X509Util.loadKeyStore(privateKeyPath, privateKeyPassword, privateKeyType);
+                    trustStore = X509Util.loadTrustStore(certAuthPath, certAuthPassword, certAuthType);
                     LOG.info("Successfully loaded private key from " + privateKeyPath);
                     LOG.info("Successfully loaded certificate authority from " + certAuthPath);
                 } catch (Exception e) {
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java
index f21abff68ea..641f8916326 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java
@@ -74,7 +74,10 @@ public ReadAheadEndpoint(final EndPoint channel, final int readAheadLength){
 
     private synchronized void readAhead() throws IOException {
         if (leftToRead > 0) {
-            final int n = endPoint.fill(start);
+            int n = 0;
+            do {
+                n = endPoint.fill(start);
+            } while (n == 0 && endPoint.isOpen() && !endPoint.isInputShutdown());
             if (n == -1) {
                 leftToRead = -1;
             } else {
diff --git a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java
index 3d5456c3c5f..89018f46de1 100644
--- a/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java
+++ b/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java
@@ -24,9 +24,7 @@
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.ConnectionFactory;
 import org.eclipse.jetty.server.AbstractConnectionFactory;
-import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
-import org.eclipse.jetty.util.annotation.Name;
 
 import javax.net.ssl.SSLEngine;
 import javax.net.ssl.SSLSession;
@@ -37,7 +35,7 @@
 /**
  * The purpose of this class is to dynamically determine whether to create
  * a plaintext or SSL connection whenever newConnection() is called. It works
- * in conjunction with ReadAheadEnpoint to inspect bytes on the incoming
+ * in conjunction with ReadAheadEndpoint to inspect bytes on the incoming
  * connection.
  */
 public class UnifiedConnectionFactory extends AbstractConnectionFactory {
@@ -46,8 +44,6 @@ public class UnifiedConnectionFactory extends AbstractConnectionFactory {
     private final SslContextFactory sslContextFactory;
     private final String nextProtocol;
 
-    public UnifiedConnectionFactory() { this(HttpVersion.HTTP_1_1.asString()); }
-
     public UnifiedConnectionFactory(String nextProtocol) { this(null, nextProtocol); }
 
     public UnifiedConnectionFactory(SslContextFactory factory, String nextProtocol) {
@@ -57,8 +53,6 @@ public UnifiedConnectionFactory(SslContextFactory factory, String nextProtocol)
         this.addBean(this.sslContextFactory);
     }
 
-    public SslContextFactory getSslContextFactory() { return this.sslContextFactory; }
-
     @Override
     protected void doStart() throws Exception {
         super.doStart();
@@ -77,13 +71,14 @@ public Connection newConnection(Connector connector, EndPoint realEndPoint) {
         boolean isSSL;
 
         if (bytes == null || bytes.length == 0) {
-            isSSL = true;
+            isSSL = false;
+            LOG.warn("Incoming connection has no data");
         } else {
-            byte b = bytes[0]; // TLS first byte is 0x16 , SSLv2 first byte is >= 0x80 , HTTP is guaranteed many bytes of ASCII
-            isSSL = b >= 0x7F || (b < 0x20 && b != '\n' && b != '\r' && b != '\t'); // TODO: is this the best way to do dis?
+            byte b = bytes[0]; // TLS first byte is 0x16, let's not support SSLv3 and below
+            isSSL = b == 0x16; // matches SSL detection in NettyServerCnxnFactory.java
         }
 
-        LOG.debug("UnifiedConnectionFactory: newConnection() with SSL = " + isSSL);
+        LOG.debug(String.format("UnifiedConnectionFactory: newConnection() with SSL = %b", isSSL));
 
         EndPoint plainEndpoint;
         SslConnection sslConnection;
diff --git a/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java b/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java
index ced1a944d0a..26ca2f9e30f 100644
--- a/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java
+++ b/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java
@@ -27,17 +27,13 @@
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLSession;
-import javax.net.ssl.SSLSocketFactory;
 
-import org.apache.zookeeper.common.KeyStoreFileType;
-import org.apache.zookeeper.common.QuorumX509Util;
 import org.apache.zookeeper.common.KeyStoreFileType;
 import org.apache.zookeeper.common.X509Exception.SSLContextException;
 import org.apache.zookeeper.PortAssignment;
 import org.apache.zookeeper.ZKTestCase;
 import org.apache.zookeeper.common.X509KeyType;
 import org.apache.zookeeper.common.X509TestContext;
-import org.apache.zookeeper.common.X509Util;
 import org.apache.zookeeper.server.ZooKeeperServerMainTest;
 import org.apache.zookeeper.server.admin.AdminServer.AdminServerException;
 import org.apache.zookeeper.server.quorum.QuorumPeerTestBase;
@@ -50,16 +46,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.net.ssl.HostnameVerifier;
-import javax.net.ssl.HttpsURLConnection;
 import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSession;
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
 import java.security.Security;
 import java.security.cert.X509Certificate;
 import java.security.GeneralSecurityException;
-import java.security.KeyManagementException;
 
 public class JettyAdminServerTest extends ZKTestCase{
     protected static final Logger LOG = LoggerFactory.getLogger(JettyAdminServerTest.class);
@@ -254,11 +246,8 @@ private void queryAdminServer(String urlStr, boolean encrypted) throws Malformed
         if (!encrypted) {
             dis = new BufferedReader(new InputStreamReader((url.openStream())));
         } else {
-            try (QuorumX509Util x509Util = new QuorumX509Util()) {
-                SSLSocketFactory socketFactory = x509Util.getDefaultSSLContext().getSocketFactory();
-                HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
-                dis = new BufferedReader(new InputStreamReader(conn.getInputStream()));
-            }
+            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
+            dis = new BufferedReader(new InputStreamReader(conn.getInputStream()));
         }
         String line = dis.readLine();
         Assert.assertTrue(line.length() > 0);
