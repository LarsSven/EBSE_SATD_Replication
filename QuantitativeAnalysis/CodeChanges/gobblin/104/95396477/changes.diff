diff --git a/gobblin-core/src/main/java/gobblin/source/DatePartitionedDailyAvroSource.java b/gobblin-core/src/main/java/gobblin/source/DatePartitionedDailyAvroSource.java
index 268c462892..d8fcc88b13 100644
--- a/gobblin-core/src/main/java/gobblin/source/DatePartitionedDailyAvroSource.java
+++ b/gobblin-core/src/main/java/gobblin/source/DatePartitionedDailyAvroSource.java
@@ -39,7 +39,7 @@
 import gobblin.source.extractor.Extractor;
 import gobblin.source.extractor.filebased.FileBasedHelperException;
 import gobblin.source.extractor.filebased.FileBasedSource;
-import gobblin.source.extractor.hadoop.AvroFsFsHelper;
+import gobblin.source.extractor.hadoop.AvroFsHelper;
 import gobblin.source.workunit.Extract;
 import gobblin.source.workunit.Extract.TableType;
 import gobblin.source.workunit.MultiWorkUnitWeightedQueue;
@@ -139,7 +139,7 @@ private void init(SourceState state) {
       Throwables.propagate(e);
     }
 
-    AvroFsFsHelper fsHelper = (AvroFsFsHelper) this.fsHelper;
+    AvroFsHelper fsHelper = (AvroFsHelper) this.fsHelper;
     this.fs = fsHelper.getFileSystem();
 
     this.sourceState = state;
@@ -167,7 +167,7 @@ private void init(SourceState state) {
 
   @Override
   public void initFileSystemHelper(State state) throws FileBasedHelperException {
-    this.fsHelper = new AvroFsFsHelper(state);
+    this.fsHelper = new AvroFsHelper(state);
     this.fsHelper.connect();
   }
 
diff --git a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileExtractor.java b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileExtractor.java
index 0596662ea6..d1ea5b7a21 100644
--- a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileExtractor.java
+++ b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileExtractor.java
@@ -31,14 +31,14 @@
 public class AvroFileExtractor extends FileBasedExtractor<Schema, GenericRecord> {
 
   public AvroFileExtractor(WorkUnitState workUnitState) {
-    super(workUnitState, new AvroFsFsHelper(workUnitState));
+    super(workUnitState, new AvroFsHelper(workUnitState));
   }
 
   @Override
   public Iterator<GenericRecord> downloadFile(String file)
       throws IOException {
     try {
-      return this.closer.register(((AvroFsFsHelper) this.fsHelper).getAvroFile(file));
+      return this.closer.register(((AvroFsHelper) this.fsHelper).getAvroFile(file));
     } catch (FileBasedHelperException e) {
       Throwables.propagate(e);
     }
@@ -54,7 +54,7 @@ public Schema getSchema() {
       return new Schema.Parser().parse(this.workUnit.getProp(ConfigurationKeys.SOURCE_SCHEMA));
     }
 
-    AvroFsFsHelper hfsHelper = (AvroFsFsHelper) this.fsHelper;
+    AvroFsHelper hfsHelper = (AvroFsHelper) this.fsHelper;
     if (this.filesToPull.isEmpty()) {
       return null;
     } else {
diff --git a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileSource.java b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileSource.java
index ee9d241203..106b1c925a 100644
--- a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileSource.java
+++ b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFileSource.java
@@ -40,7 +40,7 @@ public Extractor<Schema, GenericRecord> getExtractor(WorkUnitState state)
   @Override
   public void initFileSystemHelper(State state)
       throws FileBasedHelperException {
-    this.fsHelper = new AvroFsFsHelper(state);
+    this.fsHelper = new AvroFsHelper(state);
     this.fsHelper.connect();
   }
 
diff --git a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsFsHelper.java b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsHelper.java
similarity index 96%
rename from gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsFsHelper.java
rename to gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsHelper.java
index 7d1a771a1f..b29f775446 100644
--- a/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsFsHelper.java
+++ b/gobblin-core/src/main/java/gobblin/source/extractor/hadoop/AvroFsHelper.java
@@ -40,19 +40,19 @@
 import gobblin.configuration.State;
 
 
-public class AvroFsFsHelper implements FileBasedHelper {
+public class AvroFsHelper implements FileBasedHelper {
 
-  private static final Logger LOGGER = LoggerFactory.getLogger(AvroFsFsHelper.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AvroFsHelper.class);
 
   private State state;
   private final Configuration configuration;
   private FileSystem fs;
 
-  public AvroFsFsHelper(State state) {
+  public AvroFsHelper(State state) {
     this(state, HadoopUtils.newConfiguration());
   }
 
-  public AvroFsFsHelper(State state, Configuration configuration) {
+  public AvroFsHelper(State state, Configuration configuration) {
     this.state = state;
     this.configuration = configuration;
   }
diff --git a/gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsFsHelperTest.java b/gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsHelperTest.java
similarity index 91%
rename from gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsFsHelperTest.java
rename to gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsHelperTest.java
index b4f0f1b911..06b91c009c 100644
--- a/gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsFsHelperTest.java
+++ b/gobblin-core/src/test/java/gobblin/source/extractor/hadoop/AvroFsHelperTest.java
@@ -24,14 +24,14 @@
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
-public class AvroFsFsHelperTest {
+public class AvroFsHelperTest {
 
   @Test(expectedExceptions = IllegalArgumentException.class)
   public void testConnectFailsWithS3URLWithoutAWSCredentials() throws FileBasedHelperException {
     Configuration conf = new Configuration(); // plain conf, no S3 credentials
     SourceState sourceState = new SourceState();
     sourceState.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_URI, "s3://support.elasticmapreduce/spark/install-spark/");
-    AvroFsFsHelper fsHelper = new AvroFsFsHelper(sourceState, conf);
+    AvroFsHelper fsHelper = new AvroFsHelper(sourceState, conf);
     fsHelper.connect();
   }
 
@@ -41,7 +41,7 @@ public void testGetFileStreamSucceedsWithUncompressedFile() throws FileBasedHelp
     URL rootUrl = getClass().getResource("/source/");
     String rootPath = rootUrl.toString();
     sourceState.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_URI, rootPath);
-    AvroFsFsHelper fsHelper = new AvroFsFsHelper(sourceState);
+    AvroFsHelper fsHelper = new AvroFsHelper(sourceState);
 
     fsHelper.connect();
     URL url = getClass().getResource("/source/simple.tsv");
@@ -57,7 +57,7 @@ public void testGetFileStreamSucceedsWithGZIPFile() throws FileBasedHelperExcept
     URL rootUrl = getClass().getResource("/source/");
     String rootPath = rootUrl.toString();
     sourceState.setProp(ConfigurationKeys.SOURCE_FILEBASED_FS_URI, rootPath);
-    AvroFsFsHelper fsHelper = new AvroFsFsHelper(sourceState);
+    AvroFsHelper fsHelper = new AvroFsHelper(sourceState);
 
     fsHelper.connect();
     URL url = getClass().getResource("/source/simple.tsv.gz");
