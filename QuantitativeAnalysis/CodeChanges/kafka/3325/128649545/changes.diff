diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingBatchingRestoreCallback.java b/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingBatchingRestoreCallback.java
index ba2f21e5c675..4131d6629a95 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingBatchingRestoreCallback.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingBatchingRestoreCallback.java
@@ -34,7 +34,8 @@
      * or {@link StateRestoreCallback} instead for single action restores.
      */
     @Override
-    public void restore(byte[] key, byte[] value) {
+    public void restore(final byte[] key,
+                        final byte[] value) {
         throw new UnsupportedOperationException("Single restore not supported");
     }
 
@@ -46,8 +47,10 @@ public void restore(byte[] key, byte[] value) {
      *
      */
     @Override
-    public void onRestoreStart(TopicPartition topicPartition, String storeName, long startingOffset,
-                               long endingOffset) {
+    public void onRestoreStart(final TopicPartition topicPartition,
+                               final String storeName,
+                               final long startingOffset,
+                               final long endingOffset) {
 
     }
 
@@ -59,8 +62,10 @@ public void onRestoreStart(TopicPartition topicPartition, String storeName, long
      *
      */
     @Override
-    public void onBatchRestored(TopicPartition topicPartition, String storeName, long batchEndOffset,
-                                long numRestored) {
+    public void onBatchRestored(final TopicPartition topicPartition,
+                                final String storeName,
+                                final long batchEndOffset,
+                                final long numRestored) {
 
     }
 
@@ -71,7 +76,9 @@ public void onBatchRestored(TopicPartition topicPartition, String storeName, lon
      *
      */
     @Override
-    public void onRestoreEnd(TopicPartition topicPartition, String storeName, long totalRestored) {
+    public void onRestoreEnd(final TopicPartition topicPartition,
+                             final String storeName,
+                             final long totalRestored) {
 
     }
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingRestoreCallback.java b/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingRestoreCallback.java
index aa0e1946953f..2eb3f66d9012 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingRestoreCallback.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/AbstractNotifyingRestoreCallback.java
@@ -35,8 +35,10 @@ public abstract class AbstractNotifyingRestoreCallback implements StateRestoreCa
      *
      */
     @Override
-    public void onRestoreStart(TopicPartition topicPartition, String storeName, long startingOffset,
-                               long endingOffset) {
+    public void onRestoreStart(final TopicPartition topicPartition,
+                               final String storeName,
+                               final long startingOffset,
+                               final long endingOffset) {
 
     }
 
@@ -48,8 +50,10 @@ public void onRestoreStart(TopicPartition topicPartition, String storeName, long
      *
      */
     @Override
-    public void onBatchRestored(TopicPartition topicPartition, String storeName, long batchEndOffset,
-                                long numRestored) {
+    public void onBatchRestored(final TopicPartition topicPartition,
+                                final String storeName,
+                                final long batchEndOffset,
+                                final long numRestored) {
 
     }
 
@@ -60,7 +64,9 @@ public void onBatchRestored(TopicPartition topicPartition, String storeName, lon
      *
      */
     @Override
-    public void onRestoreEnd(TopicPartition topicPartition, String storeName, long totalRestored) {
+    public void onRestoreEnd(final TopicPartition topicPartition,
+                             final String storeName,
+                             final long totalRestored) {
 
     }
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java b/streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java
index cacfeac81a15..5e48f03c0784 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/StateRestoreListener.java
@@ -27,7 +27,7 @@
  * across all {@link org.apache.kafka.streams.processor.internals.StreamThread} instances.
  *
  * Users desiring stateful operations will need to provide synchronization internally in
- * the StateRestorerListener implementation.
+ * the {@code StateRestorerListener} implementation.
  *
  * When used for monitoring a single {@link StateStore} using either {@link AbstractNotifyingRestoreCallback} or
  * {@link AbstractNotifyingBatchingRestoreCallback} no synchronization is necessary
@@ -40,12 +40,14 @@ public interface StateRestoreListener {
     /**
      * Method called at the very beginning of {@link StateStore} restoration.
      *
-     * @param topicPartition the TopicPartition containing the values to restore.
-     * @param storeName      the name of the store undergoing restoration.
-     * @param startingOffset the starting offset of the entire restoration process for this TopicPartition.
-     * @param endingOffset   the ending offset of the entire restoration process for this TopicPartition.
+     * @param topicPartition the TopicPartition containing the values to restore
+     * @param storeName      the name of the store undergoing restoration
+     * @param startingOffset the starting offset of the entire restoration process for this TopicPartition
+     * @param endingOffset   the ending offset of the entire restoration process for this TopicPartition
      */
-    void onRestoreStart(TopicPartition topicPartition, String storeName, long startingOffset,
+    void onRestoreStart(TopicPartition topicPartition,
+                        String storeName,
+                        long startingOffset,
                         long endingOffset);
 
     /**
@@ -58,21 +60,25 @@ void onRestoreStart(TopicPartition topicPartition, String storeName, long starti
      *
      * If you need to do any extended processing or connecting to an external service consider doing so asynchronously.
      *
-     * @param topicPartition the TopicPartition containing the values to restore.
-     * @param storeName the name of the store undergoing restoration.
-     * @param batchEndOffset the ending offset for the current restored batch for this TopicPartition.
-     * @param numRestored the total number of records restored in this batch for this TopicPartition.
+     * @param topicPartition the TopicPartition containing the values to restore
+     * @param storeName the name of the store undergoing restoration
+     * @param batchEndOffset the ending offset for the current restored batch for this TopicPartition
+     * @param numRestored the total number of records restored in this batch for this TopicPartition
      */
-    void onBatchRestored(TopicPartition topicPartition, String storeName, long batchEndOffset,
+    void onBatchRestored(TopicPartition topicPartition,
+                         String storeName,
+                         long batchEndOffset,
                          long numRestored);
 
     /**
      * Method called when restoring the {@link StateStore} is complete.
      *
-     * @param topicPartition the TopicPartition containing the values to restore.
-     * @param storeName the name of the store just restored.
-     * @param totalRestored the total number of records restored for this TopicPartition.
+     * @param topicPartition the TopicPartition containing the values to restore
+     * @param storeName the name of the store just restored
+     * @param totalRestored the total number of records restored for this TopicPartition
      */
-    void onRestoreEnd(TopicPartition topicPartition, String storeName, long totalRestored);
+    void onRestoreEnd(TopicPartition topicPartition,
+                      String storeName,
+                      long totalRestored);
 
 }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java
index 9ceafd53db55..ca20c2b02fd3 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/CompositeRestoreListener.java
@@ -20,6 +20,7 @@
 
 import org.apache.kafka.common.TopicPartition;
 import org.apache.kafka.streams.KeyValue;
+import org.apache.kafka.streams.processor.AbstractNotifyingBatchingRestoreCallback;
 import org.apache.kafka.streams.processor.BatchingStateRestoreCallback;
 import org.apache.kafka.streams.processor.StateRestoreCallback;
 import org.apache.kafka.streams.processor.StateRestoreListener;
@@ -33,7 +34,7 @@ class CompositeRestoreListener implements BatchingStateRestoreCallback, StateRes
     private final StateRestoreListener storeRestoreListener;
     private StateRestoreListener globalRestoreListener = NO_OP_STATE_RESTORE_LISTENER;
 
-    CompositeRestoreListener(StateRestoreCallback stateRestoreCallback) {
+    CompositeRestoreListener(final StateRestoreCallback stateRestoreCallback) {
 
         if (stateRestoreCallback instanceof StateRestoreListener) {
             storeRestoreListener = (StateRestoreListener) stateRestoreCallback;
@@ -48,22 +49,27 @@ class CompositeRestoreListener implements BatchingStateRestoreCallback, StateRes
     }
 
     @Override
-    public void onRestoreStart(TopicPartition topicPartition, String storeName,
-                               long startingOffset, long endingOffset) {
+    public void onRestoreStart(final TopicPartition topicPartition,
+                               final String storeName,
+                               final long startingOffset,
+                               final long endingOffset) {
         globalRestoreListener.onRestoreStart(topicPartition, storeName, startingOffset, endingOffset);
         storeRestoreListener.onRestoreStart(topicPartition, storeName, startingOffset, endingOffset);
     }
 
     @Override
-    public void onBatchRestored(TopicPartition topicPartition, String storeName,
-                                long batchEndOffset, long numRestored) {
+    public void onBatchRestored(final TopicPartition topicPartition,
+                                final String storeName,
+                                final long batchEndOffset,
+                                final long numRestored) {
         globalRestoreListener.onBatchRestored(topicPartition, storeName, batchEndOffset, numRestored);
         storeRestoreListener.onBatchRestored(topicPartition, storeName, batchEndOffset, numRestored);
     }
 
     @Override
-    public void onRestoreEnd(TopicPartition topicPartition, String storeName,
-                             long totalRestored) {
+    public void onRestoreEnd(final TopicPartition topicPartition,
+                             final String storeName,
+                             final long totalRestored) {
         globalRestoreListener.onRestoreEnd(topicPartition, storeName, totalRestored);
         storeRestoreListener.onRestoreEnd(topicPartition, storeName, totalRestored);
 
@@ -74,44 +80,24 @@ public void restoreAll(final Collection<KeyValue<byte[], byte[]>> records) {
         internalBatchingRestoreCallback.restoreAll(records);
     }
 
-    void setGlobalRestoreListener(StateRestoreListener globalRestoreListener) {
+    void setGlobalRestoreListener(final StateRestoreListener globalRestoreListener) {
         if (globalRestoreListener != null) {
             this.globalRestoreListener = globalRestoreListener;
         }
     }
 
     @Override
-    public void restore(final byte[] key, final byte[] value) {
+    public void restore(final byte[] key,
+                        final byte[] value) {
         throw new UnsupportedOperationException("Single restore functionality shouldn't be called directly but "
                                                 + "through the delegated StateRestoreCallback instance");
     }
 
 
-    private static final class NoOpStateRestoreListener implements StateRestoreListener {
+    private static final class NoOpStateRestoreListener extends AbstractNotifyingBatchingRestoreCallback  {
 
         @Override
-        public void onRestoreStart(final TopicPartition topicPartition, final String storeName,
-                                   final long startingOffset, final long endingOffset) {
-
-        }
-
-        @Override
-        public void onBatchRestored(final TopicPartition topicPartition, final String storeName,
-                                    final long batchEndOffset, final long numRestored) {
-
-        }
-
-        @Override
-        public void onRestoreEnd(final TopicPartition topicPartition, final String storeName,
-                                 final long totalRestored) {
-
-        }
-    }
-
-    private static final class NoOpStateRestoreCallback implements StateRestoreCallback {
-
-        @Override
-        public void restore(final byte[] key, final byte[] value) {
+        public void restoreAll(final Collection<KeyValue<byte[], byte[]>> records) {
 
         }
     }
diff --git a/streams/src/main/java/org/apache/kafka/streams/processor/internals/WrappedBatchingStateRestoreCallback.java b/streams/src/main/java/org/apache/kafka/streams/processor/internals/WrappedBatchingStateRestoreCallback.java
index 5db2e4ef8004..6595099952ed 100644
--- a/streams/src/main/java/org/apache/kafka/streams/processor/internals/WrappedBatchingStateRestoreCallback.java
+++ b/streams/src/main/java/org/apache/kafka/streams/processor/internals/WrappedBatchingStateRestoreCallback.java
@@ -27,19 +27,20 @@ public class WrappedBatchingStateRestoreCallback implements BatchingStateRestore
 
     private final StateRestoreCallback stateRestoreCallback;
 
-    WrappedBatchingStateRestoreCallback(StateRestoreCallback stateRestoreCallback) {
+    WrappedBatchingStateRestoreCallback(final StateRestoreCallback stateRestoreCallback) {
         this.stateRestoreCallback = stateRestoreCallback;
     }
 
     @Override
-    public void restoreAll(Collection<KeyValue<byte[], byte[]>> records) {
+    public void restoreAll(final Collection<KeyValue<byte[], byte[]>> records) {
         for (KeyValue<byte[], byte[]> record : records) {
             restore(record.key, record.value);
         }
     }
 
     @Override
-    public void restore(byte[] key, byte[] value) {
+    public void restore(final byte[] key,
+                        final byte[] value) {
         stateRestoreCallback.restore(key, value);
     }
 }
diff --git a/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java b/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java
index 62aee9a2d1d6..a6532dfc308c 100644
--- a/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java
+++ b/streams/src/test/java/org/apache/kafka/streams/KafkaStreamsTest.java
@@ -257,14 +257,14 @@ public void testCannotStartTwice() throws Exception {
         }
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test
     public void shouldNotSetGlobalRestoreListenerAfterStarting() {
         streams.start();
         try {
             streams.setGlobalStateRestoreListener(new MockStateRestoreListener());
+            fail("Should throw an IllegalStateException");
         } catch (final IllegalStateException e) {
             Assert.assertEquals("Can only set the GlobalRestoreListener in the CREATED state", e.getMessage());
-            throw e;
         } finally {
             streams.close();
         }
diff --git a/streams/src/test/java/org/apache/kafka/test/MockProcessorContext.java b/streams/src/test/java/org/apache/kafka/test/MockProcessorContext.java
index 9a7b0078296a..8a30e2db730c 100644
--- a/streams/src/test/java/org/apache/kafka/test/MockProcessorContext.java
+++ b/streams/src/test/java/org/apache/kafka/test/MockProcessorContext.java
@@ -16,7 +16,6 @@
  */
 package org.apache.kafka.test;
 
-import org.apache.kafka.common.TopicPartition;
 import org.apache.kafka.common.metrics.JmxReporter;
 import org.apache.kafka.common.metrics.MetricConfig;
 import org.apache.kafka.common.metrics.Metrics;
@@ -25,6 +24,7 @@
 import org.apache.kafka.common.utils.MockTime;
 import org.apache.kafka.streams.KeyValue;
 import org.apache.kafka.streams.StreamsMetrics;
+import org.apache.kafka.streams.processor.AbstractNotifyingBatchingRestoreCallback;
 import org.apache.kafka.streams.processor.BatchingStateRestoreCallback;
 import org.apache.kafka.streams.processor.Cancellable;
 import org.apache.kafka.streams.processor.PunctuationType;
@@ -44,6 +44,7 @@
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
@@ -328,22 +329,10 @@ public void close() {
         metrics.close();
     }
 
-    private static final class NoOpRestoreListener implements StateRestoreListener {
+    private static final class NoOpRestoreListener extends AbstractNotifyingBatchingRestoreCallback {
 
         @Override
-        public void onRestoreStart(TopicPartition topicPartition, String storeName, long startingOffset,
-                                   long endingOffset) {
-
-        }
-
-        @Override
-        public void onBatchRestored(TopicPartition topicPartition, String storeName, long batchEndOffset,
-                                    long numRestored) {
-
-        }
-
-        @Override
-        public void onRestoreEnd(TopicPartition topicPartition, String storeName, long totalRestored) {
+        public void restoreAll(Collection<KeyValue<byte[], byte[]>> records) {
 
         }
     }
