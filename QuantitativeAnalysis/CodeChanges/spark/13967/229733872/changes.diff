diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/collectionOperations.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/collectionOperations.scala
index eec8a7e3185df..2e8ea1107cee0 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/collectionOperations.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/collectionOperations.scala
@@ -47,7 +47,8 @@ case class Size(child: Expression) extends UnaryExpression with ExpectsInputType
  * Returns an unordered array containing the keys of the map.
  */
 @ExpressionDescription(
-  usage = "_FUNC_(map) - Returns an unordered array containing the keys of the map.")
+  usage = "_FUNC_(map) - Returns an unordered array containing the keys of the map.",
+  extended = " > SELECT _FUNC_(map(1, 'a', 2, 'b'));\n [1,2]")
 case class MapKeys(child: Expression)
   extends UnaryExpression with ExpectsInputTypes {
 
@@ -55,14 +56,12 @@ case class MapKeys(child: Expression)
 
   override def dataType: DataType = ArrayType(child.dataType.asInstanceOf[MapType].keyType)
 
-  override def foldable: Boolean = child.foldable
-
   override def nullSafeEval(map: Any): Any = {
-    map.asInstanceOf[MapData].keyArray().copy()
+    map.asInstanceOf[MapData].keyArray()
   }
 
   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {
-    nullSafeCodeGen(ctx, ev, c => s"${ev.value} = ($c).keyArray().copy();")
+    nullSafeCodeGen(ctx, ev, c => s"${ev.value} = ($c).keyArray();")
   }
 
   override def prettyName: String = "map_keys"
@@ -72,7 +71,8 @@ case class MapKeys(child: Expression)
  * Returns an unordered array containing the values of the map.
  */
 @ExpressionDescription(
-  usage = "_FUNC_(map) - Returns an unordered array containing the values of the map.")
+  usage = "_FUNC_(map) - Returns an unordered array containing the values of the map.",
+  extended = " > SELECT _FUNC_(map(1, 'a', 2, 'b'));\n [\"a\",\"b\"]")
 case class MapValues(child: Expression)
   extends UnaryExpression with ExpectsInputTypes {
 
@@ -80,14 +80,12 @@ case class MapValues(child: Expression)
 
   override def dataType: DataType = ArrayType(child.dataType.asInstanceOf[MapType].valueType)
 
-  override def foldable: Boolean = child.foldable
-
   override def nullSafeEval(map: Any): Any = {
-    map.asInstanceOf[MapData].valueArray().copy()
+    map.asInstanceOf[MapData].valueArray()
   }
 
   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {
-    nullSafeCodeGen(ctx, ev, c => s"${ev.value} = ($c).valueArray().copy();")
+    nullSafeCodeGen(ctx, ev, c => s"${ev.value} = ($c).valueArray();")
   }
 
   override def prettyName: String = "map_values"
diff --git a/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/CollectionFunctionsSuite.scala b/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/CollectionFunctionsSuite.scala
index d961398dd68fe..a5f784fdcc13c 100644
--- a/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/CollectionFunctionsSuite.scala
+++ b/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/CollectionFunctionsSuite.scala
@@ -47,11 +47,14 @@ class CollectionFunctionsSuite extends SparkFunSuite with ExpressionEvalHelper {
   test("MapKeys/MapValues") {
     val m0 = Literal.create(Map("a" -> "1", "b" -> "2"), MapType(StringType, StringType))
     val m1 = Literal.create(Map[String, String](), MapType(StringType, StringType))
+    val m2 = Literal.create(null, MapType(StringType, StringType))
 
     checkEvaluation(MapKeys(m0), Seq("a", "b"))
     checkEvaluation(MapValues(m0), Seq("1", "2"))
     checkEvaluation(MapKeys(m1), Seq())
     checkEvaluation(MapValues(m1), Seq())
+    checkEvaluation(MapKeys(m2), null)
+    checkEvaluation(MapValues(m2), null)
   }
 
   test("Sort Array") {
