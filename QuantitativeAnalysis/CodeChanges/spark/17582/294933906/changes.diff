diff --git a/core/src/main/scala/org/apache/spark/deploy/history/HistoryServer.scala b/core/src/main/scala/org/apache/spark/deploy/history/HistoryServer.scala
index 36ab9277cffe0..e2c2c621c658e 100644
--- a/core/src/main/scala/org/apache/spark/deploy/history/HistoryServer.scala
+++ b/core/src/main/scala/org/apache/spark/deploy/history/HistoryServer.scala
@@ -303,8 +303,8 @@ object HistoryServer extends Logging {
     }
 
     if (config.getBoolean("spark.acls.enable", config.getBoolean("spark.ui.acls.enable", false))) {
-      logInfo(s"Either spark.acls.enable or spark.ui.acles.enable is configured, clearing it and " +
-        s"only honor spark.history.ui.acl.enable")
+      logInfo(s"Either spark.acls.enable or spark.ui.acls.enable is configured, clearing it and " +
+        s"only using spark.history.ui.acl.enable")
       config.set("spark.acls.enable", "false")
       config.set("spark.ui.acls.enable", "false")
     }
diff --git a/core/src/main/scala/org/apache/spark/status/api/v1/ApiRootResource.scala b/core/src/main/scala/org/apache/spark/status/api/v1/ApiRootResource.scala
index f52f8198d52f3..f17b637754826 100644
--- a/core/src/main/scala/org/apache/spark/status/api/v1/ApiRootResource.scala
+++ b/core/src/main/scala/org/apache/spark/status/api/v1/ApiRootResource.scala
@@ -185,7 +185,7 @@ private[v1] class ApiRootResource extends ApiRequestContext {
   def getEventLogs(
       @PathParam("appId") appId: String): EventLogDownloadResource = {
     try {
-      // withSparkUI will throw NotFoundException if attemptId is existed for this application.
+      // withSparkUI will throw NotFoundException if attemptId exists for this application.
       // So we need to try again with attempt id "1".
       withSparkUI(appId, None) { _ =>
         new EventLogDownloadResource(uiRoot, appId, None)
diff --git a/core/src/test/scala/org/apache/spark/deploy/history/HistoryServerSuite.scala b/core/src/test/scala/org/apache/spark/deploy/history/HistoryServerSuite.scala
index d8d1b155fdbe4..95acb9a54440f 100644
--- a/core/src/test/scala/org/apache/spark/deploy/history/HistoryServerSuite.scala
+++ b/core/src/test/scala/org/apache/spark/deploy/history/HistoryServerSuite.scala
@@ -209,7 +209,7 @@ class HistoryServerSuite extends SparkFunSuite with BeforeAndAfter with Matchers
   }
 
   // Test that the files are downloaded correctly, and validate them.
-  def doDownloadTest(appId: String, attemptId: Option[Int], user: String = null): Unit = {
+  def doDownloadTest(appId: String, attemptId: Option[Int]): Unit = {
 
     val url = attemptId match {
       case Some(id) =>
@@ -218,13 +218,8 @@ class HistoryServerSuite extends SparkFunSuite with BeforeAndAfter with Matchers
         new URL(s"${generateURL(s"applications/$appId")}/logs")
     }
 
-    val headers = if (user != null) Seq(FakeAuthFilter.FAKE_HTTP_USER -> user) else Nil
-    val (code, inputStream, error) = HistoryServerSuite.connectAndGetInputStream(url, headers)
-    if (code != HttpServletResponse.SC_OK) {
-      throw new IllegalStateException(
-        s"Return code $code is not equal to ${HttpServletResponse.SC_OK}")
-    }
-
+    val (code, inputStream, error) = HistoryServerSuite.connectAndGetInputStream(url)
+    code should be (HttpServletResponse.SC_OK)
     inputStream should not be None
     error should be (None)
 
@@ -574,8 +569,8 @@ class HistoryServerSuite extends SparkFunSuite with BeforeAndAfter with Matchers
   }
 
   test("ui and api authorization checks") {
-    val appId = "app-20161115172038-0000"
-    val owner = "jose"
+    val appId = "local-1430917381535"
+    val owner = "irashid"
     val admin = "root"
     val other = "alice"
 
@@ -594,8 +589,11 @@ class HistoryServerSuite extends SparkFunSuite with BeforeAndAfter with Matchers
 
     val port = server.boundPort
     val testUrls = Seq(
-      s"http://localhost:$port/api/v1/applications/$appId/jobs",
-      s"http://localhost:$port/history/$appId/jobs/")
+      s"http://localhost:$port/api/v1/applications/$appId/1/jobs",
+      s"http://localhost:$port/history/$appId/1/jobs/",
+      s"http://localhost:$port/api/v1/applications/$appId/logs",
+      s"http://localhost:$port/api/v1/applications/$appId/1/logs",
+      s"http://localhost:$port/api/v1/applications/$appId/2/logs")
 
     tests.foreach { case (user, expectedCode) =>
       testUrls.foreach { url =>
@@ -606,36 +604,6 @@ class HistoryServerSuite extends SparkFunSuite with BeforeAndAfter with Matchers
     }
   }
 
-  test("acls with downloading files") {
-    val admin = "root"
-    val owner = "irashid"
-    val other = "alice"
-    val appId = "local-1430917381535"
-
-    stop()
-    init("spark.ui.filters" -> classOf[FakeAuthFilter].getName(),
-      "spark.history.ui.acls.enable" -> "true",
-      "spark.history.ui.admin.acls" -> admin)
-
-    doDownloadTest(appId, None, admin)
-    doDownloadTest(appId, None, owner)
-    intercept[IllegalStateException](doDownloadTest(appId, None, other)).getMessage should be (
-      s"Return code ${HttpServletResponse.SC_FORBIDDEN} is not " +
-        s"equal to ${HttpServletResponse.SC_OK}")
-
-    (1 to 2).foreach { attemptId => doDownloadTest(appId, Some(attemptId), admin) }
-    (1 to 2).foreach { attemptId => doDownloadTest(appId, Some(attemptId), owner) }
-    // Should throw exception, since user "alice" has no permission to access file, so it will
-    // return as an empty file.
-    (1 to 2).foreach { attemptId =>
-      val exception = intercept[IllegalStateException](
-        doDownloadTest(appId, Some(attemptId), other))
-      exception.getMessage should be (
-        s"Return code ${HttpServletResponse.SC_FORBIDDEN} is not " +
-          s"equal to ${HttpServletResponse.SC_OK}")
-    }
-  }
-
   def getContentAndCode(path: String, port: Int = port): (Int, Option[String], Option[String]) = {
     HistoryServerSuite.getContentAndCode(new URL(s"http://localhost:$port/api/v1/$path"))
   }
@@ -683,11 +651,9 @@ object HistoryServerSuite {
     (code, inString, errString)
   }
 
-  def connectAndGetInputStream(url: URL,
-      headers: Seq[(String, String)] = Nil): (Int, Option[InputStream], Option[String]) = {
+  def connectAndGetInputStream(url: URL): (Int, Option[InputStream], Option[String]) = {
     val connection = url.openConnection().asInstanceOf[HttpURLConnection]
     connection.setRequestMethod("GET")
-    headers.foreach { case (k, v) => connection.setRequestProperty(k, v) }
     connection.connect()
     val code = connection.getResponseCode()
     val inStream = try {
