diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/SqlParser.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/SqlParser.scala
index 83b836f94f7cc..0c851c2ee2183 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/SqlParser.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/SqlParser.scala
@@ -116,6 +116,7 @@ class SqlParser extends StandardTokenParsers {
   protected val OR = Keyword("OR")
   protected val LIKE = Keyword("LIKE")
   protected val RLIKE = Keyword("RLIKE")
+  protected val REGEXP = Keyword("REGEXP")
   protected val ORDER = Keyword("ORDER")
   protected val OUTER = Keyword("OUTER")
   protected val RIGHT = Keyword("RIGHT")
@@ -270,6 +271,7 @@ class SqlParser extends StandardTokenParsers {
     termExpression ~ "!=" ~ termExpression ^^ { case e1 ~ _ ~ e2 => Not(Equals(e1, e2)) } |
     termExpression ~ "<>" ~ termExpression ^^ { case e1 ~ _ ~ e2 => Not(Equals(e1, e2)) } |
     termExpression ~ RLIKE ~ termExpression ^^ { case e1 ~ _ ~ e2 => RLike(e1, e2) } |
+    termExpression ~ REGEXP ~ termExpression ^^ { case e1 ~ _ ~ e2 => RLike(e1, e2) } |
     termExpression ~ LIKE ~ termExpression ^^ { case e1 ~ _ ~ e2 => Like(e1, e2) } |
     termExpression ~ IN ~ "(" ~ rep1sep(termExpression, ",") <~ ")" ^^ {
       case e1 ~ _ ~ _ ~ e2 => In(e1, e2)
diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/stringOperations.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/stringOperations.scala
index 918cfed9d5482..5ff2b1f85f039 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/stringOperations.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/stringOperations.scala
@@ -28,18 +28,12 @@ import org.apache.spark.sql.catalyst.trees.TreeNode
 import org.apache.spark.sql.catalyst.errors.`package`.TreeNodeException
 
 
-/**
- * Thrown when an invalid RegEx string is found.
- */
-class InvalidRegExException[TreeType <: TreeNode[_]](tree: TreeType, reason: String) extends
-  errors.TreeNodeException(tree, s"$reason", null)
-
 trait StringRegexExpression {
   self: BinaryExpression =>
 
   type EvaluatedType = Any
   
-  def escape(v: String): String
+  def escape(v: String): String = v
   def nullable: Boolean = true
   def dataType: DataType = BooleanType
   
@@ -49,28 +43,15 @@ trait StringRegexExpression {
     case _ => null
   }
   
-  protected def compile(str: Any): Pattern = str match {
-    // TODO or let it be null if couldn't compile the regex?
-    case x: String if(x != null) => Pattern.compile(escape(x))
-    case x: String => null
-    case _ => throw new InvalidRegExException(this, "$str can not be compiled to regex pattern")
+  protected def compile(str: String): Pattern = if(str == null) {
+    null
+  } else {
+    // Let it raise exception if couldn't compile the regex string
+    Pattern.compile(escape(str))
   }
-  
+
   protected def pattern(str: String) = if(cache == null) compile(str) else cache
   
-  protected def filter: PartialFunction[(Row, (String, String)), Any] = {
-    case (row, (null, r)) => { false }
-    case (row, (l, null)) => { false }
-    case (row, (l, r)) => { 
-      val regex = pattern(r)
-      if(regex == null) {
-        null
-      } else {
-        regex.matcher(l).matches
-      }
-    }
-  }
-
   override def apply(input: Row): Any = {
     val l = left.apply(input)
     if(l == null) {
@@ -80,7 +61,12 @@ trait StringRegexExpression {
       if(r == null) {
         null
       } else {
-        filter.lift(input, (l.asInstanceOf[String], r.asInstanceOf[String])).get
+        val regex = pattern(r.asInstanceOf[String])
+        if(regex == null) {
+          null
+        } else {
+          regex.matcher(l.asInstanceOf[String]).matches
+        }
       }
     }
   }
@@ -126,6 +112,4 @@ case class RLike(left: Expression, right: Expression)
   extends BinaryExpression with StringRegexExpression {
   
   def symbol = "RLIKE"
-
-  override def escape(v: String) = v
 }
diff --git a/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/ExpressionEvaluationSuite.scala b/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/ExpressionEvaluationSuite.scala
index 776f4495f346d..efcffcfe5f1ff 100644
--- a/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/ExpressionEvaluationSuite.scala
+++ b/sql/catalyst/src/test/scala/org/apache/spark/sql/catalyst/expressions/ExpressionEvaluationSuite.scala
@@ -26,186 +26,7 @@ import org.apache.spark.sql.catalyst.types._
 /* Implicit conversions */
 import org.apache.spark.sql.catalyst.dsl.expressions._
 
-import org.apache.spark.sql.catalyst.types._
-import org.apache.spark.sql.catalyst.dsl._
-
-
-/**
- * Root class of expression evaluation test
- */
-trait ExprEvalTest {
-  type Execution = (Row => Row)
-
-  def engine: Execution
-}
-
-case class InterpretExprEvalTest(exprs: Seq[Expression]) extends ExprEvalTest {
-  override def engine: Execution = new Projection(exprs)
-}
-
-class InterpretExpressionEvaluationSuite extends ExpressionEvaluationSuite {
-  override def executor(exprs: Seq[Expression]) = InterpretExprEvalTest(exprs)
-}
-
-trait ExpressionEvaluationSuite extends FunSuite {
-  /**
-   * The sub classes need to create the ExprEvalTest object 
-   */
-  def executor(exprs: Seq[Expression]): ExprEvalTest
-  
-  val data: Row = new GenericRow(Array(1, null, 1.0, true, 4, 5, null, "abcccd", "a%"))
-
-  // TODO add to DSL
-  val c1 = BoundReference(0, AttributeReference("a", IntegerType)())
-  val c2 = BoundReference(1, AttributeReference("b", IntegerType)())
-  val c3 = BoundReference(2, AttributeReference("c", DoubleType)())
-  val c4 = BoundReference(3, AttributeReference("d", BooleanType)())
-  val c5 = BoundReference(4, AttributeReference("e", IntegerType)())
-  val c6 = BoundReference(5, AttributeReference("f", IntegerType)())
-  val c7 = BoundReference(6, AttributeReference("g", StringType)())
-  val c8 = BoundReference(7, AttributeReference("h", StringType)())
-  val c9 = BoundReference(8, AttributeReference("i", StringType)())
-  
-  /**
-   * Compare each of the field if it equals the expected value.
-   * 
-   * expected is a sequence of (Any, Any), 
-   * and the first element indicates:
-   *   true:  the expected value is field is null
-   *   false: the expected value is not null
-   *   Exception Class: the expected exception class while computing the value 
-   * the second element is the real value when first element equals false(not null)
-   */
-  def verify(expected: Seq[(Any, Any)], result: Row, input: Row) {
-    Seq.tabulate(expected.size) { i =>
-      expected(i) match {
-        case (false, expected) => {
-          assert(result.isNullAt(i) == false, 
-            s"Input:($input), Output field:$i shouldn't be null")
-
-          val real = result.apply(i)
-          assert(real == expected, 
-            s"Input:($input), Output field:$i is expected as $expected, but got $real")
-        }
-        case (true, _) => {
-          assert(result.isNullAt(i) == true, s"Input:($input), Output field:$i is expected as null")
-        }
-        case (exception: Class[_], _) => {
-          assert(result.isNullAt(i) == false, 
-            s"Input:($input), Output field:$i should be exception")
-
-          val real = result.apply(i).getClass.getName
-          val expect = exception.getName
-          assert(real == expect, 
-            s"Input:($input), Output field:$i expect exception $expect, but got $real")
-        }
-      }
-    }
-  }
-
-  def verify(expecteds: Seq[Seq[(Any, Any)]], results: Seq[Row], inputs: Seq[Row]) {
-    Range(0, expecteds.length).foreach { i =>
-      verify(expecteds(i), results(i), inputs(i))
-    }
-  }
-  
-  def proc(tester: ExprEvalTest, input: Row): Row = {
-    try {
-      tester.engine.apply(input)
-    } catch {
-      case x: Any => {
-        new GenericRow(Array(x.asInstanceOf[Any]))
-      }
-    }
-  }
-  
-  def run(exprs: Seq[Expression], expected: Seq[(Any, Any)], input: Row) {
-    val tester = executor(exprs)
-    
-    verify(expected, proc(tester,input), input)
-  }
-  
-  def run(exprs: Seq[Expression], expecteds: Seq[Seq[(Any, Any)]], inputs: Seq[Row]) {
-    val tester = executor(exprs)
-    
-    verify(expecteds, inputs.map(proc(tester,_)), inputs)
-  }
-  
-  test("logical") {
-    val expected = Seq[(Boolean, Any)](
-        (false, false), 
-        (true, -1), 
-        (false, true), 
-        (false, true), 
-        (false, false))
-
-    val exprs = Seq[Expression](And(LessThan(Cast(c1, DoubleType), c3), LessThan(c1, c2)), 
-      Or(LessThan(Cast(c1, DoubleType), c3), LessThan(c1, c2)),
-      IsNull(c2),
-      IsNotNull(c3),
-      Not(c4))
-    
-    run(exprs, expected, data)
-  }
-  
-  test("arithmetic") {
-    val exprs = Array[Expression](
-      Add(c1, c2),
-      Add(c1, c5),
-      Divide(c1, c5),
-      Subtract(c1, c5),
-      Multiply(c1, c5),
-      Remainder(c1, c5),
-      UnaryMinus(c1)
-    )
-    val expecteds = Seq[(Boolean, Any)](
-        (true, 0), 
-        (false, 5), 
-        (false, 0), 
-        (false, -3), 
-        (false, 4),
-        (false, 1),
-        (false, -1))
-
-    run(exprs, expecteds, data)
-  }
-
-  test("string like / rlike") {
-    val exprs = Seq(
-      Like(c7, Literal("a", StringType)),
-      Like(c7, Literal(null, StringType)),
-      Like(c8, Literal(null, StringType)),
-      Like(c8, Literal("a_c", StringType)),
-      Like(c8, Literal("a%c", StringType)),
-      Like(c8, Literal("a%d", StringType)),
-      Like(c8, Literal("a\\%d", StringType)), // to escape the %
-      Like(c8, c9),
-      RLike(c7, Literal("a+", StringType)),
-      RLike(c7, Literal(null, StringType)),
-      RLike(c8, Literal(null, StringType)),
-      RLike(c8, Literal("a.*", StringType))
-    )
-
-    val expecteds = Seq(
-      (true, false),
-      (true, false),
-      (true, false),
-      (false, false),
-      (false, false),
-      (false, true),
-      (false, false),
-      (false, true),
-      (true, false),
-      (true, false),
-      (true, false),
-      (false, true))
-
-    run(exprs, expecteds, data)
-    
-    val expr = Seq(RLike(c8, Literal("[a.(*])", StringType)))
-    val expected = Seq((classOf[java.util.regex.PatternSyntaxException], false))
-    run(expr, expected, data)
-  }
+class ExpressionEvaluationSuite extends FunSuite {
 
   test("literals") {
     assert((Literal(1) + Literal(1)).apply(null) === 2)
@@ -232,21 +53,22 @@ trait ExpressionEvaluationSuite extends FunSuite {
    * Unknown Unknown
    */
 
-  val b1 = BoundReference(0, AttributeReference("a", BooleanType)())
-  val b2 = BoundReference(1, AttributeReference("b", BooleanType)())
-  
-  test("3VL Not") {
-    val table = (true, false) :: (false, true) :: (null, null) :: Nil
+  val notTrueTable =
+    (true, false) ::
+    (false, true) ::
+    (null, null) :: Nil
 
-    val exprs = Array[Expression](Not(b1))
-    val inputs = table.map { case(v, answer) => new GenericRow(Array(v)) }
-    val expected = table.map { case(v, answer) => Seq((answer == null, answer)) }
-    
-    run(exprs, expected, inputs)
+  test("3VL Not") {
+    notTrueTable.foreach {
+      case (v, answer) =>
+        val expr = Not(Literal(v, BooleanType))
+        val result = expr.apply(null)
+        if (result != answer)
+          fail(s"$expr should not evaluate to $result, expected: $answer")    }
   }
 
-  test("3VL AND") {
-    val table = (true,  true,  true) ::
+  booleanLogicTest("AND", _ && _,
+    (true,  true,  true) ::
     (true,  false, false) ::
     (true,  null,  null) ::
     (false, true,  false) ::
@@ -254,17 +76,10 @@ trait ExpressionEvaluationSuite extends FunSuite {
     (false, null,  false) ::
     (null,  true,  null) ::
     (null,  false, false) ::
-    (null,  null,  null) :: Nil
-    
-    val exprs = Seq[Expression](And(b1, b2))
-    val inputs = table.map { case(v1, v2, answer) => new GenericRow(Array(v1, v2)) }
-    val expected = table.map { case(v1, v2, answer) => Seq((answer == null, answer)) }
-    
-    run(exprs, expected, inputs)
-  }
+    (null,  null,  null) :: Nil)
 
-  test("3VL OR") {
-    val table = (true,  true,  true) ::
+  booleanLogicTest("OR", _ || _,
+    (true,  true,  true) ::
     (true,  false, true) ::
     (true,  null,  true) ::
     (false, true,  true) ::
@@ -272,17 +87,10 @@ trait ExpressionEvaluationSuite extends FunSuite {
     (false, null,  null) ::
     (null,  true,  true) ::
     (null,  false, null) ::
-    (null,  null,  null) :: Nil
-    
-    val exprs = Array[Expression](Or(b1, b2))
-    val inputs = table.map { case(v1, v2, answer) => new GenericRow(Array(v1, v2)) }
-    val expected = table.map { case(v1, v2, answer) => Seq((answer == null, answer)) }
-    
-    run(exprs, expected, inputs)
-  }
-    
-  test("3VL Equals") {
-    val table = (true,  true,  true) ::
+    (null,  null,  null) :: Nil)
+
+  booleanLogicTest("=", _ === _,
+    (true,  true,  true) ::
     (true,  false, false) ::
     (true,  null,  null) ::
     (false, true,  false) ::
@@ -290,12 +98,104 @@ trait ExpressionEvaluationSuite extends FunSuite {
     (false, null,  null) ::
     (null,  true,  null) ::
     (null,  false, null) ::
-    (null,  null,  null) :: Nil
-    
-    val exprs = Array[Expression](Equals(b1, b2))
-    val inputs = table.map { case(v1, v2, answer) => new GenericRow(Array(v1, v2)) }
-    val expected = table.map { case(v1, v2, answer) => Seq((answer == null, answer)) }
+    (null,  null,  null) :: Nil)
+
+  def booleanLogicTest(name: String, op: (Expression, Expression) => Expression,  truthTable: Seq[(Any, Any, Any)]) {
+    test(s"3VL $name") {
+      truthTable.foreach {
+        case (l,r,answer) =>
+          val expr = op(Literal(l, BooleanType), Literal(r, BooleanType))
+          val result = expr.apply(null)
+          if (result != answer)
+            fail(s"$expr should not evaluate to $result, expected: $answer")
+      }
+    }
+  }
+  
+  val c1 = BoundReference(0, AttributeReference("a", StringType)())  // null
+  val c2 = BoundReference(1, AttributeReference("b", StringType)())  // "addb"
+  val c3 = BoundReference(2, AttributeReference("c", StringType)())  // "a"
+  val c4 = BoundReference(3, AttributeReference("d", StringType)())  // "abdef"
+  val c5 = BoundReference(4, AttributeReference("e", StringType)())  // "a_%b"
+  val c6 = BoundReference(5, AttributeReference("f", StringType)())  // "a\\__b"
+  val c7 = BoundReference(6, AttributeReference("g", StringType)())  // "a%\\%b"
+  val c8 = BoundReference(7, AttributeReference("h", StringType)())  // "a%"
+  val c9 = BoundReference(8, AttributeReference("i", StringType)())  // "**"
+
+  val cs1: String = null
+  val cs2 = "addb"
+  val cs3 = "a"
+  val cs4 = "abdef"
+  val cs5 = "a_%b"
+  val cs6 = "a\\__b"
+  val cs7 = "a%\\%b"
+  val cs8 = "a%"
+  val cs9 = "**"
+  val regexData: Row = new GenericRow(Array[Any](cs1, cs2, cs3, cs4, cs5, cs6, cs7, cs8, cs9))
     
-    run(exprs, expected, inputs)
+  regexTest(regexData, "Like - pattern with Dynamic regex string", Like(_, _), 
+    (c1, c3, null) :: // null, "a"
+    (c1, c1, null) :: // null, null
+    (c4, c4, true) ::  // "abdef", "abdef"
+    (c5, c6, true) ::  // "a_%b", "a\\__b"
+    (c2, c5, true) ::  // "addb", "a_%b"
+    (c2, c6, false) :: // "addb", "a\\__b"
+    (c2, c7, false) :: // "addb", "a%\\%b"
+    (c5, c7, true) ::  // "a_%b", "a%\\%b"
+    (c2, c8, true) ::  // "addb", "a%"
+    (c2, c9, false) ::  // "addb", "**"
+    Nil
+  )
+  
+  regexTest(regexData, "Like - pattern with Literal regex string", Like(_, _), 
+    (Literal(cs1), Literal(cs3), null) :: // null, "a"
+    (Literal(cs1), Literal(cs1), null) :: // null, null
+    (Literal(cs4), Literal(cs4), true) ::  // "abdef", "abdef"
+    (Literal(cs5), Literal(cs6), true) ::  // "a_%b", "a\\__b"
+    (Literal(cs2), Literal(cs5), true) ::  // "addb", "a_%b"
+    (Literal(cs2), Literal(cs6), false) :: // "addb", "a\\__b"
+    (Literal(cs2), Literal(cs7), false) :: // "addb", "a%\\%b"
+    (Literal(cs5), Literal(cs7), true) ::  // "a_%b", "a%\\%b"
+    (Literal(cs2), Literal(cs8), true) ::  // "addb", "a%"
+    (Literal(cs2), Literal(cs9), false) ::  // "addb", "**"
+    Nil
+  )
+  
+  regexTest(regexData, "RLike - pattern with Literal regex string", RLike(_, _), 
+    (Literal(cs4), Literal(cs4), true) ::  // "abdef", "abdef"
+    (Literal("abbbbc"), Literal("a.*c"), true) ::
+    (Literal("abbbbc"), Literal("**"), classOf[java.util.regex.PatternSyntaxException]) ::
+    Nil
+  )
+  
+  def regexTest(row: Row, name: String, op: (Expression, Expression) => Expression,  
+    truthTable: Seq[(Expression, Expression, Any)]) {
+
+    test(s"regex: $name") {
+      truthTable.foreach {
+        case (l, r, null) =>
+          val expr = op(l, r)
+          val result = expr.apply(row)
+          if (result != null) fail(s"$expr should not evaluate to $result, expected: null")
+        case (l, r, answer: Class[_]) =>
+          val expr = op(l, r)
+          try{
+            expr.apply(row)
+            // will fail if no exception thrown
+            fail(s"$expr should throw exception ${answer.getCanonicalName()}, but it didn't")
+          } catch {
+            // raise by fail() method
+            case x if (x.isInstanceOf[org.scalatest.exceptions.TestFailedException]) => throw x
+            // the same exception as expected it, do nothing
+            case x if answer.getCanonicalName() == x.getClass().getCanonicalName() =>
+            case x => fail(s"$expr should not throw exception $x, expected: $answer")
+          }
+        case (l, r, answer) =>
+          val expr = op(l, r)
+          val result = expr.apply(row)
+          if (result != answer)
+            fail(s"$expr should not evaluate to $result, expected: $answer")
+      }
+    }
   }
 }
diff --git a/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveQl.scala b/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveQl.scala
index 7a2ecb165ff91..280dbfc1be7e6 100644
--- a/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveQl.scala
+++ b/sql/hive/src/main/scala/org/apache/spark/sql/hive/HiveQl.scala
@@ -850,8 +850,7 @@ object HiveQl {
     case Token("<=", left :: right:: Nil) => LessThanOrEqual(nodeToExpr(left), nodeToExpr(right))
     case Token("LIKE", left :: right:: Nil) => Like(nodeToExpr(left), nodeToExpr(right))
     case Token("RLIKE", left :: right:: Nil) => RLike(nodeToExpr(left), nodeToExpr(right))
-    case Token("REGEXP", left :: right:: Nil) =>
-      UnresolvedFunction("REGEXP", Seq(nodeToExpr(left), nodeToExpr(right)))
+    case Token("REGEXP", left :: right:: Nil) => RLike(nodeToExpr(left), nodeToExpr(right))
     case Token("TOK_FUNCTION", Token("TOK_ISNOTNULL", Nil) :: child :: Nil) =>
       IsNotNull(nodeToExpr(child))
     case Token("TOK_FUNCTION", Token("TOK_ISNULL", Nil) :: child :: Nil) =>
