diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/conditionalExpressions.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/conditionalExpressions.scala
index fb88ede79d7fe..6c4a8b1e54467 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/conditionalExpressions.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/conditionalExpressions.scala
@@ -242,26 +242,22 @@ case class CaseWhen(
       expressions = allConditions,
       funcName = "caseWhen",
       returnType = ctx.JAVA_BYTE,
-      makeSplitFunction = {
-        func =>
-          s"""
-             |${ctx.JAVA_BYTE} $resultIsNull = -1;
-             |do {
-             |  $func
-             |} while (false);
-             |return $resultIsNull;
-           """.stripMargin
-      },
-      foldFunctions = { funcCalls =>
-        funcCalls.map { funcCall =>
-          s"""
-             |$resultIsNull = $funcCall;
-             |if ($resultIsNull != -1) {
-             |  continue;
-             |}
-           """.stripMargin
-        }.mkString
-      })
+      makeSplitFunction = func =>
+        s"""
+           |${ctx.JAVA_BYTE} $resultIsNull = -1;
+           |do {
+           |  $func
+           |} while (false);
+           |return $resultIsNull;
+         """.stripMargin,
+      foldFunctions = _.map { funcCall =>
+        s"""
+           |$resultIsNull = $funcCall;
+           |if ($resultIsNull != -1) {
+           |  continue;
+           |}
+         """.stripMargin
+      }.mkString)
 
     ev.copy(code =
       s"""
@@ -270,8 +266,9 @@ case class CaseWhen(
          |do {
          |  $codes
          |} while (false);
-         |boolean ${ev.isNull} = ($resultIsNull != 0); // TRUE if -1 or 1
-         |${ctx.javaType(dataType)} ${ev.value} = $tmpResult;
+         |// TRUE if any condition is met and the result is not null, or no any condition is met.
+         |final boolean ${ev.isNull} = ($resultIsNull != 0);
+         |final ${ctx.javaType(dataType)} ${ev.value} = $tmpResult;
        """)
   }
 }
diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/nullExpressions.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/nullExpressions.scala
index 735ed48bdc5b6..d00ce26a18e57 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/nullExpressions.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/nullExpressions.scala
@@ -72,8 +72,8 @@ case class Coalesce(children: Seq[Expression]) extends Expression {
   }
 
   override def doGenCode(ctx: CodegenContext, ev: ExprCode): ExprCode = {
-    val coalesceTmpIsNull = ctx.freshName("coalesceTmpIsNull")
-    ctx.addMutableState(ctx.JAVA_BOOLEAN, coalesceTmpIsNull)
+    val tmpIsNull = ctx.freshName("coalesceTmpIsNull")
+    ctx.addMutableState(ctx.JAVA_BOOLEAN, tmpIsNull)
 
     // all the evals are meant to be in a do { ... } while (false); loop
     val evals = children.map { e =>
@@ -81,7 +81,7 @@ case class Coalesce(children: Seq[Expression]) extends Expression {
       s"""
          |${eval.code}
          |if (!${eval.isNull}) {
-         |  $coalesceTmpIsNull = false;
+         |  $tmpIsNull = false;
          |  ${ev.value} = ${eval.value};
          |  continue;
          |}
@@ -92,35 +92,32 @@ case class Coalesce(children: Seq[Expression]) extends Expression {
       expressions = evals,
       funcName = "coalesce",
       returnType = ctx.javaType(dataType),
-      makeSplitFunction = {
-        func =>
-          s"""
-            |${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};
-            |do {
-            |  $func
-            |} while (false);
-            |return ${ev.value};
-          """.stripMargin
-      },
-      foldFunctions = { funcCalls =>
-        funcCalls.map { funcCall =>
-          s"""
-             |${ev.value} = $funcCall;
-             |if (!$coalesceTmpIsNull) {
-             |  continue;
-             |}
-           """.stripMargin
-        }.mkString
-      })
+      makeSplitFunction = func =>
+        s"""
+           |${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};
+           |do {
+           |  $func
+           |} while (false);
+           |return ${ev.value};
+         """.stripMargin,
+      foldFunctions = _.map { funcCall =>
+        s"""
+           |${ev.value} = $funcCall;
+           |if (!$tmpIsNull) {
+           |  continue;
+           |}
+         """.stripMargin
+      }.mkString)
+
 
     ev.copy(code =
       s"""
-         |$coalesceTmpIsNull = true;
+         |$tmpIsNull = true;
          |${ctx.javaType(dataType)} ${ev.value} = ${ctx.defaultValue(dataType)};
          |do {
          |  $codes
          |} while (false);
-         |boolean ${ev.isNull} = $coalesceTmpIsNull;
+         |final boolean ${ev.isNull} = $tmpIsNull;
        """.stripMargin)
   }
 }
diff --git a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/predicates.scala b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/predicates.scala
index 66b9c487960be..c43d2e54db320 100644
--- a/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/predicates.scala
+++ b/sql/catalyst/src/main/scala/org/apache/spark/sql/catalyst/expressions/predicates.scala
@@ -239,7 +239,7 @@ case class In(value: Expression, list: Seq[Expression]) extends Predicate {
     val listGen = list.map(_.genCode(ctx))
     // inTmpResult -1 indicates at lease one expr in list is evaluated to null.
     // 0 means no matches found. 1 means the expr in list matches the given value expr.
-    val inTmpResult = ctx.freshName("inTmpResult")
+    val tmpResult = ctx.freshName("inTmpResult")
     val valueArg = ctx.freshName("valueArg")
     // All the blocks are meant to be inside a do { ... } while (false); loop.
     // The evaluation of variables can be stopped when we find a matching value.
@@ -247,9 +247,9 @@ case class In(value: Expression, list: Seq[Expression]) extends Predicate {
       s"""
          |${x.code}
          |if (${x.isNull}) {
-         |  $inTmpResult = -1; // isNull = true
+         |  $tmpResult = -1; // isNull = true
          |} else if (${ctx.genEqual(value.dataType, valueArg, x.value)}) {
-         |  $inTmpResult = 1; // value = TRUE
+         |  $tmpResult = 1; // value = TRUE
          |  continue;
          |}
        """.stripMargin)
@@ -257,40 +257,36 @@ case class In(value: Expression, list: Seq[Expression]) extends Predicate {
     val codes = ctx.splitExpressionsWithCurrentInputs(
       expressions = listCode,
       funcName = "valueIn",
-      extraArguments = (javaDataType, valueArg) :: (ctx.JAVA_BYTE, inTmpResult) :: Nil,
+      extraArguments = (javaDataType, valueArg) :: (ctx.JAVA_BYTE, tmpResult) :: Nil,
       returnType = ctx.JAVA_BYTE,
-      makeSplitFunction = { body =>
+      makeSplitFunction = body =>
         s"""
            |do {
            |  $body
            |} while (false);
-           |return $inTmpResult;
+           |return $tmpResult;
+         """.stripMargin,
+      foldFunctions = _.map { funcCall =>
+        s"""
+           |$tmpResult = $funcCall;
+           |if ($tmpResult == 1) {
+           |  continue;
+           |}
          """.stripMargin
-      },
-      foldFunctions = { funcCalls =>
-        funcCalls.map(funcCall =>
-          s"""
-             |$inTmpResult = $funcCall;
-             |if ($inTmpResult == 1) {
-             |  continue;
-             |}
-           """.stripMargin).mkString("\n")
-      }
-    )
+      }.mkString("\n"))
 
     ev.copy(code =
       s"""
          |${valueGen.code}
-         |// TRUE if any condition is met and the result is not null, or no any condition is met.
-         |byte $inTmpResult = (byte)(${valueGen.isNull} ? -1 : 0);
-         |if ($inTmpResult != -1) {
+         |byte $tmpResult = (byte)(${valueGen.isNull} ? -1 : 0);
+         |if ($tmpResult != -1) {
          |  $javaDataType $valueArg = ${valueGen.value};
          |  do {
          |    $codes
          |  } while (false);
          |}
-         |boolean ${ev.isNull} = ($inTmpResult == -1);
-         |boolean ${ev.value} = ($inTmpResult == 1);
+         |final boolean ${ev.isNull} = ($tmpResult == -1);
+         |final boolean ${ev.value} = ($tmpResult == 1);
        """.stripMargin)
   }
 
