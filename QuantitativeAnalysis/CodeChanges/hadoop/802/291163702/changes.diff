diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java
index 4d5ebe8b87d7..bd82fe6ce881 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/Constants.java
@@ -362,7 +362,7 @@ private Constants() {
   public static final String METADATASTORE_METADATA_TTL =
       "fs.s3a.metadatastore.metadata.ttl";
   public static final long DEFAULT_METADATASTORE_METADATA_TTL =
-      TimeUnit.MINUTES.toMillis(15);
+      TimeUnit.MINUTES.toSeconds(15);
 
   /** read ahead buffer size to prevent connection re-establishments. */
   public static final String READAHEAD_RANGE = "fs.s3a.readahead.range";
diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
index 1834178cad22..d86294e466d1 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java
@@ -391,7 +391,7 @@ public void initialize(URI name, Configuration originalConf)
       initMultipartUploads(conf);
       if(hasMetadataStore()) {
         long authDirTtl = conf.getTimeDuration(METADATASTORE_METADATA_TTL,
-            DEFAULT_METADATASTORE_METADATA_TTL, TimeUnit.MILLISECONDS);
+            DEFAULT_METADATASTORE_METADATA_TTL, TimeUnit.SECONDS);
         ttlTimeProvider = new S3Guard.TtlTimeProvider(authDirTtl);
       }
     } catch (AmazonClientException e) {
diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
index 94f34afc5e7e..9fe056009b83 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java
@@ -1087,7 +1087,8 @@ public void prune(PruneMode pruneMode, long cutoff) throws IOException {
   /**
    * Prune files, in batches. There's a sleep between each batch.
    *
-   * @param pruneMode The prune m
+   * @param pruneMode The mode of operation for the prune For details see
+   *                  {@link MetadataStore#prune(PruneMode, long)}
    * @param cutoff Oldest modification time to allow
    * @param keyPrefix The prefix for the keys that should be removed
    * @throws IOException Any IO/DDB failure.
diff --git a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java
index 47f1d2576a58..60b59bef6ae9 100644
--- a/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java
+++ b/hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3Guard.java
@@ -533,7 +533,7 @@ public TtlTimeProvider(long authoritativeDirTtl) {
     public TtlTimeProvider(Configuration conf) {
       this.authoritativeDirTtl =
           conf.getTimeDuration(METADATASTORE_METADATA_TTL,
-          DEFAULT_METADATASTORE_METADATA_TTL, TimeUnit.MILLISECONDS);
+              DEFAULT_METADATASTORE_METADATA_TTL, TimeUnit.SECONDS);
     }
 
     @Override
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java
index 460492e945b4..3d98daf6cc68 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardOutOfBandOperations.java
@@ -295,7 +295,7 @@ public void testListingDelete() throws Exception {
   @Test
   public void testTombstoneExpiryGuardedDeleteRawCreate() throws Exception {
     boolean allowAuthoritative = authoritative;
-    Path testFilePath = path("TEGDRC-" + UUID.randomUUID());
+    Path testFilePath = path("TEGDRC-" + UUID.randomUUID() + "/file");
     LOG.info("Allow authoritative param: {}",  allowAuthoritative);
     String originalText = "some test";
     String newText = "the new originalText for test";
@@ -445,7 +445,6 @@ public void testLastUpdatedZeroWontExpire() throws Exception {
     long ttl = 10L;
     final Path filePath = path(testFile);
 
-    // Create a directory with
     ITtlTimeProvider mockTimeProvider = mock(ITtlTimeProvider.class);
     ITtlTimeProvider originalTimeProvider = guardedFs.getTtlTimeProvider();
 
@@ -453,7 +452,7 @@ public void testLastUpdatedZeroWontExpire() throws Exception {
       guardedFs.setTtlTimeProvider(mockTimeProvider);
       when(mockTimeProvider.getMetadataTtl()).thenReturn(ttl);
 
-      // create a file while the NOW is 0, so it will set 0 as the last_upadted
+      // create a file while the NOW is 0, so it will set 0 as the last_updated
       when(mockTimeProvider.getNow()).thenReturn(0L);
       touch(guardedFs, filePath);
       deleteFile(guardedFs, filePath);
@@ -479,6 +478,61 @@ public void testLastUpdatedZeroWontExpire() throws Exception {
     }
   }
 
+  /**
+   * 1. File is deleted in the guarded fs.
+   * 2. File is replaced in the raw fs.
+   * 3. File is deleted in the guarded FS after the expiry time.
+   * 4. File MUST NOT exist in raw FS.
+   */
+  @Test
+  public void deleteAfterTombstoneExpiryOobCreate() throws Exception {
+    LOG.info("Authoritative mode: {}", authoritative);
+
+    String testFile = methodName + UUID.randomUUID().toString() +
+        "/theFileToTry";
+
+    long ttl = 10L;
+    final Path filePath = path(testFile);
+
+    ITtlTimeProvider mockTimeProvider = mock(ITtlTimeProvider.class);
+    ITtlTimeProvider originalTimeProvider = guardedFs.getTtlTimeProvider();
+
+    try {
+      guardedFs.setTtlTimeProvider(mockTimeProvider);
+      when(mockTimeProvider.getMetadataTtl()).thenReturn(ttl);
+
+      // CREATE AND DELETE WITH GUARDED FS
+      when(mockTimeProvider.getNow()).thenReturn(100L);
+      touch(guardedFs, filePath);
+      deleteFile(guardedFs, filePath);
+
+      final PathMetadata pathMetadata =
+          guardedFs.getMetadataStore().get(filePath);
+      assertNotNull("pathMetadata should not be null after deleting with "
+          + "tombstones", pathMetadata);
+
+      // REPLACE WITH RAW FS
+      touch(rawFS, filePath);
+      awaitFileStatus(rawFS, filePath);
+
+      // SET EXPIRY TIME, SO THE TOMBSTONE IS EXPIRED
+      when(mockTimeProvider.getNow()).thenReturn(100L + 2*ttl);
+
+      // DELETE IN GUARDED FS
+      guardedFs.delete(filePath, true);
+
+      // FILE MUST NOT EXIST IN RAW
+      intercept(FileNotFoundException.class, filePath.toString(),
+          "This file should throw FNFE when reading through "
+              + "the raw fs, and the guarded fs deleted the file.",
+          () -> rawFS.getFileStatus(filePath));
+
+    } finally {
+      guardedFs.delete(filePath, true);
+      guardedFs.setTtlTimeProvider(originalTimeProvider);
+    }
+  }
+
   private void checkListingDoesNotContainPath(S3AFileSystem fs, Path filePath)
       throws IOException {
     final RemoteIterator<LocatedFileStatus> listIter =
@@ -503,27 +557,16 @@ private void checkListingContainsPath(S3AFileSystem fs, Path filePath)
     final RemoteIterator<LocatedFileStatus> listIter =
         fs.listFiles(filePath.getParent(), false);
 
-    boolean lfsHit = false;
     while (listIter.hasNext()) {
       final LocatedFileStatus lfs = listIter.next();
-      if (lfs.getPath().equals(filePath)) {
-        lfsHit = true;
-        LOG.info("{}; file found in listFiles as expected.", filePath);
-        break;
-      }
+      assertEquals(filePath, lfs.getPath());
     }
-    assertTrue("The file should be listed in fs.listFiles: ", lfsHit);
 
-    boolean lsHit = false;
     final FileStatus[] fileStatuses = fs.listStatus(filePath.getParent());
     for (FileStatus fileStatus : fileStatuses) {
-      if (fileStatus.getPath().equals(filePath)) {
-        lsHit = true;
-        LOG.info("{}; file found in listStatus as expected.", filePath);
-        break;
-      }
+        assertEquals("The file should be listed in fs.listStatus",
+            filePath, fileStatus.getPath());
     }
-    assertTrue("The file should be listed in fs.listStatus: ", lsHit);
   }
 
   /**
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardTtl.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardTtl.java
index a888a052d36d..ea8d1d06e19a 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardTtl.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/ITestS3GuardTtl.java
@@ -18,6 +18,9 @@
 
 package org.apache.hadoop.fs.s3a;
 
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.UUID;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.Path;
@@ -30,9 +33,6 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.UUID;
 
 import static org.apache.hadoop.fs.contract.ContractTestUtils.touch;
 import static org.apache.hadoop.fs.s3a.Constants.METADATASTORE_AUTHORITATIVE;
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestDynamoDBMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestDynamoDBMetadataStore.java
index fa7e7d8b7c8f..a2bff22ca7e3 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestDynamoDBMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/ITestDynamoDBMetadataStore.java
@@ -212,6 +212,13 @@ public void tearDown() throws Exception {
     fileSystem.close();
   }
 
+  @Override protected String getPathStringForPrune(String path)
+      throws Exception {
+    String bucket =
+        getTestBucketName(getContract().getFileSystem().getConf());
+    return "/" + bucket + "/dir2";
+  }
+
   /**
    * Each contract has its own S3AFileSystem and DynamoDBMetadataStore objects.
    */
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
index 16a60722d084..b14e2475545a 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/MetadataStoreTestBase.java
@@ -24,7 +24,6 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
-import java.util.Map;
 import java.util.Set;
 
 import com.google.common.collect.Sets;
@@ -46,9 +45,6 @@
 import org.apache.hadoop.io.IOUtils;
 import org.apache.hadoop.test.HadoopTestBase;
 
-import static org.apache.hadoop.fs.s3a.S3ATestConstants.TEST_S3GUARD_IMPLEMENTATION_DYNAMO;
-import static org.apache.hadoop.fs.s3a.S3ATestConstants.TEST_S3GUARD_IMPLEMENTATION_LOCAL;
-import static org.apache.hadoop.fs.s3a.S3ATestUtils.getTestBucketName;
 import static org.apache.hadoop.fs.s3a.S3ATestUtils.metadataStorePersistsAuthoritativeBit;
 
 /**
@@ -859,13 +855,15 @@ public void testPruneExpiredTombstones() throws Exception {
     if(!allowMissing()) {
       for (String fN : keepFilenames) {
         final PathMetadata pathMetadata = ms.get(strToPath(fN));
-        assertNotNull(pathMetadata);
+        assertNotNull("Kept files should be in the metastore after prune",
+            pathMetadata);
       }
     }
 
     for(String fN : removeFilenames) {
       final PathMetadata pathMetadata = ms.get(strToPath(fN));
-      assertNull(pathMetadata);
+      assertNull("Expired tombstones should be removed from metastore after "
+          + "the prune.", pathMetadata);
     }
   }
 
@@ -893,27 +891,22 @@ public void testPruneExpiredTombstonesSpecifiedPath() throws Exception {
       ms.put(pathMetadata);
     }
 
-    final Map<String, String> diagnostics = ms.getDiagnostics();
-    if (ms instanceof LocalMetadataStore){
-      ms.prune(MetadataStore.PruneMode.TOMBSTONES_BY_LASTUPDATED, cutoff,
-          "/dir2");
-    } else if (ms instanceof DynamoDBMetadataStore){
-      String bucket =
-          getTestBucketName(getContract().getFileSystem().getConf());
-      ms.prune(MetadataStore.PruneMode.TOMBSTONES_BY_LASTUPDATED, cutoff,
-          "/" + bucket + "/dir2");
-    }
+    final String prunePath = getPathStringForPrune("/dir2");
+    ms.prune(MetadataStore.PruneMode.TOMBSTONES_BY_LASTUPDATED, cutoff,
+        prunePath);
 
     if(!allowMissing()) {
       for (String fN : keepFilenames) {
         final PathMetadata pathMetadata = ms.get(strToPath(fN));
-        assertNotNull(pathMetadata);
+        assertNotNull("Kept files should be in the metastore after prune",
+            pathMetadata);
       }
     }
 
     for(String fN : removeFilenames) {
       final PathMetadata pathMetadata = ms.get(strToPath(fN));
-      assertNull(pathMetadata);
+      assertNull("Expired tombstones should be removed from metastore after "
+          + "the prune.", pathMetadata);
     }
   }
 
@@ -931,6 +924,16 @@ private String[] buildPathStrings(String parent, String... paths)
     return paths;
   }
 
+
+  /**
+   * The prune operation needs the path with the bucket name as a string in
+   * {@link DynamoDBMetadataStore}, but not for {@link LocalMetadataStore}.
+   * This is an implementation detail of the ms, so this should be
+   * implemented in the subclasses.
+   */
+  protected abstract String getPathStringForPrune(String path)
+      throws Exception;
+
   private void commonTestPutListStatus(final String parent) throws IOException {
     putListStatusFiles(parent, true, buildPathStrings(parent, "file1", "file2",
         "file3"));
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestLocalMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestLocalMetadataStore.java
index 8d9e53113879..ee7b584ca18d 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestLocalMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestLocalMetadataStore.java
@@ -75,6 +75,11 @@ public AbstractMSContract createContract(Configuration conf) throws
     return new LocalMSContract(conf);
   }
 
+  @Override protected String getPathStringForPrune(String path)
+      throws Exception{
+    return path;
+  }
+
   @Test
   public void testClearByAncestor() throws Exception {
     Cache<Path, LocalMetadataEntry> cache = CacheBuilder.newBuilder().build();
diff --git a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestNullMetadataStore.java b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestNullMetadataStore.java
index c0541ea98ee2..2e0bc4b7e4f0 100644
--- a/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestNullMetadataStore.java
+++ b/hadoop-tools/hadoop-aws/src/test/java/org/apache/hadoop/fs/s3a/s3guard/TestNullMetadataStore.java
@@ -46,6 +46,11 @@ public boolean allowMissing() {
     return true;
   }
 
+  @Override protected String getPathStringForPrune(String path)
+      throws Exception {
+    return path;
+  }
+
   @Override
   public AbstractMSContract createContract() {
     return new NullMSContract();
