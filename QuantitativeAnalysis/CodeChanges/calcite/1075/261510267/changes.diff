diff --git a/babel/src/main/codegen/config.fmpp b/babel/src/main/codegen/config.fmpp
index f8f4a0bd96b..a016f41cfed 100644
--- a/babel/src/main/codegen/config.fmpp
+++ b/babel/src/main/codegen/config.fmpp
@@ -554,6 +554,7 @@ data: {
         "JSON_ARRAYAGG",
         "JSON_EXISTS",
         "JSON_VALUE",
+        "JSON_PRETTY",
         "JSON_OBJECT",
         "JSON_OBJECTAGG",
         "JSON_QUERY",
diff --git a/core/src/main/codegen/config.fmpp b/core/src/main/codegen/config.fmpp
index 4021ab10bf1..c988b2893b4 100644
--- a/core/src/main/codegen/config.fmpp
+++ b/core/src/main/codegen/config.fmpp
@@ -160,6 +160,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java b/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java
index e78978c6bbf..cc33d3146a8 100644
--- a/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java
+++ b/core/src/main/java/org/apache/calcite/sql/fun/SqlJsonPrettyFunction.java
@@ -29,7 +29,6 @@
 import org.apache.calcite.sql.type.ReturnTypes;
 import org.apache.calcite.sql.type.SqlOperandCountRanges;
 import org.apache.calcite.sql.type.SqlOperandTypeChecker;
-import org.apache.calcite.sql.type.SqlTypeName;
 import org.apache.calcite.sql.validate.SqlValidator;
 
 /**
@@ -40,7 +39,7 @@ public class SqlJsonPrettyFunction extends SqlFunction {
   public SqlJsonPrettyFunction() {
     super("JSON_PRETTY",
         SqlKind.OTHER_FUNCTION,
-        ReturnTypes.explicit(SqlTypeName.VARCHAR, 20),
+        ReturnTypes.VARCHAR_2000,
         null,
         OperandTypes.ANY,
         SqlFunctionCategory.SYSTEM);
diff --git a/core/src/test/codegen/config.fmpp b/core/src/test/codegen/config.fmpp
index 991914ec1d2..d194b6558a8 100644
--- a/core/src/test/codegen/config.fmpp
+++ b/core/src/test/codegen/config.fmpp
@@ -144,6 +144,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java b/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
index f938e69ab74..03ab6721048 100644
--- a/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
+++ b/core/src/test/java/org/apache/calcite/sql/parser/SqlParserTest.java
@@ -300,7 +300,6 @@ public class SqlParserTest {
       "JSON_EXISTS",                                                       "c",
       "JSON_OBJECT",                                                       "c",
       "JSON_OBJECTAGG",                                                    "c",
-      "JSON_PRETTY",                                                       "c",
       "JSON_QUERY",                                                        "c",
       "JSON_VALUE",                                                        "c",
       "KEEP",                                              "2011",
diff --git a/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java b/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java
index f280aa57faf..c79454fc886 100644
--- a/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java
+++ b/core/src/test/java/org/apache/calcite/sql/test/SqlAdvisorTest.java
@@ -170,7 +170,6 @@ public class SqlAdvisorTest extends SqlValidatorTestCase {
           "KEYWORD(JSON_EXISTS)",
           "KEYWORD(JSON_OBJECT)",
           "KEYWORD(JSON_OBJECTAGG)",
-          "KEYWORD(JSON_PRETTY)",
           "KEYWORD(JSON_QUERY)",
           "KEYWORD(JSON_VALUE)",
           "KEYWORD(LAG)",
diff --git a/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java b/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
index 9773b1e63a3..de5bc9aff0b 100644
--- a/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
+++ b/core/src/test/java/org/apache/calcite/sql/test/SqlOperatorBaseTest.java
@@ -4473,6 +4473,15 @@ private void checkNullOperand(SqlTester tester, String op) {
         "{\"foo\":{\"foo\":\"bar\"}}", "VARCHAR(2000) NOT NULL");
   }
 
+  @Test public void testJsonPretty() {
+    tester.checkString("json_pretty('{\"foo\":100}')",
+        "{\n  \"foo\" : 100\n}", "VARCHAR(2000) NOT NULL");
+    tester.checkString("json_pretty('[1,2,3]')",
+        "[ 1, 2, 3 ]", "VARCHAR(2000) NOT NULL");
+    tester.checkString("json_pretty('null')",
+        "null", "VARCHAR(2000) NOT NULL");
+  }
+
   @Test public void testJsonType() {
     tester.setFor(SqlStdOperatorTable.JSON_TYPE);
     tester.checkString("json_type('\"1\"')",
diff --git a/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java b/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
index 4c7d3ccf10a..379e709ca78 100644
--- a/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
+++ b/core/src/test/java/org/apache/calcite/test/SqlJsonFunctionsTest.java
@@ -64,7 +64,7 @@ public class SqlJsonFunctionsTest {
   public static final String INVOC_DESC_JSON_VALUE_ANY = "jsonValueAny";
   public static final String INVOC_DESC_JSON_QUERY = "jsonQuery";
   public static final String INVOC_DESC_JSONIZE = "jsonize";
-  public static final String INVOC_DESC_PRETTY_JSONISE = "prettyJson";
+  public static final String INVOC_DESC_JSON_PRETTY = "jsonPretty";
   public static final String INVOC_DESC_DEJSONIZE = "dejsonize";
   public static final String INVOC_DESC_JSON_OBJECT = "jsonObject";
   public static final String INVOC_DESC_JSON_TYPE = "jsonType";
@@ -446,9 +446,9 @@ public void testJsonize() {
   }
 
   @Test
-  public void assertPrettyJson() {
-    assertPrettyJson(new HashMap<>(), is("{ }"));
-    assertPrettyJson(Longs.asList(1, 2), is("[ 1, 2 ]"));
+  public void assertJsonPretty() {
+    assertJsonPretty(new HashMap<>(), is("{ }"));
+    assertJsonPretty(Longs.asList(1, 2), is("[ 1, 2 ]"));
   }
 
   @Test
@@ -654,9 +654,9 @@ private void assertJsonize(Object input,
         matcher);
   }
 
-  private void assertPrettyJson(Object input,
+  private void assertJsonPretty(Object input,
       Matcher<? super String> matcher) {
-    assertThat(invocationDesc(INVOC_DESC_PRETTY_JSONISE, input),
+    assertThat(invocationDesc(INVOC_DESC_JSON_PRETTY, input),
         SqlFunctions.jsonPretty(input),
         matcher);
   }
diff --git a/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java b/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
index 882ab4b7e6e..b9cb5e53fe6 100644
--- a/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
+++ b/core/src/test/java/org/apache/calcite/test/SqlValidatorTest.java
@@ -10769,12 +10769,21 @@ private void checkCustomColumnResolving(String table) {
         "(?s).*Expected a character type*");
   }
 
+  @Test public void testJsonPretty() {
+    check("select json_pretty(ename) from emp");
+    checkExp("json_pretty('{\"foo\":\"bar\"}')");
+    checkExpType("json_pretty('{\"foo\":\"bar\"}')", "VARCHAR(2000) NOT NULL");
+    checkFails("select json_pretty(^NULL^) from emp", "(?s).*Illegal use of .NULL.*");
+    checkFails("select json_pretty(^1^) from emp",
+            "(.*)JSON_VALUE_EXPRESSION(.*)");
+  }
+
   @Test public void testJsonType() {
     check("select json_type(ename) from emp");
     checkExp("json_type('{\"foo\":\"bar\"}')");
     checkExpType("json_type('{\"foo\":\"bar\"}')", "VARCHAR(20) NOT NULL");
     checkFails("select json_type(^1^) from emp",
-            "(.*)JSON_VALUE_EXPRESSION(.*)");
+        "(.*)JSON_VALUE_EXPRESSION(.*)");
   }
 
   @Test public void testJsonObjectAgg() {
diff --git a/server/src/main/codegen/config.fmpp b/server/src/main/codegen/config.fmpp
index d4d72439c59..12f53c7f9cc 100644
--- a/server/src/main/codegen/config.fmpp
+++ b/server/src/main/codegen/config.fmpp
@@ -152,6 +152,7 @@ data: {
         "JAVA"
         "JSON"
         "JSON_TYPE"
+        "JSON_PRETTY"
         "K"
         "KEY"
         "KEY_MEMBER"
diff --git a/site/_docs/reference.md b/site/_docs/reference.md
index b314b5c6df4..ff792455071 100644
--- a/site/_docs/reference.md
+++ b/site/_docs/reference.md
@@ -566,7 +566,7 @@ JSON,
 **JSON_EXISTS**,
 **JSON_OBJECT**,
 **JSON_OBJECTAGG**,
-**JSON_PRETTY**,
+JSON_PRETTY,
 **JSON_QUERY**,
 JSON_TYPE,
 **JSON_VALUE**,
