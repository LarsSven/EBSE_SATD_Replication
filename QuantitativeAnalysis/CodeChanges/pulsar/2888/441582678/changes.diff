diff --git a/conf/broker.conf b/conf/broker.conf
index 86ac9f7002770..a2a642cb638a2 100644
--- a/conf/broker.conf
+++ b/conf/broker.conf
@@ -285,10 +285,10 @@ anonymousUserRole=
 
 ### --- Token Authentication Provider --- ###
 
-## Simmetric key
+## Symmetric key
 # Configure the secret key to be used to validate auth tokens
 # The key can be specified like:
-# tokenSecretKey=data:xxxxxxxxx
+# tokenSecretKey=data:base64,xxxxxxxxx
 # tokenSecretKey=file:///my/secret.key
 # tokenSecretKey=env:MY_SECRET_KEY_VAR
 tokenSecretKey=
@@ -296,7 +296,7 @@ tokenSecretKey=
 ## Asymmetric public/private key pair
 # Configure the public key to be used to validate auth tokens
 # The key can be specified like:
-# tokenPublicKey=data:xxxxxxxxx
+# tokenPublicKey=data:base64,xxxxxxxxx
 # tokenPublicKey=file:///my/public.key
 # tokenPublicKey=env:MY_PUBLIC_KEY_VAR
 tokenPublicKey=
diff --git a/conf/proxy.conf b/conf/proxy.conf
index dbac95aa2324b..ad6145fb0b69f 100644
--- a/conf/proxy.conf
+++ b/conf/proxy.conf
@@ -129,6 +129,24 @@ tlsHostnameVerificationEnabled=false
 # certificate isn't trusted.
 tlsRequireTrustedClientCertOnConnect=false
 
+### --- Token Authentication Provider --- ###
+
+## Symmetric key
+# Configure the secret key to be used to validate auth tokens
+# The key can be specified like:
+# tokenSecretKey=data:base64,xxxxxxxxx
+# tokenSecretKey=file:///my/secret.key
+# tokenSecretKey=env:MY_SECRET_KEY_VAR
+tokenSecretKey=
+
+## Asymmetric public/private key pair
+# Configure the public key to be used to validate auth tokens
+# The key can be specified like:
+# tokenPublicKey=data:base64,xxxxxxxxx
+# tokenPublicKey=file:///my/public.key
+# tokenPublicKey=env:MY_PUBLIC_KEY_VAR
+tokenPublicKey=
+
 
 ### --- Deprecated config variables --- ###
 
diff --git a/pulsar-broker/src/main/java/org/apache/pulsar/utils/auth/tokens/TokensCliUtils.java b/pulsar-broker/src/main/java/org/apache/pulsar/utils/auth/tokens/TokensCliUtils.java
index 033ae1f31b8a5..8c998461f4a70 100644
--- a/pulsar-broker/src/main/java/org/apache/pulsar/utils/auth/tokens/TokensCliUtils.java
+++ b/pulsar-broker/src/main/java/org/apache/pulsar/utils/auth/tokens/TokensCliUtils.java
@@ -64,7 +64,7 @@ public static class CommandCreateSecretKey {
         String outputFile;
 
         @Parameter(names = {
-                "-b", "--base-64" }, description = "Encode the key in base64")
+                "-b", "--base64" }, description = "Encode the key in base64")
         boolean base64 = false;
 
         public void run() throws IOException {
@@ -115,22 +115,32 @@ public static class CommandCreateToken {
                 "--expiry-time" }, description = "Relative expiry time for the token (eg: 1h, 3d, 10y). (m=minutes) Default: no expiration")
         private String expiryTime;
 
-        @Parameter(names = { "-pk",
-                "--is-private-key" }, description = "Indicate the signing key is a private key (rather than a symmetric secret key)")
-        private Boolean isPrivateKey = false;
+        @Parameter(names = { "-sk",
+                "--secret-key" }, description = "Pass the secret key for signing the token. This can either be: data:, file:, etc..")
+        private String secretKey;
 
-        @Parameter(names = { "-k",
-                "--signing-key" }, description = "Pass the signing key. This can either be: data:, file:, etc..", required = true)
-        private String key;
+        @Parameter(names = { "-pk",
+                "--private-key" }, description = "Pass the private key for signing the token. This can either be: data:, file:, etc..")
+        private String privateKey;
 
         public void run() throws Exception {
-            byte[] encodedKey = AuthTokenUtils.readKeyFromUrl(key);
+            if (secretKey == null && privateKey == null) {
+                System.err.println(
+                        "Either --secret-key or --private-key needs to be passed for signing a token");
+                System.exit(1);
+            } else if (secretKey != null && privateKey != null) {
+                System.err.println(
+                        "Only one between --secret-key and --private-key needs to be passed for signing a token");
+                System.exit(1);
+            }
 
             Key signingKey;
 
-            if (isPrivateKey) {
+            if (privateKey != null) {
+                byte[] encodedKey = AuthTokenUtils.readKeyFromUrl(privateKey);
                 signingKey = AuthTokenUtils.decodePrivateKey(encodedKey);
             } else {
+                byte[] encodedKey = AuthTokenUtils.readKeyFromUrl(secretKey);
                 signingKey = AuthTokenUtils.decodeSecretKey(encodedKey);
             }
 
@@ -157,7 +167,7 @@ public static class CommandShowToken {
         private Boolean stdin = false;
 
         @Parameter(names = { "-f",
-                "--token-file" }, description = "Read tokn from a file")
+                "--token-file" }, description = "Read token from a file")
         private String tokenFile;
 
         public void run() throws Exception {
@@ -174,7 +184,7 @@ public void run() throws Exception {
                 token = System.getenv("TOKEN");
             } else {
                 System.err.println(
-                        "Token needs to be either passed through `--stdin`, `--token-file` or by `TOKEN` environment variable");
+                        "Token needs to be either passed as an argument or through `--stdin`, `--token-file` or by `TOKEN` environment variable");
                 System.exit(1);
                 return;
             }
diff --git a/site2/docs/reference-configuration.md b/site2/docs/reference-configuration.md
index 08df5d1e4cb92..1af2e4c03ca1f 100644
--- a/site2/docs/reference-configuration.md
+++ b/site2/docs/reference-configuration.md
@@ -108,7 +108,7 @@ Pulsar brokers are responsible for handling incoming messages from producers, di
 |enableNonPersistentTopics| Whether non-persistent topics are enabled on the broker |true|
 |functionsWorkerEnabled|  Whether the Pulsar Functions worker service is enabled in the broker  |false|
 |zookeeperServers|  Zookeeper quorum connection string  ||
-|globalZookeeperServers|  Global Zookeeper quorum connection string || 
+|globalZookeeperServers|  Global Zookeeper quorum connection string ||
 |brokerServicePort| Broker data port  |6650|
 |brokerServicePortTls|  Broker data port for TLS  |6651|
 |webServicePort|  Port to use to server HTTP request  |8080|
@@ -140,6 +140,8 @@ Pulsar brokers are responsible for handling incoming messages from producers, di
 |tlsKeyFilePath|  Path for the TLS private key file ||
 |tlsTrustCertsFilePath| Path for the trusted TLS certificate file ||
 |tlsAllowInsecureConnection|  Accept untrusted TLS certificate from client  |false|
+|tokenSecretKey| Configure the secret key to be used to validate auth tokens. The key can be specified like: `tokenSecretKey=data:base64,xxxxxxxxx`, `tokenSecretKey=file:///my/secret.key` or `tokenSecretKey=env:MY_SECRET_KEY_VAR`||
+|tokenPublicKey| Configure the public key to be used to validate auth tokens. The key can be specified like: `tokenPublicKey=data:base64,xxxxxxxxx`, `tokenPublicKey=file:///my/secret.key` or `tokenPublicKey=env:MY_SECRET_KEY_VAR`||
 |maxUnackedMessagesPerConsumer| Max number of unacknowledged messages allowed to receive messages by a consumer on a shared subscription. Broker will stop sending messages to consumer once, this limit reaches until consumer starts acknowledging messages back. Using a value of 0, is disabling unackeMessage limit check and consumer can receive messages without any restriction  |50000|
 |maxUnackedMessagesPerSubscription| Max number of unacknowledged messages allowed per shared subscription. Broker will stop dispatching messages to all consumers of the subscription once this limit reaches until consumer starts acknowledging messages back and unack count reaches to limit/2. Using a value of 0, is disabling unackedMessage-limit check and dispatcher can dispatch messages without any restriction  |200000|
 |maxConcurrentLookupRequest|  Max number of concurrent lookup request broker allows to throttle heavy incoming lookup traffic |50000|
@@ -384,7 +386,7 @@ The [`pulsar-client`](reference-cli-tools.md#pulsar-client) CLI tool can be used
 |zooKeeperSessionTimeoutMillis|   |30000|
 |serviceUrl|||
 |serviceUrlTls|||
-|brokerServiceUrl||| 
+|brokerServiceUrl|||
 |brokerServiceUrlTls|||
 |webServicePort||8080|
 |webServicePortTls||8443|
@@ -395,7 +397,7 @@ The [`pulsar-client`](reference-cli-tools.md#pulsar-client) CLI tool can be used
 |authorizationEnabled||false|
 |superUserRoles |||
 |brokerClientAuthenticationPlugin|||
-|brokerClientAuthenticationParameters||| 
+|brokerClientAuthenticationParameters|||
 |tlsEnabled||false|
 |tlsAllowInsecureConnection||false|
 |tlsCertificateFilePath|||
@@ -403,7 +405,7 @@ The [`pulsar-client`](reference-cli-tools.md#pulsar-client) CLI tool can be used
 |tlsTrustCertsFilePath|||
 
 
-## Pulsar proxy 
+## Pulsar proxy
 
 The [Pulsar proxy](concepts-architecture-overview.md#pulsar-proxy) can be configured in the `conf/proxy.conf` file.
 
@@ -434,6 +436,8 @@ The [Pulsar proxy](concepts-architecture-overview.md#pulsar-proxy) can be config
 |tlsTrustCertsFilePath| Path for the trusted TLS certificate pem file ||
 |tlsHostnameVerificationEnabled|  Whether the hostname is validated when the proxy creates a TLS connection with brokers  |false|
 |tlsRequireTrustedClientCertOnConnect|  Whether client certificates are required for TLS. Connections are rejected if the client certificate isnâ€™t trusted. |false|
+|tokenSecretKey| Configure the secret key to be used to validate auth tokens. The key can be specified like: `tokenSecretKey=data:base64,xxxxxxxxx`, `tokenSecretKey=file:///my/secret.key` or `tokenSecretKey=env:MY_SECRET_KEY_VAR`||
+|tokenPublicKey| Configure the public key to be used to validate auth tokens. The key can be specified like: `tokenPublicKey=data:base64,xxxxxxxxx`, `tokenPublicKey=file:///my/secret.key` or `tokenPublicKey=env:MY_SECRET_KEY_VAR`||
 
 
 ## ZooKeeper
