diff --git a/heron/api/src/java/com/twitter/heron/api/Config.java b/heron/api/src/java/com/twitter/heron/api/Config.java
index a564fa78cce..64788d2e6b6 100644
--- a/heron/api/src/java/com/twitter/heron/api/Config.java
+++ b/heron/api/src/java/com/twitter/heron/api/Config.java
@@ -153,18 +153,18 @@ public class Config extends HashMap<String, Object> {
   /**
    * What's the checkpoint interval for stateful topologies in seconds
    */
-  public static final String TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL =
-                             "topology.stateful.checkpoint.interval";
+  public static final String TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL_SECONDS =
+                             "topology.stateful.checkpoint.interval.seconds";
   /**
    * What's the provider for state? i.e. one where state is stored
    */
-  public static final String TOPOLOGY_STATEFUL_PROVIDER_TYPE =
-                             "topology.stateful.provider.type";
+  public static final String TOPOLOGY_STATEFUL_PROVIDER_CLASS =
+                             "topology.stateful.provider.class";
   /**
    * What's the config for state provider?
    */
-  public static final String TOPOLOGY_STATEFUL_PROVIDER_CONFIG =
-                             "topology.stateful.provider.config";
+  public static final String TOPOLOGY_STATEFUL_PROVIDER_CONFIG_FILE =
+                             "topology.stateful.provider.config.file";
   /**
    * Boolean flag that says that the stateful topology should start from
    * clean state, i.e. ignore any checkpoint state
@@ -235,9 +235,9 @@ public class Config extends HashMap<String, Object> {
     apiVars.add(TOPOLOGY_CONTAINER_PADDING_PERCENTAGE);
     apiVars.add(TOPOLOGY_COMPONENT_RAMMAP);
     apiVars.add(TOPOLOGY_STATEFUL_START_CLEAN);
-    apiVars.add(TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL);
-    apiVars.add(TOPOLOGY_STATEFUL_PROVIDER_TYPE);
-    apiVars.add(TOPOLOGY_STATEFUL_PROVIDER_CONFIG);
+    apiVars.add(TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL_SECONDS);
+    apiVars.add(TOPOLOGY_STATEFUL_PROVIDER_CLASS);
+    apiVars.add(TOPOLOGY_STATEFUL_PROVIDER_CONFIG_FILE);
     apiVars.add(TOPOLOGY_STATEFUL);
     apiVars.add(TOPOLOGY_NAME);
     apiVars.add(TOPOLOGY_TEAM_NAME);
@@ -423,15 +423,16 @@ public static void setTopologyStateful(Map<String, Object> conf, boolean statefu
   }
 
   public static void setTopologyStatefulCheckpointIntervalSecs(Map<String, Object> conf, int secs) {
-    conf.put(Config.TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL, Integer.toString(secs));
+    conf.put(Config.TOPOLOGY_STATEFUL_CHECKPOINT_INTERVAL_SECONDS, Integer.toString(secs));
   }
 
-  public static void setTopologyStatefulProviderType(Map<String, Object> conf, String provider) {
-    conf.put(Config.TOPOLOGY_STATEFUL_PROVIDER_TYPE, provider);
+  public static void setTopologyStatefulProviderClass(Map<String, Object> conf, String provider) {
+    conf.put(Config.TOPOLOGY_STATEFUL_PROVIDER_CLASS, provider);
   }
 
-  public static void setTopologyStatefulProviderConfig(Map<String, Object> conf, String config) {
-    conf.put(Config.TOPOLOGY_STATEFUL_PROVIDER_CONFIG, config);
+  public static void setTopologyStatefulProviderConfigFile(Map<String, Object> conf,
+                                                           String config) {
+    conf.put(Config.TOPOLOGY_STATEFUL_PROVIDER_CONFIG_FILE, config);
   }
 
   public static void setTopologyStatefulStartClean(Map<String, Object> conf, boolean clean) {
@@ -568,12 +569,12 @@ public void setTopologyStatefulCheckpointIntervalSecs(int secs) {
     setTopologyStatefulCheckpointIntervalSecs(this, secs);
   }
 
-  public void setTopologyStatefulProviderType(String provider) {
-    setTopologyStatefulProviderType(this, provider);
+  public void setTopologyStatefulProviderClass(String provider) {
+    setTopologyStatefulProviderClass(this, provider);
   }
 
-  public void setTopologyStatefulProviderConfig(String config) {
-    setTopologyStatefulProviderConfig(this, config);
+  public void setTopologyStatefulProviderConfigFile(String config) {
+    setTopologyStatefulProviderConfigFile(this, config);
   }
 
   public void setTopologyStatefulStartClean(boolean clean) {
