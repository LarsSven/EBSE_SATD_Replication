diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java
index 34550a67e3..012d2a6e1a 100644
--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java
@@ -52,14 +52,6 @@ public enum Interfaces {
         INCLUDE, EXCLUDE
     }
 
-    /**
-     * Inclusivity literals for {@link #getAllSuperclassesAndInterfaces(Class, Priority)}.
-     * @since 3.6
-     */
-    public enum Priority {
-        SUPERCLASS, INTERFACE
-    }
-
     /**
      * The package separator character: <code>'&#x2e;' == {@value}</code>.
      */
@@ -464,45 +456,6 @@ public static List<Class<?>> getAllInterfaces(final Class<?> cls) {
         return new ArrayList<>(interfacesFound);
     }
 
-    /**
-     * <p>Gets a combination of {@link #getAllSuperclasses}(Class)} and
-     * {@link #getAllInterfaces}(Class)}, one from superclasses, one
-     * from interfaces, and so on in a breadth first way.</p>
-     *
-     * @param cls  the class to look up, may be {@code null}
-     * @param p  determines what to peek in same breadth, the superclass or interface
-     * @return the {@code List} of superclasses in order going up from this one
-     *  {@code null} if null input
-     */
-    public static List<Class<?>> getAllSuperclassesAndInterfaces(final Class<?> cls, Priority p) {
-        if (cls == null) {
-            return null;
-        }
-
-        final List<Class<?>> classes = new ArrayList<>();
-        List<Class<?>> allSuperclasses = ClassUtils.getAllSuperclasses(cls);
-        int sci = 0;
-        List<Class<?>> allInterfaces = ClassUtils.getAllInterfaces(cls);
-        int ifi = 0;
-        while (ifi < allInterfaces.size() ||
-                sci < allSuperclasses.size()) {
-            Class<?> acls;
-            if (ifi >= allInterfaces.size()) {
-                acls = allSuperclasses.get(sci++);
-            } else if (sci >= allSuperclasses.size()) {
-                acls = allInterfaces.get(ifi++);
-            } else if (ifi < sci) {
-                acls = allInterfaces.get(ifi++);
-            } else if (sci < ifi) {
-                acls = allSuperclasses.get(sci++);
-            } else {
-                acls = (p == Priority.SUPERCLASS ? allSuperclasses.get(sci++) : allInterfaces.get(ifi++));
-            }
-            classes.add(acls);
-        }
-        return classes;
-    }
-
     /**
      * Get the interfaces for the specified class.
      *
diff --git a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
index 0d54d99ff7..d0a9d3f8a8 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
@@ -904,8 +904,8 @@ public static List<Method> getMethodsListWithAnnotation(final Class<?> cls,
 
         Validate.isTrue(cls != null, "The class must not be null");
         Validate.isTrue(annotationCls != null, "The annotation class must not be null");
-        List<Class<?>> classes = (searchSupers ? ClassUtils.getAllSuperclassesAndInterfaces(cls,
-                ClassUtils.Priority.INTERFACE) : new ArrayList<Class<?>>());
+        List<Class<?>> classes = (searchSupers ? getAllSuperclassesAndInterfaces(cls)
+                : new ArrayList<Class<?>>());
         classes.add(0, cls);
         final List<Method> annotatedMethods = new ArrayList<>();
         for (Class<?> acls : classes) {
@@ -954,7 +954,7 @@ public static <A extends Annotation> A getAnnotation(final Method method, final
 
         if(annotation == null && searchSupers) {
             Class<?> mcls = method.getDeclaringClass();
-            List<Class<?>> classes = ClassUtils.getAllSuperclassesAndInterfaces(mcls, ClassUtils.Priority.INTERFACE);
+            List<Class<?>> classes = getAllSuperclassesAndInterfaces(mcls);
             for (Class<?> acls : classes) {
                 Method equivalentMethod;
                 try {
@@ -973,4 +973,44 @@ public static <A extends Annotation> A getAnnotation(final Method method, final
 
         return annotation;
     }
+
+    /**
+     * <p>Gets a combination of {@link ClassUtils#getAllSuperclasses}(Class)} and
+     * {@link ClassUtils#getAllInterfaces}(Class)}, one from superclasses, one
+     * from interfaces, and so on in a breadth first way.</p>
+     *
+     * @param cls  the class to look up, may be {@code null}
+     * @return the combined {@code List} of superclasses and interfaces in order
+     * going up from this one
+     *  {@code null} if null input
+     * @since 3.6
+     */
+    private static List<Class<?>> getAllSuperclassesAndInterfaces(final Class<?> cls) {
+        if (cls == null) {
+            return null;
+        }
+
+        final List<Class<?>> classes = new ArrayList<>();
+        List<Class<?>> allSuperclasses = ClassUtils.getAllSuperclasses(cls);
+        int sci = 0;
+        List<Class<?>> allInterfaces = ClassUtils.getAllInterfaces(cls);
+        int ifi = 0;
+        while (ifi < allInterfaces.size() ||
+                sci < allSuperclasses.size()) {
+            Class<?> acls;
+            if (ifi >= allInterfaces.size()) {
+                acls = allSuperclasses.get(sci++);
+            } else if (sci >= allSuperclasses.size()) {
+                acls = allInterfaces.get(ifi++);
+            } else if (ifi < sci) {
+                acls = allInterfaces.get(ifi++);
+            } else if (sci < ifi) {
+                acls = allSuperclasses.get(sci++);
+            } else {
+                acls = allInterfaces.get(ifi++);
+            }
+            classes.add(acls);
+        }
+        return classes;
+    }
 }
diff --git a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java
index a956638ce8..744aaa8377 100644
--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java
@@ -281,38 +281,6 @@ public void test_getAllInterfaces_Class() {
         assertEquals(null, ClassUtils.getAllInterfaces(null));
     }
 
-    @Test
-    public void test_getAllSuperclassesAndInterfacesPriorityINTERFACE_Class() {
-        final List<?> list = ClassUtils.getAllSuperclassesAndInterfaces(CY.class, ClassUtils.Priority.INTERFACE);
-        assertEquals(8, list.size());
-        assertEquals(IB.class, list.get(0));
-        assertEquals(CX.class, list.get(1));
-        assertEquals(IC.class, list.get(2));
-        assertEquals(Object.class, list.get(3));
-        assertEquals(ID.class, list.get(4));
-        assertEquals(IE.class, list.get(5));
-        assertEquals(IF.class, list.get(6));
-        assertEquals(IA.class, list.get(7));
-
-        assertEquals(null, ClassUtils.getAllSuperclassesAndInterfaces(null, ClassUtils.Priority.INTERFACE));
-    }
-
-    @Test
-    public void test_getAllSuperclassesAndInterfacesPrioritySUPERCLASS_Class() {
-        final List<?> list = ClassUtils.getAllSuperclassesAndInterfaces(CY.class, ClassUtils.Priority.SUPERCLASS);
-        assertEquals(8, list.size());
-        assertEquals(CX.class, list.get(0));
-        assertEquals(IB.class, list.get(1));
-        assertEquals(Object.class, list.get(2));
-        assertEquals(IC.class, list.get(3));
-        assertEquals(ID.class, list.get(4));
-        assertEquals(IE.class, list.get(5));
-        assertEquals(IF.class, list.get(6));
-        assertEquals(IA.class, list.get(7));
-
-        assertEquals(null, ClassUtils.getAllSuperclassesAndInterfaces(null, ClassUtils.Priority.SUPERCLASS));
-    }
-
     private static interface IA {
     }
     private static interface IB {
diff --git a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
index 7c8489f687..15d7cd766e 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
@@ -747,8 +747,8 @@ public void testGetMethodsWithAnnotationNotSearchSupersAndNotIgnoreAccess() thro
 
     @Test
     public void testGetAnnotationSearchSupersAndIgnoreAccess() throws NoSuchMethodException {
-        assertNull(MethodUtils.getAnnotation(Object.class.getDeclaredMethods()[0], Annotated.class, true,
-                true));
+        assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),
+                Annotated.class, true, true));
         assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,
                 true, true));
         assertNotNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),
@@ -761,8 +761,8 @@ public void testGetAnnotationSearchSupersAndIgnoreAccess() throws NoSuchMethodEx
 
     @Test
     public void testGetAnnotationNotSearchSupersButIgnoreAccess() throws NoSuchMethodException {
-        assertNull(MethodUtils.getAnnotation(Object.class.getDeclaredMethods()[0], Annotated.class, false,
-                true));
+        assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),
+                Annotated.class, false, true));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,
                 false, true));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),
@@ -775,8 +775,8 @@ public void testGetAnnotationNotSearchSupersButIgnoreAccess() throws NoSuchMetho
 
     @Test
     public void testGetAnnotationSearchSupersButNotIgnoreAccess() throws NoSuchMethodException {
-        assertNull(MethodUtils.getAnnotation(Object.class.getDeclaredMethods()[0], Annotated.class, true,
-                false));
+        assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),
+                Annotated.class, true, false));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,
                 true, false));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),
@@ -789,8 +789,8 @@ public void testGetAnnotationSearchSupersButNotIgnoreAccess() throws NoSuchMetho
 
     @Test
     public void testGetAnnotationNotSearchSupersAndNotIgnoreAccess() throws NoSuchMethodException {
-        assertNull(MethodUtils.getAnnotation(Object.class.getDeclaredMethods()[0], Annotated.class, false,
-                false));
+        assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentNotAnnotatedMethod"),
+                Annotated.class, false, false));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("doIt"), Annotated.class,
                 false, false));
         assertNull(MethodUtils.getAnnotation(PublicChild.class.getMethod("parentProtectedAnnotatedMethod"),
diff --git a/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java b/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java
index 007ea65292..eeee5e398e 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java
@@ -32,4 +32,7 @@ public void doIt() {
     @Annotated
     protected void parentProtectedAnnotatedMethod() {
     }
+
+    public void parentNotAnnotatedMethod() {
+    }
 }
diff --git a/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java b/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java
index fab1867bda..ce2a1ec046 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java
@@ -25,6 +25,10 @@ public class PublicChild extends Parent {
     public void parentProtectedAnnotatedMethod() {
     }
 
+    @Override
+    public void parentNotAnnotatedMethod() {
+    }
+
     @Annotated
     private void privateAnnotatedMethod() {
     }
