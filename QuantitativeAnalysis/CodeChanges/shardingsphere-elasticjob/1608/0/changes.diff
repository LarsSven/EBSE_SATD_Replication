diff --git a/docs/content/features/elastic.en.md b/docs/content/features/elastic.en.md
index ef76631fe9..ae3ab67ed1 100644
--- a/docs/content/features/elastic.en.md
+++ b/docs/content/features/elastic.en.md
@@ -14,7 +14,7 @@ ElasticJob is aware of the number of servers in an almost-real-time manner, with
 
 To execute the job in distributed servers, a job will be divided into multiple individual job items, one or some of which will be executed by the distributed servers.
 
-For example, if a job is divided into 4 slices, and there're two servers to execute the job, then each server is assigned 2 slices, undertaking 50% of the workload, as follows.
+For example, if a job is divided into 4 slices, and there are two servers to execute the job, then each server is assigned 2 slices, undertaking 50% of the workload, as follows.
 
 ![Sharding Job](https://shardingsphere.apache.org/elasticjob/current/img/elastic/sharding.png)
 
@@ -40,7 +40,7 @@ When new job server joins, ElasticJob will be aware of it from the registry, and
 
 Configuring a larger number of sharding items than the number of servers, or better, a multiplier of the number of servers, makes it more reasonably for the job to leverage the resources, and assign the sharding items dynamically.
 
-For example, we have 10 sharding items and there're 3 servers, the number of sharding items are server A = 0,1,2; server B = 3,4,5; server C = 6,7,8,9.
+For example, we have 10 sharding items and there are 3 servers, the number of sharding items are server A = 0,1,2; server B = 3,4,5; server C = 6,7,8,9.
 If the server C is down, then server A = 0,1,2,3,4 and B = 5,6,7,8,9, maximizing the throughput without losing any sharding item.
 
 ## High Availability
diff --git a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java
index 34a7f19234..2ecd8b316e 100755
--- a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java
+++ b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/env/BootstrapEnvironment.java
@@ -90,11 +90,11 @@ public MesosConfiguration getMesosConfiguration() {
     }
     
     /**
-     * Get zookeeper config.
+     * Get zookeeper configuration.
      *
-     * @return zookeeper config
+     * @return zookeeper configuration
      */
-    // TODO Other zkConfig values ​​are configurable
+    // TODO Other zkConfig values are configurable
     public ZookeeperConfiguration getZookeeperConfiguration() {
         ZookeeperConfiguration result = new ZookeeperConfiguration(getValue(EnvironmentArgument.ZOOKEEPER_SERVERS), getValue(EnvironmentArgument.ZOOKEEPER_NAMESPACE));
         String digest = getValue(EnvironmentArgument.ZOOKEEPER_DIGEST);
diff --git a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/HttpClientException.java b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/HttpClientException.java
index 88e7760b80..a33c2582a6 100644
--- a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/HttpClientException.java
+++ b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/exception/HttpClientException.java
@@ -22,6 +22,8 @@
  */
 public class HttpClientException extends RuntimeException {
     
+    private static final long serialVersionUID = 6769285134744353127L;
+    
     public HttpClientException(final Exception cause) {
         super(cause);
     }
diff --git a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java
index 0cfe09b90e..960d9b5ae3 100755
--- a/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java
+++ b/elasticjob-cloud/elasticjob-cloud-scheduler/src/main/java/org/apache/shardingsphere/elasticjob/cloud/scheduler/mesos/AppConstraintEvaluator.java
@@ -155,6 +155,8 @@ private CloudJobConfiguration getJobConfiguration(final TaskContext taskContext)
     
     private static class LackConfigException extends Exception {
         
+        private static final long serialVersionUID = -3340824363577154813L;
+        
         LackConfigException(final String scope, final String configName) {
             super(String.format("Lack %s's config %s", scope, configName));
         }
diff --git a/elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java b/elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java
index e9afcb6c11..849d22528f 100644
--- a/elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java
+++ b/elasticjob-infra/elasticjob-infra-common/src/main/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoader.java
@@ -34,7 +34,7 @@
 public final class ElasticJobServiceLoader {
     
     private static final ConcurrentMap<Class<? extends TypedSPI>, ConcurrentMap<String, TypedSPI>> TYPED_SERVICES = new ConcurrentHashMap<>();
-
+    
     private static final ConcurrentMap<Class<? extends TypedSPI>, ConcurrentMap<String, Class<? extends TypedSPI>>> TYPED_SERVICE_CLASSES = new ConcurrentHashMap<>();
     
     /**
@@ -49,12 +49,12 @@ public static <T extends TypedSPI> void registerTypedService(final Class<T> type
         }
         ServiceLoader.load(typedService).forEach(each -> registerTypedServiceClass(typedService, each));
     }
-
+    
     private static <T extends TypedSPI> void registerTypedServiceClass(final Class<T> typedService, final TypedSPI instance) {
         TYPED_SERVICES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance);
         TYPED_SERVICE_CLASSES.computeIfAbsent(typedService, unused -> new ConcurrentHashMap<>()).putIfAbsent(instance.getType(), instance.getClass());
     }
-
+    
     /**
      * Get cached typed instance.
      *
@@ -66,7 +66,7 @@ private static <T extends TypedSPI> void registerTypedServiceClass(final Class<T
     public static <T extends TypedSPI> Optional<T> getCachedTypedServiceInstance(final Class<T> typedServiceInterface, final String type) {
         return Optional.ofNullable(TYPED_SERVICES.get(typedServiceInterface)).map(services -> (T) services.get(type));
     }
-
+    
     /**
      * New typed instance.
      *
@@ -80,7 +80,7 @@ public static <T extends TypedSPI> Optional<T> newTypedServiceInstance(final Cla
                 .map(serviceClasses -> serviceClasses.get(type))
                 .map(clazz -> (T) newServiceInstance(clazz));
     }
-
+    
     private static Object newServiceInstance(final Class<?> clazz) {
         try {
             return clazz.getConstructor().newInstance();
diff --git a/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJOTest.java b/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJOTest.java
index 9409fec68a..b7b50ab5b8 100644
--- a/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJOTest.java
+++ b/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/pojo/JobConfigurationPOJOTest.java
@@ -21,7 +21,7 @@
 import org.apache.shardingsphere.elasticjob.infra.yaml.YamlEngine;
 import org.junit.Test;
 
-import java.util.Arrays;
+import java.util.Collections;
 
 import static org.hamcrest.CoreMatchers.hasItem;
 import static org.hamcrest.CoreMatchers.is;
@@ -76,7 +76,7 @@ public void assertToJobConfiguration() {
         pojo.setJobShardingStrategyType("AVG_ALLOCATION");
         pojo.setJobExecutorServiceHandlerType("CPU");
         pojo.setJobErrorHandlerType("IGNORE");
-        pojo.setJobListenerTypes(Arrays.asList("LOG"));
+        pojo.setJobListenerTypes(Collections.singletonList("LOG"));
         pojo.setDescription("Job description");
         pojo.getProps().setProperty("key", "value");
         pojo.setDisabled(true);
diff --git a/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoaderTest.java b/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoaderTest.java
index 89e3032283..026afe209b 100644
--- a/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoaderTest.java
+++ b/elasticjob-infra/elasticjob-infra-common/src/test/java/org/apache/shardingsphere/elasticjob/infra/spi/ElasticJobServiceLoaderTest.java
@@ -26,39 +26,39 @@
 import static org.junit.Assert.assertThat;
 
 public final class ElasticJobServiceLoaderTest {
-
+    
     @BeforeClass
     public static void register() {
         ElasticJobServiceLoader.registerTypedService(TypedFooService.class);
     }
-
+    
     @Test
     public void assertGetCacheTypedService() {
         assertThat(ElasticJobServiceLoader.getCachedTypedServiceInstance(TypedFooService.class, "typedFooServiceImpl").orElse(null), instanceOf(TypedFooService.class));
     }
-
+    
     @Test
     public void assertNewTypedServiceInstance() {
         assertThat(ElasticJobServiceLoader.getCachedTypedServiceInstance(TypedFooService.class, "typedFooServiceImpl").orElse(null), instanceOf(TypedFooService.class));
     }
-
+    
     @Test(expected = IllegalArgumentException.class)
     public void assertGetCacheTypedServiceFailureWithUnRegisteredServiceInterface() {
-        ElasticJobServiceLoader.getCachedTypedServiceInstance(UnRegisteredTypedFooService.class, "unRegisteredTypedFooServiceImpl").orElseThrow(() -> new IllegalArgumentException());
+        ElasticJobServiceLoader.getCachedTypedServiceInstance(UnRegisteredTypedFooService.class, "unRegisteredTypedFooServiceImpl").orElseThrow(IllegalArgumentException::new);
     }
     
     @Test(expected = IllegalArgumentException.class)
     public void assertGetCacheTypedServiceFailureWithInvalidType() {
-        ElasticJobServiceLoader.getCachedTypedServiceInstance(TypedFooService.class, "INVALID").orElseThrow(() -> new IllegalArgumentException());
+        ElasticJobServiceLoader.getCachedTypedServiceInstance(TypedFooService.class, "INVALID").orElseThrow(IllegalArgumentException::new);
     }
-
+    
     @Test(expected = IllegalArgumentException.class)
     public void assertNewTypedServiceInstanceFailureWithUnRegisteredServiceInterface() {
-        ElasticJobServiceLoader.newTypedServiceInstance(UnRegisteredTypedFooService.class, "unRegisteredTypedFooServiceImpl").orElseThrow(() -> new IllegalArgumentException());
+        ElasticJobServiceLoader.newTypedServiceInstance(UnRegisteredTypedFooService.class, "unRegisteredTypedFooServiceImpl").orElseThrow(IllegalArgumentException::new);
     }
-
+    
     @Test(expected = IllegalArgumentException.class)
     public void assertNewTypedServiceInstanceFailureWithInvalidType() {
-        ElasticJobServiceLoader.newTypedServiceInstance(TypedFooService.class, "INVALID").orElseThrow(() -> new IllegalArgumentException());
+        ElasticJobServiceLoader.newTypedServiceInstance(TypedFooService.class, "INVALID").orElseThrow(IllegalArgumentException::new);
     }
 }
diff --git a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java
index ce7db53fb0..69c5d6c2ba 100644
--- a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java
+++ b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/deserializer/RequestBodyDeserializerNotFoundException.java
@@ -24,6 +24,8 @@
  */
 public final class RequestBodyDeserializerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 828418332240856770L;
+    
     public RequestBodyDeserializerNotFoundException(final String mimeType) {
         super(MessageFormat.format("RequestBodySerializer not found for [{0}]", mimeType));
     }
diff --git a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/HandlerNotFoundException.java b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/HandlerNotFoundException.java
index f8f45a904a..e3ac94bc28 100644
--- a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/HandlerNotFoundException.java
+++ b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/handler/HandlerNotFoundException.java
@@ -21,6 +21,8 @@
 
 public final class HandlerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 7316145545440327554L;
+    
     private final String path;
     
     public HandlerNotFoundException(final String path) {
diff --git a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/AmbiguousPathPatternException.java b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/AmbiguousPathPatternException.java
index 0567184339..1f53d2de21 100644
--- a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/AmbiguousPathPatternException.java
+++ b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/mapping/AmbiguousPathPatternException.java
@@ -22,6 +22,8 @@
  */
 public final class AmbiguousPathPatternException extends RuntimeException {
     
+    private static final long serialVersionUID = -7109813692538597236L;
+    
     public AmbiguousPathPatternException(final String message) {
         super(message);
     }
diff --git a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java
index 13450874e5..415c5e23e7 100644
--- a/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java
+++ b/elasticjob-infra/elasticjob-restful/src/main/java/org/apache/shardingsphere/elasticjob/restful/serializer/ResponseBodySerializerNotFoundException.java
@@ -24,6 +24,8 @@
  */
 public final class ResponseBodySerializerNotFoundException extends RuntimeException {
     
+    private static final long serialVersionUID = 3201288074956273247L;
+    
     public ResponseBodySerializerNotFoundException(final String mimeType) {
         super(MessageFormat.format("ResponseBodySerializer not found for [{0}]", mimeType));
     }
diff --git a/elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpClient.java b/elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpClient.java
index 70753afb83..73ae1d57f2 100644
--- a/elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpClient.java
+++ b/elasticjob-infra/elasticjob-restful/src/test/java/org/apache/shardingsphere/elasticjob/restful/pipeline/HttpClient.java
@@ -48,7 +48,6 @@ public final class HttpClient {
      * @param request HTTP request
      * @param consumer HTTP response consumer
      * @param timeoutSeconds wait for consume
-     * @throws InterruptedException interrupted
      */
     @SneakyThrows
     public static void request(final String host, final int port, final FullHttpRequest request, final Consumer<FullHttpResponse> consumer, final Long timeoutSeconds) {
diff --git a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java
index b731588103..b8ffe468e4 100644
--- a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java
+++ b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/JavaDataflowJob.java
@@ -33,15 +33,15 @@ public class JavaDataflowJob implements DataflowJob<Foo> {
     
     @Override
     public List<Foo> fetchData(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH");
         return fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
     }
     
     @Override
     public void processData(final ShardingContext shardingContext, final List<Foo> data) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS");
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
         }
diff --git a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java
index 322d146dff..d322116d17 100644
--- a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java
+++ b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/dataflow/SpringDataflowJob.java
@@ -34,15 +34,15 @@ public class SpringDataflowJob implements DataflowJob<Foo> {
     
     @Override
     public List<Foo> fetchData(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW FETCH");
         return fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
     }
     
     @Override
     public void processData(final ShardingContext shardingContext, final List<Foo> data) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "DATAFLOW PROCESS");
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
         }
diff --git a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
index a2cbed44e6..68a711b47d 100644
--- a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
+++ b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/JavaSimpleJob.java
@@ -33,8 +33,8 @@ public class JavaSimpleJob implements SimpleJob {
     
     @Override
     public void execute(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
diff --git a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
index c7fbc81cb7..d4eba69deb 100644
--- a/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
+++ b/examples/elasticjob-example-jobs/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/simple/SpringSimpleJob.java
@@ -34,8 +34,8 @@ public class SpringSimpleJob implements SimpleJob {
     
     @Override
     public void execute(final ShardingContext shardingContext) {
-        System.out.println(String.format("Item: %s | Time: %s | Thread: %s | %s",
-                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE"));
+        System.out.printf("Item: %s | Time: %s | Thread: %s | %s%n",
+                shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
         for (Foo each : data) {
             fooRepository.setCompleted(each.getId());
diff --git a/examples/elasticjob-example-lite-spring/src/main/resources/META-INF/applicationContext.xml b/examples/elasticjob-example-lite-spring/src/main/resources/META-INF/applicationContext.xml
index 32393ae45f..970d988d04 100644
--- a/examples/elasticjob-example-lite-spring/src/main/resources/META-INF/applicationContext.xml
+++ b/examples/elasticjob-example-lite-spring/src/main/resources/META-INF/applicationContext.xml
@@ -66,13 +66,13 @@
         <!--</props>-->
     <!--</elasticjob:job>-->
     
-    <bean id="occurErrorNoticeDingtlakJob" class="org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaOccurErrorJob" />
+    <bean id="occurErrorNoticeDingtalkJob" class="org.apache.shardingsphere.elasticjob.lite.example.job.simple.JavaOccurErrorJob" />
     
-    <elasticjob:job id="${occurErrorNoticeDingtlakJob.id}" job-ref="occurErrorNoticeDingtlakJob" registry-center-ref="regCenter" tracing-ref="elasticJobTrace"
-                    sharding-total-count="${occurErrorNoticeDingtlakJob.shardingTotalCount}" cron="${occurErrorNoticeDingtlakJob.cron}" sharding-item-parameters="${occurErrorNoticeDingtlakJob.shardingItemParameters}" 
-                    monitor-execution="${occurErrorNoticeDingtlakJob.monitorExecution}" failover="${occurErrorNoticeDingtlakJob.failover}" description="${occurErrorNoticeDingtlakJob.description}"
-                    job-error-handler-type="${occurErrorNoticeDingtlakJob.jobErrorHandlerType}"
-                    disabled="${occurErrorNoticeDingtlakJob.disabled}" overwrite="${occurErrorNoticeDingtlakJob.overwrite}" >
+    <elasticjob:job id="${occurErrorNoticeDingtalkJob.id}" job-ref="occurErrorNoticeDingtalkJob" registry-center-ref="regCenter" tracing-ref="elasticJobTrace"
+                    sharding-total-count="${occurErrorNoticeDingtalkJob.shardingTotalCount}" cron="${occurErrorNoticeDingtalkJob.cron}" sharding-item-parameters="${occurErrorNoticeDingtalkJob.shardingItemParameters}" 
+                    monitor-execution="${occurErrorNoticeDingtalkJob.monitorExecution}" failover="${occurErrorNoticeDingtalkJob.failover}" description="${occurErrorNoticeDingtalkJob.description}"
+                    job-error-handler-type="${occurErrorNoticeDingtalkJob.jobErrorHandlerType}"
+                    disabled="${occurErrorNoticeDingtalkJob.disabled}" overwrite="${occurErrorNoticeDingtalkJob.overwrite}" >
         <props>
             <prop key="dingtalk.webhook">https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f</prop>
             <prop key="dingtalk.keyword">keyword</prop>
diff --git a/examples/elasticjob-example-lite-spring/src/main/resources/conf/job.properties b/examples/elasticjob-example-lite-spring/src/main/resources/conf/job.properties
index 0901ebd6a3..3a5d8dbbaa 100644
--- a/examples/elasticjob-example-lite-spring/src/main/resources/conf/job.properties
+++ b/examples/elasticjob-example-lite-spring/src/main/resources/conf/job.properties
@@ -53,16 +53,16 @@ script.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou
 script.description=Script Job
 script.overwrite=true
 
-occurErrorNoticeDingtlakJob.id=occurErrorNoticeDingtlakJob
-occurErrorNoticeDingtlakJob.cron=0/5 * * * * ?
-occurErrorNoticeDingtlakJob.shardingTotalCount=3
-occurErrorNoticeDingtlakJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou
-occurErrorNoticeDingtlakJob.monitorExecution=false
-occurErrorNoticeDingtlakJob.failover=true
-occurErrorNoticeDingtlakJob.disabled=false
-occurErrorNoticeDingtlakJob.overwrite=true
-occurErrorNoticeDingtlakJob.description=\u53d1\u751f\u5f02\u5e38\u901a\u77e5\u9489\u9489\u793a\u4f8b
-occurErrorNoticeDingtlakJob.jobErrorHandlerType=DINGTALK
+occurErrorNoticeDingtalkJob.id=occurErrorNoticeDingtalkJob
+occurErrorNoticeDingtalkJob.cron=0/5 * * * * ?
+occurErrorNoticeDingtalkJob.shardingTotalCount=3
+occurErrorNoticeDingtalkJob.shardingItemParameters=0=Beijing,1=Shanghai,2=Guangzhou
+occurErrorNoticeDingtalkJob.monitorExecution=false
+occurErrorNoticeDingtalkJob.failover=true
+occurErrorNoticeDingtalkJob.disabled=false
+occurErrorNoticeDingtalkJob.overwrite=true
+occurErrorNoticeDingtalkJob.description=\u53d1\u751f\u5f02\u5e38\u901a\u77e5\u9489\u9489\u793a\u4f8b
+occurErrorNoticeDingtalkJob.jobErrorHandlerType=DINGTALK
 
 occurErrorNoticeWechatJob.id=occurErrorNoticeWechatJob
 occurErrorNoticeWechatJob.cron=0/5 * * * * ?
diff --git a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/controller/OneOffJobController.java b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/controller/OneOffJobController.java
index a9f2c5c303..de4f7b1afb 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/controller/OneOffJobController.java
+++ b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/controller/OneOffJobController.java
@@ -33,8 +33,8 @@ public class OneOffJobController {
     @Resource(name = "manualScriptJobBean")
     private OneOffJobBootstrap manualScriptJob;
     
-    @Resource(name = "occurErrorNoticeDingtlakBean")
-    private OneOffJobBootstrap occurErrorNoticeDingtlakJob;
+    @Resource(name = "occurErrorNoticeDingtalkBean")
+    private OneOffJobBootstrap occurErrorNoticeDingtalkJob;
     
     @Resource(name = "occurErrorNoticeWechatBean")
     private OneOffJobBootstrap occurErrorNoticeWechatJob;
@@ -42,16 +42,15 @@ public class OneOffJobController {
     @Resource(name = "occurErrorNoticeEmailBean")
     private OneOffJobBootstrap occurErrorNoticeEmailJob;
     
-    
     @GetMapping("/execute/manualScriptJob")
     public String executeManualScriptJob() {
         manualScriptJob.execute();
         return RES_TEXT;
     }
     
-    @GetMapping("/execute/occurErrorNoticeDingtlakJob")
+    @GetMapping("/execute/occurErrorNoticeDingtalkJob")
     public String executeOneOffJob() {
-        occurErrorNoticeDingtlakJob.execute();
+        occurErrorNoticeDingtalkJob.execute();
         return RES_TEXT;
     }
     
diff --git a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtlakJob.java b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtalkJob.java
similarity index 90%
rename from examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtlakJob.java
rename to examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtalkJob.java
index f138df0c62..6669cf2070 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtlakJob.java
+++ b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeDingtalkJob.java
@@ -22,10 +22,10 @@
 import org.springframework.stereotype.Component;
 
 @Component
-public class SpringBootOccurErrorNoticeDingtlakJob implements SimpleJob {
+public class SpringBootOccurErrorNoticeDingtalkJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }
diff --git a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeEmailJob.java b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeEmailJob.java
index 8446647a9d..4687e69dd3 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeEmailJob.java
+++ b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeEmailJob.java
@@ -25,7 +25,7 @@
 public class SpringBootOccurErrorNoticeEmailJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }
diff --git a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeWechatJob.java b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeWechatJob.java
index eebf5450ed..965d443b89 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeWechatJob.java
+++ b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootOccurErrorNoticeWechatJob.java
@@ -25,7 +25,7 @@
 public class SpringBootOccurErrorNoticeWechatJob implements SimpleJob {
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         throw new RuntimeException(String.format("An exception has occurred in Job, The parameter is %s", shardingContext.getShardingParameter()));
     }
 }
diff --git a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootSimpleJob.java b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootSimpleJob.java
index 416202a245..8208d5cb85 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootSimpleJob.java
+++ b/examples/elasticjob-example-lite-springboot/src/main/java/org/apache/shardingsphere/elasticjob/lite/example/job/SpringBootSimpleJob.java
@@ -39,7 +39,7 @@ public class SpringBootSimpleJob implements SimpleJob {
     private FooRepository fooRepository;
     
     @Override
-    public void execute(ShardingContext shardingContext) {
+    public void execute(final ShardingContext shardingContext) {
         logger.info("Item: {} | Time: {} | Thread: {} | {}",
                 shardingContext.getShardingItem(), new SimpleDateFormat("HH:mm:ss").format(new Date()), Thread.currentThread().getId(), "SIMPLE");
         List<Foo> data = fooRepository.findTodoData(shardingContext.getShardingParameter(), 10);
diff --git a/examples/elasticjob-example-lite-springboot/src/main/resources/application.yml b/examples/elasticjob-example-lite-springboot/src/main/resources/application.yml
index c2ef290551..e479242d9c 100644
--- a/examples/elasticjob-example-lite-springboot/src/main/resources/application.yml
+++ b/examples/elasticjob-example-lite-springboot/src/main/resources/application.yml
@@ -31,13 +31,13 @@ elasticjob:
       shardingTotalCount: 9
       props:
         script.command.line: "echo Manual SCRIPT Job: "
-    occurErrorNoticeDingtlakJob:
-      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtlakJob
+    occurErrorNoticeDingtalkJob:
+      elasticJobClass: org.apache.shardingsphere.elasticjob.lite.example.job.SpringBootOccurErrorNoticeDingtalkJob
       overwrite: true
       shardingTotalCount: 3
       shardingItemParameters: 0=Beijing,1=Shanghai,2=Guangzhou
       jobErrorHandlerType: DINGTALK
-      jobBootstrapBeanName: occurErrorNoticeDingtlakBean
+      jobBootstrapBeanName: occurErrorNoticeDingtalkBean
       props:
         dingtalk:
           webhook: https://oapi.dingtalk.com/robot/send?access_token=42eead064e81ce81fc6af2c107fbe10a4339a3d40a7db8abf5b34d8261527a3f
