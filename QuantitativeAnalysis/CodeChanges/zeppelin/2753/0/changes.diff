diff --git a/_tools/checkstyle.xml b/_tools/checkstyle.xml
index d7eaaf94360..aa53d3078ad 100644
--- a/_tools/checkstyle.xml
+++ b/_tools/checkstyle.xml
@@ -58,9 +58,10 @@ limitations under the License.
       <!-- Checks for redundant import statements. -->
       <property name="severity" value="error"/>
     </module>
-    <module name="ImportOrder"> Checks for out of order import statements
-      <property name="severity" value="warning"/> <property name="groups" value="com.google,junit,net,org,java,javax,*,org.apache.zeppelin"/>
-      This ensures that static imports go first <property name="option" value="top"/>
+    <module name="ImportOrder">
+      <property name="severity" value="warning"/>
+      <property name="groups" value="com.google,junit,net,org,java,javax,*,org.apache.zeppelin"/>
+      <property name="option" value="top"/>
       <property name="tokens" value="STATIC_IMPORT, IMPORT"/>
     </module>
     <!-- JAVADOC CHECKS -->
@@ -78,11 +79,6 @@ limitations under the License.
       <property name="allowUndeclaredRTE" value="true"/>
     </module>
 
-    <module name="JavadocType">
-      <property name="scope" value="protected"/>
-      <property name="severity" value="error"/>
-    </module>
-
     <module name="JavadocStyle">
       <property name="severity" value="warning"/>
     </module>
diff --git a/zeppelin-interpreter/pom.xml b/zeppelin-interpreter/pom.xml
index da31f787246..80864f9285d 100644
--- a/zeppelin-interpreter/pom.xml
+++ b/zeppelin-interpreter/pom.xml
@@ -239,6 +239,15 @@
   </dependencies>
 
   <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+        <configuration>
+          <skip>false</skip>
+        </configuration>
+      </plugin>
+    </plugins>
     <pluginManagement>
       <plugins>
         <plugin>
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
index 17e3e5bfd0f..a10732023fd 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
@@ -603,7 +603,7 @@ public interface ConfigurationKeyPredicate {
   /**
    * Wrapper class.
    */
-  public static enum ConfVars {
+  public enum ConfVars {
     ZEPPELIN_HOME("zeppelin.home", "./"),
     ZEPPELIN_ADDR("zeppelin.server.addr", "0.0.0.0"),
     ZEPPELIN_PORT("zeppelin.server.port", 8080),
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
index c3ecdeedc13..495c69bf5d9 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
@@ -156,7 +156,8 @@ private List<File> loadFromMvn(String artifact, Collection<String> excludes)
    */
   @Override
   public List<ArtifactResult> getArtifactsWithDep(String dependency,
-    Collection<String> excludes) throws RepositoryException {
+                                                  Collection<String> excludes)
+      throws RepositoryException {
     Artifact artifact = new DefaultArtifact(dependency);
     DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);
     PatternExclusionsDependencyFilter exclusionFilter =
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java
index 880e48732c8..20f34af0e37 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java
@@ -21,5 +21,5 @@
  *
  */
 public interface AngularObjectListener {
-  public void updated(AngularObject updatedObject);
+  void updated(AngularObject updatedObject);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
index a993992ae73..930ed7c8da0 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.display;
 
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
index 103336dbfaa..081bb43d814 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
@@ -22,7 +22,7 @@
  *
  */
 public interface AngularObjectRegistryListener {
-  public void onAdd(String interpreterGroupId, AngularObject object);
-  public void onUpdate(String interpreterGroupId, AngularObject object);
-  public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);
+  void onAdd(String interpreterGroupId, AngularObject object);
+  void onUpdate(String interpreterGroupId, AngularObject object);
+  void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java
index a6860dea5e4..51e27d29151 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java
@@ -18,12 +18,20 @@
 package org.apache.zeppelin.display;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.zeppelin.common.JsonSerializable;
-import org.apache.zeppelin.display.ui.*;
+import org.apache.zeppelin.display.ui.CheckBox;
+import org.apache.zeppelin.display.ui.OptionInput;
 import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
+import org.apache.zeppelin.display.ui.Select;
+import org.apache.zeppelin.display.ui.TextBox;
 
 import java.io.Serializable;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java
index da05caa6338..65b4f6b04b3 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/RuntimeTypeAdapterFactory.java
@@ -17,7 +17,13 @@
 
 package org.apache.zeppelin.display;
 
-import com.google.gson.*;
+import com.google.gson.Gson;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.TypeAdapter;
+import com.google.gson.TypeAdapterFactory;
 import com.google.gson.internal.Streams;
 import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java
index f9b4650f4da..02a0ff444cd 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java
@@ -18,10 +18,7 @@
 
 package org.apache.zeppelin.display.ui;
 
-import java.awt.*;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  * Html Checkbox
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java
index 291899877db..d138595fe7d 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.helium;
 
 import org.apache.zeppelin.annotation.Experimental;
-import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.resource.ResourceSet;
 
 import java.io.IOException;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java
index e0ea94cb01f..8d3f67e9912 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.helium;
 
-import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 
 /**
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java
index eda907ae840..ca971f5c32f 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationEventListener.java
@@ -22,11 +22,11 @@
  * Event from HeliumApplication running on remote interpreter process
  */
 public interface ApplicationEventListener {
-  public void onOutputAppend(
+  void onOutputAppend(
       String noteId, String paragraphId, int index, String appId, String output);
-  public void onOutputUpdated(
+  void onOutputUpdated(
       String noteId, String paragraphId, int index, String appId,
       InterpreterResult.Type type, String output);
-  public void onLoad(String noteId, String paragraphId, String appId, HeliumPackage pkg);
-  public void onStatusChange(String noteId, String paragraphId, String appId, String status);
+  void onLoad(String noteId, String paragraphId, String appId, HeliumPackage pkg);
+  void onStatusChange(String noteId, String paragraphId, String appId, String status);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
index ddd061cc621..241273a9a8b 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
@@ -28,7 +28,11 @@
 import java.lang.reflect.Constructor;
 import java.net.URL;
 import java.net.URLClassLoader;
-import java.util.*;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
 
 /**
  * Load application
@@ -55,7 +59,7 @@ private static class RunningApplication {
     String noteId;
     String paragraphId;
 
-    public RunningApplication(HeliumPackage packageInfo, String noteId, String paragraphId) {
+    RunningApplication(HeliumPackage packageInfo, String noteId, String paragraphId) {
       this.packageInfo = packageInfo;
       this.noteId = noteId;
       this.paragraphId = paragraphId;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java
index 759b991645c..e9995c10664 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java
@@ -19,7 +19,6 @@
 import com.google.gson.Gson;
 import org.apache.zeppelin.annotation.Experimental;
 import org.apache.zeppelin.common.JsonSerializable;
-import org.apache.zeppelin.dep.Repository;
 
 import java.util.Map;
 
@@ -35,8 +34,9 @@ public class HeliumPackage implements JsonSerializable {
   private String description;    // description
   private String artifact;       // artifact name e.g) groupId:artifactId:versionId
   private String className;      // entry point
-  private String [][] resources; // resource classnames that requires
-                                 // [[ .. and .. and .. ] or [ .. and .. and ..] ..]
+  // resource classnames that requires [[ .. and .. and .. ] or [ .. and .. and ..] ..]
+  private String [][] resources;
+
   private String license;
   private String icon;
   private String published;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
index 386de4178c3..52cc161ccf7 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
@@ -18,26 +18,25 @@
 package org.apache.zeppelin.interpreter;
 
 
-import java.lang.reflect.Field;
-import java.net.URL;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Properties;
-
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.reflect.FieldUtils;
 import org.apache.zeppelin.annotation.Experimental;
 import org.apache.zeppelin.annotation.ZeppelinApi;
-import org.apache.zeppelin.interpreter.launcher.InterpreterLauncher;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.lang.reflect.Field;
+import java.net.URL;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Properties;
+
 /**
  * Interface for interpreters.
  * If you want to implement new Zeppelin interpreter, extend this class
@@ -371,7 +370,7 @@ private void replaceContextParameters(Properties properties) {
   /**
    * Type of interpreter.
    */
-  public static enum FormType {
+  public enum FormType {
     NATIVE, SIMPLE, NONE
   }
 
@@ -458,7 +457,7 @@ public InterpreterRunner getRunner() {
   /**
    * Type of Scheduling.
    */
-  public static enum SchedulingMode {
+  public enum SchedulingMode {
     FIFO, PARALLEL
   }
 
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java
index c70212c7b7e..d0dbad17f75 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java
@@ -24,10 +24,10 @@ public interface InterpreterHookListener {
   /**
    * Prepends pre-execute hook code to the script that will be interpreted
    */
-  public void onPreExecute(String script);
+  void onPreExecute(String script);
   
   /**
    * Appends post-execute hook code to the script that will be interpreted
    */
-  public void onPostExecute(String script);
+  void onPostExecute(String script);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java
index a639e0c6418..44bcd7cd089 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java
@@ -22,6 +22,6 @@
  * InterpreterOutputChangeListener
  */
 public interface InterpreterOutputChangeListener {
-  public void fileChanged(File file);
+  void fileChanged(File file);
 
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java
index 42f6cfaef6a..a176ef299a6 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java
@@ -23,7 +23,7 @@ public interface InterpreterOutputListener {
   /**
    * update all message outputs
    */
-  public void onUpdateAll(InterpreterOutput out);
+  void onUpdateAll(InterpreterOutput out);
 
   /**
    * called when newline is detected
@@ -31,12 +31,12 @@ public interface InterpreterOutputListener {
    * @param out
    * @param line
    */
-  public void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);
+  void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);
 
   /**
    * when entire output is updated. eg) after detecting new display system
    * @param index
    * @param out
    */
-  public void onUpdate(int index, InterpreterResultMessageOutput out);
+  void onUpdate(int index, InterpreterResultMessageOutput out);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
index b08a97e1660..255b21ec78b 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
@@ -17,15 +17,15 @@
 
 package org.apache.zeppelin.interpreter;
 
-import java.io.IOException;
-import java.io.Serializable;
-
 import com.google.gson.Gson;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.*;
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.LinkedList;
+import java.util.List;
 
 /**
  * Interpreter result template.
@@ -37,7 +37,7 @@ public class InterpreterResult implements Serializable, JsonSerializable {
   /**
    *  Type of result after code execution.
    */
-  public static enum Code {
+  public enum Code {
     SUCCESS,
     INCOMPLETE,
     ERROR,
@@ -47,7 +47,7 @@ public static enum Code {
   /**
    * Type of Data.
    */
-  public static enum Type {
+  public enum Type {
     TEXT,
     HTML,
     ANGULAR,
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java
index 41e1fd0e184..da31364522a 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java
@@ -19,7 +19,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.*;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.net.URL;
 import java.util.LinkedList;
 import java.util.List;
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java
index ba5acf9414a..7f14a3edb98 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java
@@ -24,10 +24,10 @@ public interface InterpreterResultMessageOutputListener {
    * called when newline is detected
    * @param line
    */
-  public void onAppend(InterpreterResultMessageOutput out, byte[] line);
+  void onAppend(InterpreterResultMessageOutput out, byte[] line);
 
   /**
    * when entire output is updated. eg) after detecting new display system
    */
-  public void onUpdate(InterpreterResultMessageOutput out);
+  void onUpdate(InterpreterResultMessageOutput out);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java
index a12a9aa109e..040b5469a51 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java
@@ -21,5 +21,5 @@
  * WrappedInterpreter
  */
 public interface WrappedInterpreter {
-  public Interpreter getInnerInterpreter();
+  Interpreter getInnerInterpreter();
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java
index bf36cd6354f..e43365ceb36 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java
@@ -10,9 +10,9 @@
  */
 public interface RemoteEventClientWrapper {
 
-  public void onMetaInfosReceived(Map<String, String> infos);
+  void onMetaInfosReceived(Map<String, String> infos);
 
-  public void onParaInfosReceived(String noteId, String paragraphId,
+  void onParaInfosReceived(String noteId, String paragraphId,
                                             Map<String, String> infos);
 
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java
index 74b8db6d9d1..c0b1251d84e 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java
@@ -18,7 +18,6 @@
 package org.apache.zeppelin.interpreter.remote;
 
 import org.apache.zeppelin.interpreter.InterpreterContextRunner;
-import org.apache.zeppelin.interpreter.InterpreterException;
 
 /**
  *
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
index 5f8ccb7ab1c..9ca8a32f5f8 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
@@ -25,7 +25,11 @@
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEvent;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterEventType;
 import org.apache.zeppelin.interpreter.thrift.ZeppelinServerResourceParagraphRunner;
-import org.apache.zeppelin.resource.*;
+import org.apache.zeppelin.resource.RemoteResource;
+import org.apache.zeppelin.resource.Resource;
+import org.apache.zeppelin.resource.ResourceId;
+import org.apache.zeppelin.resource.ResourcePoolConnector;
+import org.apache.zeppelin.resource.ResourceSet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -356,6 +360,7 @@ public RemoteInterpreterEvent pollEvent() {
         try {
           eventQueue.wait(1000);
         } catch (InterruptedException e) {
+          // ignore exception
         }
       }
 
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
index c2a578c565e..fca84498aa4 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
@@ -97,8 +97,8 @@
  * Accepting thrift connections from ZeppelinServer.
  */
 public class RemoteInterpreterServer
-  extends Thread
-  implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {
+    extends Thread
+    implements RemoteInterpreterService.Iface, AngularObjectRegistryListener {
   Logger logger = LoggerFactory.getLogger(RemoteInterpreterServer.class);
 
   InterpreterGroup interpreterGroup;
@@ -171,6 +171,7 @@ public void run() {
     if (null != callbackHost && !isTest) {
       new Thread(new Runnable() {
         boolean interrupted = false;
+
         @Override
         public void run() {
           while (!interrupted && !server.isServing()) {
@@ -300,7 +301,7 @@ public void createInterpreter(String interpreterGroupId, String sessionId, Strin
       setSystemProperty(p);
 
       Constructor<Interpreter> constructor =
-          replClass.getConstructor(new Class[] {Properties.class});
+          replClass.getConstructor(new Class[]{Properties.class});
       Interpreter repl = constructor.newInstance(p);
       repl.setClassloaderUrls(new URL[]{});
       logger.info("Instantiate interpreter {}", className);
@@ -417,7 +418,8 @@ public void close(String sessionId, String className) throws TException {
 
   @Override
   public RemoteInterpreterResult interpret(String noteId, String className, String st,
-      RemoteInterpreterContext interpreterContext) throws TException {
+                                           RemoteInterpreterContext interpreterContext)
+      throws TException {
     if (logger.isDebugEnabled()) {
       logger.debug("st:\n{}", st);
     }
@@ -527,7 +529,7 @@ class InterpretJob extends Job {
     private Map<String, Object> infos;
     private Object results;
 
-    public InterpretJob(
+    InterpretJob(
         String jobId,
         String jobName,
         JobListener listener,
@@ -716,7 +718,10 @@ public String getFormType(String sessionId, String className) throws TException
 
   @Override
   public List<InterpreterCompletion> completion(String sessionId,
-      String className, String buf, int cursor, RemoteInterpreterContext remoteInterpreterContext)
+                                                String className,
+                                                String buf,
+                                                int cursor,
+                                                RemoteInterpreterContext remoteInterpreterContext)
       throws TException {
     Interpreter intp = getInterpreter(sessionId, className);
     try {
@@ -733,7 +738,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric) {
   private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutput output) {
     List<InterpreterContextRunner> contextRunners = new LinkedList<>();
     List<InterpreterContextRunner> runners = gson.fromJson(ric.getRunners(),
-            new TypeToken<List<RemoteInterpreterContextRunner>>() {
+        new TypeToken<List<RemoteInterpreterContextRunner>>() {
         }.getType());
 
     for (InterpreterContextRunner r : runners) {
@@ -748,7 +753,8 @@ private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutp
         ric.getParagraphText(),
         AuthenticationInfo.fromJson(ric.getAuthenticationInfo()),
         (Map<String, Object>) gson.fromJson(ric.getConfig(),
-            new TypeToken<Map<String, Object>>() {}.getType()),
+            new TypeToken<Map<String, Object>>() {
+            }.getType()),
         GUI.fromJson(ric.getGui()),
         GUI.fromJson(ric.getNoteGui()),
         interpreterGroup.getAngularObjectRegistry(),
@@ -798,7 +804,7 @@ static class ParagraphRunner extends InterpreterContextRunner {
     Logger logger = LoggerFactory.getLogger(ParagraphRunner.class);
     private transient RemoteInterpreterServer server;
 
-    public ParagraphRunner(RemoteInterpreterServer server, String noteId, String paragraphId) {
+    ParagraphRunner(RemoteInterpreterServer server, String noteId, String paragraphId) {
       super(noteId, paragraphId);
       this.server = server;
     }
@@ -809,13 +815,14 @@ public void run() {
     }
   }
 
-  static class ZeppelinRemoteWorksController implements RemoteWorksController{
+  static class ZeppelinRemoteWorksController implements RemoteWorksController {
     Logger logger = LoggerFactory.getLogger(ZeppelinRemoteWorksController.class);
 
     private final long DEFAULT_TIMEOUT_VALUE = 300000;
     private final Map<String, Object> remoteWorksResponsePool;
     private RemoteInterpreterServer server;
-    public ZeppelinRemoteWorksController(
+
+    ZeppelinRemoteWorksController(
         RemoteInterpreterServer server, Map<String, Object> remoteWorksResponsePool) {
       this.remoteWorksResponsePool = remoteWorksResponsePool;
       this.server = server;
@@ -882,7 +889,7 @@ public List<InterpreterContextRunner> getRemoteContextRunner(
   }
 
   private RemoteInterpreterResult convert(InterpreterResult result,
-      Map<String, Object> config, GUI gui, GUI noteGui) {
+                                          Map<String, Object> config, GUI gui, GUI noteGui) {
 
     List<RemoteInterpreterResultMessage> msg = new LinkedList<>();
     for (InterpreterResultMessage m : result.message()) {
@@ -930,7 +937,6 @@ public String getStatus(String sessionId, String jobId)
   }
 
 
-
   @Override
   public void onAdd(String interpreterGroupId, AngularObject object) {
     eventClient.angularObjectAdd(object);
@@ -949,6 +955,7 @@ public void onRemove(String interpreterGroupId, String name, String noteId, Stri
 
   /**
    * Poll event from RemoteInterpreterEventPoller
+   *
    * @return
    * @throws TException
    */
@@ -959,8 +966,9 @@ public RemoteInterpreterEvent getEvent() throws TException {
 
   /**
    * called when object is updated in client (web) side.
+   *
    * @param name
-   * @param noteId noteId where the update issues
+   * @param noteId      noteId where the update issues
    * @param paragraphId paragraphId where the update issues
    * @param object
    * @throws TException
@@ -998,8 +1006,8 @@ public void angularObjectUpdate(String name, String noteId, String paragraphId,
     if (value == null) {
       try {
         value = gson.fromJson(object,
-          new TypeToken<Map<String, Object>>() {
-          }.getType());
+            new TypeToken<Map<String, Object>>() {
+            }.getType());
       } catch (Exception e) {
         // it's not a generic json object, too. okay, proceed to threat as a string type
         logger.debug(e.getMessage(), e);
@@ -1050,7 +1058,7 @@ public void angularObjectAdd(String name, String noteId, String paragraphId, Str
 
   @Override
   public void angularObjectRemove(String name, String noteId, String paragraphId) throws
-          TException {
+      TException {
     AngularObjectRegistry registry = interpreterGroup.getAngularObjectRegistry();
     registry.remove(name, noteId, paragraphId, false);
   }
@@ -1062,8 +1070,9 @@ public void resourcePoolResponseGetAll(List<String> resources) throws TException
 
   /**
    * Get payload of resource from remote
+   *
    * @param resourceId json serialized ResourceId
-   * @param object java serialized of the object
+   * @param object     java serialized of the object
    * @throws TException
    */
   @Override
@@ -1158,8 +1167,9 @@ public ByteBuffer resourceInvokeMethod(
 
   /**
    * Get payload of resource from remote
+   *
    * @param invokeResourceMethodEventMessage json serialized InvokeResourcemethodEventMessage
-   * @param object java serialized of the object
+   * @param object                           java serialized of the object
    * @throws TException
    */
   @Override
@@ -1184,8 +1194,9 @@ public void resourceResponseInvokeMethod(
   public void angularRegistryPush(String registryAsString) throws TException {
     try {
       Map<String, Map<String, AngularObject>> deserializedRegistry = gson
-              .fromJson(registryAsString,
-                      new TypeToken<Map<String, Map<String, AngularObject>>>() { }.getType());
+          .fromJson(registryAsString,
+              new TypeToken<Map<String, Map<String, AngularObject>>>() {
+              }.getType());
       interpreterGroup.getAngularObjectRegistry().setRegistry(deserializedRegistry);
     } catch (Exception e) {
       logger.info("Exception in RemoteInterpreterServer while angularRegistryPush, nolock", e);
@@ -1193,8 +1204,8 @@ public void angularRegistryPush(String registryAsString) throws TException {
   }
 
   protected InterpreterOutput createAppOutput(final String noteId,
-                                            final String paragraphId,
-                                            final String appId) {
+                                              final String paragraphId,
+                                              final String appId) {
     return new InterpreterOutput(new InterpreterOutputListener() {
       @Override
       public void onUpdateAll(InterpreterOutput out) {
@@ -1322,7 +1333,7 @@ private static class RunningApplication {
     public final String noteId;
     public final String paragraphId;
 
-    public RunningApplication(HeliumPackage pkg,
+    RunningApplication(HeliumPackage pkg,
                               Application app,
                               String noteId,
                               String paragraphId) {
@@ -1331,5 +1342,7 @@ public RunningApplication(HeliumPackage pkg,
       this.noteId = noteId;
       this.paragraphId = paragraphId;
     }
-  };
+  }
+
+  ;
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java
index 5a0193c01cd..7ae22735eff 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java
@@ -16,7 +16,9 @@
  */
 package org.apache.zeppelin.resource;
 
-import java.util.*;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 
 /**
  * ResourcePool
@@ -35,6 +37,7 @@ public LocalResourcePool(String id) {
 
   /**
    * Get unique id of this resource pool
+   *
    * @return
    */
   @Override
@@ -44,6 +47,7 @@ public String id() {
 
   /**
    * Get resource
+   *
    * @return null if resource not found
    */
   @Override
@@ -65,6 +69,7 @@ public ResourceSet getAll() {
 
   /**
    * Put resource into the pull
+   *
    * @param
    * @param object object to put into the resource
    */
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java
index b57d46b9139..ec95ffbfa44 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java
@@ -21,7 +21,12 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.*;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
 import java.lang.reflect.Method;
 import java.nio.ByteBuffer;
 
@@ -109,13 +114,14 @@ public boolean isLocal() {
 
   /**
    * Call a method of the object that this resource holds
+   *
    * @param methodName name of method to call
    * @param paramTypes method parameter types
-   * @param params method parameter values
+   * @param params     method parameter values
    * @return return value of the method
    */
   public Object invokeMethod(
-      String methodName, Class [] paramTypes, Object [] params) {
+      String methodName, Class[] paramTypes, Object[] params) {
     if (r != null) {
       try {
         Method method = r.getClass().getMethod(
@@ -124,7 +130,7 @@ public Object invokeMethod(
         method.setAccessible(true);
         Object ret = method.invoke(r, params);
         return ret;
-      }  catch (Exception e) {
+      } catch (Exception e) {
         logException(e);
         return null;
       }
@@ -135,14 +141,15 @@ public Object invokeMethod(
 
   /**
    * Call a method of the object that this resource holds and save return value as a resource
-   * @param methodName name of method to call
-   * @param paramTypes method parameter types
-   * @param params method parameter values
+   *
+   * @param methodName         name of method to call
+   * @param paramTypes         method parameter types
+   * @param params             method parameter values
    * @param returnResourceName name of resource that return value will be saved
    * @return Resource that holds return value
    */
   public Resource invokeMethod(
-      String methodName, Class [] paramTypes, Object [] params, String returnResourceName) {
+      String methodName, Class[] paramTypes, Object[] params, String returnResourceName) {
     if (r != null) {
       try {
         Method method = r.getClass().getMethod(
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java
index a1c28de9222..12b4d7ae283 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePool.java
@@ -24,14 +24,14 @@ public interface ResourcePool {
    * Get unique id of the resource pool
    * @return
    */
-  public String id();
+  String id();
 
   /**
    * Get resource from name
    * @param name Resource name
    * @return null if resource not found
    */
-  public Resource get(String name);
+  Resource get(String name);
 
   /**
    * Get resource from name
@@ -40,20 +40,20 @@ public interface ResourcePool {
    * @param name Resource name
    * @return null if resource not found
    */
-  public Resource get(String noteId, String paragraphId, String name);
+  Resource get(String noteId, String paragraphId, String name);
 
   /**
    * Get all resources
    * @return
    */
-  public ResourceSet getAll();
+  ResourceSet getAll();
 
   /**
    * Put an object into resource pool
    * @param name
    * @param object
    */
-  public void put(String name, Object object);
+  void put(String name, Object object);
 
   /**
    * Put an object into resource pool
@@ -65,14 +65,14 @@ public interface ResourcePool {
    * @param name
    * @param object
    */
-  public void put(String noteId, String paragraphId, String name, Object object);
+  void put(String noteId, String paragraphId, String name, Object object);
 
   /**
    * Remove object
    * @param name Resource name to remove
    * @return removed Resource. null if resource not found
    */
-  public Resource remove(String name);
+  Resource remove(String name);
 
   /**
    * Remove object
@@ -81,5 +81,5 @@ public interface ResourcePool {
    * @param name Resource name to remove
    * @return removed Resource. null if resource not found
    */
-  public Resource remove(String noteId, String paragraphId, String name);
+  Resource remove(String noteId, String paragraphId, String name);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java
index f270d920681..169229ba837 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolConnector.java
@@ -24,19 +24,19 @@ public interface ResourcePoolConnector {
    * Get list of resources from all other resource pools in remote processes
    * @return
    */
-  public ResourceSet getAllResources();
+  ResourceSet getAllResources();
 
   /**
    * Read remote object
    * @return
    */
-  public Object readResource(ResourceId id);
+  Object readResource(ResourceId id);
 
   /**
    * Invoke method of Resource and get return
    * @return
    */
-  public Object invokeMethod(
+  Object invokeMethod(
       ResourceId id,
       String methodName,
       Class[] paramTypes,
@@ -45,7 +45,7 @@ public Object invokeMethod(
   /**
    * Invoke method, put result into resource pool and return
    */
-  public Resource invokeMethod(
+  Resource invokeMethod(
       ResourceId id,
       String methodName,
       Class[] paramTypes,
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
index 9ee274654ff..3042941d774 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
@@ -21,9 +21,9 @@
  * TODO(moon) : add description.
  */
 public interface JobListener {
-  public void onProgressUpdate(Job job, int progress);
+  void onProgressUpdate(Job job, int progress);
 
-  public void beforeStatusChange(Job job, Job.Status before, Job.Status after);
+  void beforeStatusChange(Job job, Job.Status before, Job.Status after);
 
-  public void afterStatusChange(Job job, Job.Status before, Job.Status after);
+  void afterStatusChange(Job job, Job.Status before, Job.Status after);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
index 8b8cda0af84..3d6ce12f48b 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
@@ -60,6 +60,8 @@ public void run() {
         }
         Thread.sleep(intervalMs);
       }
-    } catch (InterruptedException ignored) {}
+    } catch (InterruptedException ignored) {
+      // just ignore this exception
+    }
   }
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java
index 36a67e3f9c1..6f67cd7c5d4 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java
@@ -136,7 +136,7 @@ private class JobRunner implements Runnable {
     private Scheduler scheduler;
     private Job job;
 
-    public JobRunner(Scheduler scheduler, Job job) {
+    JobRunner(Scheduler scheduler, Job job) {
       this.scheduler = scheduler;
       this.job = job;
     }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java
index 90d43979c4f..30557274bc6 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java
@@ -23,15 +23,15 @@
  * Interface for scheduler
  */
 public interface Scheduler extends Runnable {
-  public String getName();
+  String getName();
 
-  public Collection<Job> getJobsWaiting();
+  Collection<Job> getJobsWaiting();
 
-  public Collection<Job> getJobsRunning();
+  Collection<Job> getJobsRunning();
 
-  public void submit(Job job);
+  void submit(Job job);
 
-  public Job removeFromWaitingQueue(String jobId);
+  Job removeFromWaitingQueue(String jobId);
 
-  public void stop();
+  void stop();
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java
index 79232e61a5a..9a6b3eddfb3 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java
@@ -21,7 +21,7 @@
  * TODO(moon) : add description.
  */
 public interface SchedulerListener {
-  public void jobStarted(Scheduler scheduler, Job job);
+  void jobStarted(Scheduler scheduler, Job job);
 
-  public void jobFinished(Scheduler scheduler, Job job);
+  void jobFinished(Scheduler scheduler, Job job);
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java
index 75afc18c70f..a2fac20a20e 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java
@@ -25,7 +25,7 @@ public class ColumnDef implements Serializable {
   /**
    * Type
    */
-  public static enum TYPE {
+  public enum TYPE {
     STRING,
     LONG,
     INT
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java
index 6e34f47732b..ed254c5b8e8 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java
@@ -26,12 +26,12 @@ public interface TableData {
    * Get column definitions
    * @return
    */
-  public ColumnDef [] columns();
+  ColumnDef [] columns();
 
   /**
    * Get row iterator
    * @param
    * @return
    */
-  public Iterator<Row> rows();
+  Iterator<Row> rows();
 }
diff --git a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java
index 052aaefd219..9d4e10f35dd 100644
--- a/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java
+++ b/zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java
@@ -27,8 +27,8 @@
  */
 public class IdHashes {
   private static final char[] DICTIONARY = new char[] {'1', '2', '3', '4', '5', '6', '7', '8', '9',
-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
-    'W', 'X', 'Y', 'Z'};
+      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
+      'W', 'X', 'Y', 'Z'};
 
   /**
    * encodes the given string into the base of the dictionary provided in the constructor.
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java
index 876e8e7c88c..7ccc7dfb069 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java
@@ -17,12 +17,6 @@
 
 package org.apache.zeppelin.dep;
 
-import static org.junit.Assert.assertEquals;
-
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.util.Collections;
-
 import org.apache.commons.io.FileUtils;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -31,6 +25,12 @@
 import org.junit.rules.ExpectedException;
 import org.sonatype.aether.RepositoryException;
 
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.Collections;
+
+import static org.junit.Assert.assertEquals;
+
 public class DependencyResolverTest {
   private static DependencyResolver resolver;
   private static String testPath;
@@ -42,12 +42,13 @@ public class DependencyResolverTest {
 
   @BeforeClass
   public static void setUp() throws Exception {
-    tmpDir = new File(System.getProperty("java.io.tmpdir")+"/ZeppelinLTest_"+System.currentTimeMillis());
+    tmpDir = new File(System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_" +
+        System.currentTimeMillis());
     testPath = tmpDir.getAbsolutePath() + "/test-repo";
     testCopyPath = new File(tmpDir, "test-copy-repo");
     resolver = new DependencyResolver(testPath);
   }
-  
+
   @AfterClass
   public static void tearDown() throws Exception {
     FileUtils.deleteDirectory(tmpDir);
@@ -85,7 +86,8 @@ public void testLoad() throws Exception {
     FileUtils.cleanDirectory(testCopyPath);
 
     // load from added repository
-    resolver.addRepo("sonatype", "https://oss.sonatype.org/content/repositories/agimatec-releases/", false);
+    resolver.addRepo("sonatype",
+        "https://oss.sonatype.org/content/repositories/agimatec-releases/", false);
     resolver.load("com.agimatec:agimatec-validation:0.9.3", testCopyPath);
     assertEquals(testCopyPath.list().length, 8);
 
@@ -103,4 +105,4 @@ public void should_throw_exception_if_dependency_not_found() throws Exception {
     resolver.load("one.two:1.0", testCopyPath);
   }
 
-}
\ No newline at end of file
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectRegistryTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectRegistryTest.java
index 2d0436f205b..aefc48471e1 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectRegistryTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectRegistryTest.java
@@ -17,13 +17,12 @@
 
 package org.apache.zeppelin.display;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 public class AngularObjectRegistryTest {
 
@@ -47,10 +46,13 @@ public void onUpdate(String interpreterGroupId, AngularObject object) {
           }
 
           @Override
-          public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId) {
+          public void onRemove(String interpreterGroupId,
+                               String name,
+                               String noteId,
+                               String paragraphId) {
             onRemove.incrementAndGet();
           }
-    });
+        });
 
     registry.add("name1", "value1", "note1", null);
     assertEquals(1, registry.getAll("note1", null).size());
@@ -65,12 +67,12 @@ public void onRemove(String interpreterGroupId, String name, String noteId, Stri
     assertEquals(1, onRemove.get());
 
     assertEquals(null, registry.get("name1", "note1", null));
-    
+
     // namespace
     registry.add("name1", "value11", "note2", null);
     assertEquals("value11", registry.get("name1", "note2", null).get());
     assertEquals(null, registry.get("name1", "note1", null));
-    
+
     // null namespace
     registry.add("name1", "global1", null, null);
     assertEquals("global1", registry.get("name1", null, null).get());
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java
index 924c5d4126c..0196526e2f3 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java
@@ -17,61 +17,61 @@
 
 package org.apache.zeppelin.display;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
+import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.apache.zeppelin.interpreter.InterpreterContext;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
 
 public class AngularObjectTest {
 
   @Test
   public void testEquals() {
     assertEquals(
-            new AngularObject("name", "value", "note1", null, null),
-            new AngularObject("name", "value", "note1", null, null)
+        new AngularObject("name", "value", "note1", null, null),
+        new AngularObject("name", "value", "note1", null, null)
     );
 
     assertEquals(
-            new AngularObject("name", "value", "note1", "paragraph1", null),
-            new AngularObject("name", "value", "note1", "paragraph1", null)
+        new AngularObject("name", "value", "note1", "paragraph1", null),
+        new AngularObject("name", "value", "note1", "paragraph1", null)
     );
 
     assertEquals(
-            new AngularObject("name", "value", null, null, null),
-            new AngularObject("name", "value", null, null, null)
+        new AngularObject("name", "value", null, null, null),
+        new AngularObject("name", "value", null, null, null)
     );
 
     assertEquals(
-            new AngularObject("name", "value1", null, null, null),
-            new AngularObject("name", "value2", null, null, null)
+        new AngularObject("name", "value1", null, null, null),
+        new AngularObject("name", "value2", null, null, null)
     );
 
     assertNotSame(
-            new AngularObject("name1", "value", null, null, null),
-            new AngularObject("name2", "value", null, null, null)
+        new AngularObject("name1", "value", null, null, null),
+        new AngularObject("name2", "value", null, null, null)
     );
 
     assertNotSame(
-            new AngularObject("name1", "value", "note1", null, null),
-            new AngularObject("name2", "value", "note2", null, null)
+        new AngularObject("name1", "value", "note1", null, null),
+        new AngularObject("name2", "value", "note2", null, null)
     );
 
     assertNotSame(
-            new AngularObject("name1", "value", "note", null, null),
-            new AngularObject("name2", "value", null, null, null)
+        new AngularObject("name1", "value", "note", null, null),
+        new AngularObject("name2", "value", null, null, null)
     );
 
     assertNotSame(
-            new AngularObject("name", "value", "note", "paragraph1", null),
-            new AngularObject("name", "value", "note", "paragraph2", null)
+        new AngularObject("name", "value", "note", "paragraph1", null),
+        new AngularObject("name", "value", "note", "paragraph2", null)
     );
 
     assertNotSame(
-            new AngularObject("name", "value", "note1", null, null),
-            new AngularObject("name", "value", "note1", "paragraph1", null)
+        new AngularObject("name", "value", "note1", null, null),
+        new AngularObject("name", "value", "note1", "paragraph1", null)
     );
 
 
@@ -80,14 +80,14 @@ public void testEquals() {
   @Test
   public void testListener() {
     final AtomicInteger updated = new AtomicInteger(0);
-    AngularObject ao = new AngularObject("name", "value", "note1", null, new AngularObjectListener() {
+    AngularObject ao = new AngularObject("name", "value", "note1", null,
+        new AngularObjectListener() {
 
-      @Override
-      public void updated(AngularObject updatedObject) {
-        updated.incrementAndGet();
-      }
-
-    });
+          @Override
+          public void updated(AngularObject updatedObject) {
+            updated.incrementAndGet();
+          }
+        });
 
     assertEquals(0, updated.get());
     ao.set("newValue");
@@ -106,12 +106,13 @@ public void updated(AngularObject updatedObject) {
   public void testWatcher() throws InterruptedException {
     final AtomicInteger updated = new AtomicInteger(0);
     final AtomicInteger onWatch = new AtomicInteger(0);
-    AngularObject ao = new AngularObject("name", "value", "note1", null, new AngularObjectListener() {
-      @Override
-      public void updated(AngularObject updatedObject) {
-        updated.incrementAndGet();
-      }
-    });
+    AngularObject ao = new AngularObject("name", "value", "note1", null,
+        new AngularObjectListener() {
+          @Override
+          public void updated(AngularObject updatedObject) {
+            updated.incrementAndGet();
+          }
+        });
 
     ao.addWatcher(new AngularObjectWatcher(null) {
       @Override
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/GUITest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/GUITest.java
index 15af2e66ab0..7d369b83cef 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/GUITest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/GUITest.java
@@ -17,22 +17,16 @@
 
 package org.apache.zeppelin.display;
 
-import org.apache.commons.io.IOUtils;
 import org.apache.zeppelin.display.ui.CheckBox;
 import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
 import org.apache.zeppelin.display.ui.Select;
 import org.apache.zeppelin.display.ui.TextBox;
 import org.junit.Before;
-import org.junit.BeforeClass;
 import org.junit.Test;
 
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java
index d3d5a009c04..a9252b96443 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java
@@ -17,9 +17,6 @@
 
 package org.apache.zeppelin.display;
 
-import java.util.HashMap;
-import java.util.Map;
-
 import org.apache.zeppelin.display.ui.CheckBox;
 import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
 import org.apache.zeppelin.display.ui.Select;
@@ -28,112 +25,123 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 public class InputTest {
 
-	@Before
-	public void setUp() throws Exception {
-	}
-
-	@After
-	public void tearDown() throws Exception {
-	}
-
-	@Test
-	public void testFormExtraction() {
-		// textbox form
-		String script = "${input_form=}";
-		Map<String, Input> forms = Input.extractSimpleQueryForm(script, false);
-		assertEquals(1, forms.size());
-		Input form = forms.get("input_form");
-		assertEquals("input_form", form.name);
-		assertNull(form.displayName);
-		assertEquals("", form.defaultValue);
-		assertTrue(form instanceof TextBox);
-
-		// textbox form with display name & default value
-		script = "${input_form(Input Form)=xxx}";
-		forms = Input.extractSimpleQueryForm(script, false);
-		form = forms.get("input_form");
-		assertEquals("xxx", form.defaultValue);
-		assertTrue(form instanceof TextBox);
-
-		// selection form
-		script = "${select_form(Selection Form)=op1,op1|op2(Option 2)|op3}";
-		form = Input.extractSimpleQueryForm(script, false).get("select_form");
-		assertEquals("select_form", form.name);
-		assertEquals("op1", form.defaultValue);
-		assertTrue(form instanceof Select);
-		assertArrayEquals(new ParamOption[]{new ParamOption("op1", null),
-				new ParamOption("op2", "Option 2"), new ParamOption("op3", null)},
-				((Select) form).getOptions());
-
-		// checkbox form
-		script = "${checkbox:checkbox_form=op1,op1|op2|op3}";
-		form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
-		assertEquals("checkbox_form", form.name);
-		assertTrue(form instanceof CheckBox);
-
-		assertArrayEquals(new Object[]{"op1"}, (Object[]) form.defaultValue);
-		assertArrayEquals(new ParamOption[]{new ParamOption("op1", null),
-				new ParamOption("op2", null), new ParamOption("op3", null)},
-				((CheckBox) form).getOptions());
-
-		// checkbox form with multiple default checks
-		script = "${checkbox:checkbox_form(Checkbox Form)=op1|op3,op1(Option 1)|op2|op3}";
-		form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
-		assertEquals("checkbox_form", form.name);
-		assertEquals("Checkbox Form", form.displayName);
-		assertTrue(form instanceof CheckBox);
-		assertArrayEquals(new Object[]{"op1", "op3"}, (Object[]) form.defaultValue);
-		assertArrayEquals(new ParamOption[]{new ParamOption("op1", "Option 1"),
-				new ParamOption("op2", null), new ParamOption("op3", null)},
-				((CheckBox) form).getOptions());
-
-		// checkbox form with no default check
-		script = "${checkbox:checkbox_form(Checkbox Form)=,op1(Option 1)|op2(Option 2)|op3(Option 3)}";
-		form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
-		assertEquals("checkbox_form", form.name);
-		assertEquals("Checkbox Form", form.displayName);
-		assertTrue(form instanceof CheckBox);
-		assertArrayEquals(new Object[]{}, (Object[]) form.defaultValue);
-		assertArrayEquals(new ParamOption[]{new ParamOption("op1", "Option 1"),
-				new ParamOption("op2", "Option 2"), new ParamOption("op3", "Option 3")},
-				((CheckBox) form).getOptions());
-	}
-
-
-	@Test
-	public void testFormSubstitution() {
-		// test form substitution without new forms
-		String script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
-				"CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3}";
-		Map<String, Object> params = new HashMap<>();
-		params.put("input_form", "some_input");
-		params.put("select_form", "s_op2");
-		params.put("checkbox_form", new String[]{"c_op1", "c_op3"});
-		String replaced = Input.getSimpleQuery(params, script, false);
-		assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1,c_op3", replaced);
-
-		// test form substitution with new forms
-		script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
-				"CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3}\n" +
-				"NEW_CHECKED=${checkbox( and ):new_check=nc_a|nc_c,nc_a|nc_b|nc_c}";
-		replaced = Input.getSimpleQuery(params, script, false);
-		assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1,c_op3\n" +
-				"NEW_CHECKED=nc_a and nc_c", replaced);
-
-		// test form substitution with obsoleted values
-		script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
-				"CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3_new}\n" +
-				"NEW_CHECKED=${checkbox( and ):new_check=nc_a|nc_c,nc_a|nc_b|nc_c}";
-		replaced = Input.getSimpleQuery(params, script, false);
-		assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1\n" +
-				"NEW_CHECKED=nc_a and nc_c", replaced);
-	}
+  @Before
+  public void setUp() throws Exception {
+  }
+
+  @After
+  public void tearDown() throws Exception {
+  }
+
+  @Test
+  public void testFormExtraction() {
+    // textbox form
+    String script = "${input_form=}";
+    Map<String, Input> forms = Input.extractSimpleQueryForm(script, false);
+    assertEquals(1, forms.size());
+    Input form = forms.get("input_form");
+    assertEquals("input_form", form.name);
+    assertNull(form.displayName);
+    assertEquals("", form.defaultValue);
+    assertTrue(form instanceof TextBox);
+
+    // textbox form with display name & default value
+    script = "${input_form(Input Form)=xxx}";
+    forms = Input.extractSimpleQueryForm(script, false);
+    form = forms.get("input_form");
+    assertEquals("xxx", form.defaultValue);
+    assertTrue(form instanceof TextBox);
+
+    // selection form
+    script = "${select_form(Selection Form)=op1,op1|op2(Option 2)|op3}";
+    form = Input.extractSimpleQueryForm(script, false).get("select_form");
+    assertEquals("select_form", form.name);
+    assertEquals("op1", form.defaultValue);
+    assertTrue(form instanceof Select);
+    assertArrayEquals(new ParamOption[]{
+        new ParamOption("op1", null),
+        new ParamOption("op2", "Option 2"),
+        new ParamOption("op3", null)},
+        ((Select) form).getOptions());
+
+    // checkbox form
+    script = "${checkbox:checkbox_form=op1,op1|op2|op3}";
+    form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
+    assertEquals("checkbox_form", form.name);
+    assertTrue(form instanceof CheckBox);
+
+    assertArrayEquals(new Object[]{"op1"}, (Object[]) form.defaultValue);
+    assertArrayEquals(new ParamOption[]{
+        new ParamOption("op1", null),
+        new ParamOption("op2", null),
+        new ParamOption("op3", null)},
+        ((CheckBox) form).getOptions());
+
+    // checkbox form with multiple default checks
+    script = "${checkbox:checkbox_form(Checkbox Form)=op1|op3,op1(Option 1)|op2|op3}";
+    form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
+    assertEquals("checkbox_form", form.name);
+    assertEquals("Checkbox Form", form.displayName);
+    assertTrue(form instanceof CheckBox);
+    assertArrayEquals(new Object[]{"op1", "op3"}, (Object[]) form.defaultValue);
+    assertArrayEquals(new ParamOption[]{
+        new ParamOption("op1", "Option 1"),
+        new ParamOption("op2", null),
+        new ParamOption("op3", null)},
+        ((CheckBox) form).getOptions());
+
+    // checkbox form with no default check
+    script = "${checkbox:checkbox_form(Checkbox Form)=,op1(Option 1)|op2(Option 2)|op3(Option 3)}";
+    form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
+    assertEquals("checkbox_form", form.name);
+    assertEquals("Checkbox Form", form.displayName);
+    assertTrue(form instanceof CheckBox);
+    assertArrayEquals(new Object[]{}, (Object[]) form.defaultValue);
+    assertArrayEquals(new ParamOption[]{
+        new ParamOption("op1", "Option 1"),
+        new ParamOption("op2", "Option 2"),
+        new ParamOption("op3", "Option 3")},
+        ((CheckBox) form).getOptions());
+  }
+
+
+  @Test
+  public void testFormSubstitution() {
+    // test form substitution without new forms
+    String script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=" +
+        ",s_op1|s_op2|s_op3}\nCHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3}";
+    Map<String, Object> params = new HashMap<>();
+    params.put("input_form", "some_input");
+    params.put("select_form", "s_op2");
+    params.put("checkbox_form", new String[]{"c_op1", "c_op3"});
+    String replaced = Input.getSimpleQuery(params, script, false);
+    assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1,c_op3", replaced);
+
+    // test form substitution with new forms
+    script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
+        "CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3}\n" +
+        "NEW_CHECKED=${checkbox( and ):new_check=nc_a|nc_c,nc_a|nc_b|nc_c}";
+    replaced = Input.getSimpleQuery(params, script, false);
+    assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1,c_op3\n" +
+        "NEW_CHECKED=nc_a and nc_c", replaced);
+
+    // test form substitution with obsoleted values
+    script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
+        "CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3_new}\n" +
+        "NEW_CHECKED=${checkbox( and ):new_check=nc_a|nc_c,nc_a|nc_b|nc_c}";
+    replaced = Input.getSimpleQuery(params, script, false);
+    assertEquals("INPUT=some_inputSELECTED=s_op2\nCHECKED=c_op1\n" +
+        "NEW_CHECKED=nc_a and nc_c", replaced);
+  }
 
 }
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
index acb4d7fbea1..490c9119ecf 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
@@ -28,14 +28,17 @@
 import java.io.File;
 import java.io.IOException;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 public class ApplicationLoaderTest {
   private File tmpDir;
 
   @Before
   public void setUp() {
-    tmpDir = new File(System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_" + System.currentTimeMillis());
+    tmpDir = new File(System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_" +
+        System.currentTimeMillis());
     tmpDir.mkdirs();
   }
 
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
index ad427e93885..e8107424612 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
@@ -21,7 +21,7 @@
 
 import java.util.Map;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 public class HeliumPackageTest {
 
@@ -71,10 +71,10 @@ public void parseConfig() {
     Map<String, Object> config = p.getConfig();
     Map<String, Object> accessToken = (Map<String, Object>) config.get("access-token");
 
-    assertEquals((String) accessToken.get("type"),"string");
+    assertEquals((String) accessToken.get("type"), "string");
     assertEquals((String) accessToken.get("description"),
         "access token for Google Translation API");
     assertEquals((String) accessToken.get("defaultValue"),
         "EXAMPLE-TOKEN");
   }
-}
\ No newline at end of file
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/MockApplication1.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/MockApplication1.java
index df3afeffc10..c962d8447a6 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/MockApplication1.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/MockApplication1.java
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.helium;
 
-import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.resource.ResourceSet;
 
 /**
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
index 70e2cbabbd0..8ad4841bb3b 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
@@ -17,17 +17,19 @@
 
 package org.apache.zeppelin.interpreter;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
 public class InterpreterContextTest {
 
   @Test
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null,
+        null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterHookRegistryTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterHookRegistryTest.java
index 7614e9eb204..eab8a2885b4 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterHookRegistryTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterHookRegistryTest.java
@@ -17,13 +17,11 @@
 
 package org.apache.zeppelin.interpreter;
 
+import org.junit.Test;
+
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-import java.util.concurrent.atomic.AtomicInteger;
-
-import org.junit.Test;
-
 public class InterpreterHookRegistryTest {
 
   @Test
@@ -38,7 +36,7 @@ public void testBasic() {
     final String preExecHook = "pre";
     final String postExecHook = "post";
     InterpreterHookRegistry registry = new InterpreterHookRegistry("intpId");
-    
+
     // Test register()
     registry.register(noteId, className, PRE_EXEC, preExecHook);
     registry.register(noteId, className, POST_EXEC, postExecHook);
@@ -50,7 +48,7 @@ public void testBasic() {
     assertEquals(registry.get(noteId, className, POST_EXEC), postExecHook);
     assertEquals(registry.get(noteId, className, PRE_EXEC_DEV), preExecHook);
     assertEquals(registry.get(noteId, className, POST_EXEC_DEV), postExecHook);
-    
+
     // Test Unregister
     registry.unregister(noteId, className, PRE_EXEC);
     registry.unregister(noteId, className, POST_EXEC);
@@ -60,16 +58,16 @@ public void testBasic() {
     assertNull(registry.get(noteId, className, POST_EXEC));
     assertNull(registry.get(noteId, className, PRE_EXEC_DEV));
     assertNull(registry.get(noteId, className, POST_EXEC_DEV));
-    
+
     // Test Global Scope
     registry.register(null, className, PRE_EXEC, preExecHook);
     assertEquals(registry.get(GLOBAL_KEY, className, PRE_EXEC), preExecHook);
   }
-  
+
   @Test(expected = IllegalArgumentException.class)
   public void testValidEventCode() {
     InterpreterHookRegistry registry = new InterpreterHookRegistry("intpId");
-    
+
     // Test that only valid event codes ("pre_exec", "post_exec") are accepted
     registry.register("foo", "bar", "baz", "whatever");
   }
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcherTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcherTest.java
index f3a30fbd274..683200beecf 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcherTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcherTest.java
@@ -16,16 +16,18 @@
  */
 package org.apache.zeppelin.interpreter;
 
-import static org.junit.Assert.*;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
 public class InterpreterOutputChangeWatcherTest implements InterpreterOutputChangeListener {
   private File tmpDir;
@@ -38,7 +40,8 @@ public void setUp() throws Exception {
     watcher = new InterpreterOutputChangeWatcher(this);
     watcher.start();
 
-    tmpDir = new File(System.getProperty("java.io.tmpdir")+"/ZeppelinLTest_"+System.currentTimeMillis());
+    tmpDir = new File(System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_" +
+        System.currentTimeMillis());
     tmpDir.mkdirs();
     fileChanged = null;
     numChanged = new AtomicInteger(0);
@@ -50,12 +53,13 @@ public void tearDown() throws Exception {
     delete(tmpDir);
   }
 
-  private void delete(File file){
-    if(file.isFile()) file.delete();
-    else if(file.isDirectory()){
-      File [] files = file.listFiles();
-      if(files!=null && files.length>0){
-        for(File f : files){
+  private void delete(File file) {
+    if (file.isFile()) {
+      file.delete();
+    } else if (file.isDirectory()) {
+      File[] files = file.listFiles();
+      if (files != null && files.length > 0) {
+        for (File f : files) {
           delete(f);
         }
       }
@@ -89,7 +93,7 @@ public void test() throws IOException, InterruptedException {
     out2.close();
 
     synchronized (this) {
-      wait(30*1000);
+      wait(30 * 1000);
     }
 
     assertNotNull(fileChanged);
@@ -102,9 +106,9 @@ public void fileChanged(File file) {
     fileChanged = file;
     numChanged.incrementAndGet();
 
-    synchronized(this) {
+    synchronized (this) {
       notify();
     }
   }
 
-}
\ No newline at end of file
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputTest.java
index 82d8c3fbc55..8158151a896 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputTest.java
@@ -16,14 +16,15 @@
  */
 package org.apache.zeppelin.interpreter;
 
-import static org.junit.Assert.*;
-
-import java.io.IOException;
-
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
+import java.io.IOException;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
 
 public class InterpreterOutputTest implements InterpreterOutputListener {
   private InterpreterOutput out;
@@ -206,4 +207,4 @@ public void onAppend(int index, InterpreterResultMessageOutput out, byte[] line)
   public void onUpdate(int index, InterpreterResultMessageOutput out) {
     numUpdateEvent++;
   }
-}
\ No newline at end of file
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterResultTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterResultTest.java
index 86c438be9b6..a8ff1bf5f4b 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterResultTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterResultTest.java
@@ -17,18 +17,18 @@
 
 package org.apache.zeppelin.interpreter;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-
 import org.junit.Test;
 
+import static org.junit.Assert.assertEquals;
+
 
 public class InterpreterResultTest {
 
   @Test
   public void testTextType() {
 
-    InterpreterResult result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "this is a TEXT type");
+    InterpreterResult result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "this is a TEXT type");
     assertEquals("No magic", InterpreterResult.Type.TEXT, result.message().get(0).getType());
     result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%this is a TEXT type");
     assertEquals("No magic", InterpreterResult.Type.TEXT, result.message().get(0).getType());
@@ -40,25 +40,44 @@ public void testTextType() {
   public void testSimpleMagicType() {
     InterpreterResult result = null;
 
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table col1\tcol2\naaa\t123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table col1\tcol2\naaa\t123\n");
     assertEquals(InterpreterResult.Type.TABLE, result.message().get(0).getType());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table\ncol1\tcol2\naaa\t123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table\ncol1\tcol2\naaa\t123\n");
     assertEquals(InterpreterResult.Type.TABLE, result.message().get(0).getType());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before magic word\n%table col1\tcol2\naaa\t123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before magic word\n%table col1\tcol2\naaa\t123\n");
     assertEquals(InterpreterResult.Type.TABLE, result.message().get(1).getType());
   }
 
+  @Test
   public void testComplexMagicType() {
     InterpreterResult result = null;
 
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before %table col1\tcol2\naaa\t123\n");
-    assertEquals("some text before magic return magic", InterpreterResult.Type.TABLE, result.message().get(0).getType());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%html  <h3> This is a hack </h3> %table\n col1\tcol2\naaa\t123\n");
-    assertEquals("magic A before magic B return magic A", InterpreterResult.Type.HTML, result.message().get(0).getType());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before magic word %table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3>");
-    assertEquals("text & magic A before magic B return magic A", InterpreterResult.Type.TABLE, result.message().get(0).getType());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3> %table col1\naaa\n123\n");
-    assertEquals("magic A, magic B, magic a' return magic A", InterpreterResult.Type.TABLE, result.message().get(0).getType());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before %table col1\tcol2\naaa\t123\n");
+    assertEquals("some text before magic return magic",
+        InterpreterResult.Type.TEXT, result.message().get(0).getType());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before\n%table col1\tcol2\naaa\t123\n");
+    assertEquals("some text before magic return magic",
+        InterpreterResult.Type.TEXT, result.message().get(0).getType());
+    assertEquals("some text before magic return magic",
+        InterpreterResult.Type.TABLE, result.message().get(1).getType());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%html  <h3> This is a hack </h3> %table\n col1\tcol2\naaa\t123\n");
+    assertEquals("magic A before magic B return magic A",
+        InterpreterResult.Type.HTML, result.message().get(0).getType());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before magic word %table col1\tcol2\naaa\t123\n %html  " +
+            "<h3> This is a hack </h3>");
+    assertEquals("text & magic A before magic B return magic A",
+        InterpreterResult.Type.TEXT, result.message().get(0).getType());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table col1\tcol2\naaa\t123\n %html  <h3> This is a hack </h3> %table col1\naaa\n123\n");
+    assertEquals("magic A, magic B, magic a' return magic A",
+        InterpreterResult.Type.TABLE, result.message().get(0).getType());
   }
 
   @Test
@@ -66,37 +85,49 @@ public void testSimpleMagicData() {
 
     InterpreterResult result = null;
 
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table col1\tcol2\naaa\t123\n");
-    assertEquals("%table col1\tcol2\naaa\t123\n", "col1\tcol2\naaa\t123\n", result.message().get(0).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table\ncol1\tcol2\naaa\t123\n");
-    assertEquals("%table\ncol1\tcol2\naaa\t123\n", "col1\tcol2\naaa\t123\n", result.message().get(0).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before magic word\n%table col1\tcol2\naaa\t123\n");
-    assertEquals("some text before magic word\n%table col1\tcol2\naaa\t123\n", "col1\tcol2\naaa\t123\n", result.message().get(1).getData());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table col1\tcol2\naaa\t123\n");
+    assertEquals("%table col1\tcol2\naaa\t123\n",
+        "col1\tcol2\naaa\t123\n", result.message().get(0).getData());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table\ncol1\tcol2\naaa\t123\n");
+    assertEquals("%table\ncol1\tcol2\naaa\t123\n",
+        "col1\tcol2\naaa\t123\n", result.message().get(0).getData());
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before magic word\n%table col1\tcol2\naaa\t123\n");
+    assertEquals("some text before magic word\n%table col1\tcol2\naaa\t123\n",
+        "col1\tcol2\naaa\t123\n", result.message().get(1).getData());
   }
 
-  @Test
   public void testComplexMagicData() {
 
     InterpreterResult result = null;
 
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before\n%table col1\tcol2\naaa\t123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before\n%table col1\tcol2\naaa\t123\n");
     assertEquals("text before %table", "some text before\n", result.message().get(0).getData());
     assertEquals("text after %table", "col1\tcol2\naaa\t123\n", result.message().get(1).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%html  <h3> This is a hack </h3>\n%table\ncol1\tcol2\naaa\t123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%html  <h3> This is a hack </h3>\n%table\ncol1\tcol2\naaa\t123\n");
     assertEquals(" <h3> This is a hack </h3>\n", result.message().get(0).getData());
     assertEquals("col1\tcol2\naaa\t123\n", result.message().get(1).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "some text before magic word\n%table col1\tcol2\naaa\t123\n\n%html <h3> This is a hack </h3>");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "some text before magic word\n%table col1\tcol2\naaa\t123\n\n%html " +
+            "<h3> This is a hack </h3>");
     assertEquals("<h3> This is a hack </h3>", result.message().get(2).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table col1\tcol2\naaa\t123\n\n%html  <h3> This is a hack </h3>\n%table col1\naaa\n123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table col1\tcol2\naaa\t123\n\n%html  <h3> This is a hack </h3>\n%table col1\naaa\n123\n");
     assertEquals("col1\naaa\n123\n", result.message().get(2).getData());
-    result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%table " + "col1\tcol2\naaa\t123\n\n%table col1\naaa\n123\n");
+    result = new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%table " + "col1\tcol2\naaa\t123\n\n%table col1\naaa\n123\n");
     assertEquals("col1\tcol2\naaa\t123\n", result.message().get(0).getData());
     assertEquals("col1\naaa\n123\n", result.message().get(1).getData());
   }
 
   @Test
   public void testToString() {
-    assertEquals("%html hello", new InterpreterResult(InterpreterResult.Code.SUCCESS, "%html hello").toString());
+    assertEquals("%html hello", new InterpreterResult(InterpreterResult.Code.SUCCESS,
+        "%html hello").toString());
   }
 
 }
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java
index 4156691c6d8..1debe716b5f 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java
@@ -17,11 +17,11 @@
 
 package org.apache.zeppelin.interpreter;
 
-import java.util.Properties;
-
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.Test;
 
+import java.util.Properties;
+
 import static org.junit.Assert.assertEquals;
 
 //TODO(zjffdu) add more test for Interpreter which is a very important class
@@ -73,7 +73,8 @@ public void testPropertyWithReplacedContextFields() {
         null,
         null));
     Properties p = new Properties();
-    p.put("p1", "replName #{noteId}, #{paragraphTitle}, #{paragraphId}, #{paragraphText}, #{replName}, #{noteId}, #{user}," +
+    p.put("p1", "replName #{noteId}, #{paragraphTitle}, #{paragraphId}, #{paragraphText}, " +
+        "#{replName}, #{noteId}, #{user}," +
         " #{authenticationInfo}");
     Interpreter intp = new DummyInterpreter(p);
     intp.setUserName(user);
@@ -81,7 +82,8 @@ public void testPropertyWithReplacedContextFields() {
     InterpreterContext.remove();
 
     assertEquals(
-        String.format("replName %s, #{paragraphTitle}, #{paragraphId}, #{paragraphText}, , %s, %s, #{authenticationInfo}", noteId,
+        String.format("replName %s, #{paragraphTitle}, #{paragraphId}, #{paragraphText}, , " +
+                "%s, %s, #{authenticationInfo}", noteId,
             noteId, user),
         actual
     );
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
index 165625ed925..529fcfb6607 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
@@ -19,7 +19,8 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -30,14 +31,16 @@ public class LazyOpenInterpreterTest {
   @Test
   public void isOpenTest() throws InterpreterException {
     InterpreterResult interpreterResult = new InterpreterResult(InterpreterResult.Code.SUCCESS, "");
-    when(interpreter.interpret(any(String.class), any(InterpreterContext.class))).thenReturn(interpreterResult);
+    when(interpreter.interpret(any(String.class), any(InterpreterContext.class)))
+        .thenReturn(interpreterResult);
 
     LazyOpenInterpreter lazyOpenInterpreter = new LazyOpenInterpreter(interpreter);
 
     assertFalse("Interpreter is not open", lazyOpenInterpreter.isOpen());
     InterpreterContext interpreterContext =
-        new InterpreterContext("note", "id", null, "title", "text", null, null, null, null, null, null, null, null);
+        new InterpreterContext("note", "id", null, "title", "text", null, null, null,
+            null, null, null, null, null);
     lazyOpenInterpreter.interpret("intp 1", interpreterContext);
     assertTrue("Interpeter is open", lazyOpenInterpreter.isOpen());
   }
-}
\ No newline at end of file
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
index 1cb2cb6447a..79a2331a0a3 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
@@ -17,19 +17,17 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import static org.junit.Assert.assertEquals;
+import org.apache.thrift.TException;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
 
 import java.io.IOException;
-import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.thrift.TException;
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterServer;
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
+import static org.junit.Assert.assertEquals;
 
 public class RemoteInterpreterServerTest {
   @Before
@@ -60,7 +58,8 @@ public void testStartStop() throws InterruptedException, IOException, TException
     }
 
     assertEquals(true, running);
-    assertEquals(true, RemoteInterpreterUtils.checkIfRemoteEndpointAccessible("localhost", server.getPort()));
+    assertEquals(true, RemoteInterpreterUtils.checkIfRemoteEndpointAccessible("localhost",
+        server.getPort()));
 
     server.shutdown();
 
@@ -77,16 +76,22 @@ public void testStartStop() throws InterruptedException, IOException, TException
 
   class ShutdownRun implements Runnable {
     private RemoteInterpreterServer serv = null;
-    public ShutdownRun(RemoteInterpreterServer serv) {
+
+    ShutdownRun(RemoteInterpreterServer serv) {
       this.serv = serv;
     }
+
     @Override
     public void run() {
       try {
         serv.shutdown();
-      } catch (Exception ex) {};
+      } catch (Exception ex) {
+        // ignore exception
+      }
     }
-  };
+  }
+
+  ;
 
   @Test
   public void testStartStopWithQueuedEvents() throws InterruptedException, IOException, TException {
@@ -108,10 +113,11 @@ public void testStartStopWithQueuedEvents() throws InterruptedException, IOExcep
     }
 
     assertEquals(true, running);
-    assertEquals(true, RemoteInterpreterUtils.checkIfRemoteEndpointAccessible("localhost", server.getPort()));
+    assertEquals(true, RemoteInterpreterUtils.checkIfRemoteEndpointAccessible("localhost",
+        server.getPort()));
 
     //just send an event on the client queue
-    server.eventClient.onAppStatusUpdate("","","","");
+    server.eventClient.onAppStatusUpdate("", "", "", "");
 
     ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();
 
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
index 8eeb85a2162..68981da9c27 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
@@ -27,16 +27,20 @@ public class RemoteInterpreterUtilsTest {
 
   @Test
   public void testCreateTServerSocket() throws IOException {
-    assertTrue(RemoteInterpreterUtils.createTServerSocket(":").getServerSocket().getLocalPort() > 0);
+    assertTrue(RemoteInterpreterUtils.createTServerSocket(":")
+        .getServerSocket().getLocalPort() > 0);
 
     String portRange = ":30000";
-    assertTrue(RemoteInterpreterUtils.createTServerSocket(portRange).getServerSocket().getLocalPort() <= 30000);
+    assertTrue(RemoteInterpreterUtils.createTServerSocket(portRange)
+        .getServerSocket().getLocalPort() <= 30000);
 
     portRange = "30000:";
-    assertTrue(RemoteInterpreterUtils.createTServerSocket(portRange).getServerSocket().getLocalPort()  >= 30000);
+    assertTrue(RemoteInterpreterUtils.createTServerSocket(portRange)
+        .getServerSocket().getLocalPort() >= 30000);
 
     portRange = "30000:40000";
-    int port = RemoteInterpreterUtils.createTServerSocket(portRange).getServerSocket().getLocalPort();
+    int port = RemoteInterpreterUtils.createTServerSocket(portRange)
+        .getServerSocket().getLocalPort();
     assertTrue(port >= 30000 && port <= 40000);
   }
 
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java
index 65d284bafa6..8b42dc8b2f3 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/LocalResourcePoolTest.java
@@ -18,7 +18,10 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
 
 /**
  * Unittest for LocalResourcePool
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/FIFOSchedulerTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/FIFOSchedulerTest.java
index 7288b6701af..807b5ee056a 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/FIFOSchedulerTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/FIFOSchedulerTest.java
@@ -17,101 +17,97 @@
 
 package org.apache.zeppelin.scheduler;
 
-import org.apache.zeppelin.scheduler.Job;
-import org.apache.zeppelin.scheduler.Scheduler;
-import org.apache.zeppelin.scheduler.SchedulerFactory;
-import org.apache.zeppelin.scheduler.Job.Status;
-
 import junit.framework.TestCase;
+import org.apache.zeppelin.scheduler.Job.Status;
 
 public class FIFOSchedulerTest extends TestCase {
 
-	private SchedulerFactory schedulerSvc;
+  private SchedulerFactory schedulerSvc;
 
-	@Override
-  public void setUp() throws Exception{
-		schedulerSvc = new SchedulerFactory();
-	}
+  @Override
+  public void setUp() throws Exception {
+    schedulerSvc = new SchedulerFactory();
+  }
 
-	@Override
-  public void tearDown(){
+  @Override
+  public void tearDown() {
 
-	}
+  }
 
-	public void testRun() throws InterruptedException{
-		Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
-		assertEquals(0, s.getJobsRunning().size());
-		assertEquals(0, s.getJobsWaiting().size());
+  public void testRun() throws InterruptedException {
+    Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
+    assertEquals(0, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-		Job job1 = new SleepingJob("job1", null, 500);
-		Job job2 = new SleepingJob("job2", null, 500);
+    Job job1 = new SleepingJob("job1", null, 500);
+    Job job2 = new SleepingJob("job2", null, 500);
 
-		s.submit(job1);
-		s.submit(job2);
-		Thread.sleep(200);
+    s.submit(job1);
+    s.submit(job2);
+    Thread.sleep(200);
 
-		assertEquals(Status.RUNNING, job1.getStatus());
-		assertEquals(Status.PENDING, job2.getStatus());
-		assertEquals(1, s.getJobsRunning().size());
-		assertEquals(1, s.getJobsWaiting().size());
+    assertEquals(Status.RUNNING, job1.getStatus());
+    assertEquals(Status.PENDING, job2.getStatus());
+    assertEquals(1, s.getJobsRunning().size());
+    assertEquals(1, s.getJobsWaiting().size());
 
 
-		Thread.sleep(500);
-		assertEquals(Status.FINISHED, job1.getStatus());
-		assertEquals(Status.RUNNING, job2.getStatus());
-		assertTrue((500 < (Long)job1.getReturn()));
-		assertEquals(1, s.getJobsRunning().size());
-		assertEquals(0, s.getJobsWaiting().size());
+    Thread.sleep(500);
+    assertEquals(Status.FINISHED, job1.getStatus());
+    assertEquals(Status.RUNNING, job2.getStatus());
+    assertTrue((500 < (Long) job1.getReturn()));
+    assertEquals(1, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-	}
+  }
 
-	public void testAbort() throws InterruptedException{
-		Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
-		assertEquals(0, s.getJobsRunning().size());
-		assertEquals(0, s.getJobsWaiting().size());
+  public void testAbort() throws InterruptedException {
+    Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
+    assertEquals(0, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-		Job job1 = new SleepingJob("job1", null, 500);
-		Job job2 = new SleepingJob("job2", null, 500);
+    Job job1 = new SleepingJob("job1", null, 500);
+    Job job2 = new SleepingJob("job2", null, 500);
 
-		s.submit(job1);
-		s.submit(job2);
+    s.submit(job1);
+    s.submit(job2);
 
-		Thread.sleep(200);
+    Thread.sleep(200);
 
-		job1.abort();
-		job2.abort();
+    job1.abort();
+    job2.abort();
 
-		Thread.sleep(200);
+    Thread.sleep(200);
 
-		assertEquals(Status.ABORT, job1.getStatus());
-		assertEquals(Status.ABORT, job2.getStatus());
+    assertEquals(Status.ABORT, job1.getStatus());
+    assertEquals(Status.ABORT, job2.getStatus());
 
-		assertTrue((500 > (Long)job1.getReturn()));
-		assertEquals(null, job2.getReturn());
-	}
+    assertTrue((500 > (Long) job1.getReturn()));
+    assertEquals(null, job2.getReturn());
+  }
 
-	 public void testRemoveFromWaitingQueue() throws InterruptedException{
-	    Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
-	    assertEquals(0, s.getJobsRunning().size());
-	    assertEquals(0, s.getJobsWaiting().size());
+  public void testRemoveFromWaitingQueue() throws InterruptedException {
+    Scheduler s = schedulerSvc.createOrGetFIFOScheduler("test");
+    assertEquals(0, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-	    Job job1 = new SleepingJob("job1", null, 500);
-	    Job job2 = new SleepingJob("job2", null, 500);
+    Job job1 = new SleepingJob("job1", null, 500);
+    Job job2 = new SleepingJob("job2", null, 500);
 
-	    s.submit(job1);
-	    s.submit(job2);
+    s.submit(job1);
+    s.submit(job2);
 
-	    Thread.sleep(200);
+    Thread.sleep(200);
 
-	    job1.abort();
-	    job2.abort();
+    job1.abort();
+    job2.abort();
 
-	    Thread.sleep(200);
+    Thread.sleep(200);
 
-	    assertEquals(Status.ABORT, job1.getStatus());
-	    assertEquals(Status.ABORT, job2.getStatus());
+    assertEquals(Status.ABORT, job1.getStatus());
+    assertEquals(Status.ABORT, job2.getStatus());
 
-	    assertTrue((500 > (Long)job1.getReturn()));
-	    assertEquals(null, job2.getReturn());
-	  }
-}
\ No newline at end of file
+    assertTrue((500 > (Long) job1.getReturn()));
+    assertEquals(null, job2.getReturn());
+  }
+}
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/ParallelSchedulerTest.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/ParallelSchedulerTest.java
index 682f283fc07..24951424b6f 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/ParallelSchedulerTest.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/ParallelSchedulerTest.java
@@ -18,54 +18,51 @@
 package org.apache.zeppelin.scheduler;
 
 
-import org.apache.zeppelin.scheduler.Job;
-import org.apache.zeppelin.scheduler.Scheduler;
-import org.apache.zeppelin.scheduler.SchedulerFactory;
+import junit.framework.TestCase;
 import org.apache.zeppelin.scheduler.Job.Status;
 
-import junit.framework.TestCase;
 public class ParallelSchedulerTest extends TestCase {
 
-	private SchedulerFactory schedulerSvc;
+  private SchedulerFactory schedulerSvc;
 
-	@Override
-  public void setUp() throws Exception{
-		schedulerSvc = new SchedulerFactory();
-	}
+  @Override
+  public void setUp() throws Exception {
+    schedulerSvc = new SchedulerFactory();
+  }
 
-	@Override
-  public void tearDown(){
+  @Override
+  public void tearDown() {
 
-	}
+  }
 
-	public void testRun() throws InterruptedException{
-		Scheduler s = schedulerSvc.createOrGetParallelScheduler("test", 2);
-		assertEquals(0, s.getJobsRunning().size());
-		assertEquals(0, s.getJobsWaiting().size());
+  public void testRun() throws InterruptedException {
+    Scheduler s = schedulerSvc.createOrGetParallelScheduler("test", 2);
+    assertEquals(0, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-		Job job1 = new SleepingJob("job1", null, 500);
-		Job job2 = new SleepingJob("job2", null, 500);
-		Job job3 = new SleepingJob("job3", null, 500);
+    Job job1 = new SleepingJob("job1", null, 500);
+    Job job2 = new SleepingJob("job2", null, 500);
+    Job job3 = new SleepingJob("job3", null, 500);
 
-		s.submit(job1);
-		s.submit(job2);
-		s.submit(job3);
-		Thread.sleep(200);
+    s.submit(job1);
+    s.submit(job2);
+    s.submit(job3);
+    Thread.sleep(200);
 
-		assertEquals(Status.RUNNING, job1.getStatus());
-		assertEquals(Status.RUNNING, job2.getStatus());
-		assertEquals(Status.PENDING, job3.getStatus());
-		assertEquals(2, s.getJobsRunning().size());
-		assertEquals(1, s.getJobsWaiting().size());
+    assertEquals(Status.RUNNING, job1.getStatus());
+    assertEquals(Status.RUNNING, job2.getStatus());
+    assertEquals(Status.PENDING, job3.getStatus());
+    assertEquals(2, s.getJobsRunning().size());
+    assertEquals(1, s.getJobsWaiting().size());
 
-		Thread.sleep(500);
+    Thread.sleep(500);
 
-		assertEquals(Status.FINISHED, job1.getStatus());
-		assertEquals(Status.FINISHED, job2.getStatus());
-		assertEquals(Status.RUNNING, job3.getStatus());
-		assertEquals(1, s.getJobsRunning().size());
-		assertEquals(0, s.getJobsWaiting().size());
+    assertEquals(Status.FINISHED, job1.getStatus());
+    assertEquals(Status.FINISHED, job2.getStatus());
+    assertEquals(Status.RUNNING, job3.getStatus());
+    assertEquals(1, s.getJobsRunning().size());
+    assertEquals(0, s.getJobsWaiting().size());
 
-	}
+  }
 
 }
diff --git a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java
index 359305871b9..fb788efda89 100644
--- a/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java
+++ b/zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java
@@ -17,75 +17,83 @@
 
 package org.apache.zeppelin.scheduler;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.util.HashMap;
 import java.util.Map;
 
-import org.apache.zeppelin.scheduler.Job;
-import org.apache.zeppelin.scheduler.JobListener;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+/**
+ *
+ */
+public class SleepingJob extends Job {
 
-public class SleepingJob extends Job{
+  private int time;
+  boolean abort = false;
+  private long start;
+  private int count;
 
-	private int time;
-	boolean abort = false;
-	private long start;
-	private int count;
+  static Logger LOGGER = LoggerFactory.getLogger(SleepingJob.class);
+  private Object results;
 
-	static Logger LOGGER = LoggerFactory.getLogger(SleepingJob.class);
-	private Object results;
 
+  public SleepingJob(String jobName, JobListener listener, int time) {
+    super(jobName, listener);
+    this.time = time;
+    count = 0;
+  }
 
-	public SleepingJob(String jobName, JobListener listener, int time){
-		super(jobName, listener);
-		this.time = time;
-		count = 0;
-	}
-	@Override
+  @Override
   public Object jobRun() {
-		start = System.currentTimeMillis();
-		while(abort==false){
-			count++;
-			try {
-				Thread.sleep(10);
-			} catch (InterruptedException e) {
-				LOGGER.error("Exception in MockInterpreterAngular while interpret Thread.sleep", e);
-			}
-			if(System.currentTimeMillis() - start>time) break;
-		}
-		return System.currentTimeMillis()-start;
-	}
-
-	@Override
+    start = System.currentTimeMillis();
+    while (abort == false) {
+      count++;
+      try {
+        Thread.sleep(10);
+      } catch (InterruptedException e) {
+        LOGGER.error("Exception in MockInterpreterAngular while interpret Thread.sleep", e);
+      }
+      if (System.currentTimeMillis() - start > time) {
+        break;
+      }
+    }
+    return System.currentTimeMillis() - start;
+  }
+
+  @Override
   public boolean jobAbort() {
-		abort = true;
-		return true;
-	}
+    abort = true;
+    return true;
+  }
 
-	@Override
-	public void setResult(Object results) {
-		this.results = results;
-	}
+  @Override
+  public void setResult(Object results) {
+    this.results = results;
+  }
 
-	@Override
-	public Object getReturn() {
-		return results;
-	}
+  @Override
+  public Object getReturn() {
+    return results;
+  }
 
-	@Override
+  @Override
   public int progress() {
-		long p = (System.currentTimeMillis() - start)*100 / time;
-		if(p<0) p = 0;
-		if(p>100) p = 100;
-		return (int) p;
-	}
+    long p = (System.currentTimeMillis() - start) * 100 / time;
+    if (p < 0) {
+      p = 0;
+    }
+    if (p > 100) {
+      p = 100;
+    }
+    return (int) p;
+  }
 
-	@Override
+  @Override
   public Map<String, Object> info() {
-		Map<String, Object> i = new HashMap<>();
-		i.put("LoopCount", Integer.toString(count));
-		return i;
-	}
+    Map<String, Object> i = new HashMap<>();
+    i.put("LoopCount", Integer.toString(count));
+    return i;
+  }
 
 
 }
diff --git a/zeppelin-interpreter/src/test/resources/log4j.properties b/zeppelin-interpreter/src/test/resources/log4j.properties
index 6f346916cc9..0e4935c054f 100644
--- a/zeppelin-interpreter/src/test/resources/log4j.properties
+++ b/zeppelin-interpreter/src/test/resources/log4j.properties
@@ -28,4 +28,4 @@ log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c:%L - %m%n
 # Root logger option
 log4j.rootLogger=INFO, stdout
 log4j.logger.org.apache.zeppelin.interpreter=DEBUG
-log4j.logger.org.apache.zeppelin.scheduler=DEBUG
\ No newline at end of file
+log4j.logger.org.apache.zeppelin.scheduler=DEBUG
