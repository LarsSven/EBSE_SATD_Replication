diff --git a/docs/dev/libs/cep.md b/docs/dev/libs/cep.md
index 7e055c3aa7f1a..63f61f7d2bd11 100644
--- a/docs/dev/libs/cep.md
+++ b/docs/dev/libs/cep.md
@@ -335,7 +335,7 @@ pattern.where(event => ... /* some condition */).or(event => ... /* or condition
 </div>
 
 
-**Stop condition:** In case of kleene operators (`oneOrMore()` and `oneOrMore().optional()`) you can
+**Stop condition:** In case of looping patterns (`oneOrMore()` and `oneOrMore().optional()`) you can
 also specify a stop condition, e.g. accept events with value larger than 5 until the sum of values is smaller than 50.
 
 To better understand it, have a look at the following example. Given
@@ -427,7 +427,7 @@ pattern.where(new IterativeCondition<Event>() {
               <tr>
                  <td><strong>until(condition)</strong></td>
                  <td>
-                     <p>Specifies a stop condition for kleene operator. Meaning if event matching the given condition occurs, no more
+                     <p>Specifies a stop condition for looping pattern. Meaning if event matching the given condition occurs, no more
                      events will be accepted into the pattern.</p>
                      <p>Applicable only in conjunction with <code>oneOrMore()</code></p>
                      <p><b>NOTE:</b> It allows for cleaning state for corresponding pattern on event-based condition.</p>
@@ -590,7 +590,7 @@ pattern.where(event => ... /* some condition */)
 <tr>
           <td><strong>until(condition)</strong></td>
           <td>
-              <p>Specifies a stop condition for kleene operator. Meaning if event matching the given condition occurs, no more
+              <p>Specifies a stop condition for looping pattern. Meaning if event matching the given condition occurs, no more
               events will be accepted into the pattern.</p>
               <p>Applicable only in conjunction with <code>oneOrMore()</code></p>
               <p><b>NOTE:</b> It allows for cleaning state for corresponding pattern on event-based condition.</p>
diff --git a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/compiler/NFACompiler.java b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/compiler/NFACompiler.java
index 9e02ddff842e9..7d8ec0650e42e 100644
--- a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/compiler/NFACompiler.java
+++ b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/nfa/compiler/NFACompiler.java
@@ -530,7 +530,7 @@ private State<T> createInitOptionalStateOfZeroOrMore(final State<T> loopingState
 			);
 
 			final State<T> firstState = createState(currentPattern.getName(), State.StateType.Normal);
-			firstState.addProceed(lastSink, BooleanConditions.<T>trueFunction());
+			firstState.addProceed(lastSink, BooleanConditions.trueFunction());
 			firstState.addTake(loopingState, takeCondition);
 
 			final IterativeCondition<T> ignoreFunction = getIgnoreCondition(currentPattern);
@@ -558,9 +558,11 @@ private IterativeCondition<T> extendWithUntilCondition(
 				IterativeCondition<T> untilCondition) {
 			if (untilCondition != null && condition != null) {
 				return new AndCondition<>(new NotCondition<>(untilCondition), condition);
-			} else {
-				return condition;
+			} else if (untilCondition != null) {
+				return new NotCondition<>(untilCondition);
 			}
+
+			return condition;
 		}
 
 		/**
diff --git a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/pattern/Pattern.java b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/pattern/Pattern.java
index 1847009e4ed49..1131318071d12 100644
--- a/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/pattern/Pattern.java
+++ b/flink-libraries/flink-cep/src/main/java/org/apache/flink/cep/pattern/Pattern.java
@@ -200,6 +200,11 @@ public <S extends F> Pattern<T, S> subtype(final Class<S> subtypeClass) {
 	 */
 	public Pattern<T, F> until(IterativeCondition<F> untilCondition) {
 		Preconditions.checkNotNull(untilCondition, "The condition cannot be null");
+
+		if (this.untilCondition != null) {
+			throw new MalformedPatternException("Only one until condition can be applied.");
+		}
+
 		if (!quantifier.hasProperty(Quantifier.QuantifierProperty.LOOPING)) {
 			throw new MalformedPatternException("The until condition is only applicable to looping states.");
 		}
diff --git a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/NFAITCase.java b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/NFAITCase.java
index 506587b5b1ec3..a83eb12874279 100644
--- a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/NFAITCase.java
+++ b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/NFAITCase.java
@@ -83,6 +83,42 @@ public void testNoConditionNFA() {
 		));
 	}
 
+	@Test
+	public void testNoConditionLoopingNFA() {
+		List<StreamRecord<Event>> inputEvents = new ArrayList<>();
+
+		Event a = new Event(40, "a", 1.0);
+		Event b = new Event(41, "b", 2.0);
+		Event c = new Event(42, "c", 3.0);
+		Event d = new Event(43, "d", 4.0);
+		Event e = new Event(44, "e", 5.0);
+
+		inputEvents.add(new StreamRecord<>(a, 1));
+		inputEvents.add(new StreamRecord<>(b, 2));
+		inputEvents.add(new StreamRecord<>(c, 3));
+		inputEvents.add(new StreamRecord<>(d, 4));
+		inputEvents.add(new StreamRecord<>(e, 5));
+
+		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").followedBy("end").oneOrMore();
+
+		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false);
+
+		List<List<Event>> resultingPatterns = feedNFA(inputEvents, nfa);
+
+		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(
+			Lists.newArrayList(a, b, c, d, e),
+			Lists.newArrayList(a, b, c, d),
+			Lists.newArrayList(a, b, c),
+			Lists.newArrayList(a, b),
+			Lists.newArrayList(b, c, d, e),
+			Lists.newArrayList(b, c, d),
+			Lists.newArrayList(b, c),
+			Lists.newArrayList(c, d, e),
+			Lists.newArrayList(c, d),
+			Lists.newArrayList(d, e)
+		));
+	}
+
 	@Test
 	public void testAnyWithNoConditionNFA() {
 		List<StreamRecord<Event>> inputEvents = new ArrayList<>();
diff --git a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/UntilConditionITCase.java b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/UntilConditionITCase.java
index 9ee2992906678..d56e883010674 100644
--- a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/UntilConditionITCase.java
+++ b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/nfa/UntilConditionITCase.java
@@ -424,4 +424,147 @@ public boolean filter(Event value) throws Exception {
 			Lists.newArrayList(startEvent)
 		));
 	}
+
+	@Test
+	public void testUntilConditionWithEmptyWhere() throws Exception {
+		List<StreamRecord<Event>> inputEvents = new ArrayList<>();
+
+		Event startEvent = new Event(40, "c", 1.0);
+		Event middleEvent1 = new Event(41, "a", 2.0);
+		Event middleEvent2 = new Event(42, "a", 3.0);
+		Event middleEvent3 = new Event(40, "d", 1.0);
+		Event breaking = new Event(44, "a", 5.0);
+		Event ignored = new Event(45, "a", 6.0);
+
+		inputEvents.add(new StreamRecord<>(startEvent, 1));
+		inputEvents.add(new StreamRecord<>(middleEvent1, 3));
+		inputEvents.add(new StreamRecord<>(middleEvent2, 4));
+		inputEvents.add(new StreamRecord<>(middleEvent3, 5));
+		inputEvents.add(new StreamRecord<>(breaking, 6));
+		inputEvents.add(new StreamRecord<>(ignored, 7));
+
+		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {
+			private static final long serialVersionUID = 5726188262756267490L;
+
+			@Override
+			public boolean filter(Event value) throws Exception {
+				return value.getName().equals("c");
+			}
+		}).followedBy("middle").oneOrMore().until(UNTIL_CONDITION);
+
+		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false);
+
+		final List<List<Event>> resultingPatterns = feedNFA(inputEvents, nfa);
+
+		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2, middleEvent3),
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2),
+			Lists.newArrayList(startEvent, middleEvent1)
+		));
+
+		assertTrue(nfa.isEmpty());
+	}
+
+	@Test
+	public void testIterativeUntilConditionOneOrMore() throws Exception {
+		List<StreamRecord<Event>> inputEvents = new ArrayList<>();
+
+		Event startEvent = new Event(40, "c", 1.0);
+		Event middleEvent1 = new Event(41, "a", 2.0);
+		Event middleEvent2 = new Event(42, "a", 3.0);
+		Event middleEvent3 = new Event(40, "d", 1.0);
+		Event breaking = new Event(44, "a", 5.0);
+		Event ignored = new Event(45, "a", 6.0);
+
+		inputEvents.add(new StreamRecord<>(startEvent, 1));
+		inputEvents.add(new StreamRecord<>(middleEvent1, 3));
+		inputEvents.add(new StreamRecord<>(middleEvent2, 4));
+		inputEvents.add(new StreamRecord<>(middleEvent3, 5));
+		inputEvents.add(new StreamRecord<>(breaking, 6));
+		inputEvents.add(new StreamRecord<>(ignored, 7));
+
+		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {
+			private static final long serialVersionUID = 5726188262756267490L;
+
+			@Override
+			public boolean filter(Event value) throws Exception {
+				return value.getName().equals("c");
+			}
+		}).followedBy("middle").oneOrMore().until(new IterativeCondition<Event>() {
+			@Override
+			public boolean filter(Event value, Context<Event> ctx) throws Exception {
+
+				double sum = 0;
+				for (Event middle : ctx.getEventsForPattern("middle")) {
+					sum += middle.getPrice();
+				}
+
+				return sum == 6.0;
+			}
+		});
+
+		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false);
+
+		final List<List<Event>> resultingPatterns = feedNFA(inputEvents, nfa);
+
+		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2, middleEvent3),
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2),
+			Lists.newArrayList(startEvent, middleEvent1)
+		));
+
+		assertTrue(nfa.isEmpty());
+	}
+
+	@Test
+	public void testIterativeUntilConditionZeroOrMore() throws Exception {
+		List<StreamRecord<Event>> inputEvents = new ArrayList<>();
+
+		Event startEvent = new Event(40, "c", 1.0);
+		Event middleEvent1 = new Event(41, "a", 2.0);
+		Event middleEvent2 = new Event(42, "a", 3.0);
+		Event middleEvent3 = new Event(40, "d", 1.0);
+		Event breaking = new Event(44, "a", 5.0);
+		Event ignored = new Event(45, "a", 6.0);
+
+		inputEvents.add(new StreamRecord<>(startEvent, 1));
+		inputEvents.add(new StreamRecord<>(middleEvent1, 3));
+		inputEvents.add(new StreamRecord<>(middleEvent2, 4));
+		inputEvents.add(new StreamRecord<>(middleEvent3, 5));
+		inputEvents.add(new StreamRecord<>(breaking, 6));
+		inputEvents.add(new StreamRecord<>(ignored, 7));
+
+		Pattern<Event, ?> pattern = Pattern.<Event>begin("start").where(new SimpleCondition<Event>() {
+			private static final long serialVersionUID = 5726188262756267490L;
+
+			@Override
+			public boolean filter(Event value) throws Exception {
+				return value.getName().equals("c");
+			}
+		}).followedBy("middle").oneOrMore().optional().until(new IterativeCondition<Event>() {
+			@Override
+			public boolean filter(Event value, Context<Event> ctx) throws Exception {
+
+				double sum = 0;
+				for (Event middle : ctx.getEventsForPattern("middle")) {
+					sum += middle.getPrice();
+				}
+
+				return sum == 6.0;
+			}
+		});
+
+		NFA<Event> nfa = NFACompiler.compile(pattern, Event.createTypeSerializer(), false);
+
+		final List<List<Event>> resultingPatterns = feedNFA(inputEvents, nfa);
+
+		compareMaps(resultingPatterns, Lists.<List<Event>>newArrayList(
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2, middleEvent3),
+			Lists.newArrayList(startEvent, middleEvent1, middleEvent2),
+			Lists.newArrayList(startEvent, middleEvent1),
+			Lists.newArrayList(startEvent)
+		));
+
+		assertTrue(nfa.isEmpty());
+	}
 }
diff --git a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/pattern/PatternTest.java b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/pattern/PatternTest.java
index 603e06f6ba4b6..999e5f3c44a1b 100644
--- a/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/pattern/PatternTest.java
+++ b/flink-libraries/flink-cep/src/test/java/org/apache/flink/cep/pattern/PatternTest.java
@@ -269,6 +269,12 @@ public void testUntilCannotBeAppliedToSingleton() throws Exception {
 		Pattern.begin("start").where(dummyCondition()).until(dummyCondition());
 	}
 
+	@Test(expected = MalformedPatternException.class)
+	public void testUntilCannotBeAppliedTwice() throws Exception {
+
+		Pattern.begin("start").where(dummyCondition()).until(dummyCondition()).until(dummyCondition());
+	}
+
 	private SimpleCondition<Object> dummyCondition() {
 		return new SimpleCondition<Object>() {
 			private static final long serialVersionUID = -2205071036073867531L;
