diff --git a/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/client/QueryableStateClient.java b/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/client/QueryableStateClient.java
index aca0299f01ea5..470c7acf9d72c 100644
--- a/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/client/QueryableStateClient.java
+++ b/flink-queryable-state/flink-queryable-state-client-java/src/main/java/org/apache/flink/queryablestate/client/QueryableStateClient.java
@@ -32,6 +32,7 @@
 import org.apache.flink.api.common.typeinfo.TypeHint;
 import org.apache.flink.api.common.typeinfo.TypeInformation;
 import org.apache.flink.api.common.typeutils.TypeSerializer;
+import org.apache.flink.api.java.tuple.Tuple2;
 import org.apache.flink.queryablestate.FutureUtils;
 import org.apache.flink.queryablestate.client.state.ImmutableAggregatingState;
 import org.apache.flink.queryablestate.client.state.ImmutableFoldingState;
@@ -57,6 +58,8 @@
 import java.net.UnknownHostException;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 /**
  * Client for querying Flink's managed state.
@@ -80,15 +83,14 @@ public class QueryableStateClient {
 	private static final Logger LOG = LoggerFactory.getLogger(QueryableStateClient.class);
 
 	private static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =
-		org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap
-			.<Class<? extends StateDescriptor>, StateFactory>builder()
-			.put(ValueStateDescriptor.class, ImmutableValueState::createState)
-			.put(ListStateDescriptor.class, ImmutableListState::createState)
-			.put(MapStateDescriptor.class, ImmutableMapState::createState)
-			.put(AggregatingStateDescriptor.class, ImmutableAggregatingState::createState)
-			.put(ReducingStateDescriptor.class, ImmutableReducingState::createState)
-			.put(FoldingStateDescriptor.class, ImmutableFoldingState::createState)
-			.build();
+		Stream.of(
+			Tuple2.of(ValueStateDescriptor.class, (StateFactory) ImmutableValueState::createState),
+			Tuple2.of(ListStateDescriptor.class, (StateFactory) ImmutableListState::createState),
+			Tuple2.of(MapStateDescriptor.class, (StateFactory) ImmutableMapState::createState),
+			Tuple2.of(AggregatingStateDescriptor.class, (StateFactory) ImmutableAggregatingState::createState),
+			Tuple2.of(ReducingStateDescriptor.class, (StateFactory) ImmutableReducingState::createState),
+			Tuple2.of(FoldingStateDescriptor.class, (StateFactory) ImmutableFoldingState::createState)
+		).collect(Collectors.toMap(t -> t.f0, t -> t.f1));
 
 	private interface StateFactory {
 		<T, S extends State> S createState(StateDescriptor<S, T> stateDesc, byte[] serializedState) throws Exception;
@@ -268,21 +270,24 @@ private <K, N, S extends State, V> CompletableFuture<S> getKvState(
 			return FutureUtils.getFailedFuture(e);
 		}
 
-		return getKvState(jobId, queryableStateName, key.hashCode(), serializedKeyAndNamespace).thenApply(
-				stateResponse -> {
-					try {
-						StateFactory stateFactory = STATE_FACTORIES
-							.get(stateDescriptor.getClass());
-						if (stateFactory == null) {
-							String message = String.format("State %s is not supported by %s",
-								stateDescriptor.getClass(), this.getClass());
-							throw new FlinkRuntimeException(message);
-						}
-						return stateFactory.createState(stateDescriptor, stateResponse.getContent());
-					} catch (Exception e) {
-						throw new FlinkRuntimeException(e);
-					}
-				});
+		return getKvState(jobId, queryableStateName, key.hashCode(), serializedKeyAndNamespace)
+			.thenApply(stateResponse -> createState(stateResponse, stateDescriptor));
+	}
+
+	private <T, S extends State> S createState(
+		KvStateResponse stateResponse,
+		StateDescriptor<S, T> stateDescriptor) {
+		StateFactory stateFactory = STATE_FACTORIES.get(stateDescriptor.getClass());
+		if (stateFactory == null) {
+			String message = String.format("State %s is not supported by %s",
+				stateDescriptor.getClass(), this.getClass());
+			throw new FlinkRuntimeException(message);
+		}
+		try {
+			return stateFactory.createState(stateDescriptor, stateResponse.getContent());
+		} catch (Exception e) {
+			throw new FlinkRuntimeException(e);
+		}
 	}
 
 	/**
diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapKeyedStateBackend.java b/flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapKeyedStateBackend.java
index 1d3fad19c53fc..82ce5847627a1 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapKeyedStateBackend.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/state/heap/HeapKeyedStateBackend.java
@@ -93,15 +93,14 @@
 	private static final Logger LOG = LoggerFactory.getLogger(HeapKeyedStateBackend.class);
 
 	private static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =
-		org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap
-			.<Class<? extends StateDescriptor>, StateFactory>builder()
-			.put(ValueStateDescriptor.class, HeapValueState::create)
-			.put(ListStateDescriptor.class, HeapListState::create)
-			.put(MapStateDescriptor.class, HeapMapState::create)
-			.put(AggregatingStateDescriptor.class, HeapAggregatingState::create)
-			.put(ReducingStateDescriptor.class, HeapReducingState::create)
-			.put(FoldingStateDescriptor.class, HeapFoldingState::create)
-			.build();
+		Stream.of(
+			Tuple2.of(ValueStateDescriptor.class, (StateFactory) HeapValueState::create),
+			Tuple2.of(ListStateDescriptor.class, (StateFactory) HeapListState::create),
+			Tuple2.of(MapStateDescriptor.class, (StateFactory) HeapMapState::create),
+			Tuple2.of(AggregatingStateDescriptor.class, (StateFactory) HeapAggregatingState::create),
+			Tuple2.of(ReducingStateDescriptor.class, (StateFactory) HeapReducingState::create),
+			Tuple2.of(FoldingStateDescriptor.class, (StateFactory) HeapFoldingState::create)
+		).collect(Collectors.toMap(t -> t.f0, t -> t.f1));
 
 	private interface StateFactory {
 		<K, N, SV, S extends State, IS extends S> IS createState(
diff --git a/flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackend.java b/flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackend.java
index e5a08dbca60d3..e5f443a95ce8b 100644
--- a/flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackend.java
+++ b/flink-state-backends/flink-statebackend-rocksdb/src/main/java/org/apache/flink/contrib/streaming/state/RocksDBKeyedStateBackend.java
@@ -128,6 +128,7 @@
 import java.util.UUID;
 import java.util.concurrent.FutureTask;
 import java.util.concurrent.RunnableFuture;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
@@ -152,15 +153,14 @@
 	private static final String SST_FILE_SUFFIX = ".sst";
 
 	private static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =
-		org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap
-			.<Class<? extends StateDescriptor>, StateFactory>builder()
-			.put(ValueStateDescriptor.class, RocksDBValueState::create)
-			.put(ListStateDescriptor.class, RocksDBListState::create)
-			.put(MapStateDescriptor.class, RocksDBMapState::create)
-			.put(AggregatingStateDescriptor.class, RocksDBAggregatingState::create)
-			.put(ReducingStateDescriptor.class, RocksDBReducingState::create)
-			.put(FoldingStateDescriptor.class, RocksDBFoldingState::create)
-			.build();
+		Stream.of(
+			Tuple2.of(ValueStateDescriptor.class, (StateFactory) RocksDBValueState::create),
+			Tuple2.of(ListStateDescriptor.class, (StateFactory) RocksDBListState::create),
+			Tuple2.of(MapStateDescriptor.class, (StateFactory) RocksDBMapState::create),
+			Tuple2.of(AggregatingStateDescriptor.class, (StateFactory) RocksDBAggregatingState::create),
+			Tuple2.of(ReducingStateDescriptor.class, (StateFactory) RocksDBReducingState::create),
+			Tuple2.of(FoldingStateDescriptor.class, (StateFactory) RocksDBFoldingState::create)
+		).collect(Collectors.toMap(t -> t.f0, t -> t.f1));
 
 	private interface StateFactory {
 		<K, N, SV, S extends State, IS extends S> IS createState(
