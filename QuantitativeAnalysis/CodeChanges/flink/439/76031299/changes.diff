diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/SetupInfoServlet.java b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/SetupInfoServlet.java
index f9f20c8718272..0b56dc8dbe435 100644
--- a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/SetupInfoServlet.java
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/SetupInfoServlet.java
@@ -26,6 +26,7 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Set;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
@@ -35,11 +36,11 @@
 import akka.actor.ActorRef;
 import akka.pattern.Patterns;
 import akka.util.Timeout;
-import org.apache.flink.configuration.ConfigConstants;
 import org.apache.flink.configuration.Configuration;
 import org.apache.flink.runtime.instance.Instance;
 
 import org.apache.flink.runtime.instance.InstanceID;
+import org.apache.flink.runtime.jobmanager.web.util.DefaultConfigKeyValues;
 import org.apache.flink.runtime.messages.JobManagerMessages;
 import org.apache.flink.runtime.messages.JobManagerMessages.RegisteredTaskManagers;
 import org.apache.flink.runtime.messages.JobManagerMessages.RequestStackTrace;
@@ -99,16 +100,73 @@ private void writeGlobalConfiguration(HttpServletResponse resp) throws IOExcepti
 		List<String> list = new ArrayList<String>(keys);
 		Collections.sort(list);
 
+		Map<String, Object> defaultValues = DefaultConfigKeyValues.getDefaultConfig(configuration);
 		JSONObject obj = new JSONObject();
-		for (String k : list) {
-			try {
+		JSONObject userObj = new JSONObject();
+		JSONObject defaultObj = new JSONObject();
 
-				obj.put(k, getValue(k));
-			} catch (JSONException e) {
-				LOG.warn("Json object creation failed", e);
+		try {
+			for (String k : list) {
+				String userValue = configuration.getString(k, "");
+
+				if (DefaultConfigKeyValues.INT_FIELD_KEYS.contains(k)) {
+					int defaultValue = (Integer)defaultValues.get(k);
+					int acturalValue = configuration.getInteger(k, defaultValue);
+					if (Integer.toString(acturalValue).equals(userValue)) {
+						userObj.put(k, userValue);
+					} else {
+						defaultObj.put(k, defaultValue);
+					}
+				} else if (DefaultConfigKeyValues.BOOLEAN_FIELD_KEYS.contains(k)) {
+					boolean defaultValue = (Boolean)defaultValues.get(k);
+					boolean actualValue = configuration.getBoolean(k, defaultValue);
+					if (Boolean.toString(actualValue).equals(userValue)) {
+						userObj.put(k, userValue);
+					} else {
+						defaultObj.put(k, defaultValue);
+					}
+				} else if (DefaultConfigKeyValues.FLOAT_FIELD_KEYS.contains(k)) {
+					float defaultValue = (Float)defaultValues.get(k);
+					float actualValue = configuration.getFloat(k, defaultValue);
+					if (Float.toString(actualValue).equals(userValue)) {
+						userObj.put(k, userValue);
+					} else {
+						defaultObj.put(k, defaultValue);
+					}
+				} else if (DefaultConfigKeyValues.DOUBLE_FIELD_KEYS.contains(k)) {
+					double defaultValue = (Double)defaultValues.get(k);
+					double actualValue = configuration.getDouble(k, defaultValue);
+					if (Double.toString(actualValue).equals(userValue)) {
+						userObj.put(k, userValue);
+					} else {
+						defaultObj.put(k, defaultValue);
+					}
+				} else if (DefaultConfigKeyValues.LONG_FIELD_KEYS.contains(k)) {
+					long defaultValue = (Long)defaultValues.get(k);
+					long acturalValue = configuration.getLong(k, defaultValue);
+					if (Long.toString(acturalValue).equals(userValue)) {
+						userObj.put(k, userValue);
+					} else {
+						defaultObj.put(k, defaultValue);
+					}
+				} else {
+					userObj.put(k, configuration.getString(k, ""));
+				}
 			}
-		}
 
+			List<String> keyList = new ArrayList<String>();
+			keyList.addAll(defaultValues.keySet());
+			Collections.sort(keyList);
+			for (String k: keyList) {
+				if (!list.contains(k)) {
+					defaultObj.put(k, defaultValues.get(k));
+				}
+			}
+			obj.put("user", userObj);
+			obj.put("default", defaultObj);
+		} catch (JSONException e) {
+			LOG.warn("Json object creation failed", e);
+		}
 		PrintWriter w = resp.getWriter();
 		w.write(obj.toString());
 	}
@@ -213,77 +271,4 @@ public int compare(Instance o1, Instance o2) {
 		return o1.getInstanceConnectionInfo().compareTo(o2.getInstanceConnectionInfo());
 		}
 	};
-
-	private Object getValue(String key) {
-		if (key.equals(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
-		}
-		if (key.equals(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT);
-		}
-		if (key.equals(ConfigConstants.JOB_MANAGER_WEB_ARCHIVE_COUNT)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_JOB_MANAGER_WEB_ARCHIVE_COUNT);
-		}
-		if (key.equals(ConfigConstants.WEB_FRONTEND_PORT_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_WEBCLIENT_PORT);
-		}
-		if (key.equals(ConfigConstants.JOBCLIENT_POLLING_INTERVAL_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_JOBCLIENT_POLLING_INTERVAL);
-		}
-		if (key.equals(ConfigConstants.JOB_MANAGER_DEAD_TASKMANAGER_TIMEOUT_KEY)) {
-			return configuration.getLong(key, ConfigConstants.DEFAULT_JOB_MANAGER_DEAD_TASKMANAGER_TIMEOUT);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_TASK_MANAGER_IPC_PORT);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS)) {
-			return configuration.getInteger(key, 1);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_NETWORK_BUFFER_SIZE_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_BUFFER_SIZE);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY)) {
-			return configuration.getInteger(key, -1);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY)) {
-			return configuration.getFloat(key, ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD)) {
-			return configuration.getBoolean(key, ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD);
-		}
-		if (key.equals(ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS)) {
-			return configuration.getLong(key, ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS);
-		}
-		if (key.equals(ConfigConstants.DEFAULT_SPILLING_MAX_FAN_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_SPILLING_MAX_FAN);
-		}
-		if (key.equals(ConfigConstants.DEFAULT_SORT_SPILLING_THRESHOLD_KEY)) {
-			return configuration.getFloat(key, ConfigConstants.DEFAULT_SORT_SPILLING_THRESHOLD);
-		}
-		if (key.equals(ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY)) {
-			return configuration.getBoolean(key, ConfigConstants.DEFAULT_FILESYSTEM_ALWAYS_CREATE_DIRECTORY);
-		}
-		if (key.equals(ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY)) {
-			return configuration.getBoolean(key, ConfigConstants.DEFAULT_FILESYSTEM_OVERWRITE);
-		}
-		if (key.equals(ConfigConstants.DEFAULT_PARALLELIZATION_DEGREE_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_PARALLELIZATION_DEGREE);
-		}
-		if (key.equals(ConfigConstants.DELIMITED_FORMAT_MAX_LINE_SAMPLES_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MAX_LINE_SAMPLES);
-		}
-		if (key.equals(ConfigConstants.DELIMITED_FORMAT_MIN_LINE_SAMPLES_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MIN_LINE_SAMPLES);
-		}
-		if (key.equals(ConfigConstants.DELIMITED_FORMAT_MAX_SAMPLE_LENGTH_KEY)) {
-			return configuration.getInteger(key, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MAX_SAMPLE_LEN);
-		}
-		return configuration.getString(key, "");
-	}
 }
diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/util/DefaultConfigKeyValues.java b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/util/DefaultConfigKeyValues.java
new file mode 100644
index 0000000000000..b937e6c257945
--- /dev/null
+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/jobmanager/web/util/DefaultConfigKeyValues.java
@@ -0,0 +1,152 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.flink.runtime.jobmanager.web.util;
+
+import org.apache.flink.configuration.ConfigConstants;
+import org.apache.flink.configuration.Configuration;
+import scala.concurrent.duration.Duration;
+
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.HashMap;
+
+public final class DefaultConfigKeyValues {
+
+	public static final Set<String> INT_FIELD_KEYS = new HashSet<String>(Arrays.asList(
+		ConfigConstants.DEFAULT_PARALLELIZATION_DEGREE_KEY,
+		ConfigConstants.DEFAULT_EXECUTION_RETRIES_KEY,
+		ConfigConstants.JOB_MANAGER_IPC_PORT_KEY,
+		ConfigConstants.JOB_MANAGER_DEAD_TASKMANAGER_TIMEOUT_KEY,
+		ConfigConstants.BLOB_FETCH_RETRIES_KEY,
+		ConfigConstants.BLOB_FETCH_CONCURRENT_KEY,
+		ConfigConstants.BLOB_FETCH_BACKLOG_KEY,
+		ConfigConstants.TASK_MANAGER_IPC_PORT_KEY,
+		ConfigConstants.TASK_MANAGER_DATA_PORT_KEY,
+		ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY,
+		ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY,
+		ConfigConstants.TASK_MANAGER_NETWORK_BUFFER_SIZE_KEY,
+		ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS,
+		ConfigConstants.DEFAULT_SPILLING_MAX_FAN_KEY,
+		ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY,
+		ConfigConstants.JOBCLIENT_POLLING_INTERVAL_KEY,
+		ConfigConstants.YARN_HEAP_LIMIT_CAP,
+		ConfigConstants.DELIMITED_FORMAT_MAX_LINE_SAMPLES_KEY,
+		ConfigConstants.DELIMITED_FORMAT_MIN_LINE_SAMPLES_KEY,
+		ConfigConstants.DELIMITED_FORMAT_MAX_SAMPLE_LENGTH_KEY,
+		ConfigConstants.JOB_MANAGER_WEB_PORT_KEY,
+		ConfigConstants.JOB_MANAGER_WEB_ARCHIVE_COUNT,
+		ConfigConstants.WEB_FRONTEND_PORT_KEY,
+		ConfigConstants.AKKA_DISPATCHER_THROUGHPUT,
+		ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER
+	));
+
+	public static final Set<String> LONG_FIELD_KEYS = new HashSet<String>(Arrays.asList(
+		ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL,
+		ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS
+	));
+
+	public static final Set<String> FLOAT_FIELD_KEYS = new HashSet<String>(Arrays.asList(
+		ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY,
+		ConfigConstants.DEFAULT_SORT_SPILLING_THRESHOLD_KEY,
+		ConfigConstants.YARN_HEAP_CUTOFF_RATIO
+	));
+
+	public static final Set<String> DOUBLE_FIELD_KEYS = new HashSet<String>(Arrays.asList(
+		ConfigConstants.AKKA_WATCH_THRESHOLD,
+		ConfigConstants.AKKA_WATCH_THRESHOLD
+	));
+
+	public static final Set<String> BOOLEAN_FIELD_KEYS = new HashSet<String>(Arrays.asList(
+		ConfigConstants.TASK_MANAGER_MEMORY_LAZY_ALLOCATION_KEY,
+		ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD,
+		ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY,
+		ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY,
+		ConfigConstants.AKKA_LOG_LIFECYCLE_EVENTS
+	));
+
+	public static Map<String, Object> getDefaultConfig(Configuration user) {
+		Map<String, Object> config = new HashMap<String, Object>();
+		config.put(ConfigConstants.DEFAULT_PARALLELIZATION_DEGREE_KEY, ConfigConstants.DEFAULT_PARALLELIZATION_DEGREE);
+		config.put(ConfigConstants.DEFAULT_EXECUTION_RETRIES_KEY, ConfigConstants.DEFAULT_EXECUTION_RETRIES);
+		config.put(ConfigConstants.JOB_MANAGER_IPC_ADDRESS_KEY, null);
+		config.put(ConfigConstants.JOB_MANAGER_IPC_PORT_KEY, ConfigConstants.DEFAULT_JOB_MANAGER_IPC_PORT);
+		config.put(ConfigConstants.JOB_MANAGER_DEAD_TASKMANAGER_TIMEOUT_KEY, ConfigConstants.DEFAULT_JOB_MANAGER_DEAD_TASKMANAGER_TIMEOUT);
+		config.put(ConfigConstants.BLOB_STORAGE_DIRECTORY_KEY, null);
+		config.put(ConfigConstants.BLOB_FETCH_RETRIES_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_RETRIES);
+		config.put(ConfigConstants.BLOB_FETCH_CONCURRENT_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_CONCURRENT);
+		config.put(ConfigConstants.BLOB_FETCH_BACKLOG_KEY, ConfigConstants.DEFAULT_BLOB_FETCH_BACKLOG);
+		config.put(ConfigConstants.LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL, ConfigConstants.DEFAULT_LIBRARY_CACHE_MANAGER_CLEANUP_INTERVAL);
+		config.put(ConfigConstants.TASK_MANAGER_IPC_PORT_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_IPC_PORT);
+		config.put(ConfigConstants.TASK_MANAGER_DATA_PORT_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_DATA_PORT);
+		config.put(ConfigConstants.TASK_MANAGER_TMP_DIR_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_TMP_PATH);
+		config.put(ConfigConstants.TASK_MANAGER_MEMORY_SIZE_KEY, -1);
+		config.put(ConfigConstants.TASK_MANAGER_MEMORY_FRACTION_KEY, ConfigConstants.DEFAULT_MEMORY_MANAGER_MEMORY_FRACTION);
+		config.put(ConfigConstants.TASK_MANAGER_MEMORY_LAZY_ALLOCATION_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_MEMORY_LAZY_ALLOCATION);
+		config.put(ConfigConstants.TASK_MANAGER_NETWORK_NUM_BUFFERS_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_NUM_BUFFERS);
+		config.put(ConfigConstants.TASK_MANAGER_NETWORK_BUFFER_SIZE_KEY, ConfigConstants.DEFAULT_TASK_MANAGER_NETWORK_BUFFER_SIZE);
+		config.put(ConfigConstants.TASK_MANAGER_NUM_TASK_SLOTS, 1);
+		config.put(ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD, ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_START_LOG_THREAD);
+		config.put(ConfigConstants.TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS, ConfigConstants.DEFAULT_TASK_MANAGER_DEBUG_MEMORY_USAGE_LOG_INTERVAL_MS);
+		config.put(ConfigConstants.TASK_MANAGER_MAX_REGISTRATION_DURATION, ConfigConstants.DEFAULT_TASK_MANAGER_MAX_REGISTRATION_DURATION);
+		config.put(ConfigConstants.DEFAULT_SPILLING_MAX_FAN_KEY, ConfigConstants.DEFAULT_SPILLING_MAX_FAN);
+		config.put(ConfigConstants.DEFAULT_SORT_SPILLING_THRESHOLD_KEY, ConfigConstants.DEFAULT_SORT_SPILLING_THRESHOLD);
+		config.put(ConfigConstants.FS_STREAM_OPENING_TIMEOUT_KEY, ConfigConstants.DEFAULT_FS_STREAM_OPENING_TIMEOUT);
+		config.put(ConfigConstants.JOBCLIENT_POLLING_INTERVAL_KEY, ConfigConstants.DEFAULT_JOBCLIENT_POLLING_INTERVAL);
+		config.put(ConfigConstants.YARN_HEAP_CUTOFF_RATIO, 0.8f);
+		config.put(ConfigConstants.YARN_HEAP_LIMIT_CAP, 500);
+		config.put(ConfigConstants.HDFS_DEFAULT_CONFIG, null);
+		config.put(ConfigConstants.HDFS_SITE_CONFIG, null);
+		config.put(ConfigConstants.PATH_HADOOP_CONFIG, null);
+		config.put(ConfigConstants.FILESYSTEM_DEFAULT_OVERWRITE_KEY, ConfigConstants.DEFAULT_FILESYSTEM_OVERWRITE);
+		config.put(ConfigConstants.FILESYSTEM_OUTPUT_ALWAYS_CREATE_DIRECTORY_KEY, ConfigConstants.DEFAULT_FILESYSTEM_ALWAYS_CREATE_DIRECTORY);
+		config.put(ConfigConstants.DELIMITED_FORMAT_MAX_LINE_SAMPLES_KEY, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MAX_LINE_SAMPLES);
+		config.put(ConfigConstants.DELIMITED_FORMAT_MIN_LINE_SAMPLES_KEY, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MIN_LINE_SAMPLES);
+		config.put(ConfigConstants.DELIMITED_FORMAT_MAX_SAMPLE_LENGTH_KEY, ConfigConstants.DEFAULT_DELIMITED_FORMAT_MAX_SAMPLE_LEN);
+		config.put(ConfigConstants.JOB_MANAGER_WEB_PORT_KEY, ConfigConstants.DEFAULT_JOB_MANAGER_WEB_FRONTEND_PORT);
+		config.put(ConfigConstants.JOB_MANAGER_WEB_ACCESS_FILE_KEY, null);
+		config.put(ConfigConstants.JOB_MANAGER_WEB_ARCHIVE_COUNT, ConfigConstants.DEFAULT_JOB_MANAGER_WEB_ARCHIVE_COUNT);
+		config.put(ConfigConstants.JOB_MANAGER_WEB_LOG_PATH_KEY, user.getString(ConfigConstants.FLINK_BASE_DIR_PATH_KEY, "") + "/log");
+		config.put(ConfigConstants.WEB_FRONTEND_PORT_KEY, ConfigConstants.DEFAULT_WEBCLIENT_PORT);
+		config.put(ConfigConstants.WEB_TMP_DIR_KEY, ConfigConstants.DEFAULT_WEB_TMP_DIR);
+		config.put(ConfigConstants.WEB_JOB_UPLOAD_DIR_KEY, ConfigConstants.DEFAULT_WEB_JOB_STORAGE_DIR);
+		config.put(ConfigConstants.WEB_PLAN_DUMP_DIR_KEY, ConfigConstants.DEFAULT_WEB_PLAN_DUMP_DIR);
+		config.put(ConfigConstants.WEB_ACCESS_FILE_KEY, ConfigConstants.DEFAULT_WEB_ACCESS_FILE_PATH);
+		config.put(ConfigConstants.AKKA_ASK_TIMEOUT, ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT);
+		Duration askTimeout = Duration.apply(user.getString(ConfigConstants.AKKA_ASK_TIMEOUT, ConfigConstants.DEFAULT_AKKA_ASK_TIMEOUT));
+		config.put(ConfigConstants.AKKA_STARTUP_TIMEOUT, askTimeout.toString());
+		config.put(ConfigConstants.AKKA_TRANSPORT_HEARTBEAT_INTERVAL, ConfigConstants.DEFAULT_AKKA_TRANSPORT_HEARTBEAT_INTERVAL);
+		config.put(ConfigConstants.AKKA_TRANSPORT_HEARTBEAT_PAUSE, ConfigConstants.DEFAULT_AKKA_TRANSPORT_HEARTBEAT_PAUSE);
+		config.put(ConfigConstants.AKKA_TRANSPORT_THRESHOLD, ConfigConstants.DEFAULT_AKKA_TRANSPORT_THRESHOLD);
+		config.put(ConfigConstants.AKKA_WATCH_HEARTBEAT_INTERVAL, askTimeout.div(10).toString());
+		config.put(ConfigConstants.AKKA_WATCH_HEARTBEAT_PAUSE, askTimeout.toString());
+		config.put(ConfigConstants.AKKA_WATCH_THRESHOLD, ConfigConstants.DEFAULT_AKKA_WATCH_THRESHOLD);
+		config.put(ConfigConstants.AKKA_TCP_TIMEOUT, askTimeout.toString());
+		config.put(ConfigConstants.AKKA_FRAMESIZE, ConfigConstants.DEFAULT_AKKA_FRAMESIZE);
+		config.put(ConfigConstants.AKKA_DISPATCHER_THROUGHPUT, ConfigConstants.DEFAULT_AKKA_DISPATCHER_THROUGHPUT);
+		config.put(ConfigConstants.AKKA_LOG_LIFECYCLE_EVENTS, ConfigConstants.DEFAULT_AKKA_LOG_LIFECYCLE_EVENTS);
+		config.put(ConfigConstants.AKKA_LOOKUP_TIMEOUT, ConfigConstants.DEFAULT_AKKA_LOOKUP_TIMEOUT);
+		config.put(ConfigConstants.FLINK_BASE_DIR_PATH_KEY, "");
+		config.put(ConfigConstants.FLINK_JVM_OPTIONS, "");
+		config.put(ConfigConstants.LOCAL_INSTANCE_MANAGER_NUMBER_TASK_MANAGER, 1);
+
+		return config;
+	}
+}
diff --git a/flink-runtime/src/main/resources/web-docs-infoserver/configuration.html b/flink-runtime/src/main/resources/web-docs-infoserver/configuration.html
index 90d2cfcdb4f5d..a251adea8b952 100644
--- a/flink-runtime/src/main/resources/web-docs-infoserver/configuration.html
+++ b/flink-runtime/src/main/resources/web-docs-infoserver/configuration.html
@@ -107,11 +107,16 @@ <h1>Configuration <small>Overview about the configuration settings of Flink</sma
               <li class="active"><i class="icon-file-alt"></i> Configuration</li>
             </ol>
           </div>
-          <div class="col-lg-12"><h3>Global Configuration</h2></div>
+          <div class="col-lg-12"><h3>Global Configuration - User</h2></div>
 		  <div class="col-lg-12">
-	          <div class="table-responsive" id="confTable">
+	          <div class="table-responsive" id="confTable1">
 	          </div>
 	      </div>
+          <div class="col-lg-12"><h3>Global Configuration - Default</h2></div>
+          <div class="col-lg-12">
+            <div class="table-responsive" id="confTable2">
+            </div>
+          </div>
         </div><!-- /.row -->
 
       </div><!-- /#page-wrapper -->
diff --git a/flink-runtime/src/main/resources/web-docs-infoserver/js/configuration.js b/flink-runtime/src/main/resources/web-docs-infoserver/js/configuration.js
index 63bac4242452a..37ea62c3f2238 100644
--- a/flink-runtime/src/main/resources/web-docs-infoserver/js/configuration.js
+++ b/flink-runtime/src/main/resources/web-docs-infoserver/js/configuration.js
@@ -27,14 +27,25 @@ $(document).ready(function() {
  * Initializes global config table
  */
 function loadConfigTable(json) {
-	$("#confTable").empty();
+	$("#confTable1").empty();
 	var table = "<table class=\"table table-bordered table-hover table-striped\">";
-	table += "<tr><th>Property</th><th>Value</th></tr>";
-	for (var key in json) {
-		if (json.hasOwnProperty(key)) {
-			table += "<tr><td>"+key+"</td><td>"+json[key]+"</td></tr>";
+	table += "<tr><th class=\"col-lg-4\">Property</th><th>Value</th></tr>";
+	for (var key in json.user) {
+		if (json.user.hasOwnProperty(key)) {
+			table += "<tr><td>"+key+"</td><td>"+json.user[key]+"</td></tr>";
 		}
 	}
 	table += "</table>";
-	$("#confTable").append(table);
+	$("#confTable1").append(table);
+
+	$("#confTable2").empty();
+	var table = "<table class=\"table table-bordered table-hover table-striped\">";
+	table += "<tr><th class=\"col-lg-4\">Property</th><th>Value</th></tr>";
+	for (var key in json.default) {
+		if (json.default.hasOwnProperty(key)) {
+			table += "<tr><td>"+key+"</td><td>"+json.default[key]+"</td></tr>";
+		}
+	}
+	table += "</table>";
+	$("#confTable2").append(table);
 }
diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/web/ConfigurationViewTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/web/ConfigurationViewTest.java
new file mode 100644
index 0000000000000..05b8f162baa7c
--- /dev/null
+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/web/ConfigurationViewTest.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.flink.runtime.jobmanager.web;
+
+import org.apache.flink.configuration.ConfigConstants;
+import org.apache.flink.configuration.Configuration;
+import org.apache.flink.runtime.jobmanager.web.util.DefaultConfigKeyValues;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+public class ConfigurationViewTest {
+
+	@Test
+	public void testCompleteness(){
+
+		//these keys are never used.
+		Set<String> unused = new HashSet<String>(Arrays.asList("TASK_MANAGER_NET_NUM_IN_THREADS_KEY",
+			"TASK_MANAGER_NET_NUM_OUT_THREADS_KEY",
+			"TASK_MANAGER_NET_NETTY_LOW_WATER_MARK",
+			"TASK_MANAGER_NET_NETTY_HIGH_WATER_MARK",
+			"TASK_MANAGER_HEARTBEAT_INTERVAL_KEY"));
+
+		Map<String, Object> pairs = DefaultConfigKeyValues.getDefaultConfig(new Configuration());
+
+		for (Field f : ConfigConstants.class.getFields()) {
+			String name = f.getName();
+			if (!name.startsWith("DEFAULT") && !unused.contains(name)) {
+				try {
+					String value = (String)f.get(null);
+					if (!pairs.keySet().contains(value)) {
+						Assert.fail(value + " is not included in the configuration overview.");
+					}
+				} catch (IllegalAccessException iae) {
+					//pass
+				}
+			}
+		}
+	}
+}
