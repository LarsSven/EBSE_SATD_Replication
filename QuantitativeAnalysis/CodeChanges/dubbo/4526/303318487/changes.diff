diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
index 953d8541f00..caa561bd3a4 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/extension/ExtensionLoader.java
@@ -20,7 +20,15 @@
 import org.apache.dubbo.common.extension.support.ActivateComparator;
 import org.apache.dubbo.common.logger.Logger;
 import org.apache.dubbo.common.logger.LoggerFactory;
-import org.apache.dubbo.common.utils.*;
+import org.apache.dubbo.common.utils.ArrayUtils;
+import org.apache.dubbo.common.utils.ClassUtils;
+import org.apache.dubbo.common.utils.CollectionUtils;
+import org.apache.dubbo.common.utils.ConcurrentHashSet;
+import org.apache.dubbo.common.utils.ConfigUtils;
+import org.apache.dubbo.common.utils.Holder;
+import org.apache.dubbo.common.utils.ReflectUtils;
+import org.apache.dubbo.common.utils.StringUtils;
+import org.apache.dubbo.common.utils.MethodUtils;
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
@@ -543,7 +551,7 @@ private T injectExtension(T instance) {
         try {
             if (objectFactory != null) {
                 for (Method method : instance.getClass().getMethods()) {
-                    if (MethodUtils.isSetter2(method)) {
+                    if (MethodUtils.isSetter(method)) {
                         /**
                          * Check {@link DisableInject} to see if we need auto injection for this property
                          */
diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java
index fe3a21586f9..d927decfd96 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/ClassHelper.java
@@ -116,11 +116,11 @@ public static String simpleClassName(Class<?> clazz) {
     }
 
     /**
-     * @see org.apache.dubbo.common.utils.MethodUtils#isSetter(Method)
+     * @see org.apache.dubbo.common.utils.MethodUtils#isPrimitiveSetter(Method)
      * @deprecated Replace to <code>MethodUtils#isSetter(Method)</code>
      */
     public static boolean isSetter(Method method) {
-        return MethodUtils.isSetter(method);
+        return MethodUtils.isPrimitiveSetter(method);
     }
 
     /**
diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodUtils.java b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodUtils.java
index 71b45140f9a..3c0b6dc129f 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodUtils.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/MethodUtils.java
@@ -20,23 +20,14 @@
 import java.lang.reflect.Modifier;
 
 public class MethodUtils {
-
-    /**
-     * return true if and only if:
-     * <p>
-     * 1, public
-     * <p>
-     * 2, name starts with "set"
-     * <p>
-     * 3, only has one parameter
-     */
-    public static boolean isSetter2(Method method) {
+    
+    public static boolean isSetter(Method method) {
         return method.getName().startsWith("set")
                 && method.getParameterTypes().length == 1
                 && Modifier.isPublic(method.getModifiers());
     }
 
-    public static boolean isSetter(Method method) {
+    public static boolean isPrimitiveSetter(Method method) {
         return method.getName().startsWith("set")
                 && !"set".equals(method.getName())
                 && Modifier.isPublic(method.getModifiers())
diff --git a/dubbo-common/src/test/java/org/apache/dubbo/common/utils/MethodUtilsTest.java b/dubbo-common/src/test/java/org/apache/dubbo/common/utils/MethodUtilsTest.java
index ded10679d88..e619665d9d6 100644
--- a/dubbo-common/src/test/java/org/apache/dubbo/common/utils/MethodUtilsTest.java
+++ b/dubbo-common/src/test/java/org/apache/dubbo/common/utils/MethodUtilsTest.java
@@ -36,10 +36,10 @@ public void testGetMethod() {
     }
 
     @Test
-    public void testSetMethod() {
+    public void testPrimitiveSetMethod() {
         Method setMethod = null;
         for (Method method : MethodTestClazz.class.getMethods()) {
-            if (MethodUtils.isSetter(method)) {
+            if (MethodUtils.isPrimitiveSetter(method)) {
                 setMethod = method;
             }
         }
@@ -48,10 +48,10 @@ public void testSetMethod() {
     }
 
     @Test
-    public void testSet2Method(){
+    public void testSetMethod(){
         Method setMethod = null;
         for (Method method : Method2TestClazz.class.getMethods()) {
-            if (MethodUtils.isSetter2(method)) {
+            if (MethodUtils.isSetter(method)) {
                 setMethod = method;
             }
         }
diff --git a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
index 246694822a7..0873c1c2638 100644
--- a/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
+++ b/dubbo-config/dubbo-config-api/src/main/java/org/apache/dubbo/config/AbstractConfig.java
@@ -559,7 +559,7 @@ public void refresh() {
             // loop methods, get override value and set the new value back to method
             Method[] methods = getClass().getMethods();
             for (Method method : methods) {
-                if (MethodUtils.isSetter(method)) {
+                if (MethodUtils.isPrimitiveSetter(method)) {
                     try {
                         String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));
                         // isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two 'setGeneric' methods in ReferenceConfig.
