diff --git a/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
index 140751fa774..46e3a162bcf 100644
--- a/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
+++ b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/support/wrapper/MockClusterInvoker.java
@@ -73,7 +73,7 @@ public Result invoke(Invocation invocation) throws RpcException {
         Result result = null;
 
         String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), MOCK_KEY, Boolean.FALSE.toString()).trim();
-        if (value.length() == 0 || value.equalsIgnoreCase("false")) {
+        if (value.length() == 0 || "false".equalsIgnoreCase(value)) {
             //no mock
             result = this.invoker.invoke(invocation);
         } else if (value.startsWith("force")) {
diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java b/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
index 78619eeb7a7..427b0b09c1a 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/compiler/support/JdkCompiler.java
@@ -73,7 +73,7 @@ public JdkCompiler() {
         StandardJavaFileManager manager = compiler.getStandardFileManager(diagnosticCollector, null, null);
         final ClassLoader loader = Thread.currentThread().getContextClassLoader();
         if (loader instanceof URLClassLoader
-                && (!loader.getClass().getName().equals("sun.misc.Launcher$AppClassLoader"))) {
+                && (!"sun.misc.Launcher$AppClassLoader".equals(loader.getClass().getName()))) {
             try {
                 URLClassLoader urlClassLoader = (URLClassLoader) loader;
                 List<File> files = new ArrayList<File>();
diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
index c3884e02273..40fcce89aac 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/NetUtils.java
@@ -422,7 +422,7 @@ public static boolean matchIpRange(String pattern, String host, int port) throws
             throw new IllegalArgumentException("Illegal Argument pattern or hostName. Pattern:" + pattern + ", Host:" + host);
         }
         pattern = pattern.trim();
-        if (pattern.equals("*.*.*.*") || pattern.equals("*")) {
+        if ("*.*.*.*".equals(pattern) || "*".equals(pattern)) {
             return true;
         }
 
@@ -458,7 +458,7 @@ public static boolean matchIpRange(String pattern, String host, int port) throws
             }
         }
         for (int i = 0; i < mask.length; i++) {
-            if (mask[i].equals("*") || mask[i].equals(ipAddress[i])) {
+            if ("*".equals(mask[i]) || mask[i].equals(ipAddress[i])) {
                 continue;
             } else if (mask[i].contains("-")) {
                 String[] rangeNumStrs = mask[i].split("-");
diff --git a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
index c8866740d24..d167afe5271 100644
--- a/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
+++ b/dubbo-common/src/main/java/org/apache/dubbo/common/utils/PojoUtils.java
@@ -561,10 +561,10 @@ private static Object newInstance(Class<?> cls) {
      * @return
      */
     private static Object getDefaultValue(Class<?> parameterType) {
-        if (parameterType.getName().equals("char")) {
+        if ("char".equals(parameterType.getName())) {
             return Character.MIN_VALUE;
         }
-        if (parameterType.getName().equals("bool")) {
+        if ("bool".equals(parameterType.getName())) {
             return false;
         }
         return parameterType.isPrimitive() ? 0 : null;
diff --git a/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java b/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
index 427fb7cf4a1..3306abb0a35 100644
--- a/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
+++ b/dubbo-compatible/src/main/java/com/alibaba/dubbo/rpc/protocol/dubbo/FutureAdapter.java
@@ -17,14 +17,14 @@
 
 package com.alibaba.dubbo.rpc.protocol.dubbo;
 
-import org.apache.dubbo.rpc.AppResponse;
-import org.apache.dubbo.rpc.Result;
-
 import com.alibaba.dubbo.remoting.RemotingException;
 import com.alibaba.dubbo.remoting.exchange.ResponseCallback;
 import com.alibaba.dubbo.remoting.exchange.ResponseFuture;
 import com.alibaba.dubbo.rpc.RpcException;
 
+import org.apache.dubbo.rpc.AppResponse;
+import org.apache.dubbo.rpc.Result;
+
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.ExecutionException;
@@ -106,18 +106,22 @@ public void accept(Object obj, Throwable t) {
         future.whenComplete(biConsumer);
     }
 
+    @Override
     public boolean cancel(boolean mayInterruptIfRunning) {
         return false;
     }
 
+    @Override
     public boolean isCancelled() {
         return false;
     }
 
+    @Override
     public boolean isDone() {
         return future.isDone();
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public V get() throws InterruptedException, ExecutionException {
         try {
@@ -129,6 +133,7 @@ public V get() throws InterruptedException, ExecutionException {
         }
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public V get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
         try {
diff --git a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java b/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java
index 85cc968ce5c..90d02279466 100644
--- a/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java
+++ b/dubbo-config/dubbo-config-spring/src/test/java/org/apache/dubbo/config/spring/SimpleRegistryExporter.java
@@ -39,7 +39,7 @@ public class SimpleRegistryExporter {
 
     private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 
-    private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
+    private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
 
     public synchronized static Exporter<RegistryService> exportIfAbsent(int port) {
         try {
@@ -55,7 +55,7 @@ public static Exporter<RegistryService> export(int port) {
     }
 
     public static Exporter<RegistryService> export(int port, RegistryService registryService) {
-        return protocol.export(proxyFactory.getInvoker(registryService, RegistryService.class,
+        return protocol.export(PROXY_FACTORY.getInvoker(registryService, RegistryService.class,
                 new URLBuilder(DUBBO_PROTOCOL, NetUtils.getLocalHost(), port, RegistryService.class.getName())
                         .setPath(RegistryService.class.getName())
                         .addParameter(INTERFACE_KEY, RegistryService.class.getName())
diff --git a/dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java b/dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java
index 34f35b25826..498f8827336 100644
--- a/dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java
+++ b/dubbo-metadata-report/dubbo-metadata-definition-protobuf/src/main/java/org/apache/dubbo/metadata/definition/protobuf/ProtobufTypeBuilder.java
@@ -227,9 +227,9 @@ private boolean isSimplePropertySettingMethod(Method method) {
         // 1. - setUnknownFields( com.google.protobuf.UnknownFieldSet unknownFields)
         // 2. - setField(com.google.protobuf.Descriptors.FieldDescriptor field,java.lang.Object value)
         // 3. - setRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,int index,java.lang.Object valueï¼‰
-        if (methodName.equals("setField") && types[0].equals(Descriptors.FieldDescriptor.class)
-                || methodName.equals("setUnknownFields") && types[0].equals(UnknownFieldSet.class)
-                || methodName.equals("setRepeatedField") && types[0].equals(Descriptors.FieldDescriptor.class)) {
+        if ("setField".equals(methodName) && types[0].equals(Descriptors.FieldDescriptor.class)
+                || "setUnknownFields".equals(methodName) && types[0].equals(UnknownFieldSet.class)
+                || "setRepeatedField".equals(methodName) && types[0].equals(Descriptors.FieldDescriptor.class)) {
             return false;
         }
 
diff --git a/dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java b/dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java
index c2b7c67604c..10f48aa7fc1 100644
--- a/dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java
+++ b/dubbo-registry/dubbo-registry-default/src/test/java/org/apache/dubbo/registry/dubbo/SimpleRegistryExporter.java
@@ -40,7 +40,7 @@ public class SimpleRegistryExporter {
 
     private static final Protocol protocol = ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();
 
-    private static final ProxyFactory proxyFactory = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
+    private static final ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();
 
     public synchronized static Exporter<RegistryService> exportIfAbsent(int port) {
         try {
@@ -56,7 +56,7 @@ public static Exporter<RegistryService> export(int port) {
     }
 
     public static Exporter<RegistryService> export(int port, RegistryService registryService) {
-        return protocol.export(proxyFactory.getInvoker(registryService, RegistryService.class,
+        return protocol.export(PROXY_FACTORY.getInvoker(registryService, RegistryService.class,
                 new URLBuilder(DUBBO_PROTOCOL, NetUtils.getLocalHost(), port, RegistryService.class.getName())
                         .setPath(RegistryService.class.getName())
                         .addParameter(INTERFACE_KEY, RegistryService.class.getName())
diff --git a/dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceName.java b/dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceName.java
index cae9f196cde..9a85bed4963 100644
--- a/dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceName.java
+++ b/dubbo-registry/dubbo-registry-nacos/src/main/java/org/apache/dubbo/registry/nacos/NacosServiceName.java
@@ -222,8 +222,12 @@ private String toValue() {
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof NacosServiceName)) return false;
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof NacosServiceName)) {
+            return false;
+        }
         NacosServiceName that = (NacosServiceName) o;
         return Objects.equals(getValue(), that.getValue());
     }
@@ -233,6 +237,7 @@ public int hashCode() {
         return Objects.hash(getValue());
     }
 
+    @Override
     public String toString() {
         return getValue();
     }
diff --git a/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java b/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java
index 12fbf989dcc..978edd81baf 100644
--- a/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java
+++ b/dubbo-remoting/dubbo-remoting-api/src/main/java/org/apache/dubbo/remoting/telnet/support/command/StatusTelnetHandler.java
@@ -45,7 +45,7 @@ public class StatusTelnetHandler implements TelnetHandler {
 
     @Override
     public String telnet(Channel channel, String message) {
-        if (message.equals("-l")) {
+        if ("-l".equals(message)) {
             List<StatusChecker> checkers = extensionLoader.getActivateExtension(channel.getUrl(), "status");
             String[] header = new String[]{"resource", "status", "message"};
             List<List<String>> table = new ArrayList<List<String>>();
diff --git a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
index c82599c3a14..de330ea2c30 100644
--- a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
+++ b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/CallbackServiceCodec.java
@@ -68,9 +68,9 @@ private static byte isCallBack(URL url, String methodName, int argIndex) {
         if (url != null) {
             String callback = url.getParameter(methodName + "." + argIndex + ".callback");
             if (callback != null) {
-                if (callback.equalsIgnoreCase("true")) {
+                if ("true".equalsIgnoreCase(callback)) {
                     isCallback = CALLBACK_CREATE;
-                } else if (callback.equalsIgnoreCase("false")) {
+                } else if ("false".equalsIgnoreCase(callback)) {
                     isCallback = CALLBACK_DESTROY;
                 }
             }
diff --git a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java
index bca855a7c8b..77d32ec900b 100644
--- a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java
+++ b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ChangeTelnetHandler.java
@@ -38,7 +38,7 @@ public String telnet(Channel channel, String message) {
             return "Please input service name, eg: \r\ncd XxxService\r\ncd com.xxx.XxxService";
         }
         StringBuilder buf = new StringBuilder();
-        if (message.equals("/") || message.equals("..")) {
+        if ("/".equals(message) || "..".equals(message)) {
             String service = (String) channel.getAttribute(SERVICE_KEY);
             channel.removeAttribute(SERVICE_KEY);
             buf.append("Cancelled default service " + service + ".");
diff --git a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ShutdownTelnetHandler.java b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ShutdownTelnetHandler.java
index ff5bf07cb33..11e0c62267a 100644
--- a/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ShutdownTelnetHandler.java
+++ b/dubbo-rpc/dubbo-rpc-dubbo/src/main/java/org/apache/dubbo/rpc/protocol/dubbo/telnet/ShutdownTelnetHandler.java
@@ -36,7 +36,7 @@ public String telnet(Channel channel, String message) throws RemotingException {
         int sleepMilliseconds = 0;
         if (StringUtils.isNotEmpty(message)) {
             String[] parameters = message.split("\\s+");
-            if (parameters.length == 2 && parameters[0].equals("-t") && StringUtils.isInteger(parameters[1])) {
+            if (parameters.length == 2 && "-t".equals(parameters[0]) && StringUtils.isInteger(parameters[1])) {
                 sleepMilliseconds = Integer.parseInt(parameters[1]);
             } else {
                 return "Invalid parameter,please input like shutdown -t 10000";
diff --git a/dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java b/dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
index de298680d60..9e30d0d033b 100644
--- a/dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
+++ b/dubbo-rpc/dubbo-rpc-hessian/src/main/java/org/apache/dubbo/rpc/protocol/hessian/HessianProtocol.java
@@ -176,7 +176,7 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 throws IOException, ServletException {
             String uri = request.getRequestURI();
             HessianSkeleton skeleton = skeletonMap.get(uri);
-            if (!request.getMethod().equalsIgnoreCase("POST")) {
+            if (!"POST".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(500);
             } else {
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());
diff --git a/dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java b/dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
index dddd724cf86..c8f6e5839c8 100644
--- a/dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
+++ b/dubbo-rpc/dubbo-rpc-http/src/main/java/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java
@@ -208,7 +208,7 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 throws IOException, ServletException {
             String uri = request.getRequestURI();
             HttpInvokerServiceExporter skeleton = skeletonMap.get(uri);
-            if (!request.getMethod().equalsIgnoreCase("POST")) {
+            if (!"POST".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(500);
             } else {
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());
diff --git a/dubbo-rpc/dubbo-rpc-jsonrpc/src/main/java/org/apache/dubbo/rpc/protocol/jsonrpc/JsonRpcProtocol.java b/dubbo-rpc/dubbo-rpc-jsonrpc/src/main/java/org/apache/dubbo/rpc/protocol/jsonrpc/JsonRpcProtocol.java
index aaba802cd4e..28dc56b67e5 100644
--- a/dubbo-rpc/dubbo-rpc-jsonrpc/src/main/java/org/apache/dubbo/rpc/protocol/jsonrpc/JsonRpcProtocol.java
+++ b/dubbo-rpc/dubbo-rpc-jsonrpc/src/main/java/org/apache/dubbo/rpc/protocol/jsonrpc/JsonRpcProtocol.java
@@ -82,9 +82,9 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 response.setHeader(ACCESS_CONTROL_ALLOW_METHODS_HEADER, "POST");
                 response.setHeader(ACCESS_CONTROL_ALLOW_HEADERS_HEADER, "*");
             }
-            if (request.getMethod().equalsIgnoreCase("OPTIONS")) {
+            if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(200);
-            } else if (request.getMethod().equalsIgnoreCase("POST")) {
+            } else if ("POST".equalsIgnoreCase(request.getMethod())) {
 
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());
                 try {
diff --git a/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java b/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java
index 0ee9156584e..b42081e780a 100644
--- a/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java
+++ b/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProtocol.java
@@ -84,9 +84,9 @@ public void handle(HttpServletRequest request, HttpServletResponse response)
                 response.setHeader(ACCESS_CONTROL_ALLOW_METHODS_HEADER, "POST");
                 response.setHeader(ACCESS_CONTROL_ALLOW_HEADERS_HEADER, "*");
             }
-            if (request.getMethod().equalsIgnoreCase("OPTIONS")) {
+            if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
                 response.setStatus(200);
-            } else if (request.getMethod().equalsIgnoreCase("POST")) {
+            } else if ("POST".equalsIgnoreCase(request.getMethod())) {
 
                 RpcContext.getContext().setRemoteAddress(request.getRemoteAddr(), request.getRemotePort());
                 try {
diff --git a/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java b/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java
index d1dfe6e2a9b..18419c130e9 100644
--- a/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java
+++ b/dubbo-rpc/dubbo-rpc-xml/src/main/java/org/apache/dubbo/xml/rpc/protocol/xmlrpc/XmlRpcProxyFactoryBean.java
@@ -80,7 +80,7 @@ public Object invoke(MethodInvocation invocation)
 
         // handle toString()
         Method method = invocation.getMethod();
-        if (method.getDeclaringClass() == Object.class && method.getName().equals("toString")) {
+        if (method.getDeclaringClass() == Object.class && "toString".equals(method.getName())) {
             return proxyObject.getClass().getName() + "@" + System.identityHashCode(proxyObject);
         }
 
diff --git a/dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/MapValue.java b/dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/MapValue.java
index 1dd844b6f2d..fd24618d450 100644
--- a/dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/MapValue.java
+++ b/dubbo-serialization/dubbo-serialization-protobuf-json/src/main/java/org/apache/dubbo/common/serialize/protobuf/support/MapValue.java
@@ -187,6 +187,7 @@ private static final class AttachmentsDefaultEntryHolder {
       return attachments_;
     }
 
+    @Override
     public int getAttachmentsCount() {
       return internalGetAttachments().getMap().size();
     }
@@ -194,6 +195,7 @@ public int getAttachmentsCount() {
      * <code>map&lt;string, string&gt; attachments = 1;</code>
      */
 
+    @Override
     public boolean containsAttachments(
         String key) {
       if (key == null) { throw new NullPointerException(); }
@@ -202,6 +204,7 @@ public boolean containsAttachments(
     /**
      * Use {@link #getAttachmentsMap()} instead.
      */
+    @Override
     @Deprecated
     public java.util.Map<String, String> getAttachments() {
       return getAttachmentsMap();
@@ -210,6 +213,7 @@ public java.util.Map<String, String> getAttachments() {
      * <code>map&lt;string, string&gt; attachments = 1;</code>
      */
 
+    @Override
     public java.util.Map<String, String> getAttachmentsMap() {
       return internalGetAttachments().getMap();
     }
@@ -217,6 +221,7 @@ public java.util.Map<String, String> getAttachmentsMap() {
      * <code>map&lt;string, string&gt; attachments = 1;</code>
      */
 
+    @Override
     public String getAttachmentsOrDefault(
         String key,
         String defaultValue) {
@@ -229,6 +234,7 @@ public String getAttachmentsOrDefault(
      * <code>map&lt;string, string&gt; attachments = 1;</code>
      */
 
+    @Override
     public String getAttachmentsOrThrow(
         String key) {
       if (key == null) { throw new NullPointerException(); }
@@ -244,8 +250,12 @@ public String getAttachmentsOrThrow(
     @Override
     public final boolean isInitialized() {
       byte isInitialized = memoizedIsInitialized;
-      if (isInitialized == 1) return true;
-      if (isInitialized == 0) return false;
+      if (isInitialized == 1) {
+          return true;
+      }
+      if (isInitialized == 0) {
+          return false;
+      }
 
       memoizedIsInitialized = 1;
       return true;
@@ -266,7 +276,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)
     @Override
     public int getSerializedSize() {
       int size = memoizedSize;
-      if (size != -1) return size;
+      if (size != -1) {
+          return size;
+      }
 
       size = 0;
       for (java.util.Map.Entry<String, String> entry
@@ -419,6 +431,7 @@ public static final class Builder extends
         return MapValue.internal_static_Map_descriptor;
       }
 
+      @Override
       @SuppressWarnings({"rawtypes"})
       protected com.google.protobuf.MapField internalGetMapField(
           int number) {
@@ -430,6 +443,7 @@ protected com.google.protobuf.MapField internalGetMapField(
                 "Invalid map field number: " + number);
         }
       }
+      @Override
       @SuppressWarnings({"rawtypes"})
       protected com.google.protobuf.MapField internalGetMutableMapField(
           int number) {
@@ -544,7 +558,9 @@ public Builder mergeFrom(com.google.protobuf.Message other) {
       }
 
       public Builder mergeFrom(Map other) {
-        if (other == Map.getDefaultInstance()) return this;
+        if (other == Map.getDefaultInstance()) {
+            return this;
+        }
         internalGetMutableAttachments().mergeFrom(
             other.internalGetAttachments());
         this.mergeUnknownFields(other.unknownFields);
@@ -600,6 +616,7 @@ public Builder mergeFrom(
         return attachments_;
       }
 
+      @Override
       public int getAttachmentsCount() {
         return internalGetAttachments().getMap().size();
       }
@@ -607,6 +624,7 @@ public int getAttachmentsCount() {
        * <code>map&lt;string, string&gt; attachments = 1;</code>
        */
 
+      @Override
       public boolean containsAttachments(
           String key) {
         if (key == null) { throw new NullPointerException(); }
@@ -615,6 +633,7 @@ public boolean containsAttachments(
       /**
        * Use {@link #getAttachmentsMap()} instead.
        */
+      @Override
       @Deprecated
       public java.util.Map<String, String> getAttachments() {
         return getAttachmentsMap();
@@ -623,6 +642,7 @@ public java.util.Map<String, String> getAttachments() {
        * <code>map&lt;string, string&gt; attachments = 1;</code>
        */
 
+      @Override
       public java.util.Map<String, String> getAttachmentsMap() {
         return internalGetAttachments().getMap();
       }
@@ -630,6 +650,7 @@ public java.util.Map<String, String> getAttachmentsMap() {
        * <code>map&lt;string, string&gt; attachments = 1;</code>
        */
 
+      @Override
       public String getAttachmentsOrDefault(
           String key,
           String defaultValue) {
@@ -642,6 +663,7 @@ public String getAttachmentsOrDefault(
        * <code>map&lt;string, string&gt; attachments = 1;</code>
        */
 
+      @Override
       public String getAttachmentsOrThrow(
           String key) {
         if (key == null) { throw new NullPointerException(); }
@@ -779,6 +801,7 @@ public Map getDefaultInstanceForType() {
     };
     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
         new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
+          @Override
           public com.google.protobuf.ExtensionRegistry assignDescriptors(
               com.google.protobuf.Descriptors.FileDescriptor root) {
             descriptor = root;
