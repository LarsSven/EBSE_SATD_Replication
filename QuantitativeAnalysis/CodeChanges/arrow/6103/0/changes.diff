diff --git a/cpp/src/gandiva/precompiled/string_ops.cc b/cpp/src/gandiva/precompiled/string_ops.cc
index 359eabed0d36..53765cc9915c 100644
--- a/cpp/src/gandiva/precompiled/string_ops.cc
+++ b/cpp/src/gandiva/precompiled/string_ops.cc
@@ -444,7 +444,12 @@ FORCE_INLINE
 int32 locate_utf8_utf8_int32(int64 context, const char* sub_str, int32 sub_str_len,
                              const char* str, int32 str_len, int32 start_pos) {
   if (start_pos < 1) {
-    gdv_fn_context_set_error_msg(context, "Start position must be greater than 0");
+    char const* fmt = "Start index (%d) must be greater than 0";
+    int size = static_cast<int>(strlen(fmt)) + 64;
+    char* error = reinterpret_cast<char*>(malloc(size));
+    snprintf(error, size, fmt, start_pos);
+    gdv_fn_context_set_error_msg(context, error);
+    free(error);
     return 0;
   }
 
diff --git a/cpp/src/gandiva/precompiled/string_ops_test.cc b/cpp/src/gandiva/precompiled/string_ops_test.cc
index 6424c31fa534..6a280dc44cbb 100644
--- a/cpp/src/gandiva/precompiled/string_ops_test.cc
+++ b/cpp/src/gandiva/precompiled/string_ops_test.cc
@@ -346,7 +346,7 @@ TEST(TestStringOps, TestLocate) {
   pos = locate_utf8_utf8_int32(ctx_ptr, "bar", 3, "barbar", 6, 0);
   EXPECT_EQ(pos, 0);
   EXPECT_THAT(ctx.get_error(),
-              ::testing::HasSubstr("Start position must be greater than 0"));
+              ::testing::HasSubstr("Start index (0) must be greater than 0"));
   ctx.Reset();
 
   pos = locate_utf8_utf8_int32(ctx_ptr, "bar", 3, "barbar", 6, 7);
