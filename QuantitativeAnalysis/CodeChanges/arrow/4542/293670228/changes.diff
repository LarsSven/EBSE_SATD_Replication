diff --git a/java/algorithm/pom.xml b/java/algorithm/pom.xml
new file mode 100644
index 000000000000..5a6108bbbd10
--- /dev/null
+++ b/java/algorithm/pom.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0"?>
+<!-- Licensed to the Apache Software Foundation (ASF) under one or more contributor
+  license agreements. See the NOTICE file distributed with this work for additional
+  information regarding copyright ownership. The ASF licenses this file to
+  You under the Apache License, Version 2.0 (the "License"); you may not use
+  this file except in compliance with the License. You may obtain a copy of
+  the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required
+  by applicable law or agreed to in writing, software distributed under the
+  License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
+  OF ANY KIND, either express or implied. See the License for the specific
+  language governing permissions and limitations under the License. -->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.apache.arrow</groupId>
+    <artifactId>arrow-java-root</artifactId>
+    <version>0.14.0-SNAPSHOT</version>
+  </parent>
+  <artifactId>arrow-algorithm</artifactId>
+  <name>Arrow Algorithms</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>org.apache.arrow</groupId>
+      <artifactId>arrow-vector</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.arrow</groupId>
+      <artifactId>arrow-memory</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>io.netty</groupId>
+      <artifactId>netty-common</artifactId>
+    </dependency>
+  </dependencies>
+
+  <build>
+  </build>
+</project>
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/DefaultVectorComparators.java
similarity index 72%
rename from java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java
rename to java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/DefaultVectorComparators.java
index d3e50cb4d5a3..6274c1d64ef5 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/sort/DefaultVectorComparators.java
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/DefaultVectorComparators.java
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
+package org.apache.arrow.algorithm.sort;
 
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.vector.IntVector;
@@ -43,21 +43,7 @@ public IntVector newVector(BufferAllocator allocator) {
     }
 
     @Override
-    public int compare(Integer index1, Integer index2) {
-      boolean isNull1 = vector1.isNull(index1);
-      boolean isNull2 = vector2.isNull(index2);
-
-      if (isNull1 || isNull2) {
-        if (isNull1 && isNull2) {
-          return 0;
-        } else if (isNull1) {
-          // null is smaller
-          return -1;
-        } else {
-          return 1;
-        }
-      }
-
+    public int compareNotNull(int index1, int index2) {
       int value1 = vector1.get(index1);
       int value2 = vector2.get(index2);
       return value1 - value2;
@@ -70,34 +56,24 @@ public int compare(Integer index1, Integer index2) {
    */
   public static class VarCharComparator extends VectorValueComparator<VarCharVector> {
 
+    private NullableVarCharHolder holder1 = new NullableVarCharHolder();
+    private NullableVarCharHolder holder2 = new NullableVarCharHolder();
+
     @Override
     public VarCharVector newVector(BufferAllocator allocator) {
       return new VarCharVector("", allocator);
     }
 
     @Override
-    public int compare(Integer index1, Integer index2) {
-      NullableVarCharHolder holder1 = new NullableVarCharHolder();
-      NullableVarCharHolder holder2 = new NullableVarCharHolder();
-
+    public int compareNotNull(int index1, int index2) {
       vector1.get(index1, holder1);
       vector2.get(index2, holder2);
 
-      if (holder1.isSet == 0 || holder2.isSet == 0) {
-        if (holder1.isSet == 0 && holder2.isSet == 0) {
-          return 0;
-        } else if (holder1.isSet == 0) {
-          // null is smaller
-          return -1;
-        } else {
-          return 1;
-        }
-      }
-
       int length1 = holder1.end - holder1.start;
       int length2 = holder2.end - holder2.start;
 
-      for (int i = 0; i < length1 && i < length2; i++) {
+      int minLength = length1 < length2 ? length1 : length2;
+      for (int i = 0; i < minLength; i++) {
         byte b1 = holder1.buffer.getByte(holder1.start + i);
         byte b2 = holder2.buffer.getByte(holder2.start + i);
 
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/sort/FixedWidthVectorSorter.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/FixedWidthOutOfPlaceVectorSorter.java
similarity index 83%
rename from java/vector/src/main/java/org/apache/arrow/vector/sort/FixedWidthVectorSorter.java
rename to java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/FixedWidthOutOfPlaceVectorSorter.java
index 13062428464c..9e0ca5a4d46d 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/sort/FixedWidthVectorSorter.java
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/FixedWidthOutOfPlaceVectorSorter.java
@@ -15,10 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
+package org.apache.arrow.algorithm.sort;
 
-import java.util.List;
-import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
 import org.apache.arrow.vector.BaseFixedWidthVector;
@@ -28,11 +26,13 @@
 import io.netty.util.internal.PlatformDependent;
 
 /**
- * Default sorter for fixed-width vectors.
+ * Default out-of-place sorter for fixed-width vectors.
  * It is an out-of-place sort, with time complexity O(n*log(n)).
  * @param <V> vector type.
  */
-public class FixedWidthVectorSorter<V extends BaseFixedWidthVector> implements VectorSorter<V> {
+public class FixedWidthOutOfPlaceVectorSorter<V extends BaseFixedWidthVector> implements VectorSorter<V> {
+
+  private final IndexSorter<V> indexSorter = new IndexSorter<>();
 
   @Override
   public V sort(V srcVector, VectorValueComparator<V> comparator) {
@@ -50,8 +50,8 @@ public V sort(V srcVector, VectorValueComparator<V> comparator) {
     ArrowBuf dstValueBuffer = dstVector.getDataBuffer();
 
     // sort value indices
-    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());
-    sortedIndices.sort((index1, index2) -> comparator.compare(index1.intValue(), index2.intValue()));
+    int[] sortedIndices = IntStream.range(0, srcVector.getValueCount()).toArray();
+    indexSorter.sort(sortedIndices, comparator);
 
     // copy sorted values to the output vector
     int dstIndex = 0;
@@ -71,4 +71,9 @@ public V sort(V srcVector, VectorValueComparator<V> comparator) {
     dstVector.setValueCount(srcVector.getValueCount());
     return dstVector;
   }
+
+  @Override
+  public boolean isInPlace() {
+    return false;
+  }
 }
diff --git a/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/IndexSorter.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/IndexSorter.java
new file mode 100644
index 000000000000..adc9c03245dc
--- /dev/null
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/IndexSorter.java
@@ -0,0 +1,78 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.arrow.algorithm.sort;
+
+import org.apache.arrow.vector.ValueVector;
+
+/**
+ * Sorter for the indices of a vector.
+ * @param <V> vector type.
+ */
+public class IndexSorter<V extends ValueVector> {
+
+  /**
+   * Comparator for vector indices.
+   */
+  private VectorValueComparator<V> comparator;
+
+  /**
+   * Vector indices to sort.
+   */
+  private int[] indices;
+
+  /**
+   * Sorts indices, by quick-sort. Suppose the vector is denoted by v.
+   * After calling this method, the following relations hold:
+   * v(indices[0]) <= v(indices[1]) <= ...
+   * @param indices the indices to sort.
+   * @param comparator the comparator to sort indices.
+   */
+  public void sort(int[] indices, VectorValueComparator<V> comparator) {
+    this.indices = indices;
+    this.comparator = comparator;
+
+    quickSort(0, indices.length - 1);
+  }
+
+  private void quickSort(int low, int high) {
+    if (low < high) {
+      int mid = partition(low, high);
+      quickSort(low, mid - 1);
+      quickSort(mid + 1, high);
+    }
+  }
+
+  private int partition(int low, int high) {
+    int pivotIndex = indices[low];
+
+    while (low < high) {
+      while (low < high && comparator.compare(indices[high], pivotIndex) >= 0) {
+        high -= 1;
+      }
+      indices[low] = indices[high];
+
+      while (low < high && comparator.compare(indices[low], pivotIndex) <= 0) {
+        low += 1;
+      }
+      indices[high] = indices[low];
+    }
+
+    indices[low] = pivotIndex;
+    return low;
+  }
+}
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VariableWidthOutOfPlaceVectorSorter.java
similarity index 80%
rename from java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java
rename to java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VariableWidthOutOfPlaceVectorSorter.java
index 0c407e2a8c44..8ed535833e14 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/sort/VariableWidthVectorSorter.java
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VariableWidthOutOfPlaceVectorSorter.java
@@ -15,12 +15,8 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
+package org.apache.arrow.algorithm.sort;
 
-import static org.apache.arrow.vector.BaseVariableWidthVector.OFFSET_WIDTH;
-
-import java.util.List;
-import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
 import org.apache.arrow.vector.BaseVariableWidthVector;
@@ -34,7 +30,9 @@
  * It is an out-of-place sort, with time complexity O(n*log(n)).
  * @param <V> vector type.
  */
-public class VariableWidthVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {
+public class VariableWidthOutOfPlaceVectorSorter<V extends BaseVariableWidthVector> implements VectorSorter<V> {
+
+  private final IndexSorter<V> indexSorter = new IndexSorter<>();
 
   @Override
   public V sort(V srcVector, VectorValueComparator<V> comparator) {
@@ -52,8 +50,8 @@ public V sort(V srcVector, VectorValueComparator<V> comparator) {
     ArrowBuf dstOffsetBuffer = dstVector.getOffsetBuffer();
 
     // sort value indices
-    List<Integer> sortedIndices = IntStream.range(0, srcVector.getValueCount()).boxed().collect(Collectors.toList());
-    sortedIndices.sort((index1, index2) -> comparator.compare(index1.intValue(), index2.intValue()));
+    int[] sortedIndices = IntStream.range(0, srcVector.getValueCount()).toArray();
+    indexSorter.sort(sortedIndices, comparator);
 
     int dstIndex = 0;
     int dstOffset = 0;
@@ -65,8 +63,8 @@ public V sort(V srcVector, VectorValueComparator<V> comparator) {
         BitVectorHelper.setValidityBit(dstValidityBuffer, dstIndex, 0);
       } else {
         BitVectorHelper.setValidityBit(dstValidityBuffer, dstIndex, 1);
-        int srcOffset = srcOffsetBuffer.getInt(srcIndex * OFFSET_WIDTH);
-        int valueLength = srcOffsetBuffer.getInt((srcIndex + 1) * OFFSET_WIDTH) - srcOffset;
+        int srcOffset = srcOffsetBuffer.getInt(srcIndex * BaseVariableWidthVector.OFFSET_WIDTH);
+        int valueLength = srcOffsetBuffer.getInt((srcIndex + 1) * BaseVariableWidthVector.OFFSET_WIDTH) - srcOffset;
         PlatformDependent.copyMemory(
                 srcValueBuffer.memoryAddress() + srcOffset,
                 dstValueBuffer.memoryAddress() + dstOffset,
@@ -74,10 +72,15 @@ public V sort(V srcVector, VectorValueComparator<V> comparator) {
         dstOffset += valueLength;
       }
       dstIndex += 1;
-      dstOffsetBuffer.setInt(dstIndex * OFFSET_WIDTH, dstOffset);
+      dstOffsetBuffer.setInt(dstIndex * BaseVariableWidthVector.OFFSET_WIDTH, dstOffset);
     }
     dstVector.setLastSet(dstIndex - 1);
     dstVector.setValueCount(srcVector.getValueCount());
     return dstVector;
   }
+
+  @Override
+  public boolean isInPlace() {
+    return false;
+  }
 }
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorSorter.java
similarity index 86%
rename from java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java
rename to java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorSorter.java
index f20381f22641..425f02723827 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/sort/VectorSorter.java
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorSorter.java
@@ -15,12 +15,13 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
+package org.apache.arrow.algorithm.sort;
 
 import org.apache.arrow.vector.ValueVector;
 
 /**
  * Basic interface for sorting a vector.
+ *
  * @param <V> the vector type.
  */
 public interface VectorSorter<V extends ValueVector> {
@@ -29,9 +30,16 @@
    * Sort the vector by the given criteria.
    * The sort can be in-place or out-of-place, depending on the algorithm.
    * So the returned vector can be the same vector as, or a different vector from the input vector.
-   * @param vec the vector to sort.
+   *
+   * @param vec        the vector to sort.
    * @param comparator the criteria for sort.
    * @return the sorted vector.
    */
   V sort(V vec, VectorValueComparator<V> comparator);
+
+  /**
+   * Check if this is a in-place sort.
+   * @return if the sort is in-place.
+   */
+  boolean isInPlace();
 }
diff --git a/java/vector/src/main/java/org/apache/arrow/vector/sort/VectorValueComparator.java b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorValueComparator.java
similarity index 64%
rename from java/vector/src/main/java/org/apache/arrow/vector/sort/VectorValueComparator.java
rename to java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorValueComparator.java
index 07909341eb77..453d7a10a981 100644
--- a/java/vector/src/main/java/org/apache/arrow/vector/sort/VectorValueComparator.java
+++ b/java/algorithm/src/main/java/org.apache.arrow.algorithm.sort/VectorValueComparator.java
@@ -15,9 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
-
-import java.util.Comparator;
+package org.apache.arrow.algorithm.sort;
 
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.vector.ValueVector;
@@ -27,7 +25,7 @@
  * This is used for vector sorting.
  * @param <V> type of the vector.
  */
-public abstract class VectorValueComparator<V extends ValueVector> implements Comparator<Integer> {
+public abstract class VectorValueComparator<V extends ValueVector> {
 
   /**
    * The first vector to compare.
@@ -88,4 +86,41 @@ public void attachVectors(V vector1, V vector2) {
    * @return the new vector.
    */
   public abstract V newVector(BufferAllocator allocator);
+
+  /**
+   * Compare two values, given their indices.
+   * @param index1 index of the first value to compare.
+   * @param index2 index of the second value to compare.
+   * @return an integer greater than 0, if the first value is greater;
+   *     an integer smaller than 0, if the first value is smaller; or 0, if both
+   *     values are equal.
+   */
+  public int compare(int index1, int index2) {
+    boolean isNull1 = vector1.isNull(index1);
+    boolean isNull2 = vector2.isNull(index2);
+
+    if (isNull1 || isNull2) {
+      if (isNull1 && isNull2) {
+        return 0;
+      } else if (isNull1) {
+        // null is smaller
+        return -1;
+      } else {
+        return 1;
+      }
+    }
+    return compareNotNull(index1, index2);
+  }
+
+  /**
+   * Compare two values, given their indices.
+   * This is a fast path for comparing non-null values, so the caller
+   * must make sure that values at both indices are not null.
+   * @param index1 index of the first value to compare.
+   * @param index2 index of the second value to compare.
+   * @return an integer greater than 0, if the first value is greater;
+   *     an integer smaller than 0, if the first value is smaller; or 0, if both
+   *     values are equal.
+   */
+  public abstract int compareNotNull(int index1, int index2);
 }
diff --git a/java/vector/src/test/java/org/apache/arrow/vector/sort/TestVectorSort.java b/java/algorithm/src/test/java/org/apache/arrow/algorithm/sort/TestVectorSort.java
similarity index 65%
rename from java/vector/src/test/java/org/apache/arrow/vector/sort/TestVectorSort.java
rename to java/algorithm/src/test/java/org/apache/arrow/algorithm/sort/TestVectorSort.java
index 0b4f3cea44ed..500649d56d17 100644
--- a/java/vector/src/test/java/org/apache/arrow/vector/sort/TestVectorSort.java
+++ b/java/algorithm/src/test/java/org/apache/arrow/algorithm/sort/TestVectorSort.java
@@ -15,17 +15,21 @@
  * limitations under the License.
  */
 
-package org.apache.arrow.vector.sort;
+package org.apache.arrow.algorithm.sort;
 
+import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
+import java.util.stream.IntStream;
+
 import org.apache.arrow.memory.BufferAllocator;
 import org.apache.arrow.memory.RootAllocator;
 import org.apache.arrow.vector.IntVector;
 import org.apache.arrow.vector.VarCharVector;
 
 import org.junit.After;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -46,6 +50,38 @@ public void shutdown() {
     allocator.close();
   }
 
+  @Test
+  public void testIndexSort() {
+    try (IntVector vec = new IntVector("", allocator)) {
+      vec.allocateNew(10);
+      vec.setValueCount(10);
+
+      // fill data to sort
+      vec.set(0, 11);
+      vec.set(1, 8);
+      vec.set(2, 33);
+      vec.set(3, 10);
+      vec.set(4, 12);
+      vec.set(5, 17);
+      vec.setNull(6);
+      vec.set(7, 23);
+      vec.set(8, 35);
+      vec.set(9, 2);
+
+      // sort the index
+      IndexSorter<IntVector> indexSorter = new IndexSorter<>();
+      DefaultVectorComparators.IntComparator intComparator = new DefaultVectorComparators.IntComparator();
+      intComparator.attachVector(vec);
+
+      int[] indices = IntStream.range(0, 10).toArray();
+      indexSorter.sort(indices, intComparator);
+
+      int[] expected = new int[] {6, 9, 1, 3, 0, 4, 5, 7, 2, 8};
+
+      assertArrayEquals(expected, indices);
+    }
+  }
+
   @Test
   public void testSortInt() {
     try (IntVector vec = new IntVector("", allocator)) {
@@ -65,24 +101,24 @@ public void testSortInt() {
       vec.set(9, 2);
 
       // sort the vector
-      FixedWidthVectorSorter sorter = new FixedWidthVectorSorter();
+      FixedWidthOutOfPlaceVectorSorter sorter = new FixedWidthOutOfPlaceVectorSorter();
       DefaultVectorComparators.IntComparator comparator = new DefaultVectorComparators.IntComparator();
 
       IntVector sortedVec = (IntVector) sorter.sort(vec, comparator);
 
       // verify results
-      assertEquals(vec.getValueCount(), sortedVec.getValueCount());
+      Assert.assertEquals(vec.getValueCount(), sortedVec.getValueCount());
 
       assertTrue(sortedVec.isNull(0));
       assertTrue(sortedVec.isNull(1));
-      assertEquals(2, sortedVec.get(2));
-      assertEquals(8, sortedVec.get(3));
-      assertEquals(10, sortedVec.get(4));
-      assertEquals(10, sortedVec.get(5));
-      assertEquals(12, sortedVec.get(6));
-      assertEquals(17, sortedVec.get(7));
-      assertEquals(23, sortedVec.get(8));
-      assertEquals(35, sortedVec.get(9));
+      Assert.assertEquals(2, sortedVec.get(2));
+      Assert.assertEquals(8, sortedVec.get(3));
+      Assert.assertEquals(10, sortedVec.get(4));
+      Assert.assertEquals(10, sortedVec.get(5));
+      Assert.assertEquals(12, sortedVec.get(6));
+      Assert.assertEquals(17, sortedVec.get(7));
+      Assert.assertEquals(23, sortedVec.get(8));
+      Assert.assertEquals(35, sortedVec.get(9));
 
       sortedVec.close();
     }
@@ -107,15 +143,15 @@ public void testSortString() {
       vec.set(9, "yes".getBytes());
 
       // sort the vector
-      VariableWidthVectorSorter sorter = new VariableWidthVectorSorter();
+      VariableWidthOutOfPlaceVectorSorter sorter = new VariableWidthOutOfPlaceVectorSorter();
       DefaultVectorComparators.VarCharComparator comparator = new DefaultVectorComparators.VarCharComparator();
 
       VarCharVector sortedVec = (VarCharVector) sorter.sort(vec, comparator);
 
       // verify results
-      assertEquals(vec.getValueCount(), sortedVec.getValueCount());
-      assertEquals(vec.getByteCapacity(), sortedVec.getByteCapacity());
-      assertEquals(vec.getLastSet(), sortedVec.getLastSet());
+      Assert.assertEquals(vec.getValueCount(), sortedVec.getValueCount());
+      Assert.assertEquals(vec.getByteCapacity(), sortedVec.getByteCapacity());
+      Assert.assertEquals(vec.getLastSet(), sortedVec.getLastSet());
 
       assertTrue(sortedVec.isNull(0));
       assertTrue(sortedVec.isNull(1));
diff --git a/java/pom.xml b/java/pom.xml
index 0cdb2a320866..540b41b2d547 100644
--- a/java/pom.xml
+++ b/java/pom.xml
@@ -25,7 +25,7 @@
 
   <name>Apache Arrow Java Root POM</name>
   <description>Apache Arrow is open source, in-memory columnar data structures and low-overhead messaging</description>
-  <url>http://arrow.apache.org/</url>
+  <url>https://arrow.apache.org/</url>
 
   <properties>
     <target.gen.source.path>${project.basedir}/target/generated-sources</target.gen.source.path>
@@ -55,20 +55,20 @@
       <subscribe>dev-subscribe@arrow.apache.org</subscribe>
       <unsubscribe>dev-unsubscribe@arrow.apache.org</unsubscribe>
       <post>dev@arrow.apache.org</post>
-      <archive>http://mail-archives.apache.org/mod_mbox/arrow-dev/</archive>
+      <archive>https://mail-archives.apache.org/mod_mbox/arrow-dev/</archive>
     </mailingList>
     <mailingList>
       <name>Commits List</name>
       <subscribe>commits-subscribe@arrow.apache.org</subscribe>
       <unsubscribe>commits-unsubscribe@arrow.apache.org</unsubscribe>
       <post>commits@arrow.apache.org</post>
-      <archive>http://mail-archives.apache.org/mod_mbox/arrow-commits/</archive>
+      <archive>https://mail-archives.apache.org/mod_mbox/arrow-commits/</archive>
     </mailingList>
     <mailingList>
       <name>Issues List</name>
       <subscribe>issues-subscribe@arrow.apache.org</subscribe>
       <unsubscribe>issues-unsubscribe@arrow.apache.org</unsubscribe>
-      <archive>http://mail-archives.apache.org/mod_mbox/arrow-issues/</archive>
+      <archive>https://mail-archives.apache.org/mod_mbox/arrow-issues/</archive>
     </mailingList>
   </mailingLists>
 
@@ -158,7 +158,7 @@
             <manifestEntries>
               <Extension-Name>org.apache.arrow</Extension-Name>
               <Built-By>${username}</Built-By>
-              <url>http://arrow.apache.org/</url>
+              <url>https://arrow.apache.org/</url>
             </manifestEntries>
           </archive>
         </configuration>
@@ -654,6 +654,7 @@
     <module>plasma</module>
     <module>flight</module>
     <module>performance</module>
+    <module>algorithm</module>
   </modules>
 
   <profiles>
