diff --git a/tests/src/test/scala/whisk/core/database/ArtifactActivationStoreTests.scala b/tests/src/test/scala/whisk/core/database/ArtifactActivationStoreTests.scala
index ad74723bca..ddf26cde7a 100644
--- a/tests/src/test/scala/whisk/core/database/ArtifactActivationStoreTests.scala
+++ b/tests/src/test/scala/whisk/core/database/ArtifactActivationStoreTests.scala
@@ -42,7 +42,7 @@ class ArtifactActivationStoreTests
                                      context: UserContext,
                                      expected: IndexedSeq[WhiskActivation])(implicit transid: TransactionId): Unit = {
     // This is for compatible with CouchDB as it use option `StaleParameter.UpdateAfter`
-    retry(super.checkQueryActivations(namespace, name, skip, limit, includeDocs, since, upto, context, expected), 5)
+    retry(super.checkQueryActivations(namespace, name, skip, limit, includeDocs, since, upto, context, expected), 100)
   }
 
   override def checkCountActivations(namespace: String,
@@ -52,6 +52,6 @@ class ArtifactActivationStoreTests
                                      upto: Option[Instant] = None,
                                      context: UserContext,
                                      expected: Long)(implicit transid: TransactionId): Unit = {
-    retry(super.checkCountActivations(namespace, name, skip, since, upto, context, expected), 5)
+    retry(super.checkCountActivations(namespace, name, skip, since, upto, context, expected), 100)
   }
 }
diff --git a/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreCRUDBehaviors.scala b/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreCRUDBehaviors.scala
index 113f989ad5..6049da4710 100644
--- a/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreCRUDBehaviors.scala
+++ b/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreCRUDBehaviors.scala
@@ -25,13 +25,12 @@ import scala.util.Random
 
 trait ActivationStoreCRUDBehaviors extends ActivationStoreBehaviorBase {
 
-  private val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
-  private val action = s"action1_${Random.alphanumeric.take(4).mkString}"
-
   behavior of s"${storeType}ActivationStore store"
 
   it should "put activation and get docinfo" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action = s"action1_${Random.alphanumeric.take(4).mkString}"
     val activation = newActivation(namespace, action, 1L)
     val doc = store(activation, context)
     doc shouldBe activation.docinfo
@@ -41,6 +40,8 @@ trait ActivationStoreCRUDBehaviors extends ActivationStoreBehaviorBase {
 
   it should "deletes existing activation" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action = s"action1_${Random.alphanumeric.take(4).mkString}"
     val activation = newActivation(namespace, action, 1L)
     store(activation, context)
     activationStore.delete(ActivationId(activation.docid.asString), context).futureValue shouldBe true
@@ -55,6 +56,8 @@ trait ActivationStoreCRUDBehaviors extends ActivationStoreBehaviorBase {
 
   it should "get existing activation matching id" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action = s"action1_${Random.alphanumeric.take(4).mkString}"
     val activation = newActivation(namespace, action, 1L)
     store(activation, context)
     activationStore.get(ActivationId(activation.docid.asString), context).futureValue shouldBe activation
diff --git a/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreQueryBehaviors.scala b/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreQueryBehaviors.scala
index fcdc86810c..b1f605aa95 100644
--- a/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreQueryBehaviors.scala
+++ b/tests/src/test/scala/whisk/core/database/test/behavior/ActivationStoreQueryBehaviors.scala
@@ -28,10 +28,6 @@ import scala.util.Random
 
 trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
-  private val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
-  private val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
-  private val action2 = s"action2_${Random.alphanumeric.take(4).mkString}"
-
   protected def checkQueryActivations(namespace: String,
                                       name: Option[String] = None,
                                       skip: Int = 0,
@@ -67,7 +63,7 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
               context = context)
         }
         .map { r =>
-          r.fold((left) => left, (right) => right.map(wa => if (includeDocs) wa.toExtendedJson else wa.summaryAsJson))
+          r.fold(left => left, right => right.map(wa => if (includeDocs) wa.toExtendedJson else wa.summaryAsJson))
         }
         .futureValue
 
@@ -98,6 +94,9 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "find all entities" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
+    val action2 = s"action2_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -110,6 +109,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support since and upto filters" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -136,6 +137,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support skipping results" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -145,6 +148,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support limiting results" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -154,6 +159,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support including complete docs" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -175,6 +182,9 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "find all entities matching name" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
+    val action2 = s"action2_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -187,6 +197,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support since and upto filters" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -216,6 +228,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support skipping results" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -225,6 +239,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support limiting results" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -234,6 +250,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "support including complete docs" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -263,6 +281,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "should count all created activations" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -272,6 +292,9 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "count with option name" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
+    val action2 = s"action2_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -286,6 +309,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "count with since and upto" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
@@ -305,6 +330,8 @@ trait ActivationStoreQueryBehaviors extends ActivationStoreBehaviorBase {
 
   it should "count with skip" in {
     implicit val tid: TransactionId = transId()
+    val namespace = s"ns_${Random.alphanumeric.take(4).mkString}"
+    val action1 = s"action1_${Random.alphanumeric.take(4).mkString}"
 
     val activations = (1000 until 1100 by 10).map(newActivation(namespace, action1, _))
     activations foreach (store(_, context))
