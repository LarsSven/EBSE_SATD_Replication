diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/server/ZooKeeperStateServer.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/server/ZooKeeperStateServer.java
index 769416a31cf..5da4ecea395 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/server/ZooKeeperStateServer.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/server/ZooKeeperStateServer.java
@@ -45,11 +45,11 @@
 public class ZooKeeperStateServer extends ZooKeeperServerMain {
     private static final Logger logger = LoggerFactory.getLogger(ZooKeeperStateServer.class);
 
-    static final int MIN_PORT = 1024;
-    static final int MAX_PORT = 65353;
-    static final String ZOOKEEPER_SSL_QUORUM = "sslQuorum";
-    static final String ZOOKEEPER_PORT_UNIFICATION = "portUnification";
-    static final String ZOOKEEPER_SERVER_CNXN_FACTORY = "serverCnxnFactory";
+    private static final int MIN_PORT = 1024;
+    private static final int MAX_PORT = 65353;
+    private static final String ZOOKEEPER_SSL_QUORUM = "sslQuorum";
+    private static final String ZOOKEEPER_PORT_UNIFICATION = "portUnification";
+    private static final String ZOOKEEPER_SERVER_CNXN_FACTORY = "serverCnxnFactory";
     private final QuorumPeerConfig quorumPeerConfig;
     private volatile boolean started = false;
 
@@ -239,7 +239,7 @@ private static QuorumPeerConfig reconcileProperties(NiFiProperties niFiPropertie
         final boolean zooKeeperConfigIsSecure = isZooKeeperConfigSecure(peerConfig);
 
         if (!zooKeeperConfigIsSecure && !niFiConfigIsSecure) {
-            logger.info("{} property is set to false or is not present, and zookeeper.properties file does not contain secureClientPort property, so embedded ZooKeeper will be started without TLS.",
+            logger.debug("{} property is set to false or is not present, and zookeeper.properties file does not contain secureClientPort property, so embedded ZooKeeper will be started without TLS",
                     NiFiProperties.ZOOKEEPER_CLIENT_SECURE);
             return peerConfig;
         }
@@ -247,8 +247,8 @@ private static QuorumPeerConfig reconcileProperties(NiFiProperties niFiPropertie
         // If secureClientPort is set but no TLS config is set, fail to start.
         if (zooKeeperConfigIsSecure && !niFiConfigIsSecure) {
             throw new ConfigException(
-                    String.format("Zookeeper properties file %s was configured to be secure but there was no valid TLS config present in nifi.properties or " +
-                                  "nifi.zookeeper.client.secure was set to false. Check the administration guide.",
+                    String.format("ZooKeeper properties file %s was configured to be secure but there was no valid TLS config present in nifi.properties or " +
+                                  "nifi.zookeeper.client.secure was set to false. Check the administration guide",
                                    niFiProperties.getProperty(NiFiProperties.STATE_MANAGEMENT_ZOOKEEPER_PROPERTIES)));
         }
 
@@ -297,7 +297,7 @@ private static boolean isNiFiConfigSecureForZooKeeper(NiFiProperties niFiPropert
         final boolean isZooKeeperClientSecure = Boolean.parseBoolean(niFiProperties.getProperty(NiFiProperties.ZOOKEEPER_CLIENT_SECURE));
 
         if(isZooKeeperClientSecure && !istlsConfigPresent) {
-            throw new ConfigException(String.format("%s is true but no TLS configuration is present in nifi.properties.", NiFiProperties.ZOOKEEPER_CLIENT_SECURE));
+            throw new ConfigException(String.format("%s is true but no TLS configuration is present in nifi.properties", NiFiProperties.ZOOKEEPER_CLIENT_SECURE));
         }
 
         if(isZooKeeperClientSecure && istlsConfigPresent) {
@@ -317,7 +317,7 @@ private static void ensureOnlySecurePortsAreEnabled(QuorumPeerConfig config, Pro
             zkProperties.remove("clientPort");
             zkProperties.remove("clientPortAddress");
             logger.warn("Invalid configuration was detected: A secure NiFi with an embedded ZooKeeper was configured for insecure connections. " +
-                    "Insecure ports have been removed from embedded ZooKeeper configuration to deactivate insecure connections.");
+                    "Insecure ports have been removed from embedded ZooKeeper configuration to deactivate insecure connections");
         }
     }
 
@@ -346,7 +346,7 @@ private static String getSecurePort(QuorumPeerConfig peerConfig) throws ConfigEx
             return secureClientPort;
         } else {
             throw new ConfigException(String.format("NiFi was configured to be secure but secureClientPort could not be retrieved from zookeeper.properties file or it was not " +
-                    "in valid port range %d - %d.", MIN_PORT, MAX_PORT));
+                    "in valid port range %d - %d", MIN_PORT, MAX_PORT));
         }
     }
 
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/ITZooKeeperStateServerTLS.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/ITZooKeeperStateServerTLS.java
index ad2f63cc610..cf9b82568d9 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/ITZooKeeperStateServerTLS.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/ITZooKeeperStateServerTLS.java
@@ -22,8 +22,6 @@
 import org.apache.curator.retry.RetryOneTime;
 import org.apache.curator.utils.DefaultZookeeperFactory;
 import org.apache.curator.utils.ZookeeperFactory;
-import org.apache.http.impl.client.CloseableHttpClient;
-import org.apache.http.impl.client.HttpClients;
 import org.apache.nifi.controller.cluster.SecureClientZooKeeperFactory;
 import org.apache.nifi.controller.cluster.ZooKeeperClientConfig;
 import org.apache.nifi.util.NiFiProperties;
@@ -86,6 +84,18 @@ public class ITZooKeeperStateServerTLS {
         put(NiFiProperties.ZOOKEEPER_CLIENT_SECURE, "true");
     }};
 
+    private static final Map<String, String> SECURE_ZOOKEEPER_NIFI_PROPS = new HashMap<String, String>() {{
+        put(NiFiProperties.STATE_MANAGEMENT_ZOOKEEPER_PROPERTIES, SECURE_ZOOKEEPER_PROPS);
+        put(NiFiProperties.WEB_HTTPS_PORT, "8443");
+        put(NiFiProperties.ZOOKEEPER_SECURITY_KEYSTORE, KEY_STORE);
+        put(NiFiProperties.ZOOKEEPER_SECURITY_KEYSTORE_TYPE, STORE_TYPE);
+        put(NiFiProperties.ZOOKEEPER_SECURITY_KEYSTORE_PASSWD, TEST_PASSWORD);
+        put(NiFiProperties.ZOOKEEPER_SECURITY_TRUSTSTORE, TRUST_STORE);
+        put(NiFiProperties.ZOOKEEPER_SECURITY_TRUSTSTORE_TYPE, STORE_TYPE);
+        put(NiFiProperties.ZOOKEEPER_SECURITY_TRUSTSTORE_PASSWD, TEST_PASSWORD);
+        put(NiFiProperties.ZOOKEEPER_CLIENT_SECURE, "true");
+    }};
+
     private NiFiProperties niFiProps;
     private static NiFiProperties clientProperties;
     private QuorumPeerConfig quorumPeerConfig;
@@ -183,14 +193,14 @@ public void testCreateWithSpecifiedSecureClientPort() throws IOException, Quorum
         final QuorumPeerConfig config = server.getQuorumPeerConfig();
         assertEquals(secureZooKeeperProps.getProperty("secureClientPort"), String.valueOf(config.getSecureClientPortAddress().getPort()));
     }
-//
-//    // This shows that a secure NiFi with an insecure ZooKeeper will not have an insecure client address or port:
-//    @Test
-//    public void testCreateRemovesInsecureClientPort() {
-//        assertNotNull(insecureZooKeeperProps.getProperty("clientPort"));
-//        Assert.assertNotEquals(insecureZooKeeperProps.getProperty("clientPort"), "");
-//        Assert.assertNull(quorumPeerConfig.getClientPortAddress());
-//    }
+
+    // This shows that a secure NiFi with an insecure ZooKeeper will not have an insecure client address or port:
+    @Test
+    public void testCreateRemovesInsecureClientPort() {
+        assertNotNull(insecureZooKeeperProps.getProperty("clientPort"));
+        Assert.assertNotEquals(insecureZooKeeperProps.getProperty("clientPort"), "");
+        Assert.assertNull(quorumPeerConfig.getClientPortAddress());
+    }
 
     // This test shows that a connection class is set when none is specified (QuorumPeerConfig::parseProperties sets the System property):
     @Test
@@ -210,13 +220,6 @@ public void testCreateWithSpecifiedConnectionClass() throws IOException, QuorumP
         assertEquals(ZOOKEEPER_CNXN_FACTORY, System.getProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY));
     }
 
-    private CloseableHttpClient httpclient;
-
-    @Before
-    public void setUp() throws Exception {
-        httpclient = HttpClients.createDefault();
-    }
-
     @After
     public void tearDown() throws Exception {
         if(server != null) {
@@ -401,8 +404,8 @@ public void testClientSecureFalseClientPortNoTls() throws Exception {
     @Test
     public void testClientSecureFalseWithClientSecurePortAndNoTls() throws Exception {
         expectedException.expect(QuorumPeerConfig.ConfigException.class);
-        expectedException.expectMessage("Zookeeper properties file src/test/resources/TestZooKeeperStateServerConfigurations/secure.zookeeper.properties was " +
-                "configured to be secure but there was no valid TLS config present in nifi.properties or nifi.zookeeper.client.secure was set to false. Check the administration guide.");
+        expectedException.expectMessage("ZooKeeper properties file src/test/resources/TestZooKeeperStateServerConfigurations/secure.zookeeper.properties was " +
+                "configured to be secure but there was no valid TLS config present in nifi.properties or nifi.zookeeper.client.secure was set to false. Check the administration guide");
 
         final int actualPort = Integer.parseInt(secureZooKeeperProps.getProperty("secureClientPort"));
         final String connect = "localhost:" + actualPort;
@@ -435,7 +438,7 @@ public void testClientSecureTrueWithInsecureZooKeeperAndTlsSet() throws Exceptio
     @Test
     public void testClientSecureTrueWithNoTls() throws Exception {
         expectedException.expect(QuorumPeerConfig.ConfigException.class);
-        expectedException.expectMessage(NiFiProperties.ZOOKEEPER_CLIENT_SECURE + " is true but no TLS configuration is present in nifi.properties.");
+        expectedException.expectMessage(NiFiProperties.ZOOKEEPER_CLIENT_SECURE + " is true but no TLS configuration is present in nifi.properties");
 
         final int actualPort = Integer.parseInt(insecureZooKeeperProps.getProperty("clientPort"));
         final String connect = "localhost:" + actualPort;
@@ -478,6 +481,33 @@ public void testClientSecureFalseAndOnlyZooKeeperClientPortSetWithTlsProperties(
         server = ZooKeeperStateServer.create(validZkClientProps);
     }
 
+    // Connect to a secure ZooKeeperStateServer with ZooKeeper.
+    @Test
+    public void testSecureClientConnectionWithZooKeeperSecurityProperties() throws Exception {
+        final int actualPort = Integer.parseInt(secureZooKeeperProps.getProperty("secureClientPort", "0"));
+        final String connect = "localhost:" + actualPort;
+        final NiFiProperties validZkClientProps = NiFiProperties.createBasicNiFiProperties(null, new HashMap<String, String>() {{
+            putAll(SECURE_ZOOKEEPER_NIFI_PROPS);
+            put(ZOOKEEPER_PROPERTIES_FILE_KEY, SECURE_ZOOKEEPER_PROPS);
+            put(NiFiProperties.ZOOKEEPER_CONNECT_STRING, connect);
+        }});
+
+        server = ZooKeeperStateServer.create(validZkClientProps);
+        assertNotNull(server);
+        final int serverPort = server.getQuorumPeerConfig().getSecureClientPortAddress().getPort();
+        assertEquals(actualPort, serverPort);
+        server.start();
+
+        // Set up a ZK client
+        CuratorFramework client = getSecureZooKeeperClient(serverPort);
+        client.start();
+        final String testPath = "/test";
+        final String createResult = client.create().forPath(testPath, new byte[0]);
+        final Stat checkExistsResult = client.checkExists().forPath(testPath);
+        assertEquals(createResult, testPath);
+        assertNotNull(checkExistsResult);
+    }
+
     private static String getPath(String path) {
         return new File("src/test/resources/TestZooKeeperStateServerConfigurations/" + path).getPath();
     }
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServerConfigurations.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServerConfigurations.java
index c03de718c4d..6ff3f599362 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServerConfigurations.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/server/TestZooKeeperStateServerConfigurations.java
@@ -17,8 +17,6 @@
 package org.apache.nifi.controller.state.server;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.http.impl.client.CloseableHttpClient;
-import org.apache.http.impl.client.HttpClients;
 import org.apache.nifi.util.NiFiProperties;
 import org.apache.zookeeper.server.ServerCnxnFactory;
 import org.apache.zookeeper.server.quorum.QuorumPeerConfig;
@@ -177,16 +175,6 @@ public void testCreateWithSpecifiedConnectionClass() throws IOException, QuorumP
         Assert.assertEquals(ZOOKEEPER_CNXN_FACTORY, System.getProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY));
     }
 
-    // ZooKeeper client and quorum TLS enabled by hand in zookeeper.properties
-
-    private CloseableHttpClient httpclient;
-
-    @Before
-    public void setUp() throws Exception {
-        httpclient = HttpClients.createDefault();
-    }
-
-
     private static String getPath(String path) {
         return new File("src/test/resources/TestZooKeeperStateServerConfigurations/" + path).getAbsolutePath();
     }
