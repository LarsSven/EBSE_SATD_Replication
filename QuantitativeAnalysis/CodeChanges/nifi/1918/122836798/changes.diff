diff --git a/nifi-api/src/main/java/org/apache/nifi/context/PropertyContext.java b/nifi-api/src/main/java/org/apache/nifi/context/PropertyContext.java
index 94e624129ab..2771927b480 100644
--- a/nifi-api/src/main/java/org/apache/nifi/context/PropertyContext.java
+++ b/nifi-api/src/main/java/org/apache/nifi/context/PropertyContext.java
@@ -19,6 +19,8 @@
 import org.apache.nifi.components.PropertyDescriptor;
 import org.apache.nifi.components.PropertyValue;
 
+import java.util.Map;
+
 /**
  * A context for retrieving a PropertyValue from a PropertyDescriptor.
  */
@@ -33,4 +35,7 @@ public interface PropertyContext {
      */
     PropertyValue getProperty(PropertyDescriptor descriptor);
 
+
+    Map<String,String> getAllProperties();
+
 }
diff --git a/nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java b/nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java
index 9762f3e7ff8..95f0583be03 100644
--- a/nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java
+++ b/nifi-api/src/main/java/org/apache/nifi/controller/AbstractControllerService.java
@@ -23,7 +23,6 @@
 import org.apache.nifi.components.PropertyValue;
 import org.apache.nifi.components.state.StateManager;
 import org.apache.nifi.logging.ComponentLog;
-import org.apache.nifi.processor.ProcessorInitializationContext;
 import org.apache.nifi.reporting.InitializationException;
 
 public abstract class AbstractControllerService extends AbstractConfigurableComponent implements ControllerService {
@@ -33,6 +32,7 @@ public abstract class AbstractControllerService extends AbstractConfigurableComp
     private ComponentLog logger;
     private StateManager stateManager;
     private volatile ConfigurationContext configurationContext;
+    private volatile boolean enabled = false;
 
     @Override
     public final void initialize(final ControllerServiceInitializationContext context) throws InitializationException {
@@ -50,7 +50,7 @@ public String getIdentifier() {
 
     /**
      * @return the {@link ControllerServiceLookup} that was passed to the
-     * {@link #init(ProcessorInitializationContext)} method
+     * {@link #init(ControllerServiceInitializationContext)} method
      */
     protected final ControllerServiceLookup getControllerServiceLookup() {
         return serviceLookup;
@@ -66,6 +66,20 @@ protected final ControllerServiceLookup getControllerServiceLookup() {
     protected void init(final ControllerServiceInitializationContext config) throws InitializationException {
     }
 
+    @OnEnabled
+    public final void enabled() {
+        this.enabled = true;
+    }
+
+    @OnDisabled
+    public final void disabled() {
+        this.enabled = false;
+    }
+
+    public boolean isEnabled() {
+        return this.enabled;
+    }
+
     /**
      * @return the logger that has been provided to the component by the
      * framework in its initialize method
diff --git a/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java b/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java
index 6203a06ec6e..6e917512d33 100644
--- a/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java
+++ b/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/NotificationServiceManager.java
@@ -23,6 +23,7 @@
 import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -378,6 +379,11 @@ public PropertyValue getProperty(final PropertyDescriptor descriptor) {
                     return new StandardPropertyValue(value, null, variableRegistry);
                 }
 
+                @Override
+                public Map<String,String> getAllProperties() {
+                    return Collections.unmodifiableMap(propertyValues);
+                }
+
                 @Override
                 public String getIdentifier() {
                     return serviceId;
diff --git a/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java b/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java
index 99d3b2344e6..6d3ef537a68 100644
--- a/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java
+++ b/nifi-bootstrap/src/main/java/org/apache/nifi/bootstrap/notification/NotificationValidationContext.java
@@ -17,6 +17,7 @@
 package org.apache.nifi.bootstrap.notification;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -75,6 +76,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return context.getProperties();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String getAnnotationData() {
         throw new UnsupportedOperationException();
diff --git a/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java b/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java
index 74b84ad330d..91d805e2e88 100644
--- a/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java
+++ b/nifi-mock/src/main/java/org/apache/nifi/util/MockConfigurationContext.java
@@ -17,6 +17,7 @@
 package org.apache.nifi.util;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
@@ -69,6 +70,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return new HashMap<>(this.properties);
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     private PropertyDescriptor getActualDescriptor(final PropertyDescriptor property) {
         if (service == null) {
             return property;
diff --git a/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java b/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
index 8cbe1ac50f7..8651241e0c0 100644
--- a/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
+++ b/nifi-mock/src/main/java/org/apache/nifi/util/MockProcessContext.java
@@ -212,6 +212,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         }
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     /**
      * Validates the current properties, returning ValidationResults for any
      * invalid properties. All processor defined properties will be validated.
diff --git a/nifi-mock/src/main/java/org/apache/nifi/util/MockReportingContext.java b/nifi-mock/src/main/java/org/apache/nifi/util/MockReportingContext.java
index 26ad59010e4..f65bc3e3a07 100644
--- a/nifi-mock/src/main/java/org/apache/nifi/util/MockReportingContext.java
+++ b/nifi-mock/src/main/java/org/apache/nifi/util/MockReportingContext.java
@@ -19,6 +19,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -58,6 +59,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return Collections.unmodifiableMap(properties);
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public PropertyValue getProperty(final PropertyDescriptor property) {
         final String configuredValue = properties.get(property);
diff --git a/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java b/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java
index fbd2a368bcf..564ec54a878 100644
--- a/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java
+++ b/nifi-mock/src/main/java/org/apache/nifi/util/MockValidationContext.java
@@ -17,6 +17,7 @@
 package org.apache.nifi.util;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -88,6 +89,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return context.getProperties();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String getAnnotationData() {
         return context.getAnnotationData();
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/StandardReportingContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/StandardReportingContext.java
index 8f8b2314be9..62183cc25df 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/StandardReportingContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/reporting/StandardReportingContext.java
@@ -40,6 +40,7 @@
 
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Set;
 
@@ -107,6 +108,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return Collections.unmodifiableMap(properties);
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public PropertyValue getProperty(final PropertyDescriptor property) {
         final String configuredValue = properties.get(property);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/ConnectableProcessContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/ConnectableProcessContext.java
index 0d755b0b468..3116401486f 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/ConnectableProcessContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/scheduling/ConnectableProcessContext.java
@@ -194,6 +194,11 @@ public String getAnnotationData() {
         return null;
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        return new HashMap<>();
+    }
+
     @Override
     public Map<PropertyDescriptor, String> getProperties() {
         return new HashMap<>();
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardConfigurationContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardConfigurationContext.java
index 61db8191b57..c188d75adf4 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardConfigurationContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/service/StandardConfigurationContext.java
@@ -17,6 +17,7 @@
 package org.apache.nifi.controller.service;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
@@ -81,6 +82,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return component.getProperties();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String getSchedulingPeriod() {
         return schedulingPeriod;
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/StandardStateProviderInitializationContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/StandardStateProviderInitializationContext.java
index d86a120576b..ace92c77356 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/StandardStateProviderInitializationContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/controller/state/StandardStateProviderInitializationContext.java
@@ -19,6 +19,7 @@
 
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import javax.net.ssl.SSLContext;
@@ -46,6 +47,15 @@ public Map<PropertyDescriptor, PropertyValue> getProperties() {
         return Collections.unmodifiableMap(properties);
     }
 
+    @Override
+    public Map<String,String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, PropertyValue> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue().getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public PropertyValue getProperty(final PropertyDescriptor property) {
         return properties.get(property);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
index 83906e28514..27143926919 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardProcessContext.java
@@ -19,6 +19,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -125,6 +126,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return procNode.getProperties();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String encrypt(final String unencrypted) {
         return encryptor.encrypt(unencrypted);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java
index 86518b8036e..1f5cfeed771 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardSchedulingContext.java
@@ -16,6 +16,7 @@
  */
 package org.apache.nifi.processor;
 
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -98,6 +99,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return processContext.getProperties();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String encrypt(final String unencrypted) {
         return processContext.encrypt(unencrypted);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
index dfc7965aad3..662169c5709 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/main/java/org/apache/nifi/processor/StandardValidationContext.java
@@ -19,6 +19,7 @@
 
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -118,6 +119,15 @@ public Map<PropertyDescriptor, String> getProperties() {
         return Collections.unmodifiableMap(properties);
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        final Map<String,String> propValueMap = new LinkedHashMap<>();
+        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+            propValueMap.put(entry.getKey().getName(), entry.getValue());
+        }
+        return propValueMap;
+    }
+
     @Override
     public String getAnnotationData() {
         return annotationData;
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardProcessorNode.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardProcessorNode.java
index c248d257880..32b6f539cff 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardProcessorNode.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/TestStandardProcessorNode.java
@@ -62,6 +62,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
@@ -512,6 +513,15 @@ public Map<PropertyDescriptor, String> getProperties() {
                         return Collections.unmodifiableMap(properties);
                     }
 
+                    @Override
+                    public Map<String, String> getAllProperties() {
+                        final Map<String,String> propValueMap = new LinkedHashMap<>();
+                        for (final Map.Entry<PropertyDescriptor, String> entry : getProperties().entrySet()) {
+                            propValueMap.put(entry.getKey().getName(), entry.getValue());
+                        }
+                        return propValueMap;
+                    }
+
                     @Override
                     public String getAnnotationData() {
                         return null;
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/local/TestWriteAheadLocalStateProvider.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/local/TestWriteAheadLocalStateProvider.java
index d2e4a0519f3..41b7d9d69de 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/local/TestWriteAheadLocalStateProvider.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/local/TestWriteAheadLocalStateProvider.java
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.UUID;
 
@@ -61,6 +62,15 @@ public Map<PropertyDescriptor, PropertyValue> getProperties() {
                 return Collections.unmodifiableMap(properties);
             }
 
+            @Override
+            public Map<String,String> getAllProperties() {
+                final Map<String,String> propValueMap = new LinkedHashMap<>();
+                for (final Map.Entry<PropertyDescriptor, PropertyValue> entry : getProperties().entrySet()) {
+                    propValueMap.put(entry.getKey().getName(), entry.getValue().getValue());
+                }
+                return propValueMap;
+            }
+
             @Override
             public PropertyValue getProperty(final PropertyDescriptor property) {
                 final PropertyValue prop = properties.get(property);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/zookeeper/TestZooKeeperStateProvider.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/zookeeper/TestZooKeeperStateProvider.java
index d09ee1f4e7e..037b35026da 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/zookeeper/TestZooKeeperStateProvider.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-core/src/test/java/org/apache/nifi/controller/state/providers/zookeeper/TestZooKeeperStateProvider.java
@@ -18,6 +18,7 @@
 
 import java.io.IOException;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import javax.net.ssl.SSLContext;
@@ -75,6 +76,15 @@ public Map<PropertyDescriptor, PropertyValue> getProperties() {
                 return propValueMap;
             }
 
+            @Override
+            public Map<String,String> getAllProperties() {
+                final Map<String,String> propValueMap = new LinkedHashMap<>();
+                for (final Map.Entry<PropertyDescriptor, PropertyValue> entry : getProperties().entrySet()) {
+                    propValueMap.put(entry.getKey().getName(), entry.getValue().getValue());
+                }
+                return propValueMap;
+            }
+
             @Override
             public PropertyValue getProperty(final PropertyDescriptor property) {
                 final String prop = properties.get(property);
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockConfigurationContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockConfigurationContext.java
index d1e73fb7e2e..d9a1b378888 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockConfigurationContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockConfigurationContext.java
@@ -31,6 +31,11 @@ public PropertyValue getProperty(PropertyDescriptor property) {
         return null;
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        return Collections.emptyMap();
+    }
+
     @Override
     public Map<PropertyDescriptor, String> getProperties() {
         return Collections.emptyMap();
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockProcessContext.java b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockProcessContext.java
index cf2e2cf43c2..cb173247fea 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockProcessContext.java
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-framework-nar-utils/src/main/java/org/apache/nifi/mock/MockProcessContext.java
@@ -64,6 +64,11 @@ public Map<PropertyDescriptor, String> getProperties() {
         return Collections.emptyMap();
     }
 
+    @Override
+    public Map<String, String> getAllProperties() {
+        return Collections.emptyMap();
+    }
+
     @Override
     public String encrypt(String unencrypted) {
         return unencrypted;
diff --git a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/state-management.xml b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/state-management.xml
index 4ed2141a518..dcd7ee6c810 100644
--- a/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/state-management.xml
+++ b/nifi-nar-bundles/nifi-framework-bundle/nifi-framework/nifi-resources/src/main/resources/conf/state-management.xml
@@ -72,6 +72,7 @@
             Redis Mode - The type of Redis instance:
                             - Standalone
                             - Sentinel
+                            - Cluster (currently not supported for state-management due to use of WATCH command which Redis does not support in clustered mode)
 
             Connection String - The connection string for Redis.
                         - In a standalone instance this value will be of the form hostname:port.
@@ -80,6 +81,9 @@
 
         This provider has the following optional properties:
 
+            Key Prefix - The prefix for each key stored by this state provider. When sharing a single Redis across multiple NiFi instances, setting a unique
+                        value for the Key Prefix will make it easier to identify which instances the keys came from (default nifi/components/).
+
             Database Index - The database index to be used by connections created from this connection pool.
                         See the databases property in redis.conf, by default databases 0-15 will be available.
 
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisConnectionPoolService.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisConnectionPoolService.java
index af4f920ee0d..68169f9c394 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisConnectionPoolService.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisConnectionPoolService.java
@@ -32,7 +32,6 @@
 import org.springframework.data.redis.connection.RedisConnection;
 import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
 
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
 
@@ -51,8 +50,7 @@ protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
 
     @Override
     protected Collection<ValidationResult> customValidate(ValidationContext validationContext) {
-        final List<ValidationResult> results = new ArrayList<>(RedisUtils.validate(validationContext));
-        return results;
+        return RedisUtils.validate(validationContext);
     }
 
     @OnEnabled
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisDistributedMapCacheClientService.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisDistributedMapCacheClientService.java
index 1c4f3f6d59e..94b195c2133 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisDistributedMapCacheClientService.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/service/RedisDistributedMapCacheClientService.java
@@ -140,10 +140,13 @@ public <K, V> V getAndPutIfAbsent(final K key, final V value, final Serializer<K
                                 + firstResult.getClass().getName() + " with value " + firstResult.toString());
                     }
                 }
-            } while (true);
+            } while (isEnabled());
+
+            return null;
         });
     }
 
+
     @Override
     public <K> boolean containsKey(final K key, final Serializer<K> keySerializer) throws IOException {
         return withConnection(redisConnection -> {
@@ -187,30 +190,41 @@ public <K> boolean remove(final K key, final Serializer<K> keySerializer) throws
     @Override
     public long removeByPattern(final String regex) throws IOException {
         return withConnection(redisConnection -> {
-            final List<byte[]> allKeys = new ArrayList<>();
+            long deletedCount = 0;
+            final List<byte[]> batchKeys = new ArrayList<>();
 
-            // perform a scan to get all the keys
-            long cursorId = 0;
-            do {
-                final Cursor<byte[]> cursor = redisConnection.scan(ScanOptions.scanOptions().match(regex).build());
-                while (cursor.hasNext()) {
-                    allKeys.add(cursor.next());
-                }
+            // delete keys in batches of 1000 using the cursor
+            final Cursor<byte[]> cursor = redisConnection.scan(ScanOptions.scanOptions().count(100).match(regex).build());
+            while (cursor.hasNext()) {
+                batchKeys.add(cursor.next());
 
-                cursorId = cursor.getCursorId();
-            } while (cursorId > 0);
+                if (batchKeys.size() == 1000) {
+                    deletedCount += redisConnection.del(getKeys(batchKeys));
+                    batchKeys.clear();
+                }
+            }
 
-            // convert the list of all keys to an array
-            final byte[][] allKeysArray = new byte[allKeys.size()][];
-            for (int i=0; i < allKeys.size(); i++) {
-                allKeysArray[i] = allKeys.get(i);
+            // delete any left-over keys if some were added to the batch but never reached 1000
+            if (batchKeys.size() > 0) {
+                deletedCount += redisConnection.del(getKeys(batchKeys));
+                batchKeys.clear();
             }
 
-            // delete all the keys
-            return redisConnection.del(allKeysArray);
+            return deletedCount;
         });
     }
 
+    /**
+     *  Convert the list of all keys to an array.
+     */
+    private byte[][] getKeys(final List<byte[]> keys) {
+        final byte[][] allKeysArray = new byte[keys.size()][];
+        for (int i=0; i < keys.size(); i++) {
+            allKeysArray[i] = keys.get(i);
+        }
+        return  allKeysArray;
+    }
+
     // ----------------- Methods from AtomicDistributedMapCacheClient ------------------------
 
     @Override
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateMapJsonSerDe.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateMapJsonSerDe.java
index 9ea0a84a942..170e7ac0a42 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateMapJsonSerDe.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateMapJsonSerDe.java
@@ -19,7 +19,8 @@
 import com.fasterxml.jackson.core.JsonFactory;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonToken;
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -34,7 +35,7 @@ public class RedisStateMapJsonSerDe implements RedisStateMapSerDe {
     public static final String FIELD_ENCODING = "encodingVersion";
     public static final String FIELD_STATE_VALUES = "stateValues";
 
-    private final JsonFactory jsonFactory = new JsonFactory();
+    private final JsonFactory jsonFactory = new JsonFactory(new ObjectMapper());
 
     @Override
     public byte[] serialize(final RedisStateMap stateMap) throws IOException {
@@ -70,31 +71,12 @@ public RedisStateMap deserialize(final byte[] data) throws IOException {
         final RedisStateMap.Builder builder = new RedisStateMap.Builder();
 
         try (final JsonParser jsonParser = jsonFactory.createParser(data)) {
-            while (jsonParser.nextToken() != JsonToken.END_OBJECT) {
-                if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
-                    final String fieldName = jsonParser.getCurrentName();
-
-                    switch (fieldName) {
-                        case FIELD_VERSION:
-                            jsonParser.nextToken();
-                            builder.version(jsonParser.getLongValue());
-                            break;
-                        case FIELD_ENCODING:
-                            jsonParser.nextToken();
-                            builder.encodingVersion(jsonParser.getIntValue());
-                            break;
-                        case FIELD_STATE_VALUES:
-                            while (jsonParser.nextToken() != JsonToken.END_OBJECT) {
-                                if (jsonParser.getCurrentToken() == JsonToken.FIELD_NAME) {
-                                    final String stateValueField = jsonParser.getCurrentName();
-                                    jsonParser.nextToken();
-                                    builder.stateValue(stateValueField, jsonParser.getValueAsString());
-                                }
-                            }
-                            break;
-                    }
-                }
-            }
+            final JsonNode rootNode = jsonParser.readValueAsTree();
+            builder.version(rootNode.get(FIELD_VERSION).asLong());
+            builder.encodingVersion(rootNode.get(FIELD_ENCODING).asInt());
+
+            final JsonNode stateValuesNode = rootNode.get(FIELD_STATE_VALUES);
+            stateValuesNode.fields().forEachRemaining(e -> builder.stateValue(e.getKey(), e.getValue().asText()));
         }
 
         return builder.build();
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateProvider.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateProvider.java
index 25b6d7cd3a2..6a49fb08178 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateProvider.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/state/RedisStateProvider.java
@@ -26,6 +26,7 @@
 import org.apache.nifi.components.state.StateProviderInitializationContext;
 import org.apache.nifi.context.PropertyContext;
 import org.apache.nifi.logging.ComponentLog;
+import org.apache.nifi.processor.util.StandardValidators;
 import org.apache.nifi.redis.RedisType;
 import org.apache.nifi.redis.util.RedisAction;
 import org.apache.nifi.redis.util.RedisUtils;
@@ -47,9 +48,27 @@ public class RedisStateProvider extends AbstractConfigurableComponent implements
 
     static final int ENCODING_VERSION = 1;
 
+    public static final PropertyDescriptor KEY_PREFIX = new PropertyDescriptor.Builder()
+            .name("Key Prefix")
+            .displayName("Key Prefix")
+            .description("The prefix for each key stored by this state provider. When sharing a single Redis across multiple NiFi instances, " +
+                    "setting a unique value for the Key Prefix will make it easier to identify which instances the keys came from.")
+            .required(true)
+            .defaultValue("nifi/components/")
+            .addValidator(StandardValidators.NON_BLANK_VALIDATOR)
+            .build();
+
+    static final List<PropertyDescriptor> STATE_PROVIDER_PROPERTIES;
+    static {
+        final List<PropertyDescriptor> props = new ArrayList<>(RedisUtils.REDIS_CONNECTION_PROPERTY_DESCRIPTORS);
+        props.add(KEY_PREFIX);
+        STATE_PROVIDER_PROPERTIES = Collections.unmodifiableList(props);
+    }
+
     private String identifier;
-    private PropertyContext context;
+    private String keyPrefix;
     private ComponentLog logger;
+    private PropertyContext context;
 
     private volatile boolean enabled;
     private volatile JedisConnectionFactory connectionFactory;
@@ -61,11 +80,17 @@ public final void initialize(final StateProviderInitializationContext context) t
         this.context = context;
         this.identifier = context.getIdentifier();
         this.logger = context.getLogger();
+
+        String keyPrefix = context.getProperty(KEY_PREFIX).getValue();
+        if (!keyPrefix.endsWith("/")) {
+            keyPrefix = keyPrefix + "/";
+        }
+        this.keyPrefix = keyPrefix;
     }
 
     @Override
     protected List<PropertyDescriptor> getSupportedPropertyDescriptors() {
-        return RedisUtils.REDIS_CONNECTION_PROPERTY_DESCRIPTORS;
+        return STATE_PROVIDER_PROPERTIES;
     }
 
     @Override
@@ -135,7 +160,7 @@ public void setState(final Map<String, String> state, final String componentId)
     @Override
     public StateMap getState(final String componentId) throws IOException {
         return withConnection(redisConnection -> {
-            final byte[] key = getComponentPath(componentId).getBytes(StandardCharsets.UTF_8);
+            final byte[] key = getComponentKey(componentId).getBytes(StandardCharsets.UTF_8);
             final byte[] value = redisConnection.get(key);
 
             final RedisStateMap stateMap = serDe.deserialize(value);
@@ -158,7 +183,7 @@ private boolean replace(final StateMap oldValue, final Map<String, String> newVa
             boolean replaced = false;
 
             // start a watch on the key and retrieve the current value
-            final byte[] key = getComponentPath(componentId).getBytes(StandardCharsets.UTF_8);
+            final byte[] key = getComponentKey(componentId).getBytes(StandardCharsets.UTF_8);
             redisConnection.watch(key);
 
             final long prevVersion = oldValue == null ? -1L : oldValue.getVersion();
@@ -222,7 +247,7 @@ public void clear(final String componentId) throws IOException {
     @Override
     public void onComponentRemoved(final String componentId) throws IOException {
         withConnection(redisConnection -> {
-            final byte[] key = getComponentPath(componentId).getBytes(StandardCharsets.UTF_8);
+            final byte[] key = getComponentKey(componentId).getBytes(StandardCharsets.UTF_8);
             redisConnection.del(key);
             return true;
         });
@@ -233,8 +258,8 @@ public Scope[] getSupportedScopes() {
         return new Scope[] {Scope.CLUSTER};
     }
 
-    private String getComponentPath(final String componentId) {
-        return "nifi/components/" + componentId;
+    private String getComponentKey(final String componentId) {
+        return keyPrefix + componentId;
     }
 
     private void verifyEnabled() throws IOException {
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/util/RedisUtils.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/util/RedisUtils.java
index d3a43ea3f5e..229c4385951 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/util/RedisUtils.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/main/java/org/apache/nifi/redis/util/RedisUtils.java
@@ -32,8 +32,6 @@
 import redis.clients.jedis.JedisShardInfo;
 
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
@@ -276,7 +274,7 @@ public static JedisConnectionFactory createConnectionFactory(final PropertyConte
         } else if (RedisUtils.REDIS_MODE_SENTINEL.getValue().equals(redisMode)) {
             final String[] sentinels = connectionString.split("[,]");
             final String sentinelMaster = context.getProperty(RedisUtils.SENTINEL_MASTER).evaluateAttributeExpressions().getValue();
-            final RedisSentinelConfiguration sentinelConfiguration = new RedisSentinelConfiguration(sentinelMaster, new HashSet<>(Arrays.asList(sentinels)));
+            final RedisSentinelConfiguration sentinelConfiguration = new RedisSentinelConfiguration(sentinelMaster, new HashSet<>(getTrimmedValues(sentinels)));
             final JedisShardInfo jedisShardInfo = createJedisShardInfo(sentinels[0], timeout, password);
 
             logger.info("Connecting to Redis in sentinel mode...");
@@ -293,7 +291,7 @@ public static JedisConnectionFactory createConnectionFactory(final PropertyConte
             final String[] clusterNodes = connectionString.split("[,]");
             final Integer maxRedirects = context.getProperty(RedisUtils.CLUSTER_MAX_REDIRECTS).asInteger();
 
-            final RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration(Arrays.asList(clusterNodes));
+            final RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration(getTrimmedValues(clusterNodes));
             clusterConfiguration.setMaxRedirects(maxRedirects);
 
             logger.info("Connecting to Redis in clustered mode...");
@@ -318,6 +316,14 @@ public static JedisConnectionFactory createConnectionFactory(final PropertyConte
         return connectionFactory;
     }
 
+    private static List<String> getTrimmedValues(final String[] values) {
+        final List<String> trimmedValues = new ArrayList<>();
+        for (final String value : values) {
+            trimmedValues.add(value.trim());
+        }
+        return trimmedValues;
+    }
+
     private static JedisShardInfo createJedisShardInfo(final String hostAndPort, final Integer timeout, final String password) {
         final String[] hostAndPortSplit = hostAndPort.split("[:]");
         final String host = hostAndPortSplit[0].trim();
@@ -351,7 +357,7 @@ private static JedisPoolConfig createJedisPoolConfig(final PropertyContext conte
         return poolConfig;
     }
 
-    public static Collection<ValidationResult> validate(ValidationContext validationContext) {
+    public static List<ValidationResult> validate(ValidationContext validationContext) {
         final List<ValidationResult> results = new ArrayList<>();
 
         final String redisMode = validationContext.getProperty(RedisUtils.REDIS_MODE).getValue();
@@ -366,7 +372,7 @@ public static Collection<ValidationResult> validate(ValidationContext validation
                     .build());
         } else if (RedisUtils.REDIS_MODE_STANDALONE.getValue().equals(redisMode)) {
             final String[] hostAndPort = connectionString.split("[:]");
-            if (hostAndPort == null || hostAndPort.length != 2 || !isInteger(hostAndPort[1])) {
+            if (hostAndPort == null || hostAndPort.length != 2 || StringUtils.isBlank(hostAndPort[0]) || StringUtils.isBlank(hostAndPort[1]) || !isInteger(hostAndPort[1])) {
                 results.add(new ValidationResult.Builder()
                         .subject(RedisUtils.CONNECTION_STRING.getDisplayName())
                         .input(connectionString)
@@ -377,12 +383,12 @@ public static Collection<ValidationResult> validate(ValidationContext validation
         } else {
             for (final String connection : connectionString.split("[,]")) {
                 final String[] hostAndPort = connection.split("[:]");
-                if (hostAndPort == null || hostAndPort.length != 2 || !isInteger(hostAndPort[1])) {
+                if (hostAndPort == null || hostAndPort.length != 2 || StringUtils.isBlank(hostAndPort[0]) || StringUtils.isBlank(hostAndPort[1]) || !isInteger(hostAndPort[1])) {
                     results.add(new ValidationResult.Builder()
                             .subject(RedisUtils.CONNECTION_STRING.getDisplayName())
                             .input(connection)
                             .valid(false)
-                            .explanation("Connection String must be in the form host:port")
+                            .explanation("Connection String must be in the form host:port,host:port,host:port,etc.")
                             .build());
                 }
             }
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/service/ITRedisDistributedMapCacheClientService.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/service/ITRedisDistributedMapCacheClientService.java
index ec3588225a5..9d43e671774 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/service/ITRedisDistributedMapCacheClientService.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/service/ITRedisDistributedMapCacheClientService.java
@@ -63,10 +63,11 @@ public class ITRedisDistributedMapCacheClientService {
     private RedisServer redisServer;
     private RedisConnectionPoolService redisConnectionPool;
     private RedisDistributedMapCacheClientService redisMapCacheClientService;
+    private int redisPort;
 
     @Before
     public void setup() throws IOException {
-        final int redisPort = getAvailablePort();
+        this.redisPort = getAvailablePort();
 
         this.redisServer = new RedisServer(redisPort);
         redisServer.start();
@@ -96,7 +97,7 @@ public void testStandaloneRedis() throws InitializationException {
             // create, configure, and enable the RedisConnectionPool service
             redisConnectionPool = new RedisConnectionPoolService();
             testRunner.addControllerService("redis-connection-pool", redisConnectionPool);
-            testRunner.setProperty(redisConnectionPool, RedisUtils.CONNECTION_STRING, "localhost:6379");
+            testRunner.setProperty(redisConnectionPool, RedisUtils.CONNECTION_STRING, "localhost:" + redisPort);
 
             // uncomment this to test using a different database index than the default 0
             //testRunner.setProperty(redisConnectionPool, RedisUtils.DATABASE, "1");
@@ -229,12 +230,12 @@ public void onTrigger(final ProcessContext context, final ProcessSession session
                 Assert.assertTrue(cacheClient.replace(entryDoesNotExist, stringSerializer, stringSerializer));
                 Assert.assertEquals(replacementValue, cacheClient.get(replaceKeyDoesntExist, stringSerializer, stringDeserializer));
 
-
-                for (int i=0; i < 50; i++) {
+                final int numToDelete = 2000;
+                for (int i=0; i < numToDelete; i++) {
                     cacheClient.put(key + "-" + i, value, stringSerializer, stringSerializer);
                 }
 
-                Assert.assertTrue(cacheClient.removeByPattern("test-redis-processor-*") > 50);
+                Assert.assertTrue(cacheClient.removeByPattern("test-redis-processor-*") >= numToDelete);
                 Assert.assertFalse(cacheClient.containsKey(key, stringSerializer));
 
                 session.transfer(flowFile, REL_SUCCESS);
diff --git a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/ITRedisStateProvider.java b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/ITRedisStateProvider.java
index da8a69b25bc..6a5fb825b7f 100644
--- a/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/ITRedisStateProvider.java
+++ b/nifi-nar-bundles/nifi-redis-bundle/nifi-redis-extensions/src/test/java/org/apache/nifi/redis/state/ITRedisStateProvider.java
@@ -37,6 +37,7 @@
 import java.nio.channels.SocketChannel;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
@@ -267,6 +268,15 @@ public Map<PropertyDescriptor, PropertyValue> getProperties() {
                 return propValueMap;
             }
 
+            @Override
+            public Map<String,String> getAllProperties() {
+                final Map<String,String> propValueMap = new LinkedHashMap<>();
+                for (final Map.Entry<PropertyDescriptor, String> entry : properties.entrySet()) {
+                    propValueMap.put(entry.getKey().getName(), entry.getValue());
+                }
+                return propValueMap;
+            }
+
             @Override
             public PropertyValue getProperty(final PropertyDescriptor property) {
                 String prop = properties.get(property);
