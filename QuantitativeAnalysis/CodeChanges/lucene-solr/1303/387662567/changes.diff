diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
index f13dfda0e54a..f81d80660fce 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/FunctionValues.java
@@ -41,9 +41,6 @@
 //   want the Query carrying around big objects
 public abstract class FunctionValues {
 
-  // Default cost for FunctionValues -- ideally should be overriden by concrete implementations
-  public static final int DEFAULT_COST = 100;
-
   public byte byteVal(int doc) throws IOException { throw new UnsupportedOperationException(); }
   public short shortVal(int doc) throws IOException { throw new UnsupportedOperationException(); }
 
@@ -101,7 +98,7 @@ public int ordVal(int doc) throws IOException {
    * comparing two numbers and indexing an array.
    * The returned value must be positive.
    */
-  public float cost() { return DEFAULT_COST; }
+  public float cost() { return 100; }
 
   public abstract String toString(int doc) throws IOException;
 
@@ -165,8 +162,7 @@ public boolean matches(int doc) {
         return true;
       }
       @Override
-      public float costEvaluationFunction() {
-        // Match everything
+      public float matchCost() {
         return 0f;
       }
     };
diff --git a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
index 3576a7bee77a..d8278afe1918 100644
--- a/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
+++ b/lucene/queries/src/java/org/apache/lucene/queries/function/ValueSourceScorer.java
@@ -58,7 +58,7 @@ public boolean matches() throws IOException {
 
       @Override
       public float matchCost() {
-        return costEvaluationFunction();
+        return ValueSourceScorer.this.matchCost();
       }
     };
     this.disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);
@@ -106,7 +106,7 @@ public float getMaxScore(int upTo) throws IOException {
    *
    * @lucene.experimental
    */
-  protected float costEvaluationFunction() {
+  protected float matchCost() {
     // Cost of iteration is fixed cost + cost exposed by delegated FunctionValues instance
     return DEF_COST + values.cost();
   }
